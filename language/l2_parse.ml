(* generated by Ott 0.25 from: l2_parse.ott *)


type text = string

type l =
  | Unknown
  | Int of string * l option
  | Range of Lexing.position * Lexing.position

type 'a annot = l * 'a

exception Parse_error_locn of l * string


type x = text (* identifier *)
type ix = text (* infix identifier *)

type 
base_kind_aux =  (* base kind *)
   BK_type (* kind of types *)
 | BK_nat (* kind of natural number size expressions *)
 | BK_order (* kind of vector order specifications *)
 | BK_effect (* kind of effect sets *)


type 
base_kind = 
   BK_aux of base_kind_aux * l


type 
id_aux =  (* Identifier *)
   Id of x
 | DeIid of x (* remove infix status *)


type 
kid_aux =  (* identifiers with kind, ticked to differntiate from program variables *)
   Var of x


type 
base_effect_aux =  (* effect *)
   BE_rreg (* read register *)
 | BE_wreg (* write register *)
 | BE_rmem (* read memory *)
 | BE_wmem (* write memory *)
 | BE_barr (* memory barrier *)
 | BE_undef (* undefined-instruction exception *)
 | BE_unspec (* unspecified values *)
 | BE_nondet (* nondeterminism from intra-instruction parallelism *)


type 
kind_aux =  (* kinds *)
   K_kind of (base_kind) list


type 
id = 
   Id_aux of id_aux * l


type 
kid = 
   Kid_aux of kid_aux * l


type 
base_effect = 
   BE_aux of base_effect_aux * l


type 
kind = 
   K_aux of kind_aux * l


type 
atyp_aux =  (* expressions of all kinds, to be translated to types, nats, orders, and effects after parsing *)
   ATyp_id of id (* identifier *)
 | ATyp_var of kid (* ticked variable *)
 | ATyp_constant of int (* constant *)
 | ATyp_times of atyp * atyp (* product *)
 | ATyp_sum of atyp * atyp (* sum *)
 | ATyp_minus of atyp * atyp (* subtraction *)
 | ATyp_exp of atyp (* exponential *)
 | ATyp_neg of atyp (* Internal (but not M as I want a datatype constructor) negative nexp *)
 | ATyp_inc (* increasing (little-endian) *)
 | ATyp_dec (* decreasing (big-endian) *)
 | ATyp_default_ord (* default order for increasing or decreasing signficant bits *)
 | ATyp_set of (base_effect) list (* effect set *)
 | ATyp_fn of atyp * atyp * atyp (* Function type (first-order only in user code), last atyp is an effect *)
 | ATyp_tup of (atyp) list (* Tuple type *)
 | ATyp_app of id * (atyp) list (* type constructor application *)

and atyp = 
   ATyp_aux of atyp_aux * l


type 
kinded_id_aux =  (* optionally kind-annotated identifier *)
   KOpt_none of kid (* identifier *)
 | KOpt_kind of kind * kid (* kind-annotated variable *)


type 
n_constraint_aux =  (* constraint over kind $_$ *)
   NC_fixed of atyp * atyp
 | NC_bounded_ge of atyp * atyp
 | NC_bounded_le of atyp * atyp
 | NC_nat_set_bounded of kid * (int) list


type 
kinded_id = 
   KOpt_aux of kinded_id_aux * l


type 
n_constraint = 
   NC_aux of n_constraint_aux * l


type 
quant_item_aux =  (* Either a kinded identifier or a nexp constraint for a typquant *)
   QI_id of kinded_id (* An optionally kinded identifier *)
 | QI_const of n_constraint (* A constraint for this type *)


type 
quant_item = 
   QI_aux of quant_item_aux * l


type 
typquant_aux =  (* type quantifiers and constraints *)
   TypQ_tq of (quant_item) list
 | TypQ_no_forall (* sugar, omitting quantifier and constraints *)


type 
lit_aux =  (* Literal constant *)
   L_unit (* $() : _$ *)
 | L_zero (* $_ : _$ *)
 | L_one (* $_ : _$ *)
 | L_true (* $_ : _$ *)
 | L_false (* $_ : _$ *)
 | L_num of int (* natural number constant *)
 | L_hex of string (* bit vector constant, C-style *)
 | L_bin of string (* bit vector constant, C-style *)
 | L_undef (* undefined value *)
 | L_string of string (* string constant *)


type 
typquant = 
   TypQ_aux of typquant_aux * l


type 
lit = 
   L_aux of lit_aux * l


type 
typschm_aux =  (* type scheme *)
   TypSchm_ts of typquant * atyp


type 
pat_aux =  (* Pattern *)
   P_lit of lit (* literal constant pattern *)
 | P_wild (* wildcard *)
 | P_as of pat * id (* named pattern *)
 | P_typ of atyp * pat (* typed pattern *)
 | P_id of id (* identifier *)
 | P_app of id * (pat) list (* union constructor pattern *)
 | P_record of (fpat) list * bool (* struct pattern *)
 | P_vector of (pat) list (* vector pattern *)
 | P_vector_indexed of ((int * pat)) list (* vector pattern (with explicit indices) *)
 | P_vector_concat of (pat) list (* concatenated vector pattern *)
 | P_tup of (pat) list (* tuple pattern *)
 | P_list of (pat) list (* list pattern *)

and pat = 
   P_aux of pat_aux * l

and fpat_aux =  (* Field pattern *)
   FP_Fpat of id * pat

and fpat = 
   FP_aux of fpat_aux * l


type 
typschm = 
   TypSchm_aux of typschm_aux * l


type 
exp_aux =  (* Expression *)
   E_block of (exp) list (* block (parsing conflict with structs?) *)
 | E_nondet of (exp) list (* block that can evaluate the contained expressions in any ordering *)
 | E_id of id (* identifier *)
 | E_lit of lit (* literal constant *)
 | E_cast of atyp * exp (* cast *)
 | E_app of id * (exp) list (* function application *)
 | E_app_infix of exp * id * exp (* infix function application *)
 | E_tuple of (exp) list (* tuple *)
 | E_if of exp * exp * exp (* conditional *)
 | E_for of id * exp * exp * exp * atyp * exp (* loop *)
 | E_vector of (exp) list (* vector (indexed from 0) *)
 | E_vector_indexed of (exp) list * opt_default (* vector (indexed consecutively) *)
 | E_vector_access of exp * exp (* vector access *)
 | E_vector_subrange of exp * exp * exp (* subvector extraction *)
 | E_vector_update of exp * exp * exp (* vector functional update *)
 | E_vector_update_subrange of exp * exp * exp * exp (* vector subrange update (with vector) *)
 | E_vector_append of exp * exp (* vector concatenation *)
 | E_list of (exp) list (* list *)
 | E_cons of exp * exp (* cons *)
 | E_record of fexps (* struct *)
 | E_record_update of exp * (exp) list (* functional update of struct *)
 | E_field of exp * id (* field projection from struct *)
 | E_case of exp * (pexp) list (* pattern matching *)
 | E_let of letbind * exp (* let expression *)
 | E_assign of exp * exp (* imperative assignment *)
 | E_exit of exp

and exp = 
   E_aux of exp_aux * l

and fexp_aux =  (* Field-expression *)
   FE_Fexp of id * exp

and fexp = 
   FE_aux of fexp_aux * l

and fexps_aux =  (* Field-expression list *)
   FES_Fexps of (fexp) list * bool

and fexps = 
   FES_aux of fexps_aux * l

and opt_default_aux =  (* Optional default value for indexed vectors, to define a defualt value for any unspecified positions in a sparse map *)
   Def_val_empty
 | Def_val_dec of exp

and opt_default = 
   Def_val_aux of opt_default_aux * l

and pexp_aux =  (* Pattern match *)
   Pat_exp of pat * exp

and pexp = 
   Pat_aux of pexp_aux * l

and letbind_aux =  (* Let binding *)
   LB_val_explicit of typschm * pat * exp (* value binding, explicit type (pat must be total) *)
 | LB_val_implicit of pat * exp (* value binding, implicit type (pat must be total) *)

and letbind = 
   LB_aux of letbind_aux * l


type 
name_scm_opt_aux =  (* Optional variable-naming-scheme specification for variables of defined type *)
   Name_sect_none
 | Name_sect_some of string


type 
type_union_aux =  (* Type union constructors *)
   Tu_id of id
 | Tu_ty_id of atyp * id


type 
rec_opt_aux =  (* Optional recursive annotation for functions *)
   Rec_nonrec (* non-recursive *)
 | Rec_rec (* recursive *)


type 
funcl_aux =  (* Function clause *)
   FCL_Funcl of id * pat * exp


type 
tannot_opt_aux =  (* Optional type annotation for functions *)
   Typ_annot_opt_none
 | Typ_annot_opt_some of typquant * atyp


type 
effect_opt_aux =  (* Optional effect annotation for functions *)
   Effect_opt_pure (* sugar for empty effect set *)
 | Effect_opt_effect of atyp


type 
name_scm_opt = 
   Name_sect_aux of name_scm_opt_aux * l


type 
index_range_aux =  (* index specification, for bitfields in register types *)
   BF_single of int (* single index *)
 | BF_range of int * int (* index range *)
 | BF_concat of index_range * index_range (* concatenation of index ranges *)

and index_range = 
   BF_aux of index_range_aux * l


type 
type_union = 
   Tu_aux of type_union_aux * l


type 
rec_opt = 
   Rec_aux of rec_opt_aux * l


type 
funcl = 
   FCL_aux of funcl_aux * l


type 
tannot_opt = 
   Typ_annot_opt_aux of tannot_opt_aux * l


type 
effect_opt = 
   Effect_opt_aux of effect_opt_aux * l


type 
type_def_aux =  (* Type definition body *)
   TD_abbrev of id * name_scm_opt * typschm (* type abbreviation *)
 | TD_record of id * name_scm_opt * typquant * ((atyp * id)) list * bool (* struct type definition *)
 | TD_variant of id * name_scm_opt * typquant * (type_union) list * bool (* union type definition *)
 | TD_enum of id * name_scm_opt * (id) list * bool (* enumeration type definition *)
 | TD_register of id * atyp * atyp * ((index_range * id)) list (* register mutable bitfield type definition *)


type 
fundef_aux =  (* Function definition *)
   FD_function of rec_opt * tannot_opt * effect_opt * (funcl) list


type 
dec_spec_aux =  (* Register declarations *)
   DEC_reg of atyp * id
 | DEC_alias of id * exp
 | DEC_typ_alias of atyp * id * exp


type 
scattered_def_aux =  (* Function and type union definitions that can be spread across
         a file. Each one must end in $_$ *)
   SD_scattered_function of rec_opt * tannot_opt * effect_opt * id (* scattered function definition header *)
 | SD_scattered_funcl of funcl (* scattered function definition clause *)
 | SD_scattered_variant of id * name_scm_opt * typquant (* scattered union definition header *)
 | SD_scattered_unioncl of id * type_union (* scattered union definition member *)
 | SD_scattered_end of id (* scattered definition end *)


type 
val_spec_aux =  (* Value type specification *)
   VS_val_spec of typschm * id
 | VS_extern_no_rename of typschm * id
 | VS_extern_spec of typschm * id * string


type 
default_typing_spec_aux =  (* Default kinding or typing assumption, and default order for literal vectors and vector shorthands *)
   DT_kind of base_kind * kid
 | DT_order of base_kind * atyp
 | DT_typ of typschm * id


type 
type_def = 
   TD_aux of type_def_aux * l


type 
fundef = 
   FD_aux of fundef_aux * l


type 
dec_spec = 
   DEC_aux of dec_spec_aux * l


type 
scattered_def = 
   SD_aux of scattered_def_aux * l


type 
val_spec = 
   VS_aux of val_spec_aux * l


type 
default_typing_spec = 
   DT_aux of default_typing_spec_aux * l


type 
def =  (* Top-level definition *)
   DEF_type of type_def (* type definition *)
 | DEF_fundef of fundef (* function definition *)
 | DEF_val of letbind (* value definition *)
 | DEF_spec of val_spec (* top-level type constraint *)
 | DEF_default of default_typing_spec (* default kind and type assumptions *)
 | DEF_scattered of scattered_def (* scattered definition *)
 | DEF_reg_dec of dec_spec (* register declaration *)


type 
lexp_aux =  (* lvalue expression *)
   LEXP_id of id (* identifier *)
 | LEXP_mem of id * (exp) list
 | LEXP_vector of lexp * exp (* vector element *)
 | LEXP_vector_range of lexp * exp * exp (* subvector *)
 | LEXP_field of lexp * id (* struct field *)

and lexp = 
   LEXP_aux of lexp_aux * l


type 
defs =  (* Definition sequence *)
   Defs of (def) list

(** pretty printer *)
let pp_x (y5:x) : string = y5

let pp_kid_aux (kid_aux5:kid_aux) : string =
  match kid_aux5 with
  | (Var x) -> " ' " ^ (pp_x x)


let pp_id_aux (id_aux5:id_aux) : string =
  match id_aux5 with
  | (Id x) -> (pp_x x)
  | (DeIid x) -> " ( " ^ " deinfix " ^ (pp_x x) ^ " ) "


let pp_typquant_aux (typquant_aux5:typquant_aux) : string =
  match typquant_aux5 with
  | (TypQ_tq (quant_item_list)) -> " forall " ^ (String.concat "," (List.map (fun quant_item -> pp_quant_item quant_item) quant_item_list)) ^ " . "
  | TypQ_no_forall -> 


let pp_kid (kid5:kid) : string =
  match kid5 with
  | (Kid_aux (kid_aux,l)) -> (pp_kid_aux kid_aux) ^ " " ^ (pp_l l)


let pp_id (id5:id) : string =
  match id5 with
  | (Id_aux (id_aux,l)) -> (pp_id_aux id_aux) ^ " " ^ (pp_l l)


let pp_typquant (typquant5:typquant) : string =
  match typquant5 with
  | (TypQ_aux (typquant_aux,l)) -> (pp_typquant_aux typquant_aux) ^ " " ^ (pp_l l)


let rec pp_atyp (atyp5:atyp) : string =
  match atyp5 with
  | (ATyp_aux (atyp_aux,l)) -> (pp_atyp_aux atyp_aux) ^ " " ^ (pp_l l)
and
pp_atyp_aux (atyp_aux5:atyp_aux) : string =
  match atyp_aux5 with
  | (ATyp_id id) -> (pp_id id)
  | (ATyp_var kid) -> (pp_kid kid)
  | (ATyp_constant num) -> (pp_num num)
  | (ATyp_times (atyp1,atyp2)) -> (pp_atyp atyp1) ^ " * " ^ (pp_atyp atyp2)
  | (ATyp_sum (atyp1,atyp2)) -> (pp_atyp atyp1) ^ " + " ^ (pp_atyp atyp2)
  | (ATyp_minus (atyp1,atyp2)) -> (pp_atyp atyp1) ^ " - " ^ (pp_atyp atyp2)
  | (ATyp_exp atyp) -> " 2** " ^ (pp_atyp atyp)
  | (ATyp_neg atyp) -> " neg " ^ (pp_atyp atyp)
  | ATyp_inc -> " inc "
  | ATyp_dec -> " dec "
  | ATyp_default_ord -> " defaultOrd "
  | (ATyp_set (base_effect_list)) -> " { " ^ (String.concat "," (List.map (fun base_effect -> pp_base_effect base_effect) base_effect_list)) ^ " } "
  | (ATyp_fn (atyp1,atyp2,atyp3)) -> (pp_atyp atyp1) ^ " -> " ^ (pp_atyp atyp2) ^ " effect " ^ (pp_atyp atyp3)
  | (ATyp_tup (atyp_list)) -> " ( " ^ (String.concat "," (List.map (fun atyp -> pp_atyp atyp) atyp_list)) ^ " ) "
  | (ATyp_app (id,(atyp_list))) -> (pp_id id) ^ " < " ^ (String.concat "," (List.map (fun atyp -> pp_atyp atyp) atyp_list)) ^ " > "


let pp_lit_aux (lit_aux5:lit_aux) : string =
  match lit_aux5 with
  | L_unit -> " ( " ^ " ) "
  | L_zero -> " bitzero "
  | L_one -> " bitone "
  | L_true -> " true "
  | L_false -> " false "
  | (L_num num) -> (pp_num num)
  | (L_hex hex) -> (pp_hex hex)
  | (L_bin bin) -> (pp_bin bin)
  | L_undef -> " undefined "
  | (L_string string) -> (pp_string string)


let pp_typschm_aux (typschm_aux5:typschm_aux) : string =
  match typschm_aux5 with
  | (TypSchm_ts (typquant,atyp)) -> (pp_typquant typquant) ^ " " ^ (pp_atyp atyp)


let pp_lit (lit5:lit) : string =
  match lit5 with
  | (L_aux (lit_aux,l)) -> (pp_lit_aux lit_aux) ^ " " ^ (pp_l l)


let pp_fexps_aux (fexps_aux5:fexps_aux) : string =
  match fexps_aux5 with
  | (FES_Fexps ((fexp_list),semi_opt)) -> (String.concat ";" (List.map (fun fexp -> pp_fexp fexp) fexp_list)) ^ " " ^ (pp_semi_opt semi_opt)


let pp_typschm (typschm5:typschm) : string =
  match typschm5 with
  | (TypSchm_aux (typschm_aux,l)) -> (pp_typschm_aux typschm_aux) ^ " " ^ (pp_l l)


let rec pp_pat (pat5:pat) : string =
  match pat5 with
  | (P_aux (pat_aux,l)) -> (pp_pat_aux pat_aux) ^ " " ^ (pp_l l)
and
pp_pat_aux (pat_aux5:pat_aux) : string =
  match pat_aux5 with
  | (P_lit lit) -> (pp_lit lit)
  | P_wild -> " _ "
  | (P_as (pat,id)) -> " ( " ^ (pp_pat pat) ^ " as " ^ (pp_id id) ^ " ) "
  | (P_typ (atyp,pat)) -> " ( " ^ (pp_atyp atyp) ^ " ) " ^ (pp_pat pat)
  | (P_id id) -> (pp_id id)
  | (P_app (id,(pat_list))) -> (pp_id id) ^ " ( " ^ (String.concat "," (List.map (fun pat -> pp_pat pat) pat_list)) ^ " ) "
  | (P_record ((fpat_list),semi_opt)) -> " { " ^ (String.concat ";" (List.map (fun fpat -> pp_fpat fpat) fpat_list)) ^ " " ^ (pp_semi_opt semi_opt) ^ " } "
  | (P_vector (pat_list)) -> " [ " ^ (String.concat "," (List.map (fun pat -> pp_pat pat) pat_list)) ^ " ] "
  | (P_vector_indexed (num_pat_list)) -> " [ " ^ (String.concat "," (List.map (fun num,pat -> pp_int num,pp_pat pat) num_pat_list)) ^ " ] "
  | (P_vector_concat (pat_list)) -> (String.concat ":" (List.map (fun pat -> pp_pat pat) pat_list))
  | (P_tup (pat_list)) -> " ( " ^ (String.concat "," (List.map (fun pat -> pp_pat pat) pat_list)) ^ " ) "
  | (P_list (pat_list)) -> " [|| " ^ (String.concat "," (List.map (fun pat -> pp_pat pat) pat_list)) ^ " ||] "


let pp_fexps (fexps5:fexps) : string =
  match fexps5 with
  | (FES_aux (fexps_aux,l)) -> (pp_fexps_aux fexps_aux) ^ " " ^ (pp_l l)


let pp_kind_aux (kind_aux5:kind_aux) : string =
  match kind_aux5 with
  | (K_kind (base_kind_list)) -> (String.concat "->" (List.map (fun base_kind -> pp_base_kind base_kind) base_kind_list))


let rec pp_letbind (letbind5:letbind) : string =
  match letbind5 with
  | (LB_aux (letbind_aux,l)) -> (pp_letbind_aux letbind_aux) ^ " " ^ (pp_l l)
and
pp_letbind_aux (letbind_aux5:letbind_aux) : string =
  match letbind_aux5 with
  | (LB_val_explicit (typschm,pat,exp)) -> " let " ^ (pp_typschm typschm) ^ " " ^ (pp_pat pat) ^ " = " ^ (pp_exp exp)
  | (LB_val_implicit (pat,exp)) -> " let " ^ (pp_pat pat) ^ " = " ^ (pp_exp exp)
and
pp_opt_default (opt_default5:opt_default) : string =
  match opt_default5 with
  | (Def_val_aux (opt_default_aux,l)) -> (pp_opt_default_aux opt_default_aux) ^ " " ^ (pp_l l)
and
pp_opt_default_aux (opt_default_aux5:opt_default_aux) : string =
  match opt_default_aux5 with
  | Def_val_empty -> 
  | (Def_val_dec exp) -> " ; " ^ " default " ^ " = " ^ (pp_exp exp)
and
pp_exp (exp5:exp) : string =
  match exp5 with
  | (E_aux (exp_aux,l)) -> (pp_exp_aux exp_aux) ^ " " ^ (pp_l l)
and
pp_exp_aux (exp_aux5:exp_aux) : string =
  match exp_aux5 with
  | (E_block (exp_list)) -> " { " ^ (String.concat ";" (List.map (fun exp -> pp_exp exp) exp_list)) ^ " } "
  | (E_nondet (exp_list)) -> " nondet " ^ " { " ^ (String.concat ";" (List.map (fun exp -> pp_exp exp) exp_list)) ^ " } "
  | (E_id id) -> (pp_id id)
  | (E_lit lit) -> (pp_lit lit)
  | (E_cast (atyp,exp)) -> " ( " ^ (pp_atyp atyp) ^ " ) " ^ (pp_exp exp)
  | (E_app (id,(exp_list))) -> (pp_id id) ^ " ( " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " ) "
  | (E_app_infix (exp1,id,exp2)) -> (pp_exp exp1) ^ " " ^ (pp_id id) ^ " " ^ (pp_exp exp2)
  | (E_tuple (exp_list)) -> " ( " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " ) "
  | (E_if (exp1,exp2,exp3)) -> " if " ^ (pp_exp exp1) ^ " then " ^ (pp_exp exp2) ^ " else " ^ (pp_exp exp3)
  | (E_for (id,exp1,exp2,exp3,atyp,exp4)) -> " foreach " ^ (pp_id id) ^ " from " ^ (pp_exp exp1) ^ " to " ^ (pp_exp exp2) ^ " by " ^ (pp_exp exp3) ^ " in " ^ (pp_atyp atyp) ^ " " ^ (pp_exp exp4)
  | (E_vector (exp_list)) -> " [ " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " ] "
  | (E_vector_indexed ((exp_list),opt_default)) -> " [ " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " " ^ (pp_opt_default opt_default) ^ " ] "
  | (E_vector_access (exp,exp')) -> (pp_exp exp) ^ " [ " ^ (pp_exp exp') ^ " ] "
  | (E_vector_subrange (exp,exp1,exp2)) -> (pp_exp exp) ^ " [ " ^ (pp_exp exp1) ^ " .. " ^ (pp_exp exp2) ^ " ] "
  | (E_vector_update (exp,exp1,exp2)) -> " [ " ^ (pp_exp exp) ^ " with " ^ (pp_exp exp1) ^ " = " ^ (pp_exp exp2) ^ " ] "
  | (E_vector_update_subrange (exp,exp1,exp2,exp3)) -> " [ " ^ (pp_exp exp) ^ " with " ^ (pp_exp exp1) ^ " : " ^ (pp_exp exp2) ^ " = " ^ (pp_exp exp3) ^ " ] "
  | (E_vector_append (exp,exp2)) -> (pp_exp exp) ^ " : " ^ (pp_exp exp2)
  | (E_list (exp_list)) -> " [|| " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " ||] "
  | (E_cons (exp1,exp2)) -> (pp_exp exp1) ^ " :: " ^ (pp_exp exp2)
  | (E_record fexps) -> " { " ^ (pp_fexps fexps) ^ " } "
  | (E_record_update (exp,(exp_list))) -> " { " ^ (pp_exp exp) ^ " with " ^ (String.concat ";" (List.map (fun exp -> pp_exp exp) exp_list)) ^ " } "
  | (E_field (exp,id)) -> (pp_exp exp) ^ " . " ^ (pp_id id)
  | (E_case (exp,(pexp_list))) -> " switch " ^ (pp_exp exp) ^ " { " ^ (String.concat " " (List.map (fun pexp -> pp_pexp pexp) pexp_list)) ^ " } "
  | (E_let (letbind,exp)) -> (pp_letbind letbind) ^ " in " ^ (pp_exp exp)
  | (E_assign (exp,exp')) -> (pp_exp exp) ^ " := " ^ (pp_exp exp')
  | (E_exit exp) -> " exit " ^ (pp_exp exp)


let pp_kind (kind5:kind) : string =
  match kind5 with
  | (K_aux (kind_aux,l)) -> (pp_kind_aux kind_aux) ^ " " ^ (pp_l l)


let pp_name_scm_opt_aux (name_scm_opt_aux5:name_scm_opt_aux) : string =
  match name_scm_opt_aux5 with
  | Name_sect_none -> 
  | (Name_sect_some regexp) -> " [ " ^ " name " ^ " = " ^ (pp_regexp regexp) ^ " ] "


let pp_rec_opt_aux (rec_opt_aux5:rec_opt_aux) : string =
  match rec_opt_aux5 with
  | Rec_nonrec -> 
  | Rec_rec -> " rec "


let pp_tannot_opt_aux (tannot_opt_aux5:tannot_opt_aux) : string =
  match tannot_opt_aux5 with
  | Typ_annot_opt_none -> 
  | (Typ_annot_opt_some (typquant,atyp)) -> (pp_typquant typquant) ^ " " ^ (pp_atyp atyp)


let pp_effect_opt_aux (effect_opt_aux5:effect_opt_aux) : string =
  match effect_opt_aux5 with
  | Effect_opt_pure -> 
  | (Effect_opt_effect atyp) -> " effectkw " ^ (pp_atyp atyp)


let pp_type_union_aux (type_union_aux5:type_union_aux) : string =
  match type_union_aux5 with
  | (Tu_id id) -> (pp_id id)
  | (Tu_ty_id (atyp,id)) -> (pp_atyp atyp) ^ " " ^ (pp_id id)


let pp_funcl_aux (funcl_aux5:funcl_aux) : string =
  match funcl_aux5 with
  | (FCL_Funcl (id,pat,exp)) -> (pp_id id) ^ " " ^ (pp_pat pat) ^ " = " ^ (pp_exp exp)


let pp_base_kind_aux (base_kind_aux5:base_kind_aux) : string =
  match base_kind_aux5 with
  | BK_type -> " Type "
  | BK_nat -> " Nat "
  | BK_order -> " Order "
  | BK_effect -> " Effect "


let pp_kinded_id_aux (kinded_id_aux5:kinded_id_aux) : string =
  match kinded_id_aux5 with
  | (KOpt_none kid) -> (pp_kid kid)
  | (KOpt_kind (kind,kid)) -> (pp_kind kind) ^ " " ^ (pp_kid kid)


let pp_n_constraint_aux (n_constraint_aux5:n_constraint_aux) : string =
  match n_constraint_aux5 with
  | (NC_fixed (atyp,atyp')) -> (pp_atyp atyp) ^ " = " ^ (pp_atyp atyp')
  | (NC_bounded_ge (atyp,atyp')) -> (pp_atyp atyp) ^ " >= " ^ (pp_atyp atyp')
  | (NC_bounded_le (atyp,atyp')) -> (pp_atyp atyp) ^ " <= " ^ (pp_atyp atyp')
  | (NC_nat_set_bounded (kid,(num_list))) -> (pp_kid kid) ^ " IN " ^ " { " ^ (String.concat "," (List.map (fun num -> pp_int num) num_list)) ^ " } "


let pp_name_scm_opt (name_scm_opt5:name_scm_opt) : string =
  match name_scm_opt5 with
  | (Name_sect_aux (name_scm_opt_aux,l)) -> (pp_name_scm_opt_aux name_scm_opt_aux) ^ " " ^ (pp_l l)


let pp_rec_opt (rec_opt5:rec_opt) : string =
  match rec_opt5 with
  | (Rec_aux (rec_opt_aux,l)) -> (pp_rec_opt_aux rec_opt_aux) ^ " " ^ (pp_l l)


let pp_tannot_opt (tannot_opt5:tannot_opt) : string =
  match tannot_opt5 with
  | (Typ_annot_opt_aux (tannot_opt_aux,l)) -> (pp_tannot_opt_aux tannot_opt_aux) ^ " " ^ (pp_l l)


let pp_effect_opt (effect_opt5:effect_opt) : string =
  match effect_opt5 with
  | (Effect_opt_aux (effect_opt_aux,l)) -> (pp_effect_opt_aux effect_opt_aux) ^ " " ^ (pp_l l)


let pp_type_union (type_union5:type_union) : string =
  match type_union5 with
  | (Tu_aux (type_union_aux,l)) -> (pp_type_union_aux type_union_aux) ^ " " ^ (pp_l l)


let pp_funcl (funcl5:funcl) : string =
  match funcl5 with
  | (FCL_aux (funcl_aux,l)) -> (pp_funcl_aux funcl_aux) ^ " " ^ (pp_l l)


let pp_base_kind (base_kind5:base_kind) : string =
  match base_kind5 with
  | (BK_aux (base_kind_aux,l)) -> (pp_base_kind_aux base_kind_aux) ^ " " ^ (pp_l l)


let pp_kinded_id (kinded_id5:kinded_id) : string =
  match kinded_id5 with
  | (KOpt_aux (kinded_id_aux,l)) -> (pp_kinded_id_aux kinded_id_aux) ^ " " ^ (pp_l l)


let pp_n_constraint (n_constraint5:n_constraint) : string =
  match n_constraint5 with
  | (NC_aux (n_constraint_aux,l)) -> (pp_n_constraint_aux n_constraint_aux) ^ " " ^ (pp_l l)


let pp_type_def_aux (type_def_aux5:type_def_aux) : string =
  match type_def_aux5 with
  | (TD_abbrev (id,name_scm_opt,typschm)) -> " typedef " ^ (pp_id id) ^ " " ^ (pp_name_scm_opt name_scm_opt) ^ " = " ^ (pp_typschm typschm)
  | (TD_record (id,name_scm_opt,typquant,(atyp_id_list),semi_opt)) -> " typedef " ^ (pp_id id) ^ " " ^ (pp_name_scm_opt name_scm_opt) ^ " = " ^ " const " ^ " struct " ^ (pp_typquant typquant) ^ " { " ^ (String.concat ";" (List.map (fun atyp,id -> pp_atyp atyp;pp_id id) atyp_id_list)) ^ " " ^ (pp_semi_opt semi_opt) ^ " } "
  | (TD_variant (id,name_scm_opt,typquant,(type_union_list),semi_opt)) -> " typedef " ^ (pp_id id) ^ " " ^ (pp_name_scm_opt name_scm_opt) ^ " = " ^ " const " ^ " union " ^ (pp_typquant typquant) ^ " { " ^ (String.concat ";" (List.map (fun type_union -> pp_type_union type_union) type_union_list)) ^ " " ^ (pp_semi_opt semi_opt) ^ " } "
  | (TD_enum (id,name_scm_opt,(id_list),semi_opt)) -> " typedef " ^ (pp_id id) ^ " " ^ (pp_name_scm_opt name_scm_opt) ^ " = " ^ " enumerate " ^ " { " ^ (String.concat ";" (List.map (fun id -> pp_id id) id_list)) ^ " " ^ (pp_semi_opt semi_opt) ^ " } "
  | (TD_register (id,atyp,atyp',(index_range_id_list))) -> " typedef " ^ (pp_id id) ^ " = " ^ " register " ^ " bits " ^ " [ " ^ (pp_atyp atyp) ^ " : " ^ (pp_atyp atyp') ^ " ] " ^ " { " ^ (String.concat ";" (List.map (fun index_range,id -> pp_index_range index_range;pp_id id) index_range_id_list)) ^ " } "


let pp_scattered_def_aux (scattered_def_aux5:scattered_def_aux) : string =
  match scattered_def_aux5 with
  | (SD_scattered_function (rec_opt,tannot_opt,effect_opt,id)) -> " scattered " ^ " function " ^ (pp_rec_opt rec_opt) ^ " " ^ (pp_tannot_opt tannot_opt) ^ " " ^ (pp_effect_opt effect_opt) ^ " " ^ (pp_id id)
  | (SD_scattered_funcl funcl) -> " function " ^ " clause " ^ (pp_funcl funcl)
  | (SD_scattered_variant (id,name_scm_opt,typquant)) -> " scattered " ^ " typedef " ^ (pp_id id) ^ " " ^ (pp_name_scm_opt name_scm_opt) ^ " = " ^ " const " ^ " union " ^ (pp_typquant typquant)
  | (SD_scattered_unioncl (id,type_union)) -> " union " ^ (pp_id id) ^ " member " ^ (pp_type_union type_union)
  | (SD_scattered_end id) -> " end " ^ (pp_id id)


let pp_dec_spec_aux (dec_spec_aux5:dec_spec_aux) : string =
  match dec_spec_aux5 with
  | (DEC_reg (atyp,id)) -> " register " ^ (pp_atyp atyp) ^ " " ^ (pp_id id)
  | (DEC_alias (id,exp)) -> " register " ^ " alias " ^ (pp_id id) ^ " = " ^ (pp_exp exp)
  | (DEC_typ_alias (atyp,id,exp)) -> " register " ^ " alias " ^ (pp_atyp atyp) ^ " " ^ (pp_id id) ^ " = " ^ (pp_exp exp)


let pp_val_spec_aux (val_spec_aux5:val_spec_aux) : string =
  match val_spec_aux5 with
  | (VS_val_spec (typschm,id)) -> " val " ^ (pp_typschm typschm) ^ " " ^ (pp_id id)
  | (VS_extern_no_rename (typschm,id)) -> " val " ^ " extern " ^ (pp_typschm typschm) ^ " " ^ (pp_id id)
  | (VS_extern_spec (typschm,id,string)) -> " val " ^ " extern " ^ (pp_typschm typschm) ^ " " ^ (pp_id id) ^ " = " ^ (pp_string string)


let pp_default_typing_spec_aux (default_typing_spec_aux5:default_typing_spec_aux) : string =
  match default_typing_spec_aux5 with
  | (DT_kind (base_kind,kid)) -> " default " ^ (pp_base_kind base_kind) ^ " " ^ (pp_kid kid)
  | (DT_order (base_kind,atyp)) -> " default " ^ (pp_base_kind base_kind) ^ " " ^ (pp_atyp atyp)
  | (DT_typ (typschm,id)) -> " default " ^ (pp_typschm typschm) ^ " " ^ (pp_id id)


let pp_fundef_aux (fundef_aux5:fundef_aux) : string =
  match fundef_aux5 with
  | (FD_function (rec_opt,tannot_opt,effect_opt,(funcl_list))) -> " function " ^ (pp_rec_opt rec_opt) ^ " " ^ (pp_tannot_opt tannot_opt) ^ " " ^ (pp_effect_opt effect_opt) ^ (String.concat "and" (List.map (fun funcl -> pp_funcl funcl) funcl_list))


let pp_fexp_aux (fexp_aux5:fexp_aux) : string =
  match fexp_aux5 with
  | (FE_Fexp (id,exp)) -> (pp_id id) ^ " = " ^ (pp_exp exp)


let pp_base_effect_aux (base_effect_aux5:base_effect_aux) : string =
  match base_effect_aux5 with
  | BE_rreg -> " rreg "
  | BE_wreg -> " wreg "
  | BE_rmem -> " rmem "
  | BE_wmem -> " wmem "
  | BE_barr -> " barr "
  | BE_undef -> " undef "
  | BE_unspec -> " unspec "
  | BE_nondet -> " nondet "


let pp_quant_item_aux (quant_item_aux5:quant_item_aux) : string =
  match quant_item_aux5 with
  | (QI_id kinded_id) -> (pp_kinded_id kinded_id)
  | (QI_const n_constraint) -> (pp_n_constraint n_constraint)


let pp_pexp_aux (pexp_aux5:pexp_aux) : string =
  match pexp_aux5 with
  | (Pat_exp (pat,exp)) -> (pp_pat pat) ^ " -> " ^ (pp_exp exp)


let pp_fpat_aux (fpat_aux5:fpat_aux) : string =
  match fpat_aux5 with
  | (FP_Fpat (id,pat)) -> (pp_id id) ^ " = " ^ (pp_pat pat)


let pp_type_def (type_def5:type_def) : string =
  match type_def5 with
  | (TD_aux (type_def_aux,l)) -> (pp_type_def_aux type_def_aux) ^ " " ^ (pp_l l)


let pp_scattered_def (scattered_def5:scattered_def) : string =
  match scattered_def5 with
  | (SD_aux (scattered_def_aux,l)) -> (pp_scattered_def_aux scattered_def_aux) ^ " " ^ (pp_l l)


let pp_dec_spec (dec_spec5:dec_spec) : string =
  match dec_spec5 with
  | (DEC_aux (dec_spec_aux,l)) -> (pp_dec_spec_aux dec_spec_aux) ^ " " ^ (pp_l l)


let pp_val_spec (val_spec5:val_spec) : string =
  match val_spec5 with
  | (VS_aux (val_spec_aux,l)) -> (pp_val_spec_aux val_spec_aux) ^ " " ^ (pp_l l)


let pp_default_typing_spec (default_typing_spec5:default_typing_spec) : string =
  match default_typing_spec5 with
  | (DT_aux (default_typing_spec_aux,l)) -> (pp_default_typing_spec_aux default_typing_spec_aux) ^ " " ^ (pp_l l)


let pp_fundef (fundef5:fundef) : string =
  match fundef5 with
  | (FD_aux (fundef_aux,l)) -> (pp_fundef_aux fundef_aux) ^ " " ^ (pp_l l)


let pp_fexp (fexp5:fexp) : string =
  match fexp5 with
  | (FE_aux (fexp_aux,l)) -> (pp_fexp_aux fexp_aux) ^ " " ^ (pp_l l)


let pp_base_effect (base_effect5:base_effect) : string =
  match base_effect5 with
  | (BE_aux (base_effect_aux,l)) -> (pp_base_effect_aux base_effect_aux) ^ " " ^ (pp_l l)


let pp_ix (ix5:ix) : string = ix5

let pp_defs (defs5:defs) : string =
  match defs5 with
  | (Defs (def_list)) -> (String.concat " " (List.map (fun def -> pp_def def) def_list))


let pp_quant_item (quant_item5:quant_item) : string =
  match quant_item5 with
  | (QI_aux (quant_item_aux,l)) -> (pp_quant_item_aux quant_item_aux) ^ " " ^ (pp_l l)


let rec pp_index_range (index_range5:index_range) : string =
  match index_range5 with
  | (BF_aux (index_range_aux,l)) -> (pp_index_range_aux index_range_aux) ^ " " ^ (pp_l l)
and
pp_index_range_aux (index_range_aux5:index_range_aux) : string =
  match index_range_aux5 with
  | (BF_single num) -> (pp_num num)
  | (BF_range (num1,num2)) -> (pp_num num1) ^ " : " ^ (pp_num num2)
  | (BF_concat (index_range1,index_range2)) -> (pp_index_range index_range1) ^ " , " ^ (pp_index_range index_range2)


let pp_pexp (pexp5:pexp) : string =
  match pexp5 with
  | (Pat_aux (pexp_aux,l)) -> (pp_pexp_aux pexp_aux) ^ " " ^ (pp_l l)


let pp_fpat (fpat5:fpat) : string =
  match fpat5 with
  | (FP_aux (fpat_aux,l)) -> (pp_fpat_aux fpat_aux) ^ " " ^ (pp_l l)


let pp_def (def5:def) : string =
  match def5 with
  | (DEF_type type_def) -> (pp_type_def type_def)
  | (DEF_fundef fundef) -> (pp_fundef fundef)
  | (DEF_val letbind) -> (pp_letbind letbind)
  | (DEF_spec val_spec) -> (pp_val_spec val_spec)
  | (DEF_default default_typing_spec) -> (pp_default_typing_spec default_typing_spec)
  | (DEF_scattered scattered_def) -> (pp_scattered_def scattered_def)
  | (DEF_reg_dec dec_spec) -> (pp_dec_spec dec_spec)


let rec pp_lexp (lexp5:lexp) : string =
  match lexp5 with
  | (LEXP_aux (lexp_aux,l)) -> (pp_lexp_aux lexp_aux) ^ " " ^ (pp_l l)
and
pp_lexp_aux (lexp_aux5:lexp_aux) : string =
  match lexp_aux5 with
  | (LEXP_id id) -> (pp_id id)
  | (LEXP_mem (id,(exp_list))) -> (pp_id id) ^ " ( " ^ (String.concat "," (List.map (fun exp -> pp_exp exp) exp_list)) ^ " ) "
  | (LEXP_vector (lexp,exp)) -> (pp_lexp lexp) ^ " [ " ^ (pp_exp exp) ^ " ] "
  | (LEXP_vector_range (lexp,exp1,exp2)) -> (pp_lexp lexp) ^ " [ " ^ (pp_exp exp1) ^ " : " ^ (pp_exp exp2) ^ " ] "
  | (LEXP_field (lexp,id)) -> (pp_lexp lexp) ^ " . " ^ (pp_id id)




