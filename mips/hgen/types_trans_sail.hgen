let translate_reg name value = 
    (name, Bvector (Some 5), bit_list_of_integer 5 (Nat_big_num.of_int (reg_to_int value)))
let translate_imm26 name value = 
    (name, Bvector (Some 26), bit_list_of_integer 26 (Nat_big_num.of_int value))
let translate_imm16 name value = 
    (name, Bvector (Some 16), bit_list_of_integer 16 (Nat_big_num.of_int value))
let translate_imm5 name value = 
    (name, Bvector (Some 5), bit_list_of_integer 5 (Nat_big_num.of_int value))
let translate_bool name value =
  (name, Bit, [if value then Bitc_one else Bitc_zero])
let translate_enum enum_values name value =
  let rec bit_count n =
    if n = 0 then 0
    else 1 + (bit_count (n lsr 1)) in
  let rec find_index element = function
    | h::tail -> if h = element then 0 else 1 + (find_index element tail)
    | _ -> failwith "translate_enum could not find value"
    in
  let size = bit_count (List.length enum_values) in
  let index = find_index value enum_values in
  (name, Range0 (Some size),  IInt.bit_list_of_integer size (Nat_big_num.of_int index))
let translate_wordsize = translate_enum [MIPSByte; MIPSHalf; MIPSWord; MIPSDouble]
let translate_cmp = translate_enum [
MIPS_EQ  ;(* equal *)
MIPS_NE  ;(* not equal *)
MIPS_GE  ;(* signed greater than or equal *)
MIPS_GEU ;(* unsigned greater than or equal *) 
MIPS_GT  ;(* signed strictly greater than *) 
MIPS_LE  ;(* signed less than or equal *) 
MIPS_LT  ;(* signed strictly less than *) 
MIPS_LTU ;(* unsigned less than or qual *) 
]