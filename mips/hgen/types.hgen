type mipsRTypeOp = 
| MIPSROpADD
| MIPSROpADDU
| MIPSROpAND
| MIPSROpDADD
| MIPSROpDADDU
| MIPSROpDSUB
| MIPSROpDSUBU
| MIPSROpMOVN
| MIPSROpMOVZ
| MIPSROpMUL
| MIPSROpNOR
| MIPSROpOR
| MIPSROpSLT
| MIPSROpSLTU
| MIPSROpSUB
| MIPSROpSUBU
| MIPSROpXOR

let pp_rtype_op = function
| MIPSROpADD    -> "ADD"
| MIPSROpADDU   -> "ADDU"
| MIPSROpAND    -> "AND"
| MIPSROpDADD   -> "DADD"
| MIPSROpDADDU  -> "DADDU"
| MIPSROpDSUB   -> "DSUB"
| MIPSROpDSUBU  -> "DSUBU"
| MIPSROpMOVN   -> "MOVN"
| MIPSROpMOVZ   -> "MOVZ"
| MIPSROpMUL    -> "MUL"
| MIPSROpNOR    -> "NOR"
| MIPSROpOR     -> "OR"
| MIPSROpSLT    -> "SLT"
| MIPSROpSLTU   -> "SLTU"
| MIPSROpSUB    -> "SUB"
| MIPSROpSUBU   -> "SUBU"
| MIPSROpXOR    -> "XOR"

type bit16 = int
type bit5  = int

type mipsITypeOp = 
| MIPSIOpADDI
| MIPSIOpADDIU
| MIPSIOpANDI
| MIPSIOpDADDI
| MIPSIOpDADDIU
| MIPSIOpORI
| MIPSIOpSLTI
| MIPSIOpSLTIU
| MIPSIOpXORI

let pp_itype_op = function
| MIPSIOpADDI   -> "ADDI"
| MIPSIOpADDIU  -> "ADDIU"
| MIPSIOpANDI   -> "ANDI"
| MIPSIOpDADDI  -> "DADDI"
| MIPSIOpDADDIU -> "DADDIU"
| MIPSIOpORI    -> "ORI"
| MIPSIOpSLTI   -> "SLTI"
| MIPSIOpSLTIU  -> "SLTIU"
| MIPSIOpXORI   -> "XORI"

type mipsShiftIOp = 
| MIPSDSLL
| MIPSDSLL32
| MIPSDSRA
| MIPSDSRA32
| MIPSDSRL
| MIPSDSRL32
| MIPSSLL
| MIPSSRA
| MIPSSRL

let pp_shifti_op = function
| MIPSDSLL   -> "DSLL" 
| MIPSDSLL32 -> "DSLL32"
| MIPSDSRA   -> "DSRA"  
| MIPSDSRA32 -> "DSRA32"
| MIPSDSRL   -> "DSRL"  
| MIPSDSRL32 -> "DSRL32"
| MIPSSLL    -> "SLL"   
| MIPSSRA    -> "SRA"   
| MIPSSRL    -> "SRL"   

type mipsShiftVOp = 
| MIPSDSLLV
| MIPSDSRAV
| MIPSDSRLV
| MIPSSLLV
| MIPSSRAV
| MIPSSRLV

let pp_shiftv_op = function
| MIPSDSLLV -> "DSLLV"
| MIPSDSRAV -> "DSRAV"
| MIPSDSRLV -> "DSRLV"
| MIPSSLLV  -> "SLLV" 
| MIPSSRAV  -> "SRAV" 
| MIPSSRLV  -> "SRLV" 

type mipsMulDivOp =
| MIPSDDIV
| MIPSDDIVU
| MIPSDIV
| MIPSDIVU
| MIPSDMULT
| MIPSDMULTU
| MIPSMADD
| MIPSMADDU
| MIPSMSUB
| MIPSMSUBU
| MIPSMULT
| MIPSMULTU

let pp_muldiv_op = function
| MIPSDDIV   -> "DDIV"  
| MIPSDDIVU  -> "DDIVU" 
| MIPSDIV    -> "DIV"   
| MIPSDIVU   -> "DIVU"  
| MIPSDMULT  -> "DMULT" 
| MIPSDMULTU -> "DMULTU"
| MIPSMADD   -> "MADD"  
| MIPSMADDU  -> "MADDU" 
| MIPSMSUB   -> "MSUB"  
| MIPSMSUBU  -> "MSUBU" 
| MIPSMULT   -> "MULT"  
| MIPSMULTU  -> "MULTU" 

type mipsMFHiLoOp =
| MIPSMFHI
| MIPSMFLO
| MIPSMTHI
| MIPSMTLO

let pp_mfhilo_op = function
| MIPSMFHI -> "MFHI"
| MIPSMFLO -> "MFLO"
| MIPSMTHI -> "MTHI"
| MIPSMTLO -> "MTLO"

type mipsWordWidth = 
| MIPSByte
| MIPSHalf
| MIPSWord
| MIPSDouble

type mipsCmp =
| MIPS_EQ  (* equal *)
| MIPS_NE  (* not equal *)
| MIPS_GE  (* signed greater than or equal *)
| MIPS_GEU (* unsigned greater than or equal *) 
| MIPS_GT  (* signed strictly greater than *) 
| MIPS_LE  (* signed less than or equal *) 
| MIPS_LT  (* signed strictly less than *) 
| MIPS_LTU (* unsigned less than or qual *) 

let pp_load_op width signed linked = match (width, signed, linked) with
  | (MIPSByte, true, false)    -> "LB"
  | (MIPSByte, false, false)   -> "LBU"
  | (MIPSHalf, true, false)    -> "LH"
  | (MIPSHalf, false, false)   -> "LHU"
  | (MIPSWord, true, false)    -> "LW"
  | (MIPSWord, false, false)   -> "LWU"
  | (MIPSDouble, false, false) -> "LD"
  | (MIPSWord, true, true)     -> "LL"
  | (MIPSDouble, false, true)  -> "LLD"
  | _                          -> failwith "unexpected load op"

let pp_store_op width conditional = match (width, conditional) with
  | (MIPSByte,   false) -> "SB"
  | (MIPSHalf,   false) -> "SH"
  | (MIPSWord,   false) -> "SW"
  | (MIPSDouble, false) -> "SD"
  | (MIPSWord,   true)  -> "SC"
  | (MIPSDouble, true)  -> "SCD"
  | _                   -> failwith "unexpected store op"

let pp_lslr_op store double left = match (store, double, left) with
  | (false, false, true ) -> "LWL"
  | (false, false, false) -> "LWR"
  | (false, true , true ) -> "LDL"
  | (false, true , false) -> "LDR"
  | (true , false, true ) -> "SWL"
  | (true , false, false) -> "SWR"
  | (true , true , true ) -> "SDL"
  | (true , true , false) -> "SDR"

let pp_beq_op ne likely = match (ne, likely) with
  | (false, false) -> "BEQ"
  | (false, true)  -> "BEQL"
  | (true , false) -> "BNE"
  | (true , true)  -> "BNEL"

let pp_bcmpz_op cmp link likely = match (cmp, likely, link) with
| (MIPS_LT, false , false ) -> "bltz"
| (MIPS_LT, false , true  ) -> "bltzal"
| (MIPS_LT, true  , false ) -> "bltzl"
| (MIPS_LT, true  , true  ) -> "bltzall"
| (MIPS_GE, false , false ) -> "bgez"
| (MIPS_GE, false , true  ) -> "bgezal"
| (MIPS_GE, true  , false ) -> "bgezl"
| (MIPS_GE, true  , true  ) -> "bgezall"
| (MIPS_GT, false , false ) -> "bgtz"
| (MIPS_GT, true  , false ) -> "bgtzl"
| (MIPS_LE, false , false ) -> "blez"
| (MIPS_LE, true  , false ) -> "blezl"
| _ -> failwith "unknown bcmpz instruction"
