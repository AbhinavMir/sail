(*Generated by Lem from abis/aarch64/abi_aarch64_relocation.lem.*)
(** [abi_aarch64_relocation] contains types and definitions relating to ABI
  * specific relocation functionality for the AArch64 ABI (little-endian case).
  *)

open Lem_basic_classes
open Lem_num
open Lem_string
open Lem_maybe
open Missing_pervasives

open Error

open Elf_types_native_uint
open Elf_file
open Elf_header
open Elf_relocation
open Elf_symbol_table

open Abi_utilities
open Memory_image

(** Relocations *)

let r_aarch64_none : Nat_big_num.num= (Nat_big_num.of_int 0)
let r_aarch64_withdrawn : Nat_big_num.num= (Nat_big_num.of_int 256)  (** Treated as R_AARCH6_NONE *)

let r_aarch64_abs64 : Nat_big_num.num= (Nat_big_num.of_int 257)
let r_aarch64_abs32 : Nat_big_num.num= (Nat_big_num.of_int 258)
let r_aarch64_abs16 : Nat_big_num.num= (Nat_big_num.of_int 259)
let r_aarch64_prel64 : Nat_big_num.num= (Nat_big_num.of_int 260)
let r_aarch64_prel32 : Nat_big_num.num= (Nat_big_num.of_int 261)
let r_aarch64_prel16 : Nat_big_num.num= (Nat_big_num.of_int 262)

let r_aarch64_movw_uabs_g0 : Nat_big_num.num= (Nat_big_num.of_int 263)
let r_aarch64_movw_uabs_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 264)
let r_aarch64_movw_uabs_g1 : Nat_big_num.num= (Nat_big_num.of_int 265)
let r_aarch64_movw_uabs_g1_nc : Nat_big_num.num= (Nat_big_num.of_int 266)
let r_aarch64_movw_uabs_g2 : Nat_big_num.num= (Nat_big_num.of_int 267)
let r_aarch64_movw_uabs_g2_nc : Nat_big_num.num= (Nat_big_num.of_int 268)
let r_aarch64_movw_uabs_g3 : Nat_big_num.num= (Nat_big_num.of_int 269)

let r_aarch64_movw_sabs_g0 : Nat_big_num.num= (Nat_big_num.of_int 270)
let r_aarch64_movw_sabs_g1 : Nat_big_num.num= (Nat_big_num.of_int 271)
let r_aarch64_movw_sabs_g2 : Nat_big_num.num= (Nat_big_num.of_int 272)

let r_aarch64_ld_prel_lo19 : Nat_big_num.num= (Nat_big_num.of_int 273)
let r_aarch64_adr_prel_lo21 : Nat_big_num.num= (Nat_big_num.of_int 274)
let r_aarch64_adr_prel_pg_hi21 : Nat_big_num.num= (Nat_big_num.of_int 275)
let r_aarch64_adr_prel_pg_hi21_nc : Nat_big_num.num= (Nat_big_num.of_int 276)
let r_aarch64_add_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 277)
let r_aarch64_ldst8_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 278)
let r_aarch64_ldst16_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 284)
let r_aarch64_ldst32_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 285)
let r_aarch64_ldst64_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 286)
let r_aarch64_ldst128_abs_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 299)

let r_aarch64_tstbr14 : Nat_big_num.num= (Nat_big_num.of_int 279)
let r_aarch64_condbr19 : Nat_big_num.num= (Nat_big_num.of_int 280)
let r_aarch64_jump26 : Nat_big_num.num= (Nat_big_num.of_int 282)
let r_aarch64_call26 : Nat_big_num.num= (Nat_big_num.of_int 283)

let r_aarch64_movw_prel_g0 : Nat_big_num.num= (Nat_big_num.of_int 287)
let r_aarch64_movw_prel_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 288)
let r_aarch64_movw_prel_g1 : Nat_big_num.num= (Nat_big_num.of_int 289)
let r_aarch64_movw_prel_g1_nc : Nat_big_num.num= (Nat_big_num.of_int 290)
let r_aarch64_movw_prel_g2 : Nat_big_num.num= (Nat_big_num.of_int 291)
let r_aarch64_movw_prel_g2_nc : Nat_big_num.num= (Nat_big_num.of_int 292)
let r_aarch64_movw_prel_g3 : Nat_big_num.num= (Nat_big_num.of_int 293)

let r_aarch64_movw_gotoff_g0 : Nat_big_num.num= (Nat_big_num.of_int 300)
let r_aarch64_movw_gotoff_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 301)
let r_aarch64_movw_gotoff_g1 : Nat_big_num.num= (Nat_big_num.of_int 302)
let r_aarch64_movw_gotoff_g1_nc : Nat_big_num.num= (Nat_big_num.of_int 303)
let r_aarch64_movw_gotoff_g2 : Nat_big_num.num= (Nat_big_num.of_int 304)
let r_aarch64_movw_gotoff_g2_nc : Nat_big_num.num= (Nat_big_num.of_int 305)
let r_aarch64_movw_gotoff_g3 : Nat_big_num.num= (Nat_big_num.of_int 306)

let r_aarch64_gotrel64 : Nat_big_num.num= (Nat_big_num.of_int 307)
let r_aarch64_gotrel32 : Nat_big_num.num= (Nat_big_num.of_int 308)

let r_aarch64_got_ld_prel19 : Nat_big_num.num= (Nat_big_num.of_int 309)
let r_aarch64_got_ld64_gotoff_lo15 : Nat_big_num.num= (Nat_big_num.of_int 310)
let r_aarch64_adr_got_page : Nat_big_num.num= (Nat_big_num.of_int 311)
let r_aarch64_ld64_got_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 312)
let r_aarch64_ld64_gotpage_lo15 : Nat_big_num.num= (Nat_big_num.of_int 313)

let r_aarch64_tlsgd_adr_prel21 : Nat_big_num.num= (Nat_big_num.of_int 512)
let r_aarch64_tlsgd_adr_page21 : Nat_big_num.num= (Nat_big_num.of_int 513)
let r_aarch64_tlsgd_add_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 514)
let r_aarch64_tlsgd_movw_g1 : Nat_big_num.num= (Nat_big_num.of_int 515)
let r_aarch64_tlsgd_movw_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 516)

let r_aarch64_tlsld_adr_prel21 : Nat_big_num.num= (Nat_big_num.of_int 517)
let r_aarch64_tlsld_adr_page21 : Nat_big_num.num= (Nat_big_num.of_int 518)
let r_aarch64_tlsld_add_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 519)
let r_aarch64_tlsld_movw_g1 : Nat_big_num.num= (Nat_big_num.of_int 520)
let r_aarch64_tlsld_movw_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 521)
let r_aarch64_tlsld_ld_prel19 : Nat_big_num.num= (Nat_big_num.of_int 522)
let r_aarch64_tlsld_movw_dtprel_g2 : Nat_big_num.num= (Nat_big_num.of_int 523)
let r_aarch64_tlsld_movw_dtprel_g1 : Nat_big_num.num= (Nat_big_num.of_int 524)
let r_aarch64_tlsld_movw_dtprel_g1_nc : Nat_big_num.num= (Nat_big_num.of_int 525)
let r_aarch64_tlsld_movw_dtprel_g0 : Nat_big_num.num= (Nat_big_num.of_int 526)
let r_aarch64_tlsld_movw_dtprel_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 527)
let r_aarch64_tlsld_add_dtprel_hi12 : Nat_big_num.num= (Nat_big_num.of_int 528)
let r_aarch64_tlsld_add_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 529)
let r_aarch64_tlsld_add_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 530)
let r_aarch64_tlsld_ldst8_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 531)
let r_aarch64_tlsld_ldst8_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 532)
let r_aarch64_tlsld_ldst16_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 533)
let r_aarch64_tlsld_ldst16_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 534)
let r_aarch64_tlsld_ldst32_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 535)
let r_aarch64_tlsld_ldst32_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 536)
let r_aarch64_tlsld_ldst64_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 537)
let r_aarch64_tlsld_ldst64_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 538)
let r_aarch64_tlsld_ldst128_dtprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 572)
let r_aarch64_tlsld_ldst128_dtprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 573)

let r_aarch64_tlsie_movw_gottprel_g1 : Nat_big_num.num= (Nat_big_num.of_int 539)
let r_aarch64_tlsie_movw_gottprel_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 540)
let r_aarch64_tlsie_movw_gottprel_page21 : Nat_big_num.num= (Nat_big_num.of_int 541)
let r_aarch64_tlsie_movw_gottprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 542)
let r_aarch64_tlsie_movw_gottprel_prel19 : Nat_big_num.num= (Nat_big_num.of_int 543)

let r_aarch64_tlsle_movw_tprel_g2 : Nat_big_num.num= (Nat_big_num.of_int 544)
let r_aarch64_tlsle_movw_tprel_g1 : Nat_big_num.num= (Nat_big_num.of_int 545)
let r_aarch64_tlsle_movw_tprel_g1_nc : Nat_big_num.num= (Nat_big_num.of_int 546)
let r_aarch64_tlsle_movw_tprel_g0 : Nat_big_num.num= (Nat_big_num.of_int 547)
let r_aarch64_tlsle_movw_tprel_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 548)
let r_aarch64_add_tprel_hi12 : Nat_big_num.num= (Nat_big_num.of_int 549)
let r_aarch64_add_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 550)
let r_aarch64_add_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 551)
let r_aarch64_ldst8_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 552)
let r_aarch64_ldst8_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 553)
let r_aarch64_ldst16_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 554)
let r_aarch64_ldst16_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 555)
let r_aarch64_ldst32_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 556)
let r_aarch64_ldst32_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 557)
let r_aarch64_ldst64_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 558)
let r_aarch64_ldst64_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 559)
let r_aarch64_ldst128_tprel_lo12 : Nat_big_num.num= (Nat_big_num.of_int 570)
let r_aarch64_ldst128_tprel_lo12_nc : Nat_big_num.num= (Nat_big_num.of_int 571)

let r_aarch64_tlsdesc_ld_prel19 : Nat_big_num.num= (Nat_big_num.of_int 560)
let r_aarch64_tlsdesc_adr_prel21 : Nat_big_num.num= (Nat_big_num.of_int 561)
let r_aarch64_tlsdesc_adr_page21 : Nat_big_num.num= (Nat_big_num.of_int 562)
let r_aarch64_tlsdesc_ld64_lo12 : Nat_big_num.num= (Nat_big_num.of_int 563)
let r_aarch64_tlsdesc_add_lo12 : Nat_big_num.num= (Nat_big_num.of_int 564)
let r_aarch64_tlsdesc_off_g1 : Nat_big_num.num= (Nat_big_num.of_int 565)
let r_aarch64_tlsdesc_off_g0_nc : Nat_big_num.num= (Nat_big_num.of_int 566)
let r_aarch64_tlsdesc_ldr : Nat_big_num.num= (Nat_big_num.of_int 567)
let r_aarch64_tlsdesc_add : Nat_big_num.num= (Nat_big_num.of_int 568)
let r_aarch64_tlsdesc_call : Nat_big_num.num= (Nat_big_num.of_int 569)

let r_aarch64_copy : Nat_big_num.num= (Nat_big_num.of_int 1024)
let r_aarch64_glob_dat : Nat_big_num.num= (Nat_big_num.of_int 1025)
let r_aarch64_jump_slot : Nat_big_num.num= (Nat_big_num.of_int 1026)
let r_aarch64_relative : Nat_big_num.num= (Nat_big_num.of_int 1027)
let r_aarch64_tls_dtprel64 : Nat_big_num.num= (Nat_big_num.of_int 1028)
let r_aarch64_tls_dtpmod64 : Nat_big_num.num= (Nat_big_num.of_int 1029)
let r_aarch64_tls_tprel64 : Nat_big_num.num= (Nat_big_num.of_int 1030)
let r_aarch64_tlsdesc : Nat_big_num.num= (Nat_big_num.of_int 1031)
let r_aarch64_irelative : Nat_big_num.num= (Nat_big_num.of_int 1032)

(** [string_of_aarch64_relocation_type m] produces a string representation of the
  * relocation type [m].
  *)
(*val string_of_aarch64_relocation_type : natural -> string*)
let string_of_aarch64_relocation_type rel_type1:string=  
 (if Nat_big_num.equal rel_type1 r_aarch64_none then
    "R_AARCH64_NONE"
  else if Nat_big_num.equal rel_type1 r_aarch64_withdrawn then
    "R_AARCH64_NONE"
  else if Nat_big_num.equal rel_type1 r_aarch64_abs64 then
    "R_AARCH64_ABS64"
  else if Nat_big_num.equal rel_type1 r_aarch64_abs32 then
    "R_AARCH64_ABS32"
  else if Nat_big_num.equal rel_type1 r_aarch64_abs16 then
    "R_AARCH64_ABS16"
  else if Nat_big_num.equal rel_type1 r_aarch64_prel64 then
    "R_AARCH64_PREL64"
  else if Nat_big_num.equal rel_type1 r_aarch64_prel32 then
    "R_AARCH64_PREL32"
  else if Nat_big_num.equal rel_type1 r_aarch64_prel16 then
    "R_AARCH64_PREL16"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g0 then
    "R_AARCH64_MOVW_UABS_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g0_nc then
    "R_AARCH64_MOVW_UABS_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g1 then
    "R_AARCH64_MOVW_UABS_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g1_nc then
    "R_AARCH64_MOVW_UABS_G1_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g2 then
    "R_AARCH64_MOVW_UABS_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g2_nc then
    "R_AARCH64_MOVW_UABS_G2_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g3 then
    "R_AARCH64_MOVW_UABS_G3"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g0 then
    "R_AARCH64_MOVW_SABS_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g1 then
    "R_AARCH64_MOVW_SABS_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g2 then
    "R_AARCH64_MOVW_SABS_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_ld_prel_lo19 then
    "R_AARCH64_LD_PREL_LO19"
  else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_lo21 then
    "R_AARCH64_ADR_PREL_LO21"
  else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_pg_hi21 then
    "R_AARCH64_ADR_PREL_PG_HI21"
  else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_pg_hi21_nc then
    "R_AARCH64_ADR_PREL_PG_HI21_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_add_abs_lo12_nc then
    "R_AARCH64_ADD_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_abs_lo12_nc then
    "R_AARCH64_LDST8_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_abs_lo12_nc then
    "R_AARCH64_LDST16_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_abs_lo12_nc then
    "R_AARCH64_LDST32_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_abs_lo12_nc then
    "R_AARCH64_LDST64_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_abs_lo12_nc then
    "R_AARCH64_LDST128_ABS_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tstbr14 then
    "R_AARCH64_TSTBR14"
  else if Nat_big_num.equal rel_type1 r_aarch64_condbr19 then
    "R_AARCH64_CONBR19"
  else if Nat_big_num.equal rel_type1 r_aarch64_jump26 then
    "R_AARCH64_JUMP26"
  else if Nat_big_num.equal rel_type1 r_aarch64_call26 then
    "R_AARCH64_CALL26"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g0 then
    "R_AARCH64_MOVW_PREL_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g0_nc then
    "R_AARCH64_MOVW_PREL_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g1 then
    "R_AARCH64_MOVW_PREL_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g1_nc then
    "R_AARCH64_MOVW_PREL_G1_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g2 then
    "R_AARCH64_MOVW_PREL_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g2_nc then
    "R_AARCH64_MOVW_PREL_G2_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g3 then
    "R_AARCH64_MOVW_PREL_G3"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g0 then
    "R_AARCH64_MOVW_GOTOFF_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g0_nc then
    "R_AARCH64_MOVW_GOTOFF_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g1 then
    "R_AARCH64_MOVW_GOTOFF_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g1_nc then
    "R_AARCH64_MOVW_GOTOFF_G1_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g2 then
    "R_AARCH64_MOVW_GOTOFF_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g2_nc then
    "R_AARCH64_MOVW_GOTOFF_G2_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g3 then
    "R_AARCH64_MOVW_GOTOFF_G3"
  else if Nat_big_num.equal rel_type1 r_aarch64_gotrel64 then
    "R_AARCH64_GOTREL64"
  else if Nat_big_num.equal rel_type1 r_aarch64_gotrel32 then
    "R_AARCH64_GOTREL32"
  else if Nat_big_num.equal rel_type1 r_aarch64_got_ld_prel19 then
    "R_AARCH64_GOT_LD_PREL19"
  else if Nat_big_num.equal rel_type1 r_aarch64_got_ld64_gotoff_lo15 then
    "R_AARCH64_GOT_LD64_GOTOFF_LO15"
  else if Nat_big_num.equal rel_type1 r_aarch64_adr_got_page then
    "R_AARCH64_ADR_GOT_PAGE"
  else if Nat_big_num.equal rel_type1 r_aarch64_ld64_got_lo12_nc then
    "R_AARCH64_LD64_GOT_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ld64_gotpage_lo15 then
    "R_AARCH64_LD64_GOTPAGE_LO15"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_adr_prel21 then
    "R_AARCH64_TLSGD_ADR_PREL21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_adr_page21 then
    "R_AARCH64_TLSGD_ADR_PAGE21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_add_lo12_nc then
    "R_AARCH64_TLSGD_ADD_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_movw_g1 then
    "R_AARCH64_TLSGD_MOVW_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_movw_g0_nc then
    "R_AARCH64_TlSGD_MOVW_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_adr_prel21 then
    "R_AARCH64_TLSLD_ADR_PREL21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_adr_page21 then
    "R_AARCH64_TLSLD_ADR_PAGE21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_lo12_nc then
    "R_AARCH64_TLSLD_ADD_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_g1 then
    "R_AARCH64_TLSLD_MOVW_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_g0_nc then
    "R_AARCH64_TLSLD_MOVW_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ld_prel19 then
    "R_AARCH64_TLSLD_LD_PREL19"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g2 then
    "R_AARCH64_TLSLD_MOVW_DTPREL_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g1 then
    "R_AARCH64_TLSLD_MOVW_DTPREL_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g1_nc then
    "R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g0 then
    "R_AARCH64_TLSLD_MOVW_DTPREL_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g0_nc then
    "R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_hi12 then
    "R_AARCH64_TLSLD_ADD_DTPREL_HI12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_lo12 then
    "R_AARCH64_TLSLD_ADD_DTPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12 then
    "R_AARCH64_TLSLD_LDST8_DTPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12 then
    "R_AARCH64_TLSLD_LDST16_DTPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12 then
    "R_AARCH64_TLSLD_LDST32_DTPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12 then
    "R_AARCH64_TLSLD_LDST64_DPTREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12 then
    "R_AARCH64_TLSLD_LDST128_DTPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
    "R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_g1 then
    "R_AARCH64_TLSIE_MOVW_GOTTPREL_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_g0_nc then
    "R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_page21 then
    "R_AARCH64_TLSIE_MOVW_GOTTPREL_PAGE21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_lo12_nc then
    "R_AARCH64_TLSIE_MOVW_GOTTPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_prel19 then
    "R_AARCH64_TLSIE_MOVW_GOTTPREL_PREL19"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g2 then
    "R_AARCH64_TLSLE_MOVW_TPREL_G2"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g1 then
    "R_AARCH64_TLSLE_MOVW_TPREL_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g1_nc then
    "R_AARCH64_TLSLE_MOVW_TPREL_G1_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g0 then
    "R_AARCH64_TLSLE_MOVW_TPREL_G0"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g0_nc then
    "R_AARCH64_TLSLE_MOVW_TPREL_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_hi12 then
    "R_AARCH64_ADD_TPREL_HI12"
  else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_lo12 then
    "R_AARCH64_ADD_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_lo12_nc then
    "R_AARCH64_ADD_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_tprel_lo12 then
    "R_AARCH64_LDST8_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_tprel_lo12_nc then
    "R_AARCH64_LDST8_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_tprel_lo12 then
    "R_AARCH64_LDST16_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_tprel_lo12_nc then
    "R_AARCH64_LDST16_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_tprel_lo12 then
    "R_AARCH64_LDST32_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_tprel_lo12_nc then
    "R_AARCH64_LDST32_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_tprel_lo12 then
    "R_AARCH64_LDST64_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_tprel_lo12_nc then
    "R_AARCH64_LDST64_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_tprel_lo12 then
    "R_AARCH64_LDST128_TPREL_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_tprel_lo12_nc then
    "R_AARCH64_LDST128_TPREL_LO12_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ld_prel19 then
    "R_AARCH64_TLSDESC_LS_PREL19"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_adr_prel21 then
    "R_AARCH64_TLSDESC_ADR_PREL21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_adr_page21 then
    "R_AARCH64_TLSDESC_ADR_PAGE21"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ld64_lo12 then
    "R_AARCH64_TLSDESC_LD64_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_add_lo12 then
    "R_AARCH64_TLSDESC_ADD_LO12"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_off_g1 then
    "R_AARCH64_TLSDESC_OFF_G1"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_off_g0_nc then
    "R_AARCH64_TLSDESC_OFF_G0_NC"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ldr then
    "R_AARCH64_TLSDESC_LDR"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_add then
    "R_AARCH64_TLSDESC_ADD"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_call then
    "R_AARCH64_TLSDESC_CALL"
  else if Nat_big_num.equal rel_type1 r_aarch64_copy then
    "R_AARCH64_COPY"
  else if Nat_big_num.equal rel_type1 r_aarch64_glob_dat then
    "R_AARCH64_GLOB_DAT"
  else if Nat_big_num.equal rel_type1 r_aarch64_jump_slot then
    "R_AARCH64_JUMP_SLOT"
  else if Nat_big_num.equal rel_type1 r_aarch64_relative then
    "R_AARCH64_RELATIVE"
  else if Nat_big_num.equal rel_type1 r_aarch64_tls_dtprel64 then
    "R_AARCH64_DTPREL64"
  else if Nat_big_num.equal rel_type1 r_aarch64_tls_dtpmod64 then
    "R_AARCH64_DTPMOD64"
  else if Nat_big_num.equal rel_type1 r_aarch64_tls_tprel64 then
    "R_AARCH64_TPREL64"
  else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc then
    "R_AARCH64_TLSDESC"
  else if Nat_big_num.equal rel_type1 r_aarch64_irelative then
    "R_AARCH64_IRELATIVE"
  else
    "Invalid AARCH64 relocation type")

(*val aarch64_le_reloc : forall 'abifeature. reloc_fn 'abifeature*)
let aarch64_le_reloc r:bool*('abifeature annotated_memory_image ->Nat_big_num.num ->symbol_reference_and_reloc_site ->Nat_big_num.num*(Nat_big_num.num ->Nat_big_num.num ->Nat_big_num.num ->Nat_big_num.num))=  
 (if Nat_big_num.equal r r_aarch64_none then
    (false, (fun img2 -> (fun site_addr -> (fun rr -> (Nat_big_num.of_int 0, (fun s -> fun a -> fun e -> e))))))
  else
    (false, noop_reloc_apply))
    
(** [abi_aarch64_apply_relocation rel s_val p_val got_val ef] produces an AST
  * of the relocation calculation for relocation type [rel] using [s_val], [p_val],
  * and [got_val] as primitive components.
  *
  * TODO: unclear from ABI spec. whether overflow check on relocations is
  * supposed to cause relocation to fail if not satisfied or whether there is
  * wrap-around.  Resolve.
  *)
(*val abi_aarch64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> elf64_file ->
    error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
let abi_aarch64_apply_relocation rel s_val p_val got_val ef:(((Uint64.uint64),((Nat_big_num.num)relocation_operator_expression*integer_bit_width*(Nat_big_num.num)can_fail))Pmap.map)error=  
 (if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type1 = (get_elf64_relocation_a_type rel) in
    let a_val    = (Nat_big_num.of_int64 rel.elf64_ra_addend) in
      (** No width, no calculation *)
      if Nat_big_num.equal rel_type1 r_aarch64_none then
        return (Pmap.empty compare)
      (** No width, no calculation *)
      else if Nat_big_num.equal rel_type1 r_aarch64_withdrawn then
        return (Pmap.empty compare)
      (** Signed 64 bit width, calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_aarch64_abs64 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Signed 32 bit width, calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_aarch64_abs32 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Signed 16 bith width, calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_aarch64_abs16 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Signed 64 bit width, calculation: S + A - P *)
      else if Nat_big_num.equal rel_type1 r_aarch64_prel64 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Signed 32 bit width, calculation: S + A - P *)
      else if Nat_big_num.equal rel_type1 r_aarch64_prel32 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Signed 16 bit width, calculation: S + A - P *)
      else if Nat_big_num.equal rel_type1 r_aarch64_prel16 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g0 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g0_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g1 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g1_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g2 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U48, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g2_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U48, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_uabs_g3 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g0 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g1 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_sabs_g2 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I48, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ld_prel_lo19 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_lo21 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_pg_hi21 then
      	let result = (Minus(Apply(Page, Lift ( Nat_big_num.add s_val a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_adr_prel_pg_hi21_nc then
      	let result = (Minus (Apply(Page, Lift ( Nat_big_num.add s_val a_val)), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_add_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_abs_lo12_nc then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tstbr14 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_condbr19 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_jump26 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I27, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_call26 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I27, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g0 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g0_nc then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g1 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g1_nc then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g2 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I48, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g2_nc then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I48, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_prel_g3 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g0 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g0_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g1 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g1_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g2 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I48, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g2_nc then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_movw_gotoff_g3 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_gotrel64 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_gotrel32 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_got_ld_prel19 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_got_ld64_gotoff_lo15 then
      	let result = (Minus (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_adr_got_page then
      	let result = (Minus (Apply(Page, Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ld64_got_lo12_nc then
        (** requires ad hoc check *)
      	let result = (Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ld64_gotpage_lo15 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply(GDat, Lift ( Nat_big_num.add s_val a_val))), Apply(Page, Lift got_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_adr_prel21 then
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_add_lo12_nc then
      	let result = (Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_movw_g1 then
        (** requires ad hoc check *)
      	let result = (Minus(Apply(G, Apply2(GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsgd_movw_g0_nc then
      	let result = (Minus(Apply(G, Apply2 (GTLSIdx, Lift s_val, Lift a_val)), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_adr_prel21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_adr_page21 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_lo12_nc then
        let result = (Apply(G, Apply(GLDM, Lift s_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_g1 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_g0_nc then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ld_prel19 then
        let result = (Minus(Apply(G, Apply(GLDM, Lift s_val)), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g2 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g1 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g1_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g0 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_movw_dtprel_g0_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_hi12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U24, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_add_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst8_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst16_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst32_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst64_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12 then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsld_ldst128_dtprel_lo12_nc then
        let result = (Apply(DTPRel, Lift( Nat_big_num.add s_val a_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_g1 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_g0_nc then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I15, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_page21 then
        let result = (Minus(Apply(Page, Apply(G, Apply(GTPRel, Lift ( Nat_big_num.add s_val a_val)))), Apply(Page, Lift p_val))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_lo12_nc then
        (** requires ad hoc check *)
        let result = (Apply(G, Apply(GTPRel, Lift ( Nat_big_num.add s_val a_val)))) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I8, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsie_movw_gottprel_prel19 then
        let result = (Minus(Apply(G, Apply(GTPRel, Lift ( Nat_big_num.add s_val a_val))), Lift p_val)) in
       	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g2 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g1 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g1_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g0 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsle_movw_tprel_g0_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_hi12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U24, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_add_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst8_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst16_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst32_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst64_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_tprel_lo12 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_ldst128_tprel_lo12_nc then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, U12, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ld_prel19 then
        (** requires ad hoc test *)
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_adr_prel21 then
      	let result = (Minus (Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val))), Lift p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_adr_page21 then
      	let result = (Minus(Apply(Page, Apply(G, Apply(GTLSDesc, Lift( Nat_big_num.add s_val a_val)))), Apply(Page, Lift p_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ld64_lo12 then
        (** requires ad hoc test *)
      	let result = (Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I20, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_add_lo12 then
      	let result = (Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val)))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_off_g1 then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_off_g0_nc then
      	let result = (Minus(Apply(G, Apply(GTLSDesc, Lift ( Nat_big_num.add s_val a_val))), Lift got_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_ldr then
        return (Pmap.empty compare)
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_add then
        return (Pmap.empty compare)
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc_call then
        return (Pmap.empty compare)
      else if Nat_big_num.equal rel_type1 r_aarch64_copy then
        fail "AARCH64_COPY"
      else if Nat_big_num.equal rel_type1 r_aarch64_glob_dat then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_jump_slot then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_relative then
      	let result = (Plus(Apply(Delta, Lift s_val), Lift a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tls_dtprel64 then
      	let result = (Apply(DTPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tls_dtpmod64 then
      	let result = (Apply(LDM, Lift s_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tls_tprel64 then
      	let result = (Apply(TPRel, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_tlsdesc then
      	let result = (Apply(TLSDesc, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_aarch64_irelative then
      	let result = (Apply(Indirect, Plus (Apply(Delta, Lift s_val), Lift a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else
        fail "Invalid AARCH64 relocation type"
  else
  	fail "abi_aarch64_apply_relocation: not a relocatable file")
