(*Generated by Lem from abis/power64/abi_power64_relocation.lem.*)
(** [abi_power64_relocation] contains types and definitions specific to
  * relocations in the Power64 ABI
  *)

open Lem_basic_classes
open Lem_map
open Lem_maybe
open Lem_num
open Lem_string

open Error
open Missing_pervasives

open Elf_types_native_uint
open Elf_file
open Elf_header
open Elf_relocation
open Elf_symbol_table

open Abi_utilities

(** Power64 relocation types *)

let r_ppc64_none : Nat_big_num.num= (Nat_big_num.of_int 0)
let r_ppc64_addr32 : Nat_big_num.num= (Nat_big_num.of_int 1)
let r_ppc64_addr24 : Nat_big_num.num= (Nat_big_num.of_int 2)
let r_ppc64_addr16 : Nat_big_num.num= (Nat_big_num.of_int 3)
let r_ppc64_addr16_lo : Nat_big_num.num= (Nat_big_num.of_int 4)
let r_ppc64_addr16_hi : Nat_big_num.num= (Nat_big_num.of_int 5)
let r_ppc64_addr16_ha : Nat_big_num.num= (Nat_big_num.of_int 6)
let r_ppc64_addr14 : Nat_big_num.num= (Nat_big_num.of_int 7)
let r_ppc64_addr14_brtaken : Nat_big_num.num= (Nat_big_num.of_int 8)
let r_ppc64_addr14_brntaken : Nat_big_num.num= (Nat_big_num.of_int 9)
let r_ppc64_rel24 : Nat_big_num.num= (Nat_big_num.of_int 10)
let r_ppc64_rel14 : Nat_big_num.num= (Nat_big_num.of_int 11)
let r_ppc64_rel14_brtaken : Nat_big_num.num= (Nat_big_num.of_int 12)
let r_ppc64_rel14_brntaken : Nat_big_num.num= (Nat_big_num.of_int 13)
let r_ppc64_got16 : Nat_big_num.num= (Nat_big_num.of_int 14)
let r_ppc64_got16_lo : Nat_big_num.num= (Nat_big_num.of_int 15)
let r_ppc64_got16_hi : Nat_big_num.num= (Nat_big_num.of_int 16)
let r_ppc64_got16_ha : Nat_big_num.num= (Nat_big_num.of_int 17)
let r_ppc64_copy : Nat_big_num.num= (Nat_big_num.of_int 19)
let r_ppc64_glob_dat : Nat_big_num.num= (Nat_big_num.of_int 20)
let r_ppc64_jmp_slot : Nat_big_num.num= (Nat_big_num.of_int 21)
let r_ppc64_relative : Nat_big_num.num= (Nat_big_num.of_int 22)
let r_ppc64_uaddr32 : Nat_big_num.num= (Nat_big_num.of_int 24)
let r_ppc64_uaddr16 : Nat_big_num.num= (Nat_big_num.of_int 25)
let r_ppc64_rel32 : Nat_big_num.num= (Nat_big_num.of_int 26)
let r_ppc64_plt32 : Nat_big_num.num= (Nat_big_num.of_int 27)
let r_ppc64_pltrel32 : Nat_big_num.num= (Nat_big_num.of_int 28)
let r_ppc64_plt16_lo : Nat_big_num.num= (Nat_big_num.of_int 29)
let r_ppc64_plt16_hi : Nat_big_num.num= (Nat_big_num.of_int 30)
let r_ppc64_plt16_ha : Nat_big_num.num= (Nat_big_num.of_int 31)
let r_ppc64_sectoff : Nat_big_num.num= (Nat_big_num.of_int 33)
let r_ppc64_sectoff_lo : Nat_big_num.num= (Nat_big_num.of_int 34)
let r_ppc64_sectoff_hi : Nat_big_num.num= (Nat_big_num.of_int 35)
let r_ppc64_sectoff_ha : Nat_big_num.num= (Nat_big_num.of_int 36)
let r_ppc64_addr30 : Nat_big_num.num= (Nat_big_num.of_int 37)
let r_ppc64_addr64 : Nat_big_num.num= (Nat_big_num.of_int 38)
let r_ppc64_addr16_higher : Nat_big_num.num= (Nat_big_num.of_int 39)
let r_ppc64_addr16_highera : Nat_big_num.num= (Nat_big_num.of_int 40)
let r_ppc64_addr16_highest : Nat_big_num.num= (Nat_big_num.of_int 41)
let r_ppc64_addr16_highesta : Nat_big_num.num= (Nat_big_num.of_int 42)
let r_ppc64_uaddr64 : Nat_big_num.num= (Nat_big_num.of_int 43)
let r_ppc64_rel64 : Nat_big_num.num= (Nat_big_num.of_int 44)
let r_ppc64_plt64 : Nat_big_num.num= (Nat_big_num.of_int 45)
let r_ppc64_pltrel64 : Nat_big_num.num= (Nat_big_num.of_int 46)
let r_ppc64_toc16 : Nat_big_num.num= (Nat_big_num.of_int 47)
let r_ppc64_toc16_lo : Nat_big_num.num= (Nat_big_num.of_int 48)
let r_ppc64_toc16_hi : Nat_big_num.num= (Nat_big_num.of_int 49)
let r_ppc64_toc16_ha : Nat_big_num.num= (Nat_big_num.of_int 50)
let r_ppc64_toc : Nat_big_num.num= (Nat_big_num.of_int 51)
let r_ppc64_pltgot16 : Nat_big_num.num= (Nat_big_num.of_int 52)
let r_ppc64_pltgot16_lo : Nat_big_num.num= (Nat_big_num.of_int 53)
let r_ppc64_pltgot16_hi : Nat_big_num.num= (Nat_big_num.of_int 54)
let r_ppc64_pltgot16_ha : Nat_big_num.num= (Nat_big_num.of_int 55)
let r_ppc64_addr16_ds : Nat_big_num.num= (Nat_big_num.of_int 56)
let r_ppc64_addr16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 57)
let r_ppc64_got16_ds : Nat_big_num.num= (Nat_big_num.of_int 58)
let r_ppc64_got16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 59)
let r_ppc64_plt16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 60)
let r_ppc64_sectoff_ds : Nat_big_num.num= (Nat_big_num.of_int 61)
let r_ppc64_sectoff_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 62)
let r_ppc64_toc16_ds : Nat_big_num.num= (Nat_big_num.of_int 63)
let r_ppc64_toc16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 64)
let r_ppc64_pltgot16_ds : Nat_big_num.num= (Nat_big_num.of_int 65)
let r_ppc64_pltgot16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 66)
let r_ppc64_tls : Nat_big_num.num= (Nat_big_num.of_int 67)
let r_ppc64_dtpmod64 : Nat_big_num.num= (Nat_big_num.of_int 68)
let r_ppc64_tprel16 : Nat_big_num.num= (Nat_big_num.of_int 69)
let r_ppc64_tprel16_lo : Nat_big_num.num= (Nat_big_num.of_int 60)
let r_ppc64_tprel16_hi : Nat_big_num.num= (Nat_big_num.of_int 71)
let r_ppc64_tprel16_ha : Nat_big_num.num= (Nat_big_num.of_int 72)
let r_ppc64_tprel64 : Nat_big_num.num= (Nat_big_num.of_int 73)
let r_ppc64_dtprel16 : Nat_big_num.num= (Nat_big_num.of_int 74)
let r_ppc64_dtprel16_lo : Nat_big_num.num= (Nat_big_num.of_int 75)
let r_ppc64_dtprel16_hi : Nat_big_num.num= (Nat_big_num.of_int 76)
let r_ppc64_dtprel16_ha : Nat_big_num.num= (Nat_big_num.of_int 77)
let r_ppc64_dtprel64 : Nat_big_num.num= (Nat_big_num.of_int 78)
let r_ppc64_got_tlsgd16 : Nat_big_num.num= (Nat_big_num.of_int 79)
let r_ppc64_got_tlsgd16_lo : Nat_big_num.num= (Nat_big_num.of_int 80)
let r_ppc64_got_tlsgd16_hi : Nat_big_num.num= (Nat_big_num.of_int 81)
let r_ppc64_got_tlsgd16_ha : Nat_big_num.num= (Nat_big_num.of_int 82)
let r_ppc64_got_tlsld16 : Nat_big_num.num= (Nat_big_num.of_int 83)
let r_ppc64_got_tlsld16_lo : Nat_big_num.num= (Nat_big_num.of_int 84)
let r_ppc64_got_tlsld16_hi : Nat_big_num.num= (Nat_big_num.of_int 85)
let r_ppc64_got_tlsld16_ha : Nat_big_num.num= (Nat_big_num.of_int 86)
let r_ppc64_got_tprel16_ds : Nat_big_num.num= (Nat_big_num.of_int 87)
let r_ppc64_got_tprel16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 88)
let r_ppc64_got_tprel16_hi : Nat_big_num.num= (Nat_big_num.of_int 89)
let r_ppc64_got_tprel16_ha : Nat_big_num.num= (Nat_big_num.of_int 90)
let r_ppc64_got_dtprel16_ds : Nat_big_num.num= (Nat_big_num.of_int 91)
let r_ppc64_got_dtprel16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 92)
let r_ppc64_got_dtprel16_hi : Nat_big_num.num= (Nat_big_num.of_int 93)
let r_ppc64_got_dtprel16_ha : Nat_big_num.num= (Nat_big_num.of_int 94)
let r_ppc64_tprel16_ds : Nat_big_num.num= (Nat_big_num.of_int 95)
let r_ppc64_tprel16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 96)
let r_ppc64_tprel16_higher : Nat_big_num.num= (Nat_big_num.of_int 97)
let r_ppc64_tprel16_highera : Nat_big_num.num= (Nat_big_num.of_int 98)
let r_ppc64_tprel16_highest : Nat_big_num.num= (Nat_big_num.of_int 99)
let r_ppc64_tprel16_highesta : Nat_big_num.num= (Nat_big_num.of_int 100)
let r_ppc64_dtprel16_ds : Nat_big_num.num= (Nat_big_num.of_int 101)
let r_ppc64_dtprel16_lo_ds : Nat_big_num.num= (Nat_big_num.of_int 102)
let r_ppc64_dtprel16_higher : Nat_big_num.num= (Nat_big_num.of_int 103)
let r_ppc64_dtprel16_highera : Nat_big_num.num= (Nat_big_num.of_int 104)
let r_ppc64_dtprel16_highest : Nat_big_num.num= (Nat_big_num.of_int 105)
let r_ppc64_dtprel16_highesta : Nat_big_num.num= (Nat_big_num.of_int 106)

(** [string_of_ppc64_relocation_type rel_type] produces a string representation
  * of relocation type [rel_type].
  *)
(*val string_of_ppc64_relocation_type : natural -> string*)
let string_of_ppc64_relocation_type rel_type1:string=  
 (if Nat_big_num.equal rel_type1 r_ppc64_none then
    "R_PPC64_NONE"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr32 then
  	"R_PPC64_ADDR32"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr24 then
    "R_PPC64_ADDR24"
	else if Nat_big_num.equal rel_type1 r_ppc64_addr16 then
	  "R_PPC64_ADDR16"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_lo then
    "R_PPC64_ADDR16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_hi then
    "R_PPC64_ADDR16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_ha then
    "R_PPC64_ADDR16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr14 then
    "R_PPC64_ADDR14"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr14_brtaken then
    "R_PPC64_ADDR14_BRTAKEN"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr14_brntaken then
    "R_PPC64_ADDR14_BRNTAKEN"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel24 then
    "R_PPC64_REL24"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel14 then
    "R_PPC64_REL14"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel14_brtaken then
    "R_PPC64_REL14_BRTAKEN"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel14_brntaken then
    "R_PPC64_REL14_BRNTAKEN"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16 then
    "R_PPC64_GOT16"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16_lo then
    "R_PPC64_GOT16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16_hi then
    "R_PPC64_GOT16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16_ha then
    "R_PPC64_GOT16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_copy then
    "R_PPC64_COPY"
  else if Nat_big_num.equal rel_type1 r_ppc64_glob_dat then
    "R_PPC64_GLOB_DAT"
  else if Nat_big_num.equal rel_type1 r_ppc64_jmp_slot then
    "R_PPC64_JMP_SLOT"
  else if Nat_big_num.equal rel_type1 r_ppc64_relative then
    "R_PPC64_RELATIVE"
  else if Nat_big_num.equal rel_type1 r_ppc64_uaddr32 then
    "R_PPC64_UADDR32"
  else if Nat_big_num.equal rel_type1 r_ppc64_uaddr16 then
    "R_PPC64_UADDR16"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel32 then
    "R_PPC64_REL32"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt32 then
    "R_PPC64_PLT32"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltrel32 then
    "R_PPC64_PLTREL32"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt16_lo then
    "R_PPC64_PLT16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt16_hi then
    "R_PPC64_PLT16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt16_ha then
    "R_PPC64_PLT16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff then
    "R_PPC64_SECTOFF"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_lo then
    "R_PPC64_SECTOFF_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_hi then
    "R_PPC64_SECTOFF_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_ha then
    "R_PPC64_SECTOFF_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr30 then
    "R_PPC64_ADDR30"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr64 then
    "R_PPC64_ADDR64"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_higher then
    "R_PPC64_ADDR16_HIGHER"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highera then
    "R_PPC64_ADDR16_HIGHERA"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highest then
    "R_PPC64_ADDR16_HIGHEST"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highesta then
    "R_PPC64_ADDR16_HIGHESTA"
  else if Nat_big_num.equal rel_type1 r_ppc64_uaddr64 then
    "R_PPC64_UADDR64"
  else if Nat_big_num.equal rel_type1 r_ppc64_rel64 then
    "R_PPC64_REL64"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt64 then
    "R_PPC64_PLT64"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltrel64 then
    "R_PPC64_PLTREL64"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16 then
    "R_PPC64_TOC16"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16_lo then
    "R_PPC64_TOC16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16_hi then
    "R_PPC64_TOC16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16_ha then
    "R_PPC64_TOC16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc then
    "R_PPC64_TOC"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16 then
    "R_PPC64_PLTGOT16"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_lo then
    "R_PPC64_PLTGOT16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_hi then
    "R_PPC64_PLTGOT16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_ha then
    "R_PPC64_PLTGOT16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_ds then
    "R_PPC64_ADDR16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_addr16_lo_ds then
    "R_PPC64_ADDR16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16_ds then
    "R_PPC64_GOT16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got16_lo_ds then
    "R_PPC64_GOT16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_plt16_lo_ds then
    "R_PPC64_PLT16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_ds then
    "R_PPC64_SECTOFF_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_lo_ds then
    "R_PPC64_SECTOFF_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16_ds then
    "R_PPC64_TOC16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_toc16_lo_ds then
    "R_PPC64_TOC16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_ds then
    "R_PPC64_PLTGOT16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_lo_ds then
    "R_PPC64_PLTGOT16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_tls then
    "R_PPC64_TLS"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtpmod64 then
    "R_PPC64_DTPMOD64"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16 then
    "R_PPC64_TPREL16"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_lo then
    "R_PPC64_TPREL16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_hi then
    "R_PPC64_TPREL16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_ha then
    "R_PPC64_TPREL16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel64 then
    "R_PPC64_TPREL64"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16 then
    "R_PPC64_DTPREL16"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_lo then
    "R_PPC64_DTPREL16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_hi then
    "R_PPC64_DTPREL16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_ha then
    "R_PPC64_DTPREL16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel64 then
    "R_PPC64_DTPREL64"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16 then
    "R_PPC64_GOT_TLSGD16"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_lo then
    "R_PPC64_GOT_TLSGD16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_hi then
    "R_PPC64_GOT_TLSGD16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_ha then
    "R_PPC64_GOT_TLSGD16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16 then
    "R_PPC64_GOT_TLSLD16"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_lo then
    "R_PPC64_GOT_TLSLD16_LO"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_hi then
    "R_PPC64_GOT_TLSLD16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_ha then
    "R_PPC64_GOT_TLSLD16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_ds then
    "R_PPC64_GOT_TPREL16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_lo_ds then
    "R_PPC64_GOT_TPREL16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_hi then
    "R_PPC64_GOT_TPREL16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_ha then
    "R_PPC64_GOT_TPREL16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_ds then
    "R_PPC64_GOT_DTPREL16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_lo_ds then
    "R_PPC64_GOT_DTPREL16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_hi then
    "R_PPC64_GOT_DTPREL16_HI"
  else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_ha then
    "R_PPC64_GOT_DTPREL16_HA"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_ds then
    "R_PPC64_TPREL16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_lo_ds then
    "R_PPC64_TPREL16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_higher then
    "R_PPC64_TPREL16_HIGHER"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highera then
    "R_PPC64_TPREL16_HIGHERA"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highest then
    "R_PPC64_TPREL16_HIGHEST"
  else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highesta then
    "R_PPC64_TPREL16_HIGHESTA"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_ds then
    "R_PPC64_DTPREL16_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_lo_ds then
    "R_PPC64_DTPREL16_LO_DS"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_higher then
    "R_PPC64_DTPREL16_HIGHER"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highera then
    "R_PPC64_DTPREL16_HIGHERA"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highest then
    "R_PPC64_DTPREL16_HIGHEST"
  else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highesta then
    "R_PPC64_DTPREL16_HIGHESTA"
  else
    "Invalid Power64 relocation type")

(*val abi_ppc64_apply_relocation : elf64_relocation_a -> integer -> integer ->
  integer -> integer -> integer -> integer -> integer -> integer -> integer ->
    integer -> integer -> integer -> integer -> integer -> integer -> elf64_file ->
      error (Map.map elf64_addr (relocation_operator_expression integer * integer_bit_width * can_fail integer))*)
let abi_ppc64_apply_relocation rel s_val b_val p_val l_val g_val r_val m_val
          toc_val dtpmod_val tprel_val dtprel_val gottlsgd_val gottlsld_val
          gottprel_val gotdtprel_val ef:(((Uint64.uint64),((Nat_big_num.num)relocation_operator_expression*integer_bit_width*(Nat_big_num.num)can_fail))Pmap.map)error=  
 (if is_elf64_relocatable_file ef.elf64_file_header then
    let rel_type1 = (extract_elf64_relocation_r_type rel.elf64_ra_info) in
    let a_val    = (Nat_big_num.of_int64 rel.elf64_ra_addend) in
      (** No width, no calculation *)
      if Nat_big_num.equal rel_type1 r_ppc64_none then
        return (Pmap.empty compare)
      (** Width: 32 Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr32 then
      	let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Width: Low24 Calculation: (S + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr24 then
        let result = (RShift (Lift( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low24, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: S + A *)
    	else if Nat_big_num.equal rel_type1 r_ppc64_addr16 then
        let result = (Lift ( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_lo then
        let result = (Apply(Lo, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_hi then
        let result = (Apply(Hi, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_ha then
        let result = (Apply(Ha, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr14 then
        let result = (RShift(Lift( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr14_brtaken then
        let result = (RShift(Lift( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: (S + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr14_brntaken then
        let result = (RShift(Lift( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Low24 Calculation: ((S + A) - P) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel24 then
        let result = (RShift(Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low24, CanFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel14 then
        let result = (RShift(Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel14_brtaken then
        let result = (RShift(Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Low14 Calculation: ((S + A) - P) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel14_brntaken then
        let result = (RShift(Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Low14, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: G *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16 then
        let result = (Lift g_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo(G) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16_lo then
        let result = (Apply(Lo, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi(G) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16_hi then
        let result = (Apply(Hi, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha(G) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16_ha then
        let result = (Apply(Ha, Lift g_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** No width, no calculation *)
      else if Nat_big_num.equal rel_type1 r_ppc64_copy then
        fail "abi_ppc64_apply_relocation: r_ppc64_copy not implemented"
      (** Width I64, Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_glob_dat then
        let result = (Lift( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** No width, dynamic link calculation *)
      else if Nat_big_num.equal rel_type1 r_ppc64_jmp_slot then
        fail "abi_ppc64_apply_relocation: r_ppc64_jmp_slot not implemented"
      (** Width I64, Calculation: B + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_relative then
        let result = (Lift( Nat_big_num.add b_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: I32 Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_uaddr32 then
        let result = (Lift( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_uaddr16 then
        let result = (Lift( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: I32 Calculation: (S + A) - P *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel32 then
        let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Width: I32 Calculation: L *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt32 then
        let result = (Lift l_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Width: I32 Calculation: L - P *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltrel32 then
        let result = (Lift ( Nat_big_num.sub l_val p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I32, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo(L) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt16_lo then
        let result = (Apply(Lo, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi(L) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt16_hi then
        let result = (Apply(Hi, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha(L) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt16_ha then
        let result = (Apply(Ha, Lift l_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: R + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff then
        let result = (Lift( Nat_big_num.add r_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo(R + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_lo then
        let result = (Apply(Lo, Lift ( Nat_big_num.add r_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi(R + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_hi then
        let result = (Apply(Hi, Lift ( Nat_big_num.add r_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha(R + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_ha then
        let result = (Apply(Ha, Lift ( Nat_big_num.add r_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Word30 Calculation: ((S + A) - P) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr30 then
        let result = (RShift(Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Word30, CannotFail) (Pmap.empty compare))
      (** Width: I64 Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr64 then
        let result = (Lift( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #higher(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_higher then
        let result = (Apply(Higher, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #highera(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highera then
        let result = (Apply(HigherA, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #highest(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highest then
        let result = (Apply(Highest, Lift ( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #highesta(S + A) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_highesta then
        let result = (Apply(HighestA, Lift( Nat_big_num.add s_val a_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: I64 Calculation: S + A *)
      else if Nat_big_num.equal rel_type1 r_ppc64_uaddr64 then
        let result = (Lift( Nat_big_num.add s_val a_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: I64 Calculation: (S + A) - P *)
      else if Nat_big_num.equal rel_type1 r_ppc64_rel64 then
        let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: I64 Calculation: L *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt64 then
      	let result = (Lift l_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: I64 Calculation: L - P *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltrel64 then
      	let result = (Lift( Nat_big_num.sub l_val p_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: (S + A) - TOC *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16 then
      	let result = (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo((S + A) - TOC) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16_lo then
      	let result = (Apply (Lo, Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi((S + A) - TOC) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16_hi then
      	let result = (Apply(Hi, Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha((S + A) - TOC) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16_ha then
      	let result = (Apply(Ha, Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: I64 Calculation: .TOC *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc then
      	let result = (Lift toc_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: M *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16 then
      	let result = (Lift m_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #lo(M) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_lo then
      	let result = (Apply(Lo, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #hi(M) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_hi then
      	let result = (Apply(Hi, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16 Calculation: #ha(M) *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_ha then
      	let result = (Apply(Ha, Lift m_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: (S + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_ds then
      	let result = (RShift(Lift ( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo((S + A) >> 2) *)    
      else if Nat_big_num.equal rel_type1 r_ppc64_addr16_lo_ds then
      	let result = (Apply(Lo, RShift(Lift ( Nat_big_num.add s_val a_val),Nat_big_num.of_int 2))) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: G >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16_ds then
      	let result = (RShift(Lift g_val,Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo(G) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_got16_lo_ds then
      	let result = (RShift(Apply(Lo, Lift g_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo(L) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_plt16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift l_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: (R + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_ds then
      	let result = (RShift (Lift ( Nat_big_num.add r_val a_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo(R + A) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_sectoff_lo_ds then
      	let result = (RShift(Apply(Lo, Lift ( Nat_big_num.add r_val a_val)),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: ((S + A) - TOC) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16_ds then
      	let result = (RShift (Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo((S + A) - TOC) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_toc16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift ( Nat_big_num.sub( Nat_big_num.add s_val a_val) toc_val)),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: M >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_ds then
      	let result = (RShift(Lift m_val,Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      (** Width: Half16ds Calculation: #lo(M) >> 2 *)
      else if Nat_big_num.equal rel_type1 r_ppc64_pltgot16_lo_ds then
      	let result = (RShift (Apply(Lo, Lift m_val),Nat_big_num.of_int 2)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      (** No width, no calculation *)
      else if Nat_big_num.equal rel_type1 r_ppc64_tls then
        fail "abi_ppc64_apply_relocation: r_ppc64_tls not implemented"
      (** Width I64 Calculation: @dtpmod *)
      else if Nat_big_num.equal rel_type1 r_ppc64_dtpmod64 then
      	let result = (Lift dtpmod_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16 then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_lo then
        let result = (Apply(Lo, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_hi then
      	let result = (Apply(Hi, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_ha then
      	let result = (Apply(Ha, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel64 then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16 then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_lo then
      	let result = (Apply(Lo, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_hi then
      	let result = (Apply(Hi, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_ha then
      	let result = (Apply(Ha, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel64 then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I64, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16 then
      	let result = (Lift gottlsgd_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_lo then
      	let result = (Apply(Lo, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_hi then
      	let result = (Apply(Hi, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsgd16_ha then
      	let result = (Apply(Ha, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16 then
      	let result = (Lift gottlsgd_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_lo then
      	let result = (Apply(Lo, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_hi then
      	let result = (Apply(Hi, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tlsld16_ha then
      	let result = (Apply(Ha, Lift gottlsgd_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_ds then
      	let result = (Lift gottprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_lo_ds then
      	let result = (Apply(Lo, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_hi then
      	let result = (Apply(Hi, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_tprel16_ha then
      	let result = (Apply(Ha, Lift gottprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_ds then
      	let result = (Lift gotdtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_lo_ds then
      	let result = (Apply(Lo, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_hi then
      	let result = (Apply(Hi, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_got_dtprel16_ha then
      	let result = (Apply(Ha, Lift gotdtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_ds then
      	let result = (Lift tprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_lo_ds then
      	let result = (Apply(Lo, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_higher then
      	let result = (Apply(Higher, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highera then
      	let result = (Apply(HigherA, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highest then
      	let result = (Apply(Highest, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_tprel16_highesta then
      	let result = (Apply(HighestA, Lift tprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_ds then
      	let result = (Lift dtprel_val) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CanFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_lo_ds then
      	let result = (Apply(Lo, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, Half16ds, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_higher then
      	let result = (Apply(Higher, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highera then
      	let result = (Apply(HigherA, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highest then
      	let result = (Apply(Highest, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else if Nat_big_num.equal rel_type1 r_ppc64_dtprel16_highesta then
      	let result = (Apply(HighestA, Lift dtprel_val)) in
      	let addr   = (rel.elf64_ra_offset) in
      	return (Pmap.add addr (result, I16, CannotFail) (Pmap.empty compare))
      else
        fail "abi_ppc64_apply_relocation: unrecognised relocation type"  
  else
  	fail "abi_ppc64_apply_relocation: not a relocatable file")
