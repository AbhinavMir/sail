(*Generated by Sail from riscv.*)
Require Import Sail2_instr_kinds.
Require Import Sail2_values.
Require Import Sail2_string.
Require Import Sail2_operators_mwords.
Require Import Sail2_prompt_monad.
Require Import Sail2_prompt.
Require Import Sail2_state.
Require Import riscv_types.
Require Import riscv_extras.
Import ListNotations.
Open Scope string.
Open Scope bool.
Section Content.

Definition spc_forwards '(tt : unit)  : string := " ".

Definition spc_backwards (s : string)  : unit := tt.

Definition opt_spc_forwards '(tt : unit)  : string := "".

Definition opt_spc_backwards (s : string)  : unit := tt.

Definition def_spc_forwards '(tt : unit)  : string := " ".

Definition def_spc_backwards (s : string)  : unit := tt.

Axiom eq_real : forall  (_ : real) (_ : real) , bool.

Axiom vcons : forall {n : Z} {a : Type} (_ : a) (_ : vec a n) , vec a (n + 1).

Axiom vector_concat : forall {n : Z} {m : Z} {a : Type} (_ : vec a n) (_ : vec a m) , vec a (n + m).

Definition neq_atom (x : Z) (y : Z)  : bool := negb (Z.eqb x y).

Definition neq_int (x : Z) (y : Z)  : bool := negb (Z.eqb x y).

Definition neq_vec {n : Z} (x : mword n) (y : mword n)  : bool := negb (eq_vec x y).



Axiom builtin_and_vec : forall {n : Z} (_ : bits n) (_ : bits n) , bits n.



Axiom builtin_or_vec : forall {n : Z} (_ : bits n) (_ : bits n) , bits n.



Axiom __raw_SetSlice_int : forall  (w : Z) (_ : Z) (_ : Z) (_ : bits w) , Z.

Definition __GetSlice_int (n : Z) (m : Z) (o : Z) `{ArithFact (n >= 0)} 
: mword n :=
   get_slice_int n m o.

Axiom __raw_SetSlice_bits : forall  (n : Z) (w : Z) (_ : bits n) (_ : Z) (_ : bits w) , bits n.

Axiom __raw_GetSlice_bits : forall

(n : Z) (w : Z) (_ : bits n) (_ : Z)
`{ArithFact (w >= 0)},
bits w.

Axiom __SignExtendSlice : forall {m : Z} (_ : bits m) (_ : Z) (_ : Z) , bits m.

Axiom __ZeroExtendSlice : forall {m : Z} (_ : bits m) (_ : Z) (_ : Z) , bits m.

Definition cast_unit_vec (b : bitU) 
: M (mword 1) :=
   (match b with
    | B0 => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | B1 => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Axiom string_of_int : forall  (_ : Z) , string.

Axiom DecStr : forall  (_ : Z) , string.

Axiom HexStr : forall  (_ : Z) , string.

Axiom real_power : forall  (_ : real) (_ : Z) , real.

Axiom add_real : forall  (_ : real) (_ : real) , real.

Axiom sub_real : forall  (_ : real) (_ : real) , real.

Axiom negate_real : forall  (_ : real) , real.

Axiom mult_real : forall  (_ : real) (_ : real) , real.

Axiom Sqrt : forall  (_ : real) , real.

Axiom gteq_real : forall  (_ : real) (_ : real) , bool.

Axiom lteq_real : forall  (_ : real) (_ : real) , bool.

Axiom gt_real : forall  (_ : real) (_ : real) , bool.

Axiom lt_real : forall  (_ : real) (_ : real) , bool.

Axiom RoundDown : forall  (_ : real) , Z.

Axiom RoundUp : forall  (_ : real) , Z.

Axiom abs_real : forall  (_ : real) , real.

Axiom quotient_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Axiom quotient_real : forall  (_ : real) (_ : real) , real.

Axiom quotient : forall  (_ : Z) (_ : Z) , Z.

Axiom quot_round_zero : forall  (_ : Z) (_ : Z) , Z.

Axiom rem_round_zero : forall  (_ : Z) (_ : Z) , Z.

Axiom modulus : forall  (_ : Z) (_ : Z) , Z.

Axiom Real : forall  (_ : Z) , real.

Axiom min_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Axiom max_nat : forall

(_ : {n : Z & ArithFact (n >= 0)}) (_ : {n : Z & ArithFact (n >= 0)})
,
{n : Z & ArithFact (n >= 0)}.

Definition __RISCV_write (addr : mword 64) (width : Z) (data : mword (8 * width)) 
: M (bool) :=
   (write_ram 64 width
      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0]
        : mword 64) addr data)
    : M (bool).

Axiom __TraceMemoryWrite : forall {m : Z} (n : Z) (_ : bits m) (_ : bits (8 * n)) , unit.

Definition __RISCV_read (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  0)} 
: M (option (mword (8 * width))) :=
   (match (aq, rl, res) with
    | (false, false, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__0 : mword (8 * width) =>
       returnm ((Some w__0)
        : option (mword (8 * width)))
    | (true, false, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__1 : mword (8 * width) =>
       returnm ((Some w__1)
        : option (mword (8 * width)))
    | (true, true, false) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__2 : mword (8 * width) =>
       returnm ((Some w__2)
        : option (mword (8 * width)))
    | (false, false, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__3 : mword (8 * width) =>
       returnm ((Some w__3)
        : option (mword (8 * width)))
    | (true, false, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__4 : mword (8 * width) =>
       returnm ((Some w__4)
        : option (mword (8 * width)))
    | (true, true, true) =>
       read_ram 64 width
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0]
           : mword 64) addr >>= fun w__5 : mword (8 * width) =>
       returnm ((Some w__5)
        : option (mword (8 * width)))
    | (false, true, false) => returnm (None  : option (mword (8 * width)))
    | (false, true, true) => returnm (None  : option (mword (8 * width)))
    end)
    : M (option (mword (8 * width))).

Axiom __TraceMemoryRead : forall {m : Z} (n : Z) (_ : bits m) (_ : bits (8 * n)) , unit.

Definition ex_nat '((existT _ n _) : {n : Z & ArithFact (n >= 0)}) 
: {syn_n : Z & ArithFact (syn_n >= 0)} :=
   build_ex
   n.

Definition ex_int (n : Z)  : {syn_n : Z & ArithFact (True)} := build_ex n.

Definition coerce_int_nat (x : Z) 
: M ({n : Z & ArithFact (n >= 0)}) :=
   assert_exp' (x >=? 0) "" >>= fun _ => returnm ((build_ex x)  : {n : Z & ArithFact (n >= 0)}).

Definition EXTS {n : Z} (m__tv : Z) (v : mword n) `{ArithFact (m__tv >= n)} 
: mword m__tv :=
   sign_extend v m__tv.

Definition EXTZ {n : Z} (m__tv : Z) (v : mword n) `{ArithFact (m__tv >= n)} 
: mword m__tv :=
   zero_extend v m__tv.

Definition zopz0zI_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >= 1)} 
: bool :=
   Z.ltb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zKzJ_s {n : Z} (x : mword n) (y : mword n) `{ArithFact (n >= 1)} 
: bool :=
   Z.geb (projT1 (sint x)) (projT1 (sint y)).

Definition zopz0zI_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.ltb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zKzJ_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.geb (projT1 (uint x)) (projT1 (uint y)).

Definition zopz0zIzJ_u {n : Z} (x : mword n) (y : mword n) 
: bool :=
   Z.leb (projT1 (uint x)) (projT1 (uint y)).

Definition bool_to_bits (x : bool) 
: mword 1 :=
   if (x) then (vec_of_bits [B1]  : mword 1)
   else (vec_of_bits [B0]  : mword 1).

Definition bit_to_bool (b : bitU) 
: M (bool) :=
   (match b with
    | B1 => returnm (true  : bool)
    | B0 => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition vector64 (n : Z)  : mword 64 := get_slice_int 64 n 0.

Definition to_bits (l : Z) (n : Z) `{ArithFact (l >= 0)}  : mword l := get_slice_int l n 0.

Axiom vector_update_subrange_inc : forall
{n : Z}
(_ : mword n) (m : Z) (o : Z) (_ : mword (o - (m - 1)))
,
mword n.

Definition shift_right_arith64 (v : mword 64) (shift : mword 6) 
: mword 64 :=
   let v128 : bits 128 := EXTS 128 v in
   subrange_vec_dec (shift_bits_right v128 shift) 63 0.

Definition shift_right_arith32 (v : mword 32) (shift : mword 5) 
: mword 32 :=
   let v64 : bits 64 := EXTS 64 v in
   subrange_vec_dec (shift_bits_right v64 shift) 31 0.

Let xlen := 64.
Definition xlen_max_unsigned_spec := sub_range (build_ex (projT1 (pow2 xlen))) (build_ex 1).
Let xlen_max_unsigned := projT1 xlen_max_unsigned_spec .

Definition xlen_max_signed_spec :=
sub_range (build_ex (projT1 (pow2 (projT1 (sub_range (build_ex xlen) (build_ex 1)))))) (build_ex 1).
Let xlen_max_signed := projT1 xlen_max_signed_spec .

Definition xlen_min_signed_spec :=
sub_range (build_ex 0) (build_ex (projT1 (pow2 (projT1 (sub_range (build_ex xlen) (build_ex 1)))))).
Let xlen_min_signed := projT1 xlen_min_signed_spec .

Definition regbits_to_regno (b : mword 5) 
: {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)} :=
   let '(existT _ r _) := uint b in
   build_ex
   r.

Definition creg2reg_bits (creg : mword 3) 
: mword 5 :=
   concat_vec (vec_of_bits [B0;B1]  : mword 2) creg.

Let zreg : regbits := (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5).
Let ra : regbits := (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5).
Let sp : regbits := (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5).
Definition rX (r : Z) `{ArithFact (0 <= r /\ (r + 1) <= 32)} 
: M (mword 64) :=
   let p0_ := r in
   (if sumbool_of_bool ((Z.eqb p0_ 0)) then
      returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0]
                 : mword 64)
       : mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 1)) then (read_reg x1_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 2)) then (read_reg x2_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 3)) then (read_reg x3_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 4)) then (read_reg x4_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 5)) then (read_reg x5_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 6)) then (read_reg x6_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 7)) then (read_reg x7_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 8)) then (read_reg x8_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 9)) then (read_reg x9_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 10)) then (read_reg x10_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 11)) then (read_reg x11_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 12)) then (read_reg x12_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 13)) then (read_reg x13_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 14)) then (read_reg x14_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 15)) then (read_reg x15_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 16)) then (read_reg x16_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 17)) then (read_reg x17_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 18)) then (read_reg x18_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 19)) then (read_reg x19_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 20)) then (read_reg x20_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 21)) then (read_reg x21_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 22)) then (read_reg x22_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 23)) then (read_reg x23_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 24)) then (read_reg x24_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 25)) then (read_reg x25_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 26)) then (read_reg x26_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 27)) then (read_reg x27_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 28)) then (read_reg x28_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 29)) then (read_reg x29_ref  : M (mword 64))  : M (mword 64)
    else if sumbool_of_bool ((Z.eqb p0_ 30)) then (read_reg x30_ref  : M (mword 64))  : M (mword 64)
    else (read_reg x31_ref  : M (mword 64))  : M (mword 64))
    : M (mword 64).

Definition wX (r : Z) (v : mword 64) `{ArithFact (0 <= r /\ (r + 1) <= 32)} 
: M (unit) :=
   let p0_ := r in
   (if sumbool_of_bool ((Z.eqb p0_ 0)) then returnm (tt  : unit)
    else if sumbool_of_bool ((Z.eqb p0_ 1)) then write_reg x1_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 2)) then write_reg x2_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 3)) then write_reg x3_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 4)) then write_reg x4_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 5)) then write_reg x5_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 6)) then write_reg x6_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 7)) then write_reg x7_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 8)) then write_reg x8_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 9)) then write_reg x9_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 10)) then write_reg x10_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 11)) then write_reg x11_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 12)) then write_reg x12_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 13)) then write_reg x13_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 14)) then write_reg x14_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 15)) then write_reg x15_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 16)) then write_reg x16_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 17)) then write_reg x17_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 18)) then write_reg x18_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 19)) then write_reg x19_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 20)) then write_reg x20_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 21)) then write_reg x21_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 22)) then write_reg x22_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 23)) then write_reg x23_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 24)) then write_reg x24_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 25)) then write_reg x25_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 26)) then write_reg x26_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 27)) then write_reg x27_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 28)) then write_reg x28_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 29)) then write_reg x29_ref v  : M (unit)
    else if sumbool_of_bool ((Z.eqb p0_ 30)) then write_reg x30_ref v  : M (unit)
    else write_reg x31_ref v  : M (unit)) >>
   returnm ((if sumbool_of_bool ((neq_atom r 0)) then
               print_endline
                 (String.append "x"
                    (String.append (string_of_int r) (String.append " <- " (string_of_bits v))))
             else tt)
    : unit).

Definition reg_name_abi (r : mword 5) 
: string :=
   let b__0 := r in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((regbits_to_regno b__0)
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "zero"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "ra"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "sp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "gp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "tp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "fp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s8"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s9"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s10"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s11"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno b__0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t5"
   else "t6".

Definition Architecture_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: Architecture :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RV32
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RV64
   else RV128.

Definition num_of_Architecture (arg_ : Architecture) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with | RV32 => build_ex 0 | RV64 => build_ex 1 | RV128 => build_ex 2 end.

Definition architecture (a : mword 2) 
: option Architecture :=
   let b__0 := a in
   if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Some RV32
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then Some RV64
   else if ((eq_vec b__0 (vec_of_bits [B1;B1]  : mword 2))) then Some RV128
   else None.

Definition arch_to_bits (a : Architecture) 
: mword 2 :=
   match a with
   | RV32 => (vec_of_bits [B0;B1]  : mword 2)
   | RV64 => (vec_of_bits [B1;B0]  : mword 2)
   | RV128 => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition Privilege_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: Privilege :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then User
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Supervisor
   else Machine.

Definition num_of_Privilege (arg_ : Privilege) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with | User => build_ex 0 | Supervisor => build_ex 1 | Machine => build_ex 2 end.

Definition privLevel_to_bits (p : Privilege) 
: mword 2 :=
   match p with
   | User => (vec_of_bits [B0;B0]  : mword 2)
   | Supervisor => (vec_of_bits [B0;B1]  : mword 2)
   | Machine => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition privLevel_of_bits (p : mword 2) 
: Privilege :=
   let b__0 := p in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then User
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Supervisor
   else Machine.

Definition privLevel_to_str (p : Privilege) 
: string :=
   match p with | User => "U" | Supervisor => "S" | Machine => "M" end.

Definition AccessType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: AccessType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Read
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Write
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then ReadWrite
   else Execute.

Definition num_of_AccessType (arg_ : AccessType) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   match arg_ with
   | Read => build_ex 0
   | Write => build_ex 1
   | ReadWrite => build_ex 2
   | Execute => build_ex 3
   end.

Definition accessType_to_str (a : AccessType) 
: string :=
   match a with | Read => "R" | Write => "W" | ReadWrite => "RW" | Execute => "X" end.

Definition ReadType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 1)} 
: ReadType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Instruction
   else Data.

Definition num_of_ReadType (arg_ : ReadType) 
: {e : Z & ArithFact (0 <= e /\ e <= 1)} :=
   match arg_ with | Instruction => build_ex 0 | Data => build_ex 1 end.

Definition readType_to_str (r : ReadType) 
: string :=
   match r with | Instruction => "I" | Data => "D" end.

Definition word_width_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: word_width :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then BYTE
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then HALF
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then WORD
   else DOUBLE.

Definition num_of_word_width (arg_ : word_width) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   match arg_ with
   | BYTE => build_ex 0
   | HALF => build_ex 1
   | WORD => build_ex 2
   | DOUBLE => build_ex 3
   end.

Definition InterruptType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 8)} 
: InterruptType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then I_U_Software
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then I_S_Software
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then I_M_Software
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then I_U_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then I_S_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then I_M_Timer
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then I_U_External
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then I_S_External
   else I_M_External.

Definition num_of_InterruptType (arg_ : InterruptType) 
: {e : Z & ArithFact (0 <= e /\ e <= 8)} :=
   match arg_ with
   | I_U_Software => build_ex 0
   | I_S_Software => build_ex 1
   | I_M_Software => build_ex 2
   | I_U_Timer => build_ex 3
   | I_S_Timer => build_ex 4
   | I_M_Timer => build_ex 5
   | I_U_External => build_ex 6
   | I_S_External => build_ex 7
   | I_M_External => build_ex 8
   end.

Definition interruptType_to_bits (i : InterruptType) 
: mword 4 :=
   match i with
   | I_U_Software => (vec_of_bits [B0;B0;B0;B0]  : mword 4)
   | I_S_Software => (vec_of_bits [B0;B0;B0;B1]  : mword 4)
   | I_M_Software => (vec_of_bits [B0;B0;B1;B1]  : mword 4)
   | I_U_Timer => (vec_of_bits [B0;B1;B0;B0]  : mword 4)
   | I_S_Timer => (vec_of_bits [B0;B1;B0;B1]  : mword 4)
   | I_M_Timer => (vec_of_bits [B0;B1;B1;B1]  : mword 4)
   | I_U_External => (vec_of_bits [B1;B0;B0;B0]  : mword 4)
   | I_S_External => (vec_of_bits [B1;B0;B0;B1]  : mword 4)
   | I_M_External => (vec_of_bits [B1;B0;B1;B1]  : mword 4)
   end.

Definition ExceptionType_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 15)} 
: ExceptionType :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then E_Fetch_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then E_Fetch_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then E_Illegal_Instr
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then E_Breakpoint
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then E_Load_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then E_Load_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then E_SAMO_Addr_Align
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then E_SAMO_Access_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then E_U_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then E_S_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then E_Reserved_10
   else if sumbool_of_bool ((Z.eqb p0_ 11)) then E_M_EnvCall
   else if sumbool_of_bool ((Z.eqb p0_ 12)) then E_Fetch_Page_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 13)) then E_Load_Page_Fault
   else if sumbool_of_bool ((Z.eqb p0_ 14)) then E_Reserved_14
   else E_SAMO_Page_Fault.

Definition num_of_ExceptionType (arg_ : ExceptionType) 
: {e : Z & ArithFact (0 <= e /\ e <= 15)} :=
   match arg_ with
   | E_Fetch_Addr_Align => build_ex 0
   | E_Fetch_Access_Fault => build_ex 1
   | E_Illegal_Instr => build_ex 2
   | E_Breakpoint => build_ex 3
   | E_Load_Addr_Align => build_ex 4
   | E_Load_Access_Fault => build_ex 5
   | E_SAMO_Addr_Align => build_ex 6
   | E_SAMO_Access_Fault => build_ex 7
   | E_U_EnvCall => build_ex 8
   | E_S_EnvCall => build_ex 9
   | E_Reserved_10 => build_ex 10
   | E_M_EnvCall => build_ex 11
   | E_Fetch_Page_Fault => build_ex 12
   | E_Load_Page_Fault => build_ex 13
   | E_Reserved_14 => build_ex 14
   | E_SAMO_Page_Fault => build_ex 15
   end.

Definition exceptionType_to_bits (e : ExceptionType) 
: mword 4 :=
   match e with
   | E_Fetch_Addr_Align => (vec_of_bits [B0;B0;B0;B0]  : mword 4)
   | E_Fetch_Access_Fault => (vec_of_bits [B0;B0;B0;B1]  : mword 4)
   | E_Illegal_Instr => (vec_of_bits [B0;B0;B1;B0]  : mword 4)
   | E_Breakpoint => (vec_of_bits [B0;B0;B1;B1]  : mword 4)
   | E_Load_Addr_Align => (vec_of_bits [B0;B1;B0;B0]  : mword 4)
   | E_Load_Access_Fault => (vec_of_bits [B0;B1;B0;B1]  : mword 4)
   | E_SAMO_Addr_Align => (vec_of_bits [B0;B1;B1;B0]  : mword 4)
   | E_SAMO_Access_Fault => (vec_of_bits [B0;B1;B1;B1]  : mword 4)
   | E_U_EnvCall => (vec_of_bits [B1;B0;B0;B0]  : mword 4)
   | E_S_EnvCall => (vec_of_bits [B1;B0;B0;B1]  : mword 4)
   | E_Reserved_10 => (vec_of_bits [B1;B0;B1;B0]  : mword 4)
   | E_M_EnvCall => (vec_of_bits [B1;B0;B1;B1]  : mword 4)
   | E_Fetch_Page_Fault => (vec_of_bits [B1;B1;B0;B0]  : mword 4)
   | E_Load_Page_Fault => (vec_of_bits [B1;B1;B0;B1]  : mword 4)
   | E_Reserved_14 => (vec_of_bits [B1;B1;B1;B0]  : mword 4)
   | E_SAMO_Page_Fault => (vec_of_bits [B1;B1;B1;B1]  : mword 4)
   end.

Definition exceptionType_to_str (e : ExceptionType) 
: string :=
   match e with
   | E_Fetch_Addr_Align => "misaligned-fetch"
   | E_Fetch_Access_Fault => "fetch-access-fault"
   | E_Illegal_Instr => "illegal-instruction"
   | E_Breakpoint => "breakpoint"
   | E_Load_Addr_Align => "misaligned-load"
   | E_Load_Access_Fault => "load-access-fault"
   | E_SAMO_Addr_Align => "misaliged-store/amo"
   | E_SAMO_Access_Fault => "store/amo-access-fault"
   | E_U_EnvCall => "u-call"
   | E_S_EnvCall => "s-call"
   | E_Reserved_10 => "reserved-0"
   | E_M_EnvCall => "m-call"
   | E_Fetch_Page_Fault => "fetch-page-fault"
   | E_Load_Page_Fault => "load-page-fault"
   | E_Reserved_14 => "reserved-1"
   | E_SAMO_Page_Fault => "store/amo-page-fault"
   end.

Definition not_implemented {a : Type} (message : string) 
: M (a) :=
   (throw (Error_not_implemented message))
    : M (a).

Definition internal_error {a : Type} (s : string) 
: M (a) :=
   assert_exp' false s >>= fun _ => (throw (Error_internal_error tt))  : M (a).

Definition TrapVectorMode_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: TrapVectorMode :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then TV_Direct
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then TV_Vector
   else TV_Reserved.

Definition num_of_TrapVectorMode (arg_ : TrapVectorMode) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with
   | TV_Direct => build_ex 0
   | TV_Vector => build_ex 1
   | TV_Reserved => build_ex 2
   end.

Definition trapVectorMode_of_bits (m : mword 2) 
: TrapVectorMode :=
   let b__0 := m in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then TV_Direct
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then TV_Vector
   else TV_Reserved.

Definition ExtStatus_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 3)} 
: ExtStatus :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Off
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Initial
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Clean
   else Dirty.

Definition num_of_ExtStatus (arg_ : ExtStatus) 
: {e : Z & ArithFact (0 <= e /\ e <= 3)} :=
   match arg_ with
   | Off => build_ex 0
   | Initial => build_ex 1
   | Clean => build_ex 2
   | Dirty => build_ex 3
   end.

Definition extStatus_to_bits (e : ExtStatus) 
: mword 2 :=
   match e with
   | Off => (vec_of_bits [B0;B0]  : mword 2)
   | Initial => (vec_of_bits [B0;B1]  : mword 2)
   | Clean => (vec_of_bits [B1;B0]  : mword 2)
   | Dirty => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition extStatus_of_bits (e : mword 2) 
: ExtStatus :=
   let b__0 := e in
   if ((eq_vec b__0 (vec_of_bits [B0;B0]  : mword 2))) then Off
   else if ((eq_vec b__0 (vec_of_bits [B0;B1]  : mword 2))) then Initial
   else if ((eq_vec b__0 (vec_of_bits [B1;B0]  : mword 2))) then Clean
   else Dirty.

Definition SATPMode_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: SATPMode :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Sbare
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Sv32
   else Sv39.

Definition num_of_SATPMode (arg_ : SATPMode) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with | Sbare => build_ex 0 | Sv32 => build_ex 1 | Sv39 => build_ex 2 end.

Definition satpMode_of_bits (a : Architecture) (m : mword 4) 
: option SATPMode :=
   match (a, m) with
   | (g__33, b__0) =>
      if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0]  : mword 4))) then Some Sbare
      else
        match (g__33, b__0) with
        | (RV32, b__0) =>
           if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1]  : mword 4))) then Some Sv32
           else match (RV32, b__0) with | (g__34, g__35) => None end
        | (RV64, b__0) =>
           if ((eq_vec b__0 (vec_of_bits [B1;B0;B0;B0]  : mword 4))) then Some Sv39
           else match (RV64, b__0) with | (g__34, g__35) => None end
        | (g__34, g__35) => None
        end
   end.

Definition uop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 1)} 
: uop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_LUI
   else RISCV_AUIPC.

Definition num_of_uop (arg_ : uop) 
: {e : Z & ArithFact (0 <= e /\ e <= 1)} :=
   match arg_ with | RISCV_LUI => build_ex 0 | RISCV_AUIPC => build_ex 1 end.

Definition bop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 5)} 
: bop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_BEQ
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_BNE
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_BLT
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_BGE
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_BLTU
   else RISCV_BGEU.

Definition num_of_bop (arg_ : bop) 
: {e : Z & ArithFact (0 <= e /\ e <= 5)} :=
   match arg_ with
   | RISCV_BEQ => build_ex 0
   | RISCV_BNE => build_ex 1
   | RISCV_BLT => build_ex 2
   | RISCV_BGE => build_ex 3
   | RISCV_BLTU => build_ex 4
   | RISCV_BGEU => build_ex 5
   end.

Definition iop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 5)} 
: iop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADDI
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SLTI
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLTIU
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_XORI
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_ORI
   else RISCV_ANDI.

Definition num_of_iop (arg_ : iop) 
: {e : Z & ArithFact (0 <= e /\ e <= 5)} :=
   match arg_ with
   | RISCV_ADDI => build_ex 0
   | RISCV_SLTI => build_ex 1
   | RISCV_SLTIU => build_ex 2
   | RISCV_XORI => build_ex 3
   | RISCV_ORI => build_ex 4
   | RISCV_ANDI => build_ex 5
   end.

Definition sop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: sop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_SLLI
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SRLI
   else RISCV_SRAI.

Definition num_of_sop (arg_ : sop) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with
   | RISCV_SLLI => build_ex 0
   | RISCV_SRLI => build_ex 1
   | RISCV_SRAI => build_ex 2
   end.

Definition rop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 9)} 
: rop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADD
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SUB
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLL
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_SLT
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then RISCV_SLTU
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then RISCV_XOR
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then RISCV_SRL
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then RISCV_SRA
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then RISCV_OR
   else RISCV_AND.

Definition num_of_rop (arg_ : rop) 
: {e : Z & ArithFact (0 <= e /\ e <= 9)} :=
   match arg_ with
   | RISCV_ADD => build_ex 0
   | RISCV_SUB => build_ex 1
   | RISCV_SLL => build_ex 2
   | RISCV_SLT => build_ex 3
   | RISCV_SLTU => build_ex 4
   | RISCV_XOR => build_ex 5
   | RISCV_SRL => build_ex 6
   | RISCV_SRA => build_ex 7
   | RISCV_OR => build_ex 8
   | RISCV_AND => build_ex 9
   end.

Definition ropw_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 4)} 
: ropw :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_ADDW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SUBW
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then RISCV_SLLW
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then RISCV_SRLW
   else RISCV_SRAW.

Definition num_of_ropw (arg_ : ropw) 
: {e : Z & ArithFact (0 <= e /\ e <= 4)} :=
   match arg_ with
   | RISCV_ADDW => build_ex 0
   | RISCV_SUBW => build_ex 1
   | RISCV_SLLW => build_ex 2
   | RISCV_SRLW => build_ex 3
   | RISCV_SRAW => build_ex 4
   end.

Definition sopw_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: sopw :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then RISCV_SLLIW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then RISCV_SRLIW
   else RISCV_SRAIW.

Definition num_of_sopw (arg_ : sopw) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with
   | RISCV_SLLIW => build_ex 0
   | RISCV_SRLIW => build_ex 1
   | RISCV_SRAIW => build_ex 2
   end.

Definition amoop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 8)} 
: amoop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then AMOSWAP
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then AMOADD
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then AMOXOR
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then AMOAND
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then AMOOR
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then AMOMIN
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then AMOMAX
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then AMOMINU
   else AMOMAXU.

Definition num_of_amoop (arg_ : amoop) 
: {e : Z & ArithFact (0 <= e /\ e <= 8)} :=
   match arg_ with
   | AMOSWAP => build_ex 0
   | AMOADD => build_ex 1
   | AMOXOR => build_ex 2
   | AMOAND => build_ex 3
   | AMOOR => build_ex 4
   | AMOMIN => build_ex 5
   | AMOMAX => build_ex 6
   | AMOMINU => build_ex 7
   | AMOMAXU => build_ex 8
   end.

Definition csrop_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: csrop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then CSRRW
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then CSRRS
   else CSRRC.

Definition num_of_csrop (arg_ : csrop) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with | CSRRW => build_ex 0 | CSRRS => build_ex 1 | CSRRC => build_ex 2 end.

Definition reg_name_forwards (arg_ : mword 5) 
: string :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((regbits_to_regno p0_)
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "zero"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "ra"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "sp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "gp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "tp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "fp"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a0"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a1"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "a7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s2"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s5"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s6"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s7"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s8"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s9"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s10"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "s11"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t3"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t4"
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     "t5"
   else "t6".

Definition reg_name_backwards (arg_ : string) 
: M (mword 5) :=
   (match arg_ with
    | "zero" => returnm ((vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)  : mword 5)
    | "ra" => returnm ((vec_of_bits [B0;B0;B0;B0;B1]  : mword 5)  : mword 5)
    | "sp" => returnm ((vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)  : mword 5)
    | "gp" => returnm ((vec_of_bits [B0;B0;B0;B1;B1]  : mword 5)  : mword 5)
    | "tp" => returnm ((vec_of_bits [B0;B0;B1;B0;B0]  : mword 5)  : mword 5)
    | "t0" => returnm ((vec_of_bits [B0;B0;B1;B0;B1]  : mword 5)  : mword 5)
    | "t1" => returnm ((vec_of_bits [B0;B0;B1;B1;B0]  : mword 5)  : mword 5)
    | "t2" => returnm ((vec_of_bits [B0;B0;B1;B1;B1]  : mword 5)  : mword 5)
    | "fp" => returnm ((vec_of_bits [B0;B1;B0;B0;B0]  : mword 5)  : mword 5)
    | "s1" => returnm ((vec_of_bits [B0;B1;B0;B0;B1]  : mword 5)  : mword 5)
    | "a0" => returnm ((vec_of_bits [B0;B1;B0;B1;B0]  : mword 5)  : mword 5)
    | "a1" => returnm ((vec_of_bits [B0;B1;B0;B1;B1]  : mword 5)  : mword 5)
    | "a2" => returnm ((vec_of_bits [B0;B1;B1;B0;B0]  : mword 5)  : mword 5)
    | "a3" => returnm ((vec_of_bits [B0;B1;B1;B0;B1]  : mword 5)  : mword 5)
    | "a4" => returnm ((vec_of_bits [B0;B1;B1;B1;B0]  : mword 5)  : mword 5)
    | "a5" => returnm ((vec_of_bits [B0;B1;B1;B1;B1]  : mword 5)  : mword 5)
    | "a6" => returnm ((vec_of_bits [B1;B0;B0;B0;B0]  : mword 5)  : mword 5)
    | "a7" => returnm ((vec_of_bits [B1;B0;B0;B0;B1]  : mword 5)  : mword 5)
    | "s2" => returnm ((vec_of_bits [B1;B0;B0;B1;B0]  : mword 5)  : mword 5)
    | "s3" => returnm ((vec_of_bits [B1;B0;B0;B1;B1]  : mword 5)  : mword 5)
    | "s4" => returnm ((vec_of_bits [B1;B0;B1;B0;B0]  : mword 5)  : mword 5)
    | "s5" => returnm ((vec_of_bits [B1;B0;B1;B0;B1]  : mword 5)  : mword 5)
    | "s6" => returnm ((vec_of_bits [B1;B0;B1;B1;B0]  : mword 5)  : mword 5)
    | "s7" => returnm ((vec_of_bits [B1;B0;B1;B1;B1]  : mword 5)  : mword 5)
    | "s8" => returnm ((vec_of_bits [B1;B1;B0;B0;B0]  : mword 5)  : mword 5)
    | "s9" => returnm ((vec_of_bits [B1;B1;B0;B0;B1]  : mword 5)  : mword 5)
    | "s10" => returnm ((vec_of_bits [B1;B1;B0;B1;B0]  : mword 5)  : mword 5)
    | "s11" => returnm ((vec_of_bits [B1;B1;B0;B1;B1]  : mword 5)  : mword 5)
    | "t3" => returnm ((vec_of_bits [B1;B1;B1;B0;B0]  : mword 5)  : mword 5)
    | "t4" => returnm ((vec_of_bits [B1;B1;B1;B0;B1]  : mword 5)  : mword 5)
    | "t5" => returnm ((vec_of_bits [B1;B1;B1;B1;B0]  : mword 5)  : mword 5)
    | "t6" => returnm ((vec_of_bits [B1;B1;B1;B1;B1]  : mword 5)  : mword 5)
    | _ => exit tt  : M (mword 5)
    end)
    : M (mword 5).

Definition reg_name_forwards_matches (arg_ : mword 5) 
: bool :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((regbits_to_regno p0_)
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B1;B1]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else false.

Definition reg_name_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "zero" => true
   | "ra" => true
   | "sp" => true
   | "gp" => true
   | "tp" => true
   | "t0" => true
   | "t1" => true
   | "t2" => true
   | "fp" => true
   | "s1" => true
   | "a0" => true
   | "a1" => true
   | "a2" => true
   | "a3" => true
   | "a4" => true
   | "a5" => true
   | "a6" => true
   | "a7" => true
   | "s2" => true
   | "s3" => true
   | "s4" => true
   | "s5" => true
   | "s6" => true
   | "s7" => true
   | "s8" => true
   | "s9" => true
   | "s10" => true
   | "s11" => true
   | "t3" => true
   | "t4" => true
   | "t5" => true
   | "t6" => true
   | _ => false
   end.

Definition reg_name_matches_prefix (arg_ : string) 
: option ((mword 5 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1871_ := arg_ in
   if ((andb (string_startswith _stringappend_1871_ "zero")
          (match (string_drop _stringappend_1871_ (string_length "zero")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "zero")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "ra")
               (match (string_drop _stringappend_1871_ (string_length "ra")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "ra")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "sp")
               (match (string_drop _stringappend_1871_ (string_length "sp")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "sp")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "gp")
               (match (string_drop _stringappend_1871_ (string_length "gp")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "gp")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "tp")
               (match (string_drop _stringappend_1871_ (string_length "tp")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "tp")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t0")
               (match (string_drop _stringappend_1871_ (string_length "t0")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t0")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t1")
               (match (string_drop _stringappend_1871_ (string_length "t1")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t2")
               (match (string_drop _stringappend_1871_ (string_length "t2")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t2")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "fp")
               (match (string_drop _stringappend_1871_ (string_length "fp")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "fp")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B0;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s1")
               (match (string_drop _stringappend_1871_ (string_length "s1")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B0;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a0")
               (match (string_drop _stringappend_1871_ (string_length "a0")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a0")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B0;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a1")
               (match (string_drop _stringappend_1871_ (string_length "a1")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B0;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a2")
               (match (string_drop _stringappend_1871_ (string_length "a2")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a2")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a3")
               (match (string_drop _stringappend_1871_ (string_length "a3")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a3")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a4")
               (match (string_drop _stringappend_1871_ (string_length "a4")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a4")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a5")
               (match (string_drop _stringappend_1871_ (string_length "a5")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a5")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a6")
               (match (string_drop _stringappend_1871_ (string_length "a6")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a6")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B0;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "a7")
               (match (string_drop _stringappend_1871_ (string_length "a7")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "a7")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B0;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s2")
               (match (string_drop _stringappend_1871_ (string_length "s2")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s2")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B0;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s3")
               (match (string_drop _stringappend_1871_ (string_length "s3")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s3")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B0;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s4")
               (match (string_drop _stringappend_1871_ (string_length "s4")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s4")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s5")
               (match (string_drop _stringappend_1871_ (string_length "s5")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s5")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s6")
               (match (string_drop _stringappend_1871_ (string_length "s6")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s6")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s7")
               (match (string_drop _stringappend_1871_ (string_length "s7")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s7")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s8")
               (match (string_drop _stringappend_1871_ (string_length "s8")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s8")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s9")
               (match (string_drop _stringappend_1871_ (string_length "s9")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s9")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s10")
               (match (string_drop _stringappend_1871_ (string_length "s10")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s10")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "s11")
               (match (string_drop _stringappend_1871_ (string_length "s11")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "s11")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t3")
               (match (string_drop _stringappend_1871_ (string_length "t3")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t3")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B0;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t4")
               (match (string_drop _stringappend_1871_ (string_length "t4")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t4")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B0;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t5")
               (match (string_drop _stringappend_1871_ (string_length "t5")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t5")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B0]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1871_ "t6")
               (match (string_drop _stringappend_1871_ (string_length "t6")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1871_ (string_length "t6")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B1]  : mword 5),
              sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition sep_forwards (arg_ : unit) 
: string :=
   match arg_ with
   | tt =>
      string_append (opt_spc_forwards tt)
        (string_append "," (string_append (def_spc_forwards tt) ""))
   end.

Definition sep_backwards (arg_ : string) 
: M (unit) :=
   let _stringappend_1864_ := arg_ in
   match (opt_spc_matches_prefix _stringappend_1864_) with
   | Some (_stringappend_1865_,(existT _ _stringappend_1866_ _)) =>
      returnm ((_stringappend_1865_, build_ex _stringappend_1866_)
       : (unit * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__1 : (unit * {n : Z & ArithFact (n >= 0)}) =>
   let '(tt, existT _ _stringappend_1866_ _) := w__1  : (unit * {n : Z & ArithFact (n >= 0)}) in
   let _stringappend_1867_ := string_drop _stringappend_1864_ (build_ex _stringappend_1866_) in
   let _stringappend_1868_ := string_drop _stringappend_1867_ (string_length ",") in
   match (opt_spc_matches_prefix _stringappend_1868_) with
   | Some (_stringappend_1869_,(existT _ _stringappend_1870_ _)) =>
      returnm ((_stringappend_1869_, build_ex _stringappend_1870_)
       : (unit * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__3 : (unit * {n : Z & ArithFact (n >= 0)}) =>
   let '(tt, existT _ _stringappend_1870_ _) := w__3  : (unit * {n : Z & ArithFact (n >= 0)}) in
   (match (string_drop _stringappend_1868_ (build_ex _stringappend_1870_)) with
    | "" => returnm (tt  : unit)
    | _ => exit tt  : M (unit)
    end)
    : M (unit).

Definition sep_forwards_matches (arg_ : unit)  : bool := match arg_ with | tt => true end.

Definition sep_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_1857_ := arg_ in
   (if ((match (opt_spc_matches_prefix _stringappend_1857_) with
         | Some (_stringappend_1858_,(existT _ _stringappend_1859_ _)) =>
            let _stringappend_1860_ :=
              string_drop _stringappend_1857_ (build_ex _stringappend_1859_) in
            if ((andb (string_startswith _stringappend_1860_ ",")
                   (let _stringappend_1861_ := string_drop _stringappend_1860_ (string_length ",") in
                   if ((match (opt_spc_matches_prefix _stringappend_1861_) with
                        | Some (_stringappend_1862_,(existT _ _stringappend_1863_ _)) =>
                           match (string_drop _stringappend_1861_ (build_ex _stringappend_1863_)) with
                           | "" => true
                           | _ => false
                           end
                        | None => false
                        end)) then
                     true
                   else false))) then
              true
            else false
         | None => false
         end)) then
      match (opt_spc_matches_prefix _stringappend_1857_) with
      | Some (_stringappend_1858_,(existT _ _stringappend_1859_ _)) =>
         returnm ((_stringappend_1858_, build_ex _stringappend_1859_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__1 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1859_ _) := w__1  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1860_ := string_drop _stringappend_1857_ (build_ex _stringappend_1859_) in
      let _stringappend_1861_ := string_drop _stringappend_1860_ (string_length ",") in
      match (opt_spc_matches_prefix _stringappend_1861_) with
      | Some (_stringappend_1862_,(existT _ _stringappend_1863_ _)) =>
         returnm ((_stringappend_1862_, build_ex _stringappend_1863_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__3 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1863_ _) := w__3  : (unit * {n : Z & ArithFact (n >= 0)}) in
      (match (string_drop _stringappend_1861_ (build_ex _stringappend_1863_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else returnm (false  : bool))
    : M (bool).

Definition sep_matches_prefix (arg_ : string) 
: M (option ((unit * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_1850_ := arg_ in
   (if ((match (opt_spc_matches_prefix _stringappend_1850_) with
         | Some (_stringappend_1851_,(existT _ _stringappend_1852_ _)) =>
            let _stringappend_1853_ :=
              string_drop _stringappend_1850_ (build_ex _stringappend_1852_) in
            if ((andb (string_startswith _stringappend_1853_ ",")
                   (let _stringappend_1854_ := string_drop _stringappend_1853_ (string_length ",") in
                   if ((match (opt_spc_matches_prefix _stringappend_1854_) with
                        | Some (_stringappend_1855_,(existT _ _stringappend_1856_ _)) =>
                           match (string_drop _stringappend_1854_ (build_ex _stringappend_1856_)) with
                           | s_ => true
                           end
                        | None => false
                        end)) then
                     true
                   else false))) then
              true
            else false
         | None => false
         end)) then
      match (opt_spc_matches_prefix _stringappend_1850_) with
      | Some (_stringappend_1851_,(existT _ _stringappend_1852_ _)) =>
         returnm ((_stringappend_1851_, build_ex _stringappend_1852_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__1 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1852_ _) := w__1  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1853_ := string_drop _stringappend_1850_ (build_ex _stringappend_1852_) in
      let _stringappend_1854_ := string_drop _stringappend_1853_ (string_length ",") in
      match (opt_spc_matches_prefix _stringappend_1854_) with
      | Some (_stringappend_1855_,(existT _ _stringappend_1856_ _)) =>
         returnm ((_stringappend_1855_, build_ex _stringappend_1856_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__3 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1856_ _) := w__3  : (unit * {n : Z & ArithFact (n >= 0)}) in
      returnm ((match (string_drop _stringappend_1854_ (build_ex _stringappend_1856_)) with
                | s_ => Some (tt, sub_nat (string_length arg_) (string_length s_))
                end)
       : option ((unit * {n : Z & ArithFact (n >= 0)})))
    else returnm (None  : option ((unit * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((unit * {n : Z & ArithFact (n >= 0)}))).

Definition bool_bits_forwards (arg_ : bool) 
: mword 1 :=
   match arg_ with
   | true => (vec_of_bits [B1]  : mword 1)
   | false => (vec_of_bits [B0]  : mword 1)
   end.

Definition bool_bits_backwards (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else false.

Definition bool_bits_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition bool_bits_backwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bool_not_bits_forwards (arg_ : bool) 
: mword 1 :=
   match arg_ with
   | true => (vec_of_bits [B0]  : mword 1)
   | false => (vec_of_bits [B1]  : mword 1)
   end.

Definition bool_not_bits_backwards (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bool_not_bits_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition bool_not_bits_backwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else false.

Definition size_bits_forwards (arg_ : word_width) 
: mword 2 :=
   match arg_ with
   | BYTE => (vec_of_bits [B0;B0]  : mword 2)
   | HALF => (vec_of_bits [B0;B1]  : mword 2)
   | WORD => (vec_of_bits [B1;B0]  : mword 2)
   | DOUBLE => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition size_bits_backwards (arg_ : mword 2) 
: word_width :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0]  : mword 2))) then BYTE
   else if ((eq_vec p0_ (vec_of_bits [B0;B1]  : mword 2))) then HALF
   else if ((eq_vec p0_ (vec_of_bits [B1;B0]  : mword 2))) then WORD
   else DOUBLE.

Definition size_bits_forwards_matches (arg_ : word_width) 
: bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_bits_backwards_matches (arg_ : mword 2) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0]  : mword 2))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1]  : mword 2))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0]  : mword 2))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1]  : mword 2))) then true
   else false.

Definition size_mnemonic_forwards (arg_ : word_width) 
: string :=
   match arg_ with | BYTE => "b" | HALF => "h" | WORD => "w" | DOUBLE => "d" end.

Definition size_mnemonic_backwards (arg_ : string) 
: M (word_width) :=
   (match arg_ with
    | "b" => returnm (BYTE  : word_width)
    | "h" => returnm (HALF  : word_width)
    | "w" => returnm (WORD  : word_width)
    | "d" => returnm (DOUBLE  : word_width)
    | _ => exit tt  : M (word_width)
    end)
    : M (word_width).

Definition size_mnemonic_forwards_matches (arg_ : word_width) 
: bool :=
   match arg_ with | BYTE => true | HALF => true | WORD => true | DOUBLE => true end.

Definition size_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "b" => true | "h" => true | "w" => true | "d" => true | _ => false end.

Definition size_mnemonic_matches_prefix (arg_ : string) 
: option ((word_width * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1846_ := arg_ in
   if ((andb (string_startswith _stringappend_1846_ "b")
          (match (string_drop _stringappend_1846_ (string_length "b")) with | s_ => true end))) then
     match (string_drop _stringappend_1846_ (string_length "b")) with
     | s_ => Some (BYTE, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1846_ "h")
               (match (string_drop _stringappend_1846_ (string_length "h")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1846_ (string_length "h")) with
     | s_ => Some (HALF, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1846_ "w")
               (match (string_drop _stringappend_1846_ (string_length "w")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1846_ (string_length "w")) with
     | s_ => Some (WORD, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1846_ "d")
               (match (string_drop _stringappend_1846_ (string_length "d")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1846_ (string_length "d")) with
     | s_ => Some (DOUBLE, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition Mk_Misa (v : mword 64)  : Misa := {| Misa_Misa_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Misa_bits (v : Misa)  : mword 64 := subrange_vec_dec v.(Misa_Misa_chunk_0) 63 0.

Definition _set_Misa_bits (r_ref : register_ref regstate register_value Misa) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_bits (v : Misa) (x : mword 64) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Misa_MXL (v : Misa)  : mword 2 := subrange_vec_dec v.(Misa_Misa_chunk_0) 63 62.

Definition _set_Misa_MXL (r_ref : register_ref regstate register_value Misa) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 63 62 (subrange_vec_dec v 1 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_MXL (v : Misa) (x : mword 2) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 63 62 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Misa_Z (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25.

Definition _set_Misa_Z (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Z (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 25 25 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Y (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24.

Definition _set_Misa_Y (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Y (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 24 24 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_X (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23.

Definition _set_Misa_X (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_X (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 23 23 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_W (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22.

Definition _set_Misa_W (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_W (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_V (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21.

Definition _set_Misa_V (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_V (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_U (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20.

Definition _set_Misa_U (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_U (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_T (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19.

Definition _set_Misa_T (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_T (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_S (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18.

Definition _set_Misa_S (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_S (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_R (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17.

Definition _set_Misa_R (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_R (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_Q (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16.

Definition _set_Misa_Q (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_Q (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 16 16 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_P (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15.

Definition _set_Misa_P (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_P (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_O (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14.

Definition _set_Misa_O (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_O (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 14 14 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_N (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13.

Definition _set_Misa_N (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_N (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_M (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12.

Definition _set_Misa_M (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_M (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_L (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11.

Definition _set_Misa_L (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_L (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_K (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10.

Definition _set_Misa_K (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_K (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_J (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9.

Definition _set_Misa_J (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_J (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_I (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8.

Definition _set_Misa_I (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_I (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_H (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7.

Definition _set_Misa_H (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_H (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_G (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6.

Definition _set_Misa_G (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_G (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_F (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5.

Definition _set_Misa_F (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_F (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_E (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4.

Definition _set_Misa_E (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_E (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_D (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3.

Definition _set_Misa_D (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_D (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_C (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2.

Definition _set_Misa_C (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_C (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_B (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1.

Definition _set_Misa_B (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_B (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Misa_A (v : Misa)  : mword 1 := subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0.

Definition _set_Misa_A (r_ref : register_ref regstate register_value Misa) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Misa_Misa_chunk_0 :=
         (update_subrange_vec_dec r.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Misa in
   write_reg r_ref r
    : M (unit).

Definition _update_Misa_A (v : Misa) (x : mword 1) 
: Misa :=
   {[ v with
     Misa_Misa_chunk_0 :=
       (update_subrange_vec_dec v.(Misa_Misa_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_misa (m : Misa) (v : mword 64) 
: M (Misa) :=
   let v := Mk_Misa v in
   and_boolM (returnm ((eq_vec (_get_Misa_C v) ((bool_to_bits false)  : mword 1))  : bool))
     ((read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      cast_unit_vec (access_vec_dec w__0 1) >>= fun w__1 : mword 1 =>
      returnm ((eq_vec (w__1  : mword 1) ((bool_to_bits true)  : mword 1))
       : bool)) >>= fun w__2 : bool =>
   returnm ((if (w__2) then m
             else _update_Misa_C m (_get_Misa_C v))
    : Misa).

Definition Mk_Mstatus (v : mword 64) 
: Mstatus :=
   {| Mstatus_Mstatus_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mstatus_bits (v : Mstatus) 
: mword 64 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 0.

Definition _set_Mstatus_bits (r_ref : register_ref regstate register_value Mstatus) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_bits (v : Mstatus) (x : mword 64) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mstatus_SD (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 63.

Definition _set_Mstatus_SD (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SD (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SXL (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 35 34.

Definition _set_Mstatus_SXL (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 35 34 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SXL (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 35 34 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_UXL (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 33 32.

Definition _set_Mstatus_UXL (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 33 32 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UXL (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 33 32 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_TSR (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22.

Definition _set_Mstatus_TSR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TSR (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 22 22 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TW (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21.

Definition _set_Mstatus_TW (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TW (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 21 21 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_TVM (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20.

Definition _set_Mstatus_TVM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_TVM (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 20 20 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MXR (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19.

Definition _set_Mstatus_MXR (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MXR (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SUM (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18.

Definition _set_Mstatus_SUM (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SUM (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPRV (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17.

Definition _set_Mstatus_MPRV (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPRV (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 17 17 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_XS (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15.

Definition _set_Mstatus_XS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_XS (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_FS (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13.

Definition _set_Mstatus_FS (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_FS (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_MPP (v : Mstatus) 
: mword 2 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11.

Definition _set_Mstatus_MPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec v 1 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPP (v : Mstatus) (x : mword 2) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 12 11 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Mstatus_SPP (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8.

Definition _set_Mstatus_SPP (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPP (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7.

Definition _set_Mstatus_MPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5.

Definition _set_Mstatus_SPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UPIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4.

Definition _set_Mstatus_UPIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UPIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_MIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3.

Definition _set_Mstatus_MIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_MIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_SIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1.

Definition _set_Mstatus_SIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_SIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mstatus_UIE (v : Mstatus) 
: mword 1 :=
   subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0.

Definition _set_Mstatus_UIE (r_ref : register_ref regstate register_value Mstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mstatus_Mstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Mstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Mstatus_UIE (v : Mstatus) (x : mword 1) 
: Mstatus :=
   {[ v with
     Mstatus_Mstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Mstatus_Mstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mstatus (o : Mstatus) (v : mword 64) 
: Mstatus :=
   let m : Mstatus := Mk_Mstatus v in
   let m := _update_Mstatus_XS m (extStatus_to_bits Off) in
   let m :=
     _update_Mstatus_SD m
       ((bool_to_bits
           (orb
              (eq_vec ((extStatus_to_bits (extStatus_of_bits (_get_Mstatus_FS m)))  : mword 2)
                 ((extStatus_to_bits Dirty)
                  : mword 2))
              (eq_vec ((extStatus_to_bits (extStatus_of_bits (_get_Mstatus_XS m)))  : mword 2)
                 ((extStatus_to_bits Dirty)
                  : mword 2))))
        : mword 1) in
   let m := _update_Mstatus_SXL m (_get_Mstatus_SXL o) in
   let m := _update_Mstatus_UXL m (_get_Mstatus_UXL o) in
   let m := _update_Mstatus_UPIE m ((bool_to_bits false)  : mword 1) in
   _update_Mstatus_UIE m ((bool_to_bits false)  : mword 1).

Definition cur_Architecture '(tt : unit) 
: M (Architecture) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   match w__0 with
   | Machine => read_reg misa_ref >>= fun w__1 : Misa => returnm ((_get_Misa_MXL w__1)  : arch_xlen)
   | Supervisor =>
      read_reg mstatus_ref >>= fun w__2 : Mstatus => returnm ((_get_Mstatus_SXL w__2)  : arch_xlen)
   | User =>
      read_reg mstatus_ref >>= fun w__3 : Mstatus => returnm ((_get_Mstatus_UXL w__3)  : arch_xlen)
   end >>= fun a : arch_xlen =>
   (match (architecture a) with
    | Some (a) => returnm (a  : Architecture)
    | None => (internal_error "Invalid current architecture")  : M (Architecture)
    end)
    : M (Architecture).

Definition in32BitMode '(tt : unit) 
: M (bool) :=
   cur_Architecture tt >>= fun w__0 : Architecture => returnm ((generic_eq w__0 RV32)  : bool).

Definition haveAtomics '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_A w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveRVC '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_C w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveMulDiv '(tt : unit) 
: M (bool) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((eq_vec (_get_Misa_M w__0) ((bool_to_bits true)  : mword 1))
    : bool).

Definition haveFP '(tt : unit) 
: M (bool) :=
   (or_boolM
      (read_reg misa_ref >>= fun w__0 : Misa =>
       returnm ((eq_vec (_get_Misa_F w__0) ((bool_to_bits true)  : mword 1))
        : bool))
      (read_reg misa_ref >>= fun w__1 : Misa =>
       returnm ((eq_vec (_get_Misa_D w__1) ((bool_to_bits true)  : mword 1))
        : bool)))
    : M (bool).

Definition Mk_Minterrupts (v : mword 64) 
: Minterrupts :=
   {| Minterrupts_Minterrupts_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Minterrupts_bits (v : Minterrupts) 
: mword 64 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 63 0.

Definition _set_Minterrupts_bits (r_ref : register_ref regstate register_value Minterrupts) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_bits (v : Minterrupts) (x : mword 64) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Minterrupts_MEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11.

Definition _set_Minterrupts_MEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 11 11 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9.

Definition _set_Minterrupts_SEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UEI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8.

Definition _set_Minterrupts_UEI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UEI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MTI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7.

Definition _set_Minterrupts_MTI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MTI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_STI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5.

Definition _set_Minterrupts_STI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_STI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_UTI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4.

Definition _set_Minterrupts_UTI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_UTI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_MSI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3.

Definition _set_Minterrupts_MSI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_MSI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_SSI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1.

Definition _set_Minterrupts_SSI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_SSI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Minterrupts_USI (v : Minterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0.

Definition _set_Minterrupts_USI (r_ref : register_ref regstate register_value Minterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Minterrupts_Minterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Minterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Minterrupts_USI (v : Minterrupts) (x : mword 1) 
: Minterrupts :=
   {[ v with
     Minterrupts_Minterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Minterrupts_Minterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mip (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_SEI o (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   _update_Minterrupts_SSI m (_get_Minterrupts_SSI v).

Definition legalize_mie (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let v := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI o (_get_Minterrupts_MEI v) in
   let m := _update_Minterrupts_MTI m (_get_Minterrupts_MTI v) in
   let m := _update_Minterrupts_MSI m (_get_Minterrupts_MSI v) in
   let m := _update_Minterrupts_SEI m (_get_Minterrupts_SEI v) in
   let m := _update_Minterrupts_STI m (_get_Minterrupts_STI v) in
   _update_Minterrupts_SSI m (_get_Minterrupts_SSI v).

Definition legalize_mideleg (o : Minterrupts) (v : mword 64) 
: Minterrupts :=
   let m := Mk_Minterrupts v in
   let m := _update_Minterrupts_MEI m ((bool_to_bits false)  : mword 1) in
   let m := _update_Minterrupts_MTI m ((bool_to_bits false)  : mword 1) in
   _update_Minterrupts_MSI m ((bool_to_bits false)  : mword 1).

Definition Mk_Medeleg (v : mword 64) 
: Medeleg :=
   {| Medeleg_Medeleg_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Medeleg_bits (v : Medeleg) 
: mword 64 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 63 0.

Definition _set_Medeleg_bits (r_ref : register_ref regstate register_value Medeleg) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_bits (v : Medeleg) (x : mword 64) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Medeleg_SAMO_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15.

Definition _set_Medeleg_SAMO_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 15 15 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13.

Definition _set_Medeleg_Load_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 13 13 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Page_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12.

Definition _set_Medeleg_Fetch_Page_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Page_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 12 12 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_MEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10.

Definition _set_Medeleg_MEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_MEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 10 10 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9.

Definition _set_Medeleg_SEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_UEnvCall (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8.

Definition _set_Medeleg_UEnvCall (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_UEnvCall (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7.

Definition _set_Medeleg_SAMO_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_SAMO_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6.

Definition _set_Medeleg_SAMO_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_SAMO_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5.

Definition _set_Medeleg_Load_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Load_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4.

Definition _set_Medeleg_Load_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Load_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Breakpoint (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3.

Definition _set_Medeleg_Breakpoint (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Breakpoint (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Illegal_Instr (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2.

Definition _set_Medeleg_Illegal_Instr (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Illegal_Instr (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Access_Fault (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1.

Definition _set_Medeleg_Fetch_Access_Fault (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Access_Fault (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Medeleg_Fetch_Addr_Align (v : Medeleg) 
: mword 1 :=
   subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0.

Definition _set_Medeleg_Fetch_Addr_Align (r_ref : register_ref regstate register_value Medeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Medeleg_Medeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Medeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Medeleg_Fetch_Addr_Align (v : Medeleg) (x : mword 1) 
: Medeleg :=
   {[ v with
     Medeleg_Medeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Medeleg_Medeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_medeleg (o : Medeleg) (v : mword 64) 
: Medeleg :=
   let m := Mk_Medeleg v in
   _update_Medeleg_MEnvCall m ((bool_to_bits false)  : mword 1).

Definition Mk_Mtvec (v : mword 64) 
: Mtvec :=
   {| Mtvec_Mtvec_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mtvec_bits (v : Mtvec)  : mword 64 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 0.

Definition _set_Mtvec_bits (r_ref : register_ref regstate register_value Mtvec) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_bits (v : Mtvec) (x : mword 64) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mtvec_Base (v : Mtvec)  : mword 62 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 2.

Definition _set_Mtvec_Base (r_ref : register_ref regstate register_value Mtvec) (v : mword 62) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 63 2 (subrange_vec_dec v 61 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Base (v : Mtvec) (x : mword 62) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 63 2 (subrange_vec_dec x 61 0)) ]}.

Definition _get_Mtvec_Mode (v : Mtvec)  : mword 2 := subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0.

Definition _set_Mtvec_Mode (r_ref : register_ref regstate register_value Mtvec) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mtvec_Mtvec_chunk_0 :=
         (update_subrange_vec_dec r.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec v 1 0)) ]}
      : Mtvec in
   write_reg r_ref r
    : M (unit).

Definition _update_Mtvec_Mode (v : Mtvec) (x : mword 2) 
: Mtvec :=
   {[ v with
     Mtvec_Mtvec_chunk_0 :=
       (update_subrange_vec_dec v.(Mtvec_Mtvec_chunk_0) 1 0 (subrange_vec_dec x 1 0)) ]}.

Definition legalize_tvec (o : Mtvec) (v : mword 64) 
: Mtvec :=
   let v := Mk_Mtvec v in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode v)) with
   | TV_Direct => v
   | TV_Vector => v
   | _ => _update_Mtvec_Mode v (_get_Mtvec_Mode o)
   end.

Definition Mk_Mcause (v : mword 64) 
: Mcause :=
   {| Mcause_Mcause_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Mcause_bits (v : Mcause) 
: mword 64 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 0.

Definition _set_Mcause_bits (r_ref : register_ref regstate register_value Mcause) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_bits (v : Mcause) (x : mword 64) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Mcause_IsInterrupt (v : Mcause) 
: mword 1 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 63.

Definition _set_Mcause_IsInterrupt (r_ref : register_ref regstate register_value Mcause) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_IsInterrupt (v : Mcause) (x : mword 1) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Mcause_Cause (v : Mcause) 
: mword 63 :=
   subrange_vec_dec v.(Mcause_Mcause_chunk_0) 62 0.

Definition _set_Mcause_Cause (r_ref : register_ref regstate register_value Mcause) (v : mword 63) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Mcause_Mcause_chunk_0 :=
         (update_subrange_vec_dec r.(Mcause_Mcause_chunk_0) 62 0 (subrange_vec_dec v 62 0)) ]}
      : Mcause in
   write_reg r_ref r
    : M (unit).

Definition _update_Mcause_Cause (v : Mcause) (x : mword 63) 
: Mcause :=
   {[ v with
     Mcause_Mcause_chunk_0 :=
       (update_subrange_vec_dec v.(Mcause_Mcause_chunk_0) 62 0 (subrange_vec_dec x 62 0)) ]}.

Definition tvec_addr (m : Mtvec) (c : Mcause) 
: option (mword 64) :=
   let base : xlenbits := concat_vec (_get_Mtvec_Base m) (vec_of_bits [B0;B0]  : mword 2) in
   match (trapVectorMode_of_bits (_get_Mtvec_Mode m)) with
   | TV_Direct => Some base
   | TV_Vector =>
      if ((eq_vec (_get_Mcause_IsInterrupt c) ((bool_to_bits true)  : mword 1))) then
        Some (add_vec base
                (shift_bits_left (EXTZ 64 (_get_Mcause_Cause c)) (vec_of_bits [B1;B0]  : mword 2)))
      else Some base
   | TV_Reserved => None
   end.

Definition legalize_xepc (v : mword 64) 
: M (mword 64) :=
   haveRVC tt >>= fun w__0 : bool =>
   returnm ((and_vec v
               (EXTS 64
                  (if (w__0) then (vec_of_bits [B1;B1;B0]  : mword 3)
                   else (vec_of_bits [B1;B0;B0]  : mword 3))))
    : mword 64).

Definition pc_alignment_mask '(tt : unit) 
: M (mword 64) :=
   read_reg misa_ref >>= fun w__0 : Misa =>
   returnm ((not_vec
               (EXTZ 64
                  (if ((eq_vec (_get_Misa_C w__0) ((bool_to_bits true)  : mword 1))) then
                     (vec_of_bits [B0;B0]  : mword 2)
                   else (vec_of_bits [B1;B0]  : mword 2))))
    : mword 64).

Definition Mk_Counteren (v : mword 32) 
: Counteren :=
   {| Counteren_Counteren_chunk_0 := (subrange_vec_dec v 31 0) |}.

Definition _get_Counteren_bits (v : Counteren) 
: mword 32 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0.

Definition _set_Counteren_bits (r_ref : register_ref regstate register_value Counteren) (v : mword 32) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec v 31 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_bits (v : Counteren) (x : mword 32) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 0 (subrange_vec_dec x 31 0)) ]}.

Definition _get_Counteren_HPM (v : Counteren) 
: mword 29 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3.

Definition _set_Counteren_HPM (r_ref : register_ref regstate register_value Counteren) (v : mword 29) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec v 28 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_HPM (v : Counteren) (x : mword 29) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 31 3 (subrange_vec_dec x 28 0)) ]}.

Definition _get_Counteren_IR (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2.

Definition _set_Counteren_IR (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_IR (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_TM (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1.

Definition _set_Counteren_TM (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_TM (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Counteren_CY (v : Counteren) 
: mword 1 :=
   subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0.

Definition _set_Counteren_CY (r_ref : register_ref regstate register_value Counteren) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Counteren_Counteren_chunk_0 :=
         (update_subrange_vec_dec r.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Counteren in
   write_reg r_ref r
    : M (unit).

Definition _update_Counteren_CY (v : Counteren) (x : mword 1) 
: Counteren :=
   {[ v with
     Counteren_Counteren_chunk_0 :=
       (update_subrange_vec_dec v.(Counteren_Counteren_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_mcounteren (c : Counteren) (v : mword 64) 
: M (Counteren) :=
   cast_unit_vec (access_vec_dec v 2) >>= fun w__0 : mword 1 =>
   let c := _update_Counteren_IR c (w__0  : mword 1) in
   cast_unit_vec (access_vec_dec v 1) >>= fun w__1 : mword 1 =>
   let c := _update_Counteren_TM c (w__1  : mword 1) in
   cast_unit_vec (access_vec_dec v 0) >>= fun w__2 : mword 1 =>
   let c := _update_Counteren_CY c (w__2  : mword 1) in
   returnm (c
    : Counteren).

Definition legalize_scounteren (c : Counteren) (v : mword 64) 
: M (Counteren) :=
   cast_unit_vec (access_vec_dec v 2) >>= fun w__0 : mword 1 =>
   let c := _update_Counteren_IR c (w__0  : mword 1) in
   cast_unit_vec (access_vec_dec v 1) >>= fun w__1 : mword 1 =>
   let c := _update_Counteren_TM c (w__1  : mword 1) in
   cast_unit_vec (access_vec_dec v 0) >>= fun w__2 : mword 1 =>
   let c := _update_Counteren_CY c (w__2  : mword 1) in
   returnm (c
    : Counteren).

Definition retire_instruction '(tt : unit) 
: M (unit) :=
   read_reg minstret_written_ref >>= fun w__0 : bool =>
   (if ((eq_vec ((bool_to_bits w__0)  : mword 1) ((bool_to_bits true)  : mword 1))) then
      write_reg minstret_written_ref false
       : M (unit)
    else
      (read_reg minstret_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
      write_reg minstret_ref (add_vec_int w__1 1)
       : M (unit))
    : M (unit).

Definition Mk_Sstatus (v : mword 64) 
: Sstatus :=
   {| Sstatus_Sstatus_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sstatus_bits (v : Sstatus) 
: mword 64 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 0.

Definition _set_Sstatus_bits (r_ref : register_ref regstate register_value Sstatus) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_bits (v : Sstatus) (x : mword 64) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sstatus_SD (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 63.

Definition _set_Sstatus_SD (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 63 63 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SD (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 63 63 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UXL (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 33 32.

Definition _set_Sstatus_UXL (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 33 32 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UXL (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 33 32 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_MXR (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19.

Definition _set_Sstatus_MXR (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_MXR (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 19 19 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SUM (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18.

Definition _set_Sstatus_SUM (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SUM (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 18 18 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_XS (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15.

Definition _set_Sstatus_XS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_XS (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 16 15 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_FS (v : Sstatus) 
: mword 2 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13.

Definition _set_Sstatus_FS (r_ref : register_ref regstate register_value Sstatus) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec v 1 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_FS (v : Sstatus) (x : mword 2) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 14 13 (subrange_vec_dec x 1 0)) ]}.

Definition _get_Sstatus_SPP (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8.

Definition _set_Sstatus_SPP (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPP (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SPIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5.

Definition _set_Sstatus_SPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SPIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UPIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4.

Definition _set_Sstatus_UPIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UPIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_SIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1.

Definition _set_Sstatus_SIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_SIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sstatus_UIE (v : Sstatus) 
: mword 1 :=
   subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0.

Definition _set_Sstatus_UIE (r_ref : register_ref regstate register_value Sstatus) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sstatus_Sstatus_chunk_0 :=
         (update_subrange_vec_dec r.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sstatus in
   write_reg r_ref r
    : M (unit).

Definition _update_Sstatus_UIE (v : Sstatus) (x : mword 1) 
: Sstatus :=
   {[ v with
     Sstatus_Sstatus_chunk_0 :=
       (update_subrange_vec_dec v.(Sstatus_Sstatus_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_mstatus (m : Mstatus) 
: Sstatus :=
   let s := Mk_Sstatus (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sstatus_SD s (_get_Mstatus_SD m) in
   let s := _update_Sstatus_UXL s (_get_Mstatus_UXL m) in
   let s := _update_Sstatus_MXR s (_get_Mstatus_MXR m) in
   let s := _update_Sstatus_SUM s (_get_Mstatus_SUM m) in
   let s := _update_Sstatus_XS s (_get_Mstatus_XS m) in
   let s := _update_Sstatus_FS s (_get_Mstatus_FS m) in
   let s := _update_Sstatus_SPP s (_get_Mstatus_SPP m) in
   let s := _update_Sstatus_SPIE s (_get_Mstatus_SPIE m) in
   let s := _update_Sstatus_UPIE s (_get_Mstatus_UPIE m) in
   let s := _update_Sstatus_SIE s (_get_Mstatus_SIE m) in
   _update_Sstatus_UIE s (_get_Mstatus_UIE m).

Definition lift_sstatus (m : Mstatus) (s : Sstatus) 
: Mstatus :=
   let m := _update_Mstatus_SD m (_get_Sstatus_SD s) in
   let m := _update_Mstatus_MXR m (_get_Sstatus_MXR s) in
   let m := _update_Mstatus_SUM m (_get_Sstatus_SUM s) in
   let m := _update_Mstatus_XS m (_get_Sstatus_XS s) in
   let m := _update_Mstatus_FS m (_get_Sstatus_FS s) in
   let m := _update_Mstatus_SPP m (_get_Sstatus_SPP s) in
   let m := _update_Mstatus_SPIE m (_get_Sstatus_SPIE s) in
   let m := _update_Mstatus_UPIE m (_get_Sstatus_UPIE s) in
   let m := _update_Mstatus_SIE m (_get_Sstatus_SIE s) in
   _update_Mstatus_UIE m (_get_Sstatus_UIE s).

Definition legalize_sstatus (m : Mstatus) (v : mword 64) 
: Mstatus :=
   lift_sstatus m (Mk_Sstatus v).

Definition Mk_Sedeleg (v : mword 64) 
: Sedeleg :=
   {| Sedeleg_Sedeleg_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sedeleg_bits (v : Sedeleg) 
: mword 64 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 63 0.

Definition _set_Sedeleg_bits (r_ref : register_ref regstate register_value Sedeleg) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_bits (v : Sedeleg) (x : mword 64) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sedeleg_UEnvCall (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8.

Definition _set_Sedeleg_UEnvCall (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_UEnvCall (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7.

Definition _set_Sedeleg_SAMO_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_SAMO_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6.

Definition _set_Sedeleg_SAMO_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_SAMO_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5.

Definition _set_Sedeleg_Load_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Load_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4.

Definition _set_Sedeleg_Load_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Load_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Breakpoint (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3.

Definition _set_Sedeleg_Breakpoint (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Breakpoint (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Illegal_Instr (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2.

Definition _set_Sedeleg_Illegal_Instr (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Illegal_Instr (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Access_Fault (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1.

Definition _set_Sedeleg_Fetch_Access_Fault (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Access_Fault (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sedeleg_Fetch_Addr_Align (v : Sedeleg) 
: mword 1 :=
   subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0.

Definition _set_Sedeleg_Fetch_Addr_Align (r_ref : register_ref regstate register_value Sedeleg) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sedeleg_Sedeleg_chunk_0 :=
         (update_subrange_vec_dec r.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sedeleg in
   write_reg r_ref r
    : M (unit).

Definition _update_Sedeleg_Fetch_Addr_Align (v : Sedeleg) (x : mword 1) 
: Sedeleg :=
   {[ v with
     Sedeleg_Sedeleg_chunk_0 :=
       (update_subrange_vec_dec v.(Sedeleg_Sedeleg_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition legalize_sedeleg (s : Sedeleg) (v : mword 64) 
: Sedeleg :=
   Mk_Sedeleg (EXTZ 64 (subrange_vec_dec v 8 0)).

Definition Mk_Sinterrupts (v : mword 64) 
: Sinterrupts :=
   {| Sinterrupts_Sinterrupts_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Sinterrupts_bits (v : Sinterrupts) 
: mword 64 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 63 0.

Definition _set_Sinterrupts_bits (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_bits (v : Sinterrupts) (x : mword 64) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Sinterrupts_SEI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9.

Definition _set_Sinterrupts_SEI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SEI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 9 9 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UEI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8.

Definition _set_Sinterrupts_UEI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UEI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 8 8 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_STI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5.

Definition _set_Sinterrupts_STI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_STI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_UTI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4.

Definition _set_Sinterrupts_UTI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_UTI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_SSI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1.

Definition _set_Sinterrupts_SSI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_SSI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_Sinterrupts_USI (v : Sinterrupts) 
: mword 1 :=
   subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0.

Definition _set_Sinterrupts_USI (r_ref : register_ref regstate register_value Sinterrupts) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Sinterrupts_Sinterrupts_chunk_0 :=
         (update_subrange_vec_dec r.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : Sinterrupts in
   write_reg r_ref r
    : M (unit).

Definition _update_Sinterrupts_USI (v : Sinterrupts) (x : mword 1) 
: Sinterrupts :=
   {[ v with
     Sinterrupts_Sinterrupts_chunk_0 :=
       (update_subrange_vec_dec v.(Sinterrupts_Sinterrupts_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition lower_mip (m : Minterrupts) (d : Minterrupts) 
: Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lower_mie (m : Minterrupts) (d : Minterrupts) 
: Sinterrupts :=
   let s : Sinterrupts := Mk_Sinterrupts (EXTZ 64 (vec_of_bits [B0]  : mword 1)) in
   let s := _update_Sinterrupts_SEI s (and_vec (_get_Minterrupts_SEI m) (_get_Minterrupts_SEI d)) in
   let s := _update_Sinterrupts_STI s (and_vec (_get_Minterrupts_STI m) (_get_Minterrupts_STI d)) in
   let s := _update_Sinterrupts_SSI s (and_vec (_get_Minterrupts_SSI m) (_get_Minterrupts_SSI d)) in
   let s := _update_Sinterrupts_UEI s (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   let s := _update_Sinterrupts_UTI s (and_vec (_get_Minterrupts_UTI m) (_get_Minterrupts_UTI d)) in
   _update_Sinterrupts_USI s (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition lift_sip (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) 
: Minterrupts :=
   let m : Minterrupts := o in
   let m := _update_Minterrupts_SSI m (and_vec (_get_Sinterrupts_SSI s) (_get_Minterrupts_SSI d)) in
   let m := _update_Minterrupts_UEI m (and_vec (_get_Minterrupts_UEI m) (_get_Minterrupts_UEI d)) in
   _update_Minterrupts_USI m (and_vec (_get_Minterrupts_USI m) (_get_Minterrupts_USI d)).

Definition legalize_sip (m : Minterrupts) (d : Minterrupts) (v : mword 64) 
: Minterrupts :=
   lift_sip m d (Mk_Sinterrupts v).

Definition lift_sie (o : Minterrupts) (d : Minterrupts) (s : Sinterrupts) 
: Minterrupts :=
   let m : Minterrupts := o in
   let m :=
     if ((eq_vec (_get_Minterrupts_SEI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_SEI m (_get_Sinterrupts_SEI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_STI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_STI m (_get_Sinterrupts_STI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_SSI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_SSI m (_get_Sinterrupts_SSI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_UEI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_UEI m (_get_Sinterrupts_UEI s)
     else m in
   let m :=
     if ((eq_vec (_get_Minterrupts_UTI d) ((bool_to_bits true)  : mword 1))) then
       _update_Minterrupts_UTI m (_get_Sinterrupts_UTI s)
     else m in
   if ((eq_vec (_get_Minterrupts_USI d) ((bool_to_bits true)  : mword 1))) then
     _update_Minterrupts_USI m (_get_Sinterrupts_USI s)
   else m.

Definition legalize_sie (m : Minterrupts) (d : Minterrupts) (v : mword 64) 
: Minterrupts :=
   lift_sie m d (Mk_Sinterrupts v).

Definition Mk_Satp64 (v : mword 64) 
: Satp64 :=
   {| Satp64_Satp64_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_Satp64_bits (v : Satp64) 
: mword 64 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0.

Definition _set_Satp64_bits (r_ref : register_ref regstate register_value Satp64) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_bits (v : Satp64) (x : mword 64) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_Satp64_Mode (v : Satp64) 
: mword 4 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60.

Definition _set_Satp64_Mode (r_ref : register_ref regstate register_value Satp64) (v : mword 4) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec v 3 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Mode (v : Satp64) (x : mword 4) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 63 60 (subrange_vec_dec x 3 0)) ]}.

Definition _get_Satp64_Asid (v : Satp64) 
: mword 16 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44.

Definition _set_Satp64_Asid (r_ref : register_ref regstate register_value Satp64) (v : mword 16) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec v 15 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_Asid (v : Satp64) (x : mword 16) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 59 44 (subrange_vec_dec x 15 0)) ]}.

Definition _get_Satp64_PPN (v : Satp64) 
: mword 44 :=
   subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0.

Definition _set_Satp64_PPN (r_ref : register_ref regstate register_value Satp64) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       Satp64_Satp64_chunk_0 :=
         (update_subrange_vec_dec r.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec v 43 0)) ]}
      : Satp64 in
   write_reg r_ref r
    : M (unit).

Definition _update_Satp64_PPN (v : Satp64) (x : mword 44) 
: Satp64 :=
   {[ v with
     Satp64_Satp64_chunk_0 :=
       (update_subrange_vec_dec v.(Satp64_Satp64_chunk_0) 43 0 (subrange_vec_dec x 43 0)) ]}.

Definition legalize_satp (a : Architecture) (o : mword 64) (v : mword 64) 
: mword 64 :=
   let s := Mk_Satp64 v in
   match (satpMode_of_bits a (_get_Satp64_Mode s)) with
   | None => o
   | Some (Sv32) => o
   | Some (_) => _get_Satp64_bits s
   end.

Definition csr_name (csr : mword 12) 
: string :=
   let b__0 := csr in
   if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then "ustatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "uie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "utvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "fflags"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "frm"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "fcsr"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "time"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "timeh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "sedeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "sideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "stvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "scounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "sepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "scause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "stval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "sip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "satp"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     "mvendorid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     "marchid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     "mimpid"
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     "mhartid"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mstatus"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "misa"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "medeleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mideleg"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mie"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "mtvec"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "mcounteren"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mscratch"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "mepc"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "mcause"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mtval"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     "mip"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "pmpcfg0"
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     "pmpaddr0"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycle"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstret"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycleh"
   else if ((eq_vec b__0 (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstreth"
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "tselect"
   else "UNKNOWN".

Definition csr_name_map_forwards (arg_ : mword 12) 
: string :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then "ustatus"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then "uie"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "utvec"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "uscratch"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "uepc"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "ucause"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "utval"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then "uip"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "fflags"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then "frm"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "fcsr"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycle"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "time"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instret"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "cycleh"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "timeh"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "instreth"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sstatus"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "sedeleg"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "sideleg"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then "sie"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "stvec"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "scounteren"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "sscratch"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "sepc"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "scause"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "stval"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then "sip"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "satp"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     "mvendorid"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     "marchid"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     "mimpid"
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     "mhartid"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mstatus"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "misa"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "medeleg"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mideleg"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then "mie"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     "mtvec"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     "mcounteren"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mscratch"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     "mepc"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "mcause"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     "mtval"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then "mip"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "pmpcfg0"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then
     "pmpcfg1"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then
     "pmpcfg2"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then
     "pmpcfg3"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     "pmpaddr0"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12))) then
     "pmpaddr1"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12))) then
     "pmpaddr2"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12))) then
     "pmpaddr3"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12))) then
     "pmpaddr4"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12))) then
     "pmpaddr5"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12))) then
     "pmpaddr6"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12))) then
     "pmpaddr7"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12))) then
     "pmpaddr8"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12))) then
     "pmpaddr9"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12))) then
     "pmpaddr10"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12))) then
     "pmpaddr11"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12))) then
     "pmpaddr12"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12))) then
     "pmpaddr13"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12))) then
     "pmpaddr14"
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12))) then
     "pmpaddr15"
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycle"
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstret"
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     "mcycleh"
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     "minstreth"
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     "tselect"
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then
     "tdata1"
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then
     "tdata2"
   else "tdata3".

Definition csr_name_map_backwards (arg_ : string) 
: M (mword 12) :=
   (match arg_ with
    | "ustatus" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "uie" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "utvec" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "uscratch" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "uepc" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "ucause" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "utval" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "uip" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "fflags" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "frm" => returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "fcsr" =>
       returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "cycle" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "time" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "instret" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "cycleh" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "timeh" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "instreth" =>
       returnm ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "sstatus" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "sedeleg" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "sideleg" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "sie" => returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "stvec" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "scounteren" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "sscratch" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "sepc" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "scause" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "stval" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "sip" => returnm ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "satp" =>
       returnm ((vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "mvendorid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "marchid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mimpid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mhartid" =>
       returnm ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "mstatus" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "misa" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "medeleg" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mideleg" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mie" => returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "mtvec" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "mcounteren" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "mscratch" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "mepc" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "mcause" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mtval" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "mip" => returnm ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpcfg0" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpcfg1" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpcfg2" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpcfg3" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr0" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr1" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr2" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr3" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr4" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr5" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr6" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr7" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr8" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr9" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr10" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr11" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12)  : mword 12)
    | "pmpaddr12" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12)  : mword 12)
    | "pmpaddr13" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12)  : mword 12)
    | "pmpaddr14" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12)  : mword 12)
    | "pmpaddr15" =>
       returnm ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12)  : mword 12)
    | "mcycle" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "minstret" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "mcycleh" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "minstreth" =>
       returnm ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "tselect" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12)  : mword 12)
    | "tdata1" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12)  : mword 12)
    | "tdata2" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12)  : mword 12)
    | "tdata3" =>
       returnm ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12)  : mword 12)
    | _ => exit tt  : M (mword 12)
    end)
    : M (mword 12).

Definition csr_name_map_forwards_matches (arg_ : mword 12) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12))) then true
   else false.

Definition csr_name_map_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "ustatus" => true
   | "uie" => true
   | "utvec" => true
   | "uscratch" => true
   | "uepc" => true
   | "ucause" => true
   | "utval" => true
   | "uip" => true
   | "fflags" => true
   | "frm" => true
   | "fcsr" => true
   | "cycle" => true
   | "time" => true
   | "instret" => true
   | "cycleh" => true
   | "timeh" => true
   | "instreth" => true
   | "sstatus" => true
   | "sedeleg" => true
   | "sideleg" => true
   | "sie" => true
   | "stvec" => true
   | "scounteren" => true
   | "sscratch" => true
   | "sepc" => true
   | "scause" => true
   | "stval" => true
   | "sip" => true
   | "satp" => true
   | "mvendorid" => true
   | "marchid" => true
   | "mimpid" => true
   | "mhartid" => true
   | "mstatus" => true
   | "misa" => true
   | "medeleg" => true
   | "mideleg" => true
   | "mie" => true
   | "mtvec" => true
   | "mcounteren" => true
   | "mscratch" => true
   | "mepc" => true
   | "mcause" => true
   | "mtval" => true
   | "mip" => true
   | "pmpcfg0" => true
   | "pmpcfg1" => true
   | "pmpcfg2" => true
   | "pmpcfg3" => true
   | "pmpaddr0" => true
   | "pmpaddr1" => true
   | "pmpaddr2" => true
   | "pmpaddr3" => true
   | "pmpaddr4" => true
   | "pmpaddr5" => true
   | "pmpaddr6" => true
   | "pmpaddr7" => true
   | "pmpaddr8" => true
   | "pmpaddr9" => true
   | "pmpaddr10" => true
   | "pmpaddr11" => true
   | "pmpaddr12" => true
   | "pmpaddr13" => true
   | "pmpaddr14" => true
   | "pmpaddr15" => true
   | "mcycle" => true
   | "minstret" => true
   | "mcycleh" => true
   | "minstreth" => true
   | "tselect" => true
   | "tdata1" => true
   | "tdata2" => true
   | "tdata3" => true
   | _ => false
   end.

Definition csr_name_map_matches_prefix (arg_ : string) 
: option ((mword 12 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1773_ := arg_ in
   if ((andb (string_startswith _stringappend_1773_ "ustatus")
          (match (string_drop _stringappend_1773_ (string_length "ustatus")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "ustatus")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "uie")
               (match (string_drop _stringappend_1773_ (string_length "uie")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "uie")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "utvec")
               (match (string_drop _stringappend_1773_ (string_length "utvec")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "utvec")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "uscratch")
               (match (string_drop _stringappend_1773_ (string_length "uscratch")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "uscratch")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "uepc")
               (match (string_drop _stringappend_1773_ (string_length "uepc")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "uepc")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "ucause")
               (match (string_drop _stringappend_1773_ (string_length "ucause")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "ucause")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "utval")
               (match (string_drop _stringappend_1773_ (string_length "utval")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "utval")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "uip")
               (match (string_drop _stringappend_1773_ (string_length "uip")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "uip")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "fflags")
               (match (string_drop _stringappend_1773_ (string_length "fflags")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "fflags")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "frm")
               (match (string_drop _stringappend_1773_ (string_length "frm")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "frm")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "fcsr")
               (match (string_drop _stringappend_1773_ (string_length "fcsr")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "fcsr")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "cycle")
               (match (string_drop _stringappend_1773_ (string_length "cycle")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "cycle")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "time")
               (match (string_drop _stringappend_1773_ (string_length "time")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "time")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "instret")
               (match (string_drop _stringappend_1773_ (string_length "instret")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "instret")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "cycleh")
               (match (string_drop _stringappend_1773_ (string_length "cycleh")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "cycleh")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "timeh")
               (match (string_drop _stringappend_1773_ (string_length "timeh")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "timeh")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "instreth")
               (match (string_drop _stringappend_1773_ (string_length "instreth")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "instreth")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sstatus")
               (match (string_drop _stringappend_1773_ (string_length "sstatus")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "sstatus")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sedeleg")
               (match (string_drop _stringappend_1773_ (string_length "sedeleg")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "sedeleg")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sideleg")
               (match (string_drop _stringappend_1773_ (string_length "sideleg")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "sideleg")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sie")
               (match (string_drop _stringappend_1773_ (string_length "sie")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "sie")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "stvec")
               (match (string_drop _stringappend_1773_ (string_length "stvec")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "stvec")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "scounteren")
               (match (string_drop _stringappend_1773_ (string_length "scounteren")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "scounteren")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sscratch")
               (match (string_drop _stringappend_1773_ (string_length "sscratch")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "sscratch")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sepc")
               (match (string_drop _stringappend_1773_ (string_length "sepc")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "sepc")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "scause")
               (match (string_drop _stringappend_1773_ (string_length "scause")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "scause")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "stval")
               (match (string_drop _stringappend_1773_ (string_length "stval")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "stval")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "sip")
               (match (string_drop _stringappend_1773_ (string_length "sip")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "sip")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "satp")
               (match (string_drop _stringappend_1773_ (string_length "satp")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "satp")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mvendorid")
               (match (string_drop _stringappend_1773_ (string_length "mvendorid")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mvendorid")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "marchid")
               (match (string_drop _stringappend_1773_ (string_length "marchid")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "marchid")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mimpid")
               (match (string_drop _stringappend_1773_ (string_length "mimpid")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mimpid")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mhartid")
               (match (string_drop _stringappend_1773_ (string_length "mhartid")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mhartid")) with
     | s_ =>
        Some ((vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mstatus")
               (match (string_drop _stringappend_1773_ (string_length "mstatus")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mstatus")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "misa")
               (match (string_drop _stringappend_1773_ (string_length "misa")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "misa")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "medeleg")
               (match (string_drop _stringappend_1773_ (string_length "medeleg")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "medeleg")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mideleg")
               (match (string_drop _stringappend_1773_ (string_length "mideleg")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mideleg")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mie")
               (match (string_drop _stringappend_1773_ (string_length "mie")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "mie")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mtvec")
               (match (string_drop _stringappend_1773_ (string_length "mtvec")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mtvec")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mcounteren")
               (match (string_drop _stringappend_1773_ (string_length "mcounteren")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mcounteren")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mscratch")
               (match (string_drop _stringappend_1773_ (string_length "mscratch")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mscratch")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mepc")
               (match (string_drop _stringappend_1773_ (string_length "mepc")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "mepc")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mcause")
               (match (string_drop _stringappend_1773_ (string_length "mcause")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mcause")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mtval")
               (match (string_drop _stringappend_1773_ (string_length "mtval")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mtval")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mip")
               (match (string_drop _stringappend_1773_ (string_length "mip")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1773_ (string_length "mip")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpcfg0")
               (match (string_drop _stringappend_1773_ (string_length "pmpcfg0")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpcfg0")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpcfg1")
               (match (string_drop _stringappend_1773_ (string_length "pmpcfg1")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpcfg1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpcfg2")
               (match (string_drop _stringappend_1773_ (string_length "pmpcfg2")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpcfg2")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpcfg3")
               (match (string_drop _stringappend_1773_ (string_length "pmpcfg3")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpcfg3")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr0")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr0")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr0")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr1")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr1")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr2")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr2")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr2")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr3")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr3")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr3")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr4")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr4")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr4")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr5")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr5")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr5")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr6")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr6")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr6")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr7")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr7")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr7")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B1;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr8")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr8")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr8")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr9")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr9")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr9")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr10")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr10")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr10")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr11")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr11")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr11")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr12")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr12")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr12")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr13")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr13")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr13")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr14")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr14")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr14")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "pmpaddr15")
               (match (string_drop _stringappend_1773_ (string_length "pmpaddr15")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "pmpaddr15")) with
     | s_ =>
        Some ((vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mcycle")
               (match (string_drop _stringappend_1773_ (string_length "mcycle")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mcycle")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "minstret")
               (match (string_drop _stringappend_1773_ (string_length "minstret")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "minstret")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "mcycleh")
               (match (string_drop _stringappend_1773_ (string_length "mcycleh")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "mcycleh")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "minstreth")
               (match (string_drop _stringappend_1773_ (string_length "minstreth")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "minstreth")) with
     | s_ =>
        Some ((vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "tselect")
               (match (string_drop _stringappend_1773_ (string_length "tselect")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "tselect")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "tdata1")
               (match (string_drop _stringappend_1773_ (string_length "tdata1")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "tdata1")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "tdata2")
               (match (string_drop _stringappend_1773_ (string_length "tdata2")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "tdata2")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B0]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1773_ "tdata3")
               (match (string_drop _stringappend_1773_ (string_length "tdata3")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1773_ (string_length "tdata3")) with
     | s_ =>
        Some ((vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B1;B1]  : mword 12),
              sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition csrAccess (csr : mword 12)  : mword 2 := subrange_vec_dec csr 11 10.

Definition csrPriv (csr : mword 12)  : mword 2 := subrange_vec_dec csr 9 8.

Definition is_CSR_defined (csr : mword 12) (p : Privilege) 
: bool :=
   let b__0 := csr in
   if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
     false
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
     orb (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2))
       (eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Supervisor)  : mword 2))
   else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
     eq_vec ((privLevel_to_bits p)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)
   else false.

Definition check_CSR_access (csrrw : mword 2) (csrpr : mword 2) (p : Privilege) (isWrite : bool) 
: bool :=
   andb
     (negb
        (andb (eq_vec ((bool_to_bits isWrite)  : mword 1) ((bool_to_bits true)  : mword 1))
           (eq_vec csrrw (vec_of_bits [B1;B1]  : mword 2))))
     (zopz0zKzJ_u (privLevel_to_bits p) csrpr).

Definition check_TVM_SATP (csr : mword 12) (p : Privilege) 
: M (bool) :=
   and_boolM
     (returnm ((eq_vec csr (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))
       : bool))
     ((and_boolM
         (returnm ((eq_vec ((privLevel_to_bits p)  : mword 2)
                      ((privLevel_to_bits Supervisor)
                       : mword 2))
           : bool))
         (read_reg mstatus_ref >>= fun w__0 : Mstatus =>
          returnm ((eq_vec (_get_Mstatus_TVM w__0) ((bool_to_bits true)  : mword 1))
           : bool)))
      : M (bool)) >>= fun w__2 : bool =>
   returnm ((negb w__2)
    : bool).

Definition check_Counteren (csr : mword 12) (p : Privilege) 
: M (bool) :=
   (match (csr, p) with
    | (b__0, Supervisor) =>
       (if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__0 : Counteren =>
          returnm ((eq_vec (_get_Counteren_CY w__0) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__1 : Counteren =>
          returnm ((eq_vec (_get_Counteren_TM w__1) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
          read_reg mcounteren_ref >>= fun w__2 : Counteren =>
          returnm ((eq_vec (_get_Counteren_IR w__2) ((bool_to_bits true)  : mword 1))
           : bool)
        else
          returnm ((match (b__0, Supervisor) with
                    | (g__31, g__32) =>
                       if ((andb
                              (zopz0zIzJ_u
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12) csr)
                              (zopz0zIzJ_u csr
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12))))
                       then
                         false
                       else true
                    end)
           : bool))
        : M (bool)
    | (b__3, User) =>
       (if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__6 : Counteren =>
          returnm ((eq_vec (_get_Counteren_CY w__6) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__7 : Counteren =>
          returnm ((eq_vec (_get_Counteren_TM w__7) ((bool_to_bits true)  : mword 1))
           : bool)
        else if ((eq_vec b__3 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
          read_reg scounteren_ref >>= fun w__8 : Counteren =>
          returnm ((eq_vec (_get_Counteren_IR w__8) ((bool_to_bits true)  : mword 1))
           : bool)
        else
          returnm ((match (b__3, User) with
                    | (g__31, g__32) =>
                       if ((andb
                              (zopz0zIzJ_u
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12) csr)
                              (zopz0zIzJ_u csr
                                 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12))))
                       then
                         false
                       else true
                    end)
           : bool))
        : M (bool)
    | (g__31, g__32) =>
       returnm ((if ((andb
                        (zopz0zIzJ_u (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12)
                           csr)
                        (zopz0zIzJ_u csr
                           (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  : mword 12)))) then
                   false
                 else true)
        : bool)
    end)
    : M (bool).

Definition check_CSR (csr : mword 12) (p : Privilege) (isWrite : bool) 
: M (bool) :=
   (and_boolM (returnm ((is_CSR_defined csr p)  : bool))
      ((and_boolM (returnm ((check_CSR_access (csrAccess csr) (csrPriv csr) p isWrite)  : bool))
          ((and_boolM ((check_TVM_SATP csr p)  : M (bool)) ((check_Counteren csr p)  : M (bool)))
           : M (bool)))
       : M (bool)))
    : M (bool).

Axiom load_reservation : forall  (_ : xlenbits) , unit.

Axiom match_reservation : forall  (_ : xlenbits) , M (bool).

Axiom cancel_reservation : forall  (_ : unit) , unit.

Definition exception_delegatee (e : ExceptionType) (p : Privilege) 
: M (Privilege) :=
   let '(existT _ idx _) := num_of_ExceptionType e in
   read_reg medeleg_ref >>= fun w__0 : Medeleg =>
   let super := access_vec_dec (_get_Medeleg_bits w__0) idx in
   read_reg sedeleg_ref >>= fun w__1 : Sedeleg =>
   let user := access_vec_dec (_get_Sedeleg_bits w__1) idx in
   and_boolM
     (read_reg misa_ref >>= fun w__2 : Misa =>
      returnm ((eq_vec (_get_Misa_S w__2) ((bool_to_bits true)  : mword 1))
       : bool)) ((bit_to_bool super)  : M (bool)) >>= fun w__4 : bool =>
   let deleg := if (w__4) then Supervisor else Machine in
   returnm ((if ((zopz0zI_u (privLevel_to_bits deleg) (privLevel_to_bits p))) then p
             else deleg)
    : Privilege).

Definition findPendingInterrupt (ip : mword 64) 
: option InterruptType :=
   let ip := Mk_Minterrupts ip in
   if ((eq_vec (_get_Minterrupts_MEI ip) ((bool_to_bits true)  : mword 1))) then Some I_M_External
   else if ((eq_vec (_get_Minterrupts_MSI ip) ((bool_to_bits true)  : mword 1))) then
     Some I_M_Software
   else if ((eq_vec (_get_Minterrupts_MTI ip) ((bool_to_bits true)  : mword 1))) then Some I_M_Timer
   else if ((eq_vec (_get_Minterrupts_SEI ip) ((bool_to_bits true)  : mword 1))) then
     Some I_S_External
   else if ((eq_vec (_get_Minterrupts_SSI ip) ((bool_to_bits true)  : mword 1))) then
     Some I_S_Software
   else if ((eq_vec (_get_Minterrupts_STI ip) ((bool_to_bits true)  : mword 1))) then Some I_S_Timer
   else if ((eq_vec (_get_Minterrupts_UEI ip) ((bool_to_bits true)  : mword 1))) then
     Some I_U_External
   else if ((eq_vec (_get_Minterrupts_USI ip) ((bool_to_bits true)  : mword 1))) then
     Some I_U_Software
   else if ((eq_vec (_get_Minterrupts_UTI ip) ((bool_to_bits true)  : mword 1))) then Some I_U_Timer
   else None.

Definition curInterrupt (priv : Privilege) (pend : Minterrupts) (enbl : Minterrupts) (delg : Minterrupts) 
: M (option ((InterruptType * Privilege))) :=
   let en_mip : xlenbits := and_vec (_get_Minterrupts_bits pend) (_get_Minterrupts_bits enbl) in
   (if ((eq_vec en_mip (EXTZ 64 (vec_of_bits [B0]  : mword 1)))) then
      returnm (None
       : option ((InterruptType * Privilege)))
    else
      or_boolM
        (returnm ((neq_vec ((privLevel_to_bits priv)  : mword 2)
                     ((privLevel_to_bits Machine)
                      : mword 2))
          : bool))
        ((and_boolM
            (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                         ((privLevel_to_bits Machine)
                          : mword 2))
              : bool))
            (read_reg mstatus_ref >>= fun w__0 : Mstatus =>
             returnm ((eq_vec (_get_Mstatus_MIE w__0) ((bool_to_bits true)  : mword 1))
              : bool)))
         : M (bool)) >>= fun eff_mie =>
      or_boolM
        (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                     ((privLevel_to_bits User)
                      : mword 2))
          : bool))
        ((and_boolM
            (returnm ((eq_vec ((privLevel_to_bits priv)  : mword 2)
                         ((privLevel_to_bits Supervisor)
                          : mword 2))
              : bool))
            (read_reg mstatus_ref >>= fun w__2 : Mstatus =>
             returnm ((eq_vec (_get_Mstatus_SIE w__2) ((bool_to_bits true)  : mword 1))
              : bool)))
         : M (bool)) >>= fun eff_sie =>
      let eff_mip := and_vec en_mip (not_vec (_get_Minterrupts_bits delg)) in
      let eff_sip := and_vec en_mip (_get_Minterrupts_bits delg) in
      (if ((andb eff_mie (neq_vec eff_mip (EXTZ 64 (vec_of_bits [B0]  : mword 1))))) then
         (match (findPendingInterrupt eff_mip) with
          | Some (i) =>
             let r := (i, Machine) in
             returnm ((Some r)
              : option ((InterruptType * Privilege)))
          | None =>
             (internal_error
                (String.append "non-zero eff_mip="
                   (String.append (string_of_bits eff_mip) ", but nothing pending")))
              : M (option ((InterruptType * Privilege)))
          end)
          : M (option ((InterruptType * Privilege)))
       else if ((andb eff_sie (neq_vec eff_sip (EXTZ 64 (vec_of_bits [B0]  : mword 1))))) then
         (match (findPendingInterrupt eff_sip) with
          | Some (i) =>
             let r := (i, Supervisor) in
             returnm ((Some r)
              : option ((InterruptType * Privilege)))
          | None =>
             (internal_error
                (String.append "non-zero eff_sip="
                   (String.append (string_of_bits eff_sip) ", but nothing pending")))
              : M (option ((InterruptType * Privilege)))
          end)
          : M (option ((InterruptType * Privilege)))
       else
         let p :=
           if ((eq_vec (_get_Minterrupts_MTI pend) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let e :=
           if ((eq_vec (_get_Minterrupts_MTI enbl) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let d :=
           if ((eq_vec (_get_Minterrupts_MTI delg) ((bool_to_bits true)  : mword 1))) then "1"
           else "0" in
         let '_ :=
           (print_endline
              (String.append " MTI: pend="
                 (String.append p
                    (String.append " enbl=" (String.append e (String.append " delg=" d))))))
            : unit in
         let eff_mip := and_vec en_mip (not_vec (_get_Minterrupts_bits delg)) in
         let eff_sip := and_vec en_mip (_get_Minterrupts_bits delg) in
         read_reg mstatus_ref >>= fun w__8 : Mstatus =>
         read_reg mstatus_ref >>= fun w__9 : Mstatus =>
         read_reg mstatus_ref >>= fun w__10 : Mstatus =>
         let '_ :=
           (print_endline
              (String.append "mstatus="
                 (String.append (string_of_bits (_get_Mstatus_bits w__8))
                    (String.append " mie,sie="
                       (String.append (string_of_bits (_get_Mstatus_MIE w__9))
                          (String.append ","
                             (String.append (string_of_bits (_get_Mstatus_SIE w__10))
                                (String.append " en_mip="
                                   (String.append (string_of_bits en_mip)
                                      (String.append " eff_mip="
                                         (String.append (string_of_bits eff_mip)
                                            (String.append " eff_sip=" (string_of_bits eff_sip)))))))))))))
            : unit in
         returnm (None
          : option ((InterruptType * Privilege))))
       : M (option ((InterruptType * Privilege))))
    : M (option ((InterruptType * Privilege))).

Definition tval (excinfo : option (mword 64)) 
: mword 64 :=
   match excinfo with | Some (e) => e | None => EXTZ 64 (vec_of_bits [B0]  : mword 1) end.

Definition handle_trap (del_priv : Privilege) (intr : bool) (c : mword 4) (pc : mword 64) (info : option (mword 64)) 
: M (mword 64) :=
   let '_ :=
     (print_endline
        (String.append "handling "
           (String.append (if (intr) then "int#" else "exc#")
              (String.append (string_of_bits c)
                 (String.append " at priv "
                    (String.append ((privLevel_to_str del_priv)  : string)
                       (String.append " with tval " (string_of_bits (tval info)))))))))
      : unit in
   (match del_priv with
    | Machine =>
       _set_Mcause_IsInterrupt mcause_ref ((bool_to_bits intr)  : mword 1) >>
       _set_Mcause_Cause mcause_ref (EXTZ 63 c) >>
       read_reg mstatus_ref >>= fun w__0 : Mstatus =>
       _set_Mstatus_MPIE mstatus_ref (_get_Mstatus_MIE w__0) >>
       _set_Mstatus_MIE mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
       _set_Mstatus_MPP mstatus_ref (privLevel_to_bits w__1) >>
       write_reg mtval_ref (tval info) >>
       write_reg mepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       read_reg mstatus_ref >>= fun w__2 : Mstatus =>
       read_reg mstatus_ref >>= fun w__3 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__2))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__3)) ")")))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       read_reg mtvec_ref >>= fun w__4 : Mtvec =>
       read_reg mcause_ref >>= fun w__5 : Mcause =>
       (match (tvec_addr w__4 w__5) with
        | Some (epc) => returnm (epc  : mword 64)
        | None => (internal_error "Invalid mtvec mode")  : M (mword 64)
        end)
        : M (mword 64)
    | Supervisor =>
       _set_Mcause_IsInterrupt scause_ref ((bool_to_bits intr)  : mword 1) >>
       _set_Mcause_Cause scause_ref (EXTZ 63 c) >>
       read_reg mstatus_ref >>= fun w__8 : Mstatus =>
       _set_Mstatus_SPIE mstatus_ref (_get_Mstatus_SIE w__8) >>
       _set_Mstatus_SIE mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg cur_privilege_ref >>= fun w__9 : Privilege =>
       match w__9 with
       | User => returnm ((bool_to_bits false)  : mword 1)
       | Supervisor => returnm ((bool_to_bits true)  : mword 1)
       | Machine => (internal_error "invalid privilege for s-mode trap")  : M (mword 1)
       end >>= fun w__11 : mword 1 =>
       _set_Mstatus_SPP mstatus_ref w__11 >>
       write_reg stval_ref (tval info) >>
       write_reg sepc_ref pc >>
       write_reg cur_privilege_ref del_priv >>
       read_reg mstatus_ref >>= fun w__12 : Mstatus =>
       read_reg mstatus_ref >>= fun w__13 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__12))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__13)) ")")))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       read_reg stvec_ref >>= fun w__14 : Mtvec =>
       read_reg scause_ref >>= fun w__15 : Mcause =>
       (match (tvec_addr w__14 w__15) with
        | Some (epc) => returnm (epc  : mword 64)
        | None => (internal_error "Invalid stvec mode")  : M (mword 64)
        end)
        : M (mword 64)
    | User => (internal_error "the N extension is currently unsupported")  : M (mword 64)
    end)
    : M (mword 64).

Definition handle_exception (cur_priv : Privilege) (ctl : ctl_result) (pc : mword 64) 
: M (mword 64) :=
   (match (cur_priv, ctl) with
    | (_, CTL_TRAP (e)) =>
       exception_delegatee e.(sync_exception_trap) cur_priv >>= fun del_priv =>
       let '_ :=
         (print_endline
            (String.append "trapping from "
               (String.append ((privLevel_to_str cur_priv)  : string)
                  (String.append " to "
                     (String.append ((privLevel_to_str del_priv)  : string)
                        (String.append " to handle "
                           ((exceptionType_to_str e.(sync_exception_trap))
                            : string)))))))
          : unit in
       (handle_trap del_priv false ((exceptionType_to_bits e.(sync_exception_trap))  : mword 4) pc
          e.(sync_exception_excinfo))
        : M (mword 64)
    | (_, CTL_MRET (_)) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       _set_Mstatus_MIE mstatus_ref (_get_Mstatus_MPIE w__1) >>
       _set_Mstatus_MPIE mstatus_ref ((bool_to_bits true)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__2 : Mstatus =>
       write_reg cur_privilege_ref (privLevel_of_bits (_get_Mstatus_MPP w__2)) >>
       _set_Mstatus_MPP mstatus_ref (privLevel_to_bits User) >>
       read_reg mstatus_ref >>= fun w__3 : Mstatus =>
       read_reg mstatus_ref >>= fun w__4 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__3))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__4)) ")")))))
          : unit in
       read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
       let '_ :=
         (print_endline
            (String.append "ret-ing from "
               (String.append ((privLevel_to_str prev_priv)  : string)
                  (String.append " to " ((privLevel_to_str w__5)  : string)))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       (read_reg mepc_ref  : M (mword 64)) >>= fun w__6 : mword 64 =>
       pc_alignment_mask tt >>= fun w__7 : mword 64 => returnm ((and_vec w__6 w__7)  : mword 64)
    | (_, CTL_SRET (_)) =>
       read_reg cur_privilege_ref >>= fun prev_priv =>
       read_reg mstatus_ref >>= fun w__8 : Mstatus =>
       _set_Mstatus_SIE mstatus_ref (_get_Mstatus_SPIE w__8) >>
       _set_Mstatus_SPIE mstatus_ref ((bool_to_bits true)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__9 : Mstatus =>
       write_reg
         cur_privilege_ref
         (if ((eq_vec (_get_Mstatus_SPP w__9) ((bool_to_bits true)  : mword 1))) then Supervisor
          else User) >>
       _set_Mstatus_SPP mstatus_ref ((bool_to_bits false)  : mword 1) >>
       read_reg mstatus_ref >>= fun w__10 : Mstatus =>
       read_reg mstatus_ref >>= fun w__11 : Mstatus =>
       let '_ :=
         (print_endline
            (String.append "CSR mstatus <- "
               (String.append (string_of_bits (_get_Mstatus_bits w__10))
                  (String.append " (input: "
                     (String.append (string_of_bits (_get_Mstatus_bits w__11)) ")")))))
          : unit in
       read_reg cur_privilege_ref >>= fun w__12 : Privilege =>
       let '_ :=
         (print_endline
            (String.append "ret-ing from "
               (String.append ((privLevel_to_str prev_priv)  : string)
                  (String.append " to " ((privLevel_to_str w__12)  : string)))))
          : unit in
       let '_ := (cancel_reservation tt)  : unit in
       (read_reg sepc_ref  : M (mword 64)) >>= fun w__13 : mword 64 =>
       pc_alignment_mask tt >>= fun w__14 : mword 64 => returnm ((and_vec w__13 w__14)  : mword 64)
    end)
    : M (mword 64).

Definition handle_mem_exception (addr : mword 64) (e : ExceptionType) 
: M (unit) :=
   let t : sync_exception := {| sync_exception_trap := e;  sync_exception_excinfo := (Some addr) |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
   handle_exception w__0 (CTL_TRAP t) w__1 >>= fun w__2 : xlenbits =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition handle_decode_exception (instbits : mword 64) 
: M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := (Some instbits) |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
   handle_exception w__0 (CTL_TRAP t) w__1 >>= fun w__2 : xlenbits =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition handle_interrupt (i : InterruptType) (del_priv : Privilege) 
: M (unit) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   handle_trap del_priv true ((interruptType_to_bits i)  : mword 4) w__0 None >>= fun w__1 : xlenbits =>
   write_reg nextPC_ref w__1
    : M (unit).

Definition handle_illegal '(tt : unit) 
: M (unit) :=
   let t : sync_exception :=
     {| sync_exception_trap := E_Illegal_Instr; 
        sync_exception_excinfo := None |} in
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
   handle_exception w__0 (CTL_TRAP t) w__1 >>= fun w__2 : xlenbits =>
   write_reg nextPC_ref w__2
    : M (unit).

Definition init_sys '(tt : unit) 
: M (unit) :=
   write_reg cur_privilege_ref Machine >>
   write_reg mhartid_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Misa_MXL misa_ref (arch_to_bits RV64) >>
   _set_Misa_A misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_C misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_I misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_M misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_U misa_ref ((bool_to_bits true)  : mword 1) >>
   _set_Misa_S misa_ref ((bool_to_bits true)  : mword 1) >>
   read_reg misa_ref >>= fun w__0 : Misa =>
   _set_Mstatus_SXL mstatus_ref (_get_Misa_MXL w__0) >>
   read_reg misa_ref >>= fun w__1 : Misa =>
   _set_Mstatus_UXL mstatus_ref (_get_Misa_MXL w__1) >>
   _set_Mstatus_SD mstatus_ref ((bool_to_bits false)  : mword 1) >>
   _set_Minterrupts_bits mip_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Minterrupts_bits mie_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Minterrupts_bits mideleg_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Medeleg_bits medeleg_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Mtvec_bits mtvec_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Mcause_bits mcause_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mepc_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mtval_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mscratch_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mcycle_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg mtime_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   _set_Counteren_bits mcounteren_ref (EXTZ 32 (vec_of_bits [B0]  : mword 1)) >>
   write_reg minstret_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg minstret_written_ref false >>
   read_reg mstatus_ref >>= fun w__2 : Mstatus =>
   returnm ((print_endline
               (String.append "CSR mstatus <- "
                  (String.append (string_of_bits (_get_Mstatus_bits w__2))
                     (String.append " (input: "
                        (String.append
                           (string_of_bits ((EXTZ 64 (vec_of_bits [B0]  : mword 1))  : xlenbits))
                           ")")))))
    : unit).

Axiom plat_ram_base : forall  (_ : unit) , xlenbits.

Axiom plat_ram_size : forall  (_ : unit) , xlenbits.

Axiom plat_enable_dirty_update : forall  (_ : unit) , bool.

Axiom plat_enable_misaligned_access : forall  (_ : unit) , bool.

Axiom plat_rom_base : forall  (_ : unit) , xlenbits.

Axiom plat_rom_size : forall  (_ : unit) , xlenbits.

Axiom plat_clint_base : forall  (_ : unit) , xlenbits.

Axiom plat_clint_size : forall  (_ : unit) , xlenbits.

Axiom plat_htif_tohost : forall  (_ : unit) , xlenbits.

Definition phys_mem_segments '(tt : unit) 
: list ((mword 64 * mword 64)) :=
   (plat_rom_base tt, plat_rom_size tt) :: (plat_ram_base tt, plat_ram_size tt) :: [].

Definition within_phys_mem (addr : mword 64) (width : Z) 
: bool :=
   if ((andb (zopz0zIzJ_u (plat_ram_base tt) addr)
          (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_ram_base tt) (plat_ram_size tt)))))
   then
     true
   else if ((andb (zopz0zIzJ_u (plat_rom_base tt) addr)
               (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_rom_base tt) (plat_rom_size tt)))))
   then
     true
   else false.

Definition within_clint (addr : mword 64) (width : Z) 
: bool :=
   andb (zopz0zIzJ_u (plat_clint_base tt) addr)
     (zopz0zIzJ_u (add_vec_int addr width) (add_vec (plat_clint_base tt) (plat_clint_size tt))).

Definition within_htif_writable (addr : mword 64) (width : Z) 
: bool :=
   eq_vec (plat_htif_tohost tt) addr.

Definition within_htif_readable (addr : mword 64) (width : Z) 
: bool :=
   eq_vec (plat_htif_tohost tt) addr.

Axiom plat_insns_per_tick : forall  (_ : unit) , Z.

Let MSIP_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0]
  : mword 64).
Let MTIMECMP_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0]
  : mword 64).
Let MTIME_BASE : xlenbits :=
(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
              B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B0;B0;
              B0]
  : mword 64).
Definition clint_load (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool ((andb (eq_vec addr MSIP_BASE) (orb (Z.eqb width 8) (Z.eqb width 4)))) then
      read_reg mip_ref >>= fun w__0 : Minterrupts =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] -> " (string_of_bits (_get_Minterrupts_MSI w__0))))))
         : unit in
      read_reg mip_ref >>= fun w__1 : Minterrupts =>
      returnm ((MemValue (autocast (zero_extend (_get_Minterrupts_MSI w__1) (Z.mul 8 width))))
       : MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (eq_vec addr MTIMECMP_BASE) (Z.eqb width 8))) then
      (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__2)))))
         : unit in
      (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
      returnm ((MemValue (autocast (zero_extend w__3 64)))
       : MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (eq_vec addr MTIME_BASE) (Z.eqb width 8))) then
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__4 : xlenbits =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__4)))))
         : unit in
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__5 : xlenbits =>
      returnm ((MemValue (autocast (zero_extend w__5 64)))
       : MemoryOpResult (mword (8 * width)))
    else
      let '_ :=
        (print_endline
           (String.append "clint[" (String.append (string_of_bits addr) "] -> <not-mapped>")))
         : unit in
      returnm ((MemException E_Load_Access_Fault)
       : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition clint_dispatch '(tt : unit) 
: M (unit) :=
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ := (print_endline (String.append "clint::tick mtime <- " (string_of_bits w__0)))  : unit in
   _set_Minterrupts_MTI mip_ref ((bool_to_bits false)  : mword 1) >>
   (read_reg mtimecmp_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__2 : mword 64 =>
   (if ((zopz0zIzJ_u w__1 w__2)) then
      (read_reg mtime_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
      let '_ :=
        (print_endline (String.append " clint timer pending at mtime " (string_of_bits w__3)))
         : unit in
      (_set_Minterrupts_MTI mip_ref ((bool_to_bits true)  : mword 1))
       : M (unit)
    else returnm (tt  : unit))
    : M (unit).

Definition clint_store (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   let addr := sub_vec addr (plat_clint_base tt) in
   (if sumbool_of_bool ((andb (eq_vec addr MSIP_BASE) (orb (Z.eqb width 8) (Z.eqb width 4)))) then
      cast_unit_vec (access_vec_dec data 0) >>= fun w__0 : mword 1 =>
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- "
                    (String.append (string_of_bits data)
                       (String.append " (mip.MSI <- "
                          (String.append (string_of_bits (w__0  : mword 1)) ")")))))))
         : unit in
      cast_unit_vec (access_vec_dec data 0) >>= fun w__1 : mword 1 =>
      _set_Minterrupts_MSI mip_ref
        ((bool_to_bits (eq_vec (w__1  : mword 1) (vec_of_bits [B1]  : mword 1)))
         : mword 1) >>
      clint_dispatch tt >> returnm ((MemValue true)  : MemoryOpResult bool)
    else if sumbool_of_bool ((andb (eq_vec addr MTIMECMP_BASE) (Z.eqb width 8))) then
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- " (String.append (string_of_bits data) " (mtimecmp)")))))
         : unit in
      write_reg mtimecmp_ref (zero_extend data 64) >>
      clint_dispatch tt >> returnm ((MemValue true)  : MemoryOpResult bool)
    else
      let '_ :=
        (print_endline
           (String.append "clint["
              (String.append (string_of_bits addr)
                 (String.append "] <- " (String.append (string_of_bits data) " (<unmapped>)")))))
         : unit in
      returnm ((MemException E_SAMO_Access_Fault)
       : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition tick_clock '(tt : unit) 
: M (unit) :=
   (read_reg mcycle_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   write_reg mcycle_ref (add_vec_int w__0 1) >>
   (read_reg mtime_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
   write_reg mtime_ref (add_vec_int w__1 1) >> (clint_dispatch tt)  : M (unit).

Axiom plat_term_write : forall  (_ : bits 8) , unit.

Axiom plat_term_read : forall  (_ : unit) , bits 8.

Definition Mk_htif_cmd (v : mword 64) 
: htif_cmd :=
   {| htif_cmd_htif_cmd_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_htif_cmd_bits (v : htif_cmd) 
: mword 64 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0.

Definition _set_htif_cmd_bits (r_ref : register_ref regstate register_value htif_cmd) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_bits (v : htif_cmd) (x : mword 64) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_htif_cmd_device (v : htif_cmd) 
: mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56.

Definition _set_htif_cmd_device (r_ref : register_ref regstate register_value htif_cmd) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_device (v : htif_cmd) (x : mword 8) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 63 56 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_cmd (v : htif_cmd) 
: mword 8 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48.

Definition _set_htif_cmd_cmd (r_ref : register_ref regstate register_value htif_cmd) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec v 7 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_cmd (v : htif_cmd) (x : mword 8) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 55 48 (subrange_vec_dec x 7 0)) ]}.

Definition _get_htif_cmd_payload (v : htif_cmd) 
: mword 48 :=
   subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0.

Definition _set_htif_cmd_payload (r_ref : register_ref regstate register_value htif_cmd) (v : mword 48) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       htif_cmd_htif_cmd_chunk_0 :=
         (update_subrange_vec_dec r.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec v 47 0)) ]}
      : htif_cmd in
   write_reg r_ref r
    : M (unit).

Definition _update_htif_cmd_payload (v : htif_cmd) (x : mword 48) 
: htif_cmd :=
   {[ v with
     htif_cmd_htif_cmd_chunk_0 :=
       (update_subrange_vec_dec v.(htif_cmd_htif_cmd_chunk_0) 47 0 (subrange_vec_dec x 47 0)) ]}.

Definition htif_load (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ :=
     (print_endline
        (String.append "htif["
           (String.append (string_of_bits addr) (String.append "] -> " (string_of_bits w__0)))))
      : unit in
   (if sumbool_of_bool ((Z.eqb width 8)) then
      (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
      returnm ((MemValue (autocast (zero_extend w__1 64)))
       : MemoryOpResult (mword (8 * width)))
    else returnm ((MemException E_Load_Access_Fault)  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition htif_store (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (1 <=
  width /\
  width <= 8)} 
: M (MemoryOpResult bool) :=
   let '_ :=
     (print_endline
        (String.append "htif["
           (String.append (string_of_bits addr) (String.append "] <- " (string_of_bits data)))))
      : unit in
   let cbits : xlenbits := EXTZ 64 data in
   write_reg htif_tohost_ref cbits >>
   let cmd := Mk_htif_cmd cbits in
   let b__0 := _get_htif_cmd_device cmd in
   (if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then
      let '_ :=
        (print_endline
           (String.append "htif-syscall-proxy cmd: " (string_of_bits (_get_htif_cmd_payload cmd))))
         : unit in
      cast_unit_vec (access_vec_dec (_get_htif_cmd_payload cmd) 0) >>= fun w__0 : mword 1 =>
      (if ((eq_vec (w__0  : mword 1) (vec_of_bits [B1]  : mword 1))) then
         write_reg htif_done_ref true >>
         write_reg
           htif_exit_code_ref
           ((shift_bits_right (zero_extend (_get_htif_cmd_payload cmd) xlen)
               (vec_of_bits [B0;B1]  : mword 2))
            : xlenbits)
          : M (unit)
       else returnm (tt  : unit))
       : M (unit)
    else
      returnm ((if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  : mword 8))) then
                  let '_ :=
                    (print_endline
                       (String.append "htif-term cmd: " (string_of_bits (_get_htif_cmd_payload cmd))))
                     : unit in
                  let b__2 := _get_htif_cmd_cmd cmd in
                  if ((eq_vec b__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then tt
                  else if ((eq_vec b__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  : mword 8))) then
                    plat_term_write (subrange_vec_dec (_get_htif_cmd_payload cmd) 7 0)
                  else print_endline (String.append "Unknown term cmd: " (string_of_bits b__2))
                else print_endline (String.append "htif-???? cmd: " (string_of_bits data)))
       : unit)) >>
   returnm ((MemValue true)
    : MemoryOpResult bool).

Definition htif_tick '(tt : unit) 
: M (unit) :=
   (read_reg htif_tohost_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   let '_ := (print_endline (String.append "htif::tick " (string_of_bits w__0)))  : unit in
   write_reg htif_tohost_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1))
    : M (unit).

Definition within_mmio_readable (addr : mword 64) (width : Z) 
: bool :=
   orb (within_clint addr width) (andb (within_htif_readable addr width) (Z.leb 1 width)).

Definition within_mmio_writable (addr : mword 64) (width : Z) 
: bool :=
   orb (within_clint addr width) (andb (within_htif_writable addr width) (Z.leb width 8)).

Definition mmio_read (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((within_clint addr width)) then
      (clint_load addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else if sumbool_of_bool ((andb (within_htif_readable addr width) (Z.leb 1 width))) then
      (htif_load addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else returnm ((MemException E_Load_Access_Fault)  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition mmio_write (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (if ((within_clint addr width)) then (clint_store addr width data)  : M (MemoryOpResult bool)
    else if sumbool_of_bool ((andb (within_htif_writable addr width) (Z.leb width 8))) then
      (htif_store addr width data)
       : M (MemoryOpResult bool)
    else returnm ((MemException E_SAMO_Access_Fault)  : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition init_platform '(tt : unit) 
: M (unit) :=
   write_reg htif_tohost_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
   write_reg htif_done_ref false >>
   write_reg htif_exit_code_ref (EXTZ 64 (vec_of_bits [B0]  : mword 1))
    : M (unit).

Definition tick_platform '(tt : unit) 
: M (unit) :=
   let '_ := (cancel_reservation tt)  : unit in
   (htif_tick tt)
    : M (unit).

Definition is_aligned_addr (addr : mword 64) (width : Z) 
: bool :=
   Z.eqb (projT1 ((ex_int (modulus (projT1 (uint addr)) width))  : {syn_n : Z & ArithFact (True)}))
     0.

Definition phys_mem_read (t : ReadType) (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  0)} 
: M (MemoryOpResult (mword (8 * width))) :=
   __RISCV_read addr width aq rl res >>= fun w__0 : option (mword (8 * width)) =>
   returnm ((match (t, w__0) with
             | (Instruction, None) => MemException E_Fetch_Access_Fault
             | (Data, None) => MemException E_Load_Access_Fault
             | (_, Some (v)) =>
                let '_ :=
                  (print_endline
                     (String.append "mem["
                        (String.append ((readType_to_str t)  : string)
                           (String.append ","
                              (String.append (string_of_bits addr)
                                 (String.append "] -> " (string_of_bits v)))))))
                   : unit in
                MemValue v
             end)
    : MemoryOpResult (mword (8 * width))).

Definition checked_mem_read (t : ReadType) (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((andb (generic_eq ((readType_to_str t)  : string) ((readType_to_str Data)  : string))
           (within_mmio_readable addr width))) then
      (mmio_read addr width)
       : M (MemoryOpResult (mword (8 * width)))
    else if ((within_phys_mem addr width)) then
      (phys_mem_read t addr width false false false)
       : M (MemoryOpResult (mword (8 * width)))
    else returnm ((MemException E_Load_Access_Fault)  : MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_strong_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition MEMr_reserved_strong_acquire (addr : mword 64) (width : Z) `{ArithFact (width >= 1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (checked_mem_read Data addr width)
    : M (MemoryOpResult (mword (8 * width))).

Definition mem_read (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (res : bool) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult (mword (8 * width))) :=
   (if ((andb (orb aq res) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException E_Load_Addr_Align)
       : MemoryOpResult (mword (8 * width)))
    else
      (match (aq, rl, res) with
       | (false, false, false) =>
          (checked_mem_read Data addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (true, false, false) => (MEMr_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, false, true) =>
          (MEMr_reserved addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (true, false, true) =>
          (MEMr_reserved_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, true, false) =>
          (throw (Error_not_implemented "load.rl"))  : M (MemoryOpResult (mword (8 * width)))
       | (true, true, false) =>
          (MEMr_strong_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       | (false, true, true) =>
          (throw (Error_not_implemented "lr.rl"))  : M (MemoryOpResult (mword (8 * width)))
       | (true, true, true) =>
          (MEMr_reserved_strong_acquire addr width)  : M (MemoryOpResult (mword (8 * width)))
       end)
       : M (MemoryOpResult (mword (8 * width))))
    : M (MemoryOpResult (mword (8 * width))).

Axiom MEMea : forall  (_ : xlenbits) (n : Z) , M (unit).

Axiom MEMea_release : forall  (_ : xlenbits) (n : Z) , M (unit).

Axiom MEMea_strong_release : forall  (_ : xlenbits) (n : Z) , M (unit).

Axiom MEMea_conditional : forall  (_ : xlenbits) (n : Z) , M (unit).

Axiom MEMea_conditional_release : forall  (_ : xlenbits) (n : Z) , M (unit).

Axiom MEMea_conditional_strong_release : forall  (_ : xlenbits) (n : Z) , M (unit).

Definition mem_write_ea (addr : mword 64) (width : Z) (aq : bool) (rl : bool) (con : bool) 
: M (MemoryOpResult unit) :=
   (if ((andb (orb rl con) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException E_SAMO_Addr_Align)
       : MemoryOpResult unit)
    else
      (match (aq, rl, con) with
       | (false, false, false) => MEMea addr width >> returnm ((MemValue tt)  : MemoryOpResult unit)
       | (false, true, false) =>
          MEMea_release addr width >> returnm ((MemValue tt)  : MemoryOpResult unit)
       | (false, false, true) =>
          MEMea_conditional addr width >> returnm ((MemValue tt)  : MemoryOpResult unit)
       | (false, true, true) =>
          MEMea_conditional_release addr width >> returnm ((MemValue tt)  : MemoryOpResult unit)
       | (true, false, false) =>
          (throw (Error_not_implemented "store.aq"))  : M (MemoryOpResult unit)
       | (true, true, false) =>
          MEMea_strong_release addr width >> returnm ((MemValue tt)  : MemoryOpResult unit)
       | (true, false, true) => (throw (Error_not_implemented "sc.aq"))  : M (MemoryOpResult unit)
       | (true, true, true) =>
          MEMea_conditional_strong_release addr width >>
          returnm ((MemValue tt)
           : MemoryOpResult unit)
       end)
       : M (MemoryOpResult unit))
    : M (MemoryOpResult unit).

Definition phys_mem_write (addr : mword 64) (width : Z) (data : mword (8 * width)) 
: M (MemoryOpResult bool) :=
   let '_ :=
     (print_endline
        (String.append "mem["
           (String.append (string_of_bits addr) (String.append "] <- " (string_of_bits data)))))
      : unit in
   __RISCV_write addr width data >>= fun w__0 : bool =>
   returnm ((MemValue w__0)
    : MemoryOpResult bool).

Definition checked_mem_write (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (if ((within_mmio_writable addr width)) then
      (mmio_write addr width data)
       : M (MemoryOpResult bool)
    else if ((within_phys_mem addr width)) then
      (phys_mem_write addr width data)
       : M (MemoryOpResult bool)
    else returnm ((MemException E_SAMO_Access_Fault)  : MemoryOpResult bool))
    : M (MemoryOpResult bool).

Definition MEMval (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >= 1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_strong_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition MEMval_conditional_strong_release (addr : mword 64) (width : Z) (data : mword (8 * width)) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (checked_mem_write addr width data)
    : M (MemoryOpResult bool).

Definition mem_write_value (addr : mword 64) (width : Z) (value : mword (8 * width)) (aq : bool) (rl : bool) (con : bool) `{ArithFact (width >=
  1)} 
: M (MemoryOpResult bool) :=
   (if ((andb (orb rl con) (negb (is_aligned_addr addr width)))) then
      returnm ((MemException E_SAMO_Addr_Align)
       : MemoryOpResult bool)
    else
      (match (aq, rl, con) with
       | (false, false, false) => (checked_mem_write addr width value)  : M (MemoryOpResult bool)
       | (false, true, false) => (MEMval_release addr width value)  : M (MemoryOpResult bool)
       | (false, false, true) => (MEMval_conditional addr width value)  : M (MemoryOpResult bool)
       | (false, true, true) =>
          (MEMval_conditional_release addr width value)  : M (MemoryOpResult bool)
       | (true, false, false) =>
          (throw (Error_not_implemented "store.aq"))  : M (MemoryOpResult bool)
       | (true, true, false) => (MEMval_strong_release addr width value)  : M (MemoryOpResult bool)
       | (true, false, true) => (throw (Error_not_implemented "sc.aq"))  : M (MemoryOpResult bool)
       | (true, true, true) =>
          (MEMval_conditional_strong_release addr width value)  : M (MemoryOpResult bool)
       end)
       : M (MemoryOpResult bool))
    : M (MemoryOpResult bool).

Axiom MEM_fence_rw_rw : forall  (_ : unit) , M (unit).

Axiom MEM_fence_r_rw : forall  (_ : unit) , M (unit).

Axiom MEM_fence_r_r : forall  (_ : unit) , M (unit).

Axiom MEM_fence_rw_w : forall  (_ : unit) , M (unit).

Axiom MEM_fence_w_w : forall  (_ : unit) , M (unit).

Axiom MEM_fence_w_rw : forall  (_ : unit) , M (unit).

Axiom MEM_fence_rw_r : forall  (_ : unit) , M (unit).

Axiom MEM_fence_r_w : forall  (_ : unit) , M (unit).

Axiom MEM_fence_w_r : forall  (_ : unit) , M (unit).

Axiom MEM_fence_i : forall  (_ : unit) , M (unit).

Let PAGESIZE_BITS := 12.
Definition Mk_PTE_Bits (v : mword 8) 
: PTE_Bits :=
   {| PTE_Bits_PTE_Bits_chunk_0 := (subrange_vec_dec v 7 0) |}.

Definition _get_PTE_Bits_bits (v : PTE_Bits) 
: mword 8 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0.

Definition _set_PTE_Bits_bits (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_bits (v : PTE_Bits) (x : mword 8) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition _get_PTE_Bits_D (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7.

Definition _set_PTE_Bits_D (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_D (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 7 7 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_A (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6.

Definition _set_PTE_Bits_A (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_A (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 6 6 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_G (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5.

Definition _set_PTE_Bits_G (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_G (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 5 5 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_U (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4.

Definition _set_PTE_Bits_U (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_U (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 4 4 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_X (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3.

Definition _set_PTE_Bits_X (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_X (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 3 3 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_W (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2.

Definition _set_PTE_Bits_W (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_W (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 2 2 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_R (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1.

Definition _set_PTE_Bits_R (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_R (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 1 1 (subrange_vec_dec x 0 0)) ]}.

Definition _get_PTE_Bits_V (v : PTE_Bits) 
: mword 1 :=
   subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0.

Definition _set_PTE_Bits_V (r_ref : register_ref regstate register_value PTE_Bits) (v : mword 1) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       PTE_Bits_PTE_Bits_chunk_0 :=
         (update_subrange_vec_dec r.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec v 0 0)) ]}
      : PTE_Bits in
   write_reg r_ref r
    : M (unit).

Definition _update_PTE_Bits_V (v : PTE_Bits) (x : mword 1) 
: PTE_Bits :=
   {[ v with
     PTE_Bits_PTE_Bits_chunk_0 :=
       (update_subrange_vec_dec v.(PTE_Bits_PTE_Bits_chunk_0) 0 0 (subrange_vec_dec x 0 0)) ]}.

Definition isPTEPtr (p : mword 8) 
: bool :=
   let a := Mk_PTE_Bits p in
   andb (eq_vec (_get_PTE_Bits_R a) ((bool_to_bits false)  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ((bool_to_bits false)  : mword 1))
        (eq_vec (_get_PTE_Bits_X a) ((bool_to_bits false)  : mword 1))).

Definition isInvalidPTE (p : mword 8) 
: bool :=
   let a := Mk_PTE_Bits p in
   orb (eq_vec (_get_PTE_Bits_V a) ((bool_to_bits false)  : mword 1))
     (andb (eq_vec (_get_PTE_Bits_W a) ((bool_to_bits true)  : mword 1))
        (eq_vec (_get_PTE_Bits_R a) ((bool_to_bits false)  : mword 1))).

Definition checkPTEPermission (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) (p : PTE_Bits) 
: M (bool) :=
   (match (ac, priv) with
    | (Read, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                      (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr)))
        : bool)
    | (Write, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (ReadWrite, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (andb (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1))
                      (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                         (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr))))
        : bool)
    | (Execute, User) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits true)  : mword 1))
                   (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (Read, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                      (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr)))
        : bool)
    | (Write, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (ReadWrite, Supervisor) =>
       returnm ((andb (orb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1)) do_sum)
                   (andb (eq_vec (_get_PTE_Bits_W p) ((bool_to_bits true)  : mword 1))
                      (orb (eq_vec (_get_PTE_Bits_R p) ((bool_to_bits true)  : mword 1))
                         (andb (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)) mxr))))
        : bool)
    | (Execute, Supervisor) =>
       returnm ((andb (eq_vec (_get_PTE_Bits_U p) ((bool_to_bits false)  : mword 1))
                   (eq_vec (_get_PTE_Bits_X p) ((bool_to_bits true)  : mword 1)))
        : bool)
    | (_, Machine) => (internal_error "m-mode mem perm check")  : M (bool)
    end)
    : M (bool).

Definition update_PTE_Bits (p : PTE_Bits) (a : AccessType) 
: option PTE_Bits :=
   let update_d :=
     andb
       (orb (generic_eq ((accessType_to_str a)  : string) ((accessType_to_str Write)  : string))
          (generic_eq ((accessType_to_str a)  : string) ((accessType_to_str ReadWrite)  : string)))
       (eq_vec (_get_PTE_Bits_D p) ((bool_to_bits false)  : mword 1)) in
   let update_a := eq_vec (_get_PTE_Bits_A p) ((bool_to_bits false)  : mword 1) in
   if ((orb update_d update_a)) then
     let np := _update_PTE_Bits_A p ((bool_to_bits true)  : mword 1) in
     let np := if (update_d) then _update_PTE_Bits_D p ((bool_to_bits true)  : mword 1) else np in
     Some np
   else None.

Definition PTW_Error_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 4)} 
: PTW_Error :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then PTW_Access
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then PTW_Invalid_PTE
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then PTW_No_Permission
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then PTW_Misaligned
   else PTW_PTE_Update.

Definition num_of_PTW_Error (arg_ : PTW_Error) 
: {e : Z & ArithFact (0 <= e /\ e <= 4)} :=
   match arg_ with
   | PTW_Access => build_ex 0
   | PTW_Invalid_PTE => build_ex 1
   | PTW_No_Permission => build_ex 2
   | PTW_Misaligned => build_ex 3
   | PTW_PTE_Update => build_ex 4
   end.

Definition ptw_error_to_str (e : PTW_Error) 
: string :=
   match e with
   | PTW_Access => "mem-access-error"
   | PTW_Invalid_PTE => "invalid-pte"
   | PTW_No_Permission => "no-permission"
   | PTW_Misaligned => "misaligned-superpage"
   | PTW_PTE_Update => "pte-update-needed"
   end.

Definition translationException (a : AccessType) (f : PTW_Error) 
: ExceptionType :=
   match (a, f) with
   | (ReadWrite, PTW_Access) => E_SAMO_Access_Fault
   | (ReadWrite, _) => E_SAMO_Page_Fault
   | (Read, PTW_Access) => E_Load_Access_Fault
   | (Read, _) => E_Load_Page_Fault
   | (Write, PTW_Access) => E_SAMO_Access_Fault
   | (Write, _) => E_SAMO_Page_Fault
   | (Fetch, PTW_Access) => E_Fetch_Access_Fault
   | (Fetch, _) => E_Fetch_Page_Fault
   end.

Let SV39_LEVEL_BITS := 9.
Let SV39_LEVELS := 3.
Let PTE39_LOG_SIZE := 3.
Let PTE39_SIZE := 8.
Definition Mk_SV39_Vaddr (v : mword 39) 
: SV39_Vaddr :=
   {| SV39_Vaddr_SV39_Vaddr_chunk_0 := (subrange_vec_dec v 38 0) |}.

Definition _get_SV39_Vaddr_bits (v : SV39_Vaddr) 
: mword 39 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0.

Definition _set_SV39_Vaddr_bits (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 39) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec v 38 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_bits (v : SV39_Vaddr) (x : mword 39) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 0 (subrange_vec_dec x 38 0)) ]}.

Definition _get_SV39_Vaddr_VPNi (v : SV39_Vaddr) 
: mword 27 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12.

Definition _set_SV39_Vaddr_VPNi (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 27) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec v 26 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_VPNi (v : SV39_Vaddr) (x : mword 27) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 38 12 (subrange_vec_dec x 26 0)) ]}.

Definition _get_SV39_Vaddr_PgOfs (v : SV39_Vaddr) 
: mword 12 :=
   subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0.

Definition _set_SV39_Vaddr_PgOfs (r_ref : register_ref regstate register_value SV39_Vaddr) (v : mword 12) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Vaddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Vaddr_PgOfs (v : SV39_Vaddr) (x : mword 12) 
: SV39_Vaddr :=
   {[ v with
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Vaddr_SV39_Vaddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_Paddr (v : mword 56) 
: SV39_Paddr :=
   {| SV39_Paddr_SV39_Paddr_chunk_0 := (subrange_vec_dec v 55 0) |}.

Definition _get_SV39_Paddr_bits (v : SV39_Paddr) 
: mword 56 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0.

Definition _set_SV39_Paddr_bits (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 56) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec v 55 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_bits (v : SV39_Paddr) (x : mword 56) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 0 (subrange_vec_dec x 55 0)) ]}.

Definition _get_SV39_Paddr_PPNi (v : SV39_Paddr) 
: mword 44 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12.

Definition _set_SV39_Paddr_PPNi (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec v 43 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PPNi (v : SV39_Paddr) (x : mword 44) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 55 12 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_Paddr_PgOfs (v : SV39_Paddr) 
: mword 12 :=
   subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0.

Definition _set_SV39_Paddr_PgOfs (r_ref : register_ref regstate register_value SV39_Paddr) (v : mword 12) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec v 11 0)) ]}
      : SV39_Paddr in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_Paddr_PgOfs (v : SV39_Paddr) (x : mword 12) 
: SV39_Paddr :=
   {[ v with
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_Paddr_SV39_Paddr_chunk_0) 11 0 (subrange_vec_dec x 11 0)) ]}.

Definition Mk_SV39_PTE (v : mword 64) 
: SV39_PTE :=
   {| SV39_PTE_SV39_PTE_chunk_0 := (subrange_vec_dec v 63 0) |}.

Definition _get_SV39_PTE_bits (v : SV39_PTE) 
: mword 64 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0.

Definition _set_SV39_PTE_bits (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 64) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec v 63 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_bits (v : SV39_PTE) (x : mword 64) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 63 0 (subrange_vec_dec x 63 0)) ]}.

Definition _get_SV39_PTE_PPNi (v : SV39_PTE) 
: mword 44 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10.

Definition _set_SV39_PTE_PPNi (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 44) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec v 43 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_PPNi (v : SV39_PTE) (x : mword 44) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 53 10 (subrange_vec_dec x 43 0)) ]}.

Definition _get_SV39_PTE_RSW (v : SV39_PTE) 
: mword 2 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8.

Definition _set_SV39_PTE_RSW (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 2) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec v 1 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_RSW (v : SV39_PTE) (x : mword 2) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 9 8 (subrange_vec_dec x 1 0)) ]}.

Definition _get_SV39_PTE_BITS (v : SV39_PTE) 
: mword 8 :=
   subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0.

Definition _set_SV39_PTE_BITS (r_ref : register_ref regstate register_value SV39_PTE) (v : mword 8) 
: M (unit) :=
   reg_deref r_ref >>= fun r =>
   let r :=
     {[ r with
       SV39_PTE_SV39_PTE_chunk_0 :=
         (update_subrange_vec_dec r.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec v 7 0)) ]}
      : SV39_PTE in
   write_reg r_ref r
    : M (unit).

Definition _update_SV39_PTE_BITS (v : SV39_PTE) (x : mword 8) 
: SV39_PTE :=
   {[ v with
     SV39_PTE_SV39_PTE_chunk_0 :=
       (update_subrange_vec_dec v.(SV39_PTE_SV39_PTE_chunk_0) 7 0 (subrange_vec_dec x 7 0)) ]}.

Definition curAsid64 '(tt : unit) 
: M (mword 16) :=
   (read_reg satp_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   let satp64 := Mk_Satp64 w__0 in
   returnm ((_get_Satp64_Asid satp64)
    : mword 16).

Definition curPTB39 '(tt : unit) 
: M (mword 56) :=
   (read_reg satp_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   let satp64 := Mk_Satp64 w__0 in
   returnm ((EXTZ 56 (shiftl (_get_Satp64_PPN satp64) PAGESIZE_BITS))
    : mword 56).

Fixpoint walk39 (vaddr : mword 39) (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) (ptb : mword 56) (level : nat) (global : bool) 
: M (PTW_Result) :=
   let va := Mk_SV39_Vaddr vaddr in
   let pt_ofs : paddr39 :=
     shiftl
       (EXTZ 56
          (subrange_vec_dec (shiftr (_get_SV39_Vaddr_VPNi va) (Z.mul (Z.of_nat level) SV39_LEVEL_BITS))
             (projT1 (sub_range (build_ex SV39_LEVEL_BITS) (build_ex 1))) 0)) PTE39_LOG_SIZE in
   let pte_addr := add_vec ptb pt_ofs in
   phys_mem_read Data (EXTZ 64 pte_addr) 8 false false false >>= fun w__0 : MemoryOpResult (mword 64) =>
   (match w__0 with
    | MemException (_) => returnm ((PTW_Failure PTW_Access)  : PTW_Result)
    | MemValue (v) =>
       let pte := Mk_SV39_PTE v in
       let pbits := _get_SV39_PTE_BITS pte in
       let pattr := Mk_PTE_Bits pbits in
       let is_global := orb global (eq_vec (_get_PTE_Bits_G pattr) ((bool_to_bits true)  : mword 1)) in
       (if ((isInvalidPTE pbits)) then returnm ((PTW_Failure PTW_Invalid_PTE)  : PTW_Result)
        else if ((isPTEPtr pbits)) then
          (match level with | O =>
             returnm ((PTW_Failure PTW_Invalid_PTE)
              : PTW_Result)
           | S level' =>
             (walk39 vaddr ac priv mxr do_sum
                (EXTZ 56 (shiftl (_get_SV39_PTE_PPNi pte) PAGESIZE_BITS))
                level' is_global)
              : M (PTW_Result) end)
           : M (PTW_Result)
        else
          checkPTEPermission ac priv mxr do_sum pattr >>= fun w__3 : bool =>
          returnm ((if ((negb w__3)) then PTW_Failure PTW_No_Permission
                    else if sumbool_of_bool (Nat.ltb O level) then
                      let mask :=
                        sub_vec_int
                          (shiftl
                             (xor_vec (_get_SV39_PTE_PPNi pte)
                                (xor_vec (_get_SV39_PTE_PPNi pte)
                                   (EXTZ 44 (vec_of_bits [B1]  : mword 1))))
                             (Z.mul (Z.of_nat level) SV39_LEVEL_BITS)) 1 in
                      if ((neq_vec (and_vec (_get_SV39_PTE_PPNi pte) mask)
                             (EXTZ 44 (vec_of_bits [B0]  : mword 1)))) then
                        PTW_Failure PTW_Misaligned
                      else
                        let ppn :=
                          or_vec (_get_SV39_PTE_PPNi pte)
                            (and_vec (EXTZ 44 (_get_SV39_Vaddr_VPNi va)) mask) in
                        PTW_Success (concat_vec ppn (_get_SV39_Vaddr_PgOfs va),pte,pte_addr,build_ex
                        (Z.of_nat level),is_global)
                    else
                      PTW_Success (concat_vec (_get_SV39_PTE_PPNi pte) (_get_SV39_Vaddr_PgOfs va),pte,pte_addr,build_ex
                      (Z.of_nat level),is_global))
           : PTW_Result))
        : M (PTW_Result)
    end)
    : M (PTW_Result).

Hint Unfold PAGESIZE_BITS : sail.
Hint Unfold SV39_LEVEL_BITS : sail.

Definition make_TLB39_Entry (asid : mword 16) (global : bool) (vAddr : mword 39) (pAddr : mword 56) (pte : SV39_PTE) '((existT _ level _) : {n : Z & ArithFact (n >=
  0)}) (pteAddr : mword 56) 
: M (TLB39_Entry) :=
   let '(existT _ shift _) :=
     (build_ex (projT1 (add_range (build_ex PAGESIZE_BITS) (build_ex (Z.mul level SV39_LEVEL_BITS)))))
      : {n : Z & ArithFact (n >= 0)} in
   let vAddrMask : vaddr39 :=
     sub_vec_int
       (shiftl (xor_vec vAddr (xor_vec vAddr (EXTZ 39 (vec_of_bits [B1]  : mword 1)))) shift) 1 in
   let vMatchMask : vaddr39 := not_vec vAddrMask in
   (read_reg mcycle_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
   returnm (({| TLB39_Entry_asid := asid; 
                TLB39_Entry_global := global; 
                TLB39_Entry_pte := pte; 
                TLB39_Entry_pteAddr := pteAddr; 
                TLB39_Entry_vAddrMask := vAddrMask; 
                TLB39_Entry_vMatchMask := vMatchMask; 
                TLB39_Entry_vAddr := (and_vec vAddr vMatchMask); 
                TLB39_Entry_pAddr := (shiftl (shiftr pAddr shift) shift); 
                TLB39_Entry_age := w__0 |})
    : TLB39_Entry).

Definition lookupTLB39 (asid : mword 16) (vaddr : mword 39) 
: M (option ((Z * TLB39_Entry))) :=
   read_reg tlb39_ref >>= fun w__0 : option TLB39_Entry =>
   returnm ((match w__0 with
             | None => None
             | Some (e) =>
                if ((andb (orb e.(TLB39_Entry_global) (eq_vec e.(TLB39_Entry_asid) asid))
                       (eq_vec e.(TLB39_Entry_vAddr) (and_vec e.(TLB39_Entry_vMatchMask) vaddr))))
                then
                  Some (0, e)
                else None
             end)
    : option ((Z * TLB39_Entry))).

Definition addToTLB39 (asid : mword 16) (vAddr : mword 39) (pAddr : mword 56) (pte : SV39_PTE) (pteAddr : mword 56) '((existT _ level _) : {n : Z & ArithFact (n >=
  0)}) (global : bool) 
: M (unit) :=
   make_TLB39_Entry asid global vAddr pAddr pte (build_ex level) pteAddr >>= fun ent =>
   write_reg tlb39_ref (Some ent)
    : M (unit).

Definition writeTLB39 (idx : Z) (ent : TLB39_Entry) 
: M (unit) :=
   write_reg tlb39_ref (Some ent)
    : M (unit).

Definition flushTLB (asid : option (mword 16)) (addr : option (mword 39)) 
: M (unit) :=
   read_reg tlb39_ref >>= fun w__0 : option TLB39_Entry =>
   let ent : option TLB39_Entry :=
     match (w__0, asid, addr) with
     | (None, _, _) => None
     | (Some (e), None, None) => None
     | (Some (e), None, Some (a)) =>
        if ((eq_vec e.(TLB39_Entry_vAddr) (and_vec e.(TLB39_Entry_vMatchMask) a))) then None
        else Some e
     | (Some (e), Some (i), None) =>
        if ((andb (eq_vec e.(TLB39_Entry_asid) i) (negb e.(TLB39_Entry_global)))) then None
        else Some e
     | (Some (e), Some (i), Some (a)) =>
        if ((andb (eq_vec e.(TLB39_Entry_asid) i)
               (andb (eq_vec e.(TLB39_Entry_vAddr) (and_vec a e.(TLB39_Entry_vMatchMask)))
                  (negb e.(TLB39_Entry_global))))) then
          None
        else Some e
     end in
   write_reg tlb39_ref ent
    : M (unit).

Definition translate39 (vAddr : mword 39) (ac : AccessType) (priv : Privilege) (mxr : bool) (do_sum : bool) '((existT _ level _) : {n : Z & ArithFact (n >=
  0)}) 
: M (TR39_Result) :=
   curAsid64 tt >>= fun asid =>
   lookupTLB39 asid vAddr >>= fun w__0 : option ((Z * TLB39_Entry)) =>
   (match w__0 with
    | Some (idx,ent) =>
       let pteBits := Mk_PTE_Bits (_get_SV39_PTE_BITS ent.(TLB39_Entry_pte)) in
       checkPTEPermission ac priv mxr do_sum pteBits >>= fun w__1 : bool =>
       (if ((negb w__1)) then returnm ((TR39_Failure PTW_No_Permission)  : TR39_Result)
        else
          (match (update_PTE_Bits pteBits ac) with
           | None =>
              returnm ((TR39_Address (or_vec ent.(TLB39_Entry_pAddr)
                                        (EXTZ 56 (and_vec vAddr ent.(TLB39_Entry_vAddrMask)))))
               : TR39_Result)
           | Some (pbits) =>
              (if ((negb (plat_enable_dirty_update tt))) then
                 returnm ((TR39_Failure PTW_PTE_Update)
                  : TR39_Result)
               else
                 let n_ent : TLB39_Entry := ent in
                 let n_ent :=
                   {[ n_ent with
                     TLB39_Entry_pte :=
                       (_update_SV39_PTE_BITS ent.(TLB39_Entry_pte) (_get_PTE_Bits_bits pbits)) ]}
                    : TLB39_Entry in
                 writeTLB39 idx n_ent >>
                 checked_mem_write (EXTZ 64 ent.(TLB39_Entry_pteAddr)) 8
                   (_get_SV39_PTE_bits ent.(TLB39_Entry_pte)) >>= fun w__2 : MemoryOpResult bool =>
                 match w__2 with
                 | MemValue (_) => returnm (tt  : unit)
                 | MemException (e) =>
                    (internal_error "invalid physical address in TLB")  : M (unit)
                 end >>
                 returnm ((TR39_Address (or_vec ent.(TLB39_Entry_pAddr)
                                           (EXTZ 56 (and_vec vAddr ent.(TLB39_Entry_vAddrMask)))))
                  : TR39_Result))
               : M (TR39_Result)
           end)
           : M (TR39_Result))
        : M (TR39_Result)
    | None =>
       curPTB39 tt >>= fun w__6 : mword 56 =>
       walk39 vAddr ac priv mxr do_sum w__6 (Z.to_nat level) false >>= fun w__7 : PTW_Result =>
       (match w__7 with
        | PTW_Failure (f) => returnm ((TR39_Failure f)  : TR39_Result)
        | PTW_Success (pAddr,pte,pteAddr,(existT _ level _),global) =>
           (match (update_PTE_Bits (Mk_PTE_Bits (_get_SV39_PTE_BITS pte)) ac) with
            | None =>
               addToTLB39 asid vAddr pAddr pte pteAddr (build_ex level) global >>
               returnm ((TR39_Address pAddr)
                : TR39_Result)
            | Some (pbits) =>
               (if ((negb (plat_enable_dirty_update tt))) then
                  returnm ((TR39_Failure PTW_PTE_Update)
                   : TR39_Result)
                else
                  let w_pte : SV39_PTE := _update_SV39_PTE_BITS pte (_get_PTE_Bits_bits pbits) in
                  checked_mem_write (EXTZ 64 pteAddr) 8 (_get_SV39_PTE_bits w_pte) >>= fun w__8 : MemoryOpResult bool =>
                  (match w__8 with
                   | MemValue (_) =>
                      addToTLB39 asid vAddr pAddr w_pte pteAddr (build_ex level) global >>
                      returnm ((TR39_Address pAddr)
                       : TR39_Result)
                   | MemException (e) => returnm ((TR39_Failure PTW_Access)  : TR39_Result)
                   end)
                   : M (TR39_Result))
                : M (TR39_Result)
            end)
            : M (TR39_Result)
        end)
        : M (TR39_Result)
    end)
    : M (TR39_Result).

Definition translationMode (priv : Privilege) 
: M (SATPMode) :=
   (if ((eq_vec ((privLevel_to_bits priv)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)))
    then
      returnm (Sbare
       : SATPMode)
    else
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      let arch := architecture (_get_Mstatus_SXL w__0) in
      (match arch with
       | Some (RV64) =>
          (read_reg satp_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
          let mbits : satp_mode := _get_Satp64_Mode (Mk_Satp64 w__1) in
          (match (satpMode_of_bits RV64 mbits) with
           | Some (m) => returnm (m  : SATPMode)
           | None => (internal_error "invalid RV64 translation mode in satp")  : M (SATPMode)
           end)
           : M (SATPMode)
       | _ => (internal_error "unsupported address translation arch")  : M (SATPMode)
       end)
       : M (SATPMode))
    : M (SATPMode).

Definition translateAddr (vAddr : mword 64) (ac : AccessType) (rt : ReadType) 
: M (TR_Result) :=
   match rt with
   | Instruction => read_reg cur_privilege_ref  : M (Privilege)
   | Data =>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      (if ((eq_vec (_get_Mstatus_MPRV w__1) ((bool_to_bits true)  : mword 1))) then
         read_reg mstatus_ref >>= fun w__2 : Mstatus =>
         returnm ((privLevel_of_bits (_get_Mstatus_MPP w__2))
          : Privilege)
       else read_reg cur_privilege_ref  : M (Privilege))
       : M (Privilege)
   end >>= fun effPriv : Privilege =>
   read_reg mstatus_ref >>= fun w__5 : Mstatus =>
   let mxr : bool := eq_vec (_get_Mstatus_MXR w__5) ((bool_to_bits true)  : mword 1) in
   read_reg mstatus_ref >>= fun w__6 : Mstatus =>
   let do_sum : bool := eq_vec (_get_Mstatus_SUM w__6) ((bool_to_bits true)  : mword 1) in
   translationMode effPriv >>= fun mode : SATPMode =>
   (match mode with
    | Sbare => returnm ((TR_Address vAddr)  : TR_Result)
    | SV39 =>
       translate39 (subrange_vec_dec vAddr 38 0) ac effPriv mxr do_sum
         (build_ex ( (Z.sub ( SV39_LEVELS) ( 1)))) >>= fun w__7 : TR39_Result =>
       returnm ((match w__7 with
                 | TR39_Address (pa) => TR_Address (EXTZ 64 pa)
                 | TR39_Failure (f) => TR_Failure (translationException ac f)
                 end)
        : TR_Result)
    end)
    : M (TR_Result).

Definition encdec_uop_forwards (arg_ : uop) 
: mword 7 :=
   match arg_ with
   | RISCV_LUI => (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7)
   | RISCV_AUIPC => (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  : mword 7)
   end.

Definition encdec_uop_backwards (arg_ : mword 7) 
: uop :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7))) then RISCV_LUI
   else RISCV_AUIPC.

Definition encdec_uop_forwards_matches (arg_ : uop) 
: bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition encdec_uop_backwards_matches (arg_ : mword 7) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B1;B1;B0;B1;B1;B1]  : mword 7))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1;B0;B1;B1;B1]  : mword 7))) then true
   else false.

Definition utype_mnemonic_forwards (arg_ : uop) 
: string :=
   match arg_ with | RISCV_LUI => "lui" | RISCV_AUIPC => "auipc" end.

Definition utype_mnemonic_backwards (arg_ : string) 
: M (uop) :=
   (match arg_ with
    | "lui" => returnm (RISCV_LUI  : uop)
    | "auipc" => returnm (RISCV_AUIPC  : uop)
    | _ => exit tt  : M (uop)
    end)
    : M (uop).

Definition utype_mnemonic_forwards_matches (arg_ : uop) 
: bool :=
   match arg_ with | RISCV_LUI => true | RISCV_AUIPC => true end.

Definition utype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "lui" => true | "auipc" => true | _ => false end.

Definition utype_mnemonic_matches_prefix (arg_ : string) 
: option ((uop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1771_ := arg_ in
   if ((andb (string_startswith _stringappend_1771_ "lui")
          (match (string_drop _stringappend_1771_ (string_length "lui")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1771_ (string_length "lui")) with
     | s_ => Some (RISCV_LUI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1771_ "auipc")
               (match (string_drop _stringappend_1771_ (string_length "auipc")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1771_ (string_length "auipc")) with
     | s_ => Some (RISCV_AUIPC, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition encdec_bop_forwards (arg_ : bop) 
: mword 3 :=
   match arg_ with
   | RISCV_BEQ => (vec_of_bits [B0;B0;B0]  : mword 3)
   | RISCV_BNE => (vec_of_bits [B0;B0;B1]  : mword 3)
   | RISCV_BLT => (vec_of_bits [B1;B0;B0]  : mword 3)
   | RISCV_BGE => (vec_of_bits [B1;B0;B1]  : mword 3)
   | RISCV_BLTU => (vec_of_bits [B1;B1;B0]  : mword 3)
   | RISCV_BGEU => (vec_of_bits [B1;B1;B1]  : mword 3)
   end.

Definition encdec_bop_backwards (arg_ : mword 3) 
: bop :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then RISCV_BEQ
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then RISCV_BNE
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B0]  : mword 3))) then RISCV_BLT
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1]  : mword 3))) then RISCV_BGE
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0]  : mword 3))) then RISCV_BLTU
   else RISCV_BGEU.

Definition encdec_bop_forwards_matches (arg_ : bop) 
: bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition encdec_bop_backwards_matches (arg_ : mword 3) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1]  : mword 3))) then true
   else false.

Definition btype_mnemonic_forwards (arg_ : bop) 
: string :=
   match arg_ with
   | RISCV_BEQ => "beq"
   | RISCV_BNE => "bne"
   | RISCV_BLT => "blt"
   | RISCV_BGE => "bge"
   | RISCV_BLTU => "bltu"
   | RISCV_BGEU => "bgeu"
   end.

Definition btype_mnemonic_backwards (arg_ : string) 
: M (bop) :=
   (match arg_ with
    | "beq" => returnm (RISCV_BEQ  : bop)
    | "bne" => returnm (RISCV_BNE  : bop)
    | "blt" => returnm (RISCV_BLT  : bop)
    | "bge" => returnm (RISCV_BGE  : bop)
    | "bltu" => returnm (RISCV_BLTU  : bop)
    | "bgeu" => returnm (RISCV_BGEU  : bop)
    | _ => exit tt  : M (bop)
    end)
    : M (bop).

Definition btype_mnemonic_forwards_matches (arg_ : bop) 
: bool :=
   match arg_ with
   | RISCV_BEQ => true
   | RISCV_BNE => true
   | RISCV_BLT => true
   | RISCV_BGE => true
   | RISCV_BLTU => true
   | RISCV_BGEU => true
   end.

Definition btype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "beq" => true
   | "bne" => true
   | "blt" => true
   | "bge" => true
   | "bltu" => true
   | "bgeu" => true
   | _ => false
   end.

Definition btype_mnemonic_matches_prefix (arg_ : string) 
: option ((bop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1765_ := arg_ in
   if ((andb (string_startswith _stringappend_1765_ "beq")
          (match (string_drop _stringappend_1765_ (string_length "beq")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "beq")) with
     | s_ => Some (RISCV_BEQ, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1765_ "bne")
               (match (string_drop _stringappend_1765_ (string_length "bne")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "bne")) with
     | s_ => Some (RISCV_BNE, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1765_ "blt")
               (match (string_drop _stringappend_1765_ (string_length "blt")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "blt")) with
     | s_ => Some (RISCV_BLT, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1765_ "bge")
               (match (string_drop _stringappend_1765_ (string_length "bge")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "bge")) with
     | s_ => Some (RISCV_BGE, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1765_ "bltu")
               (match (string_drop _stringappend_1765_ (string_length "bltu")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "bltu")) with
     | s_ => Some (RISCV_BLTU, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1765_ "bgeu")
               (match (string_drop _stringappend_1765_ (string_length "bgeu")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1765_ (string_length "bgeu")) with
     | s_ => Some (RISCV_BGEU, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition encdec_iop_forwards (arg_ : iop) 
: mword 3 :=
   match arg_ with
   | RISCV_ADDI => (vec_of_bits [B0;B0;B0]  : mword 3)
   | RISCV_SLTI => (vec_of_bits [B0;B1;B0]  : mword 3)
   | RISCV_SLTIU => (vec_of_bits [B0;B1;B1]  : mword 3)
   | RISCV_XORI => (vec_of_bits [B1;B0;B0]  : mword 3)
   | RISCV_ORI => (vec_of_bits [B1;B1;B0]  : mword 3)
   | RISCV_ANDI => (vec_of_bits [B1;B1;B1]  : mword 3)
   end.

Definition encdec_iop_backwards (arg_ : mword 3) 
: iop :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then RISCV_ADDI
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B0]  : mword 3))) then RISCV_SLTI
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1]  : mword 3))) then RISCV_SLTIU
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B0]  : mword 3))) then RISCV_XORI
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0]  : mword 3))) then RISCV_ORI
   else RISCV_ANDI.

Definition encdec_iop_forwards_matches (arg_ : iop) 
: bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_XORI => true
   | RISCV_ORI => true
   | RISCV_ANDI => true
   end.

Definition encdec_iop_backwards_matches (arg_ : mword 3) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1;B1]  : mword 3))) then true
   else false.

Definition itype_mnemonic_forwards (arg_ : iop) 
: string :=
   match arg_ with
   | RISCV_ADDI => "addi"
   | RISCV_SLTI => "slti"
   | RISCV_SLTIU => "sltiu"
   | RISCV_XORI => "xori"
   | RISCV_ORI => "ori"
   | RISCV_ANDI => "andi"
   end.

Definition itype_mnemonic_backwards (arg_ : string) 
: M (iop) :=
   (match arg_ with
    | "addi" => returnm (RISCV_ADDI  : iop)
    | "slti" => returnm (RISCV_SLTI  : iop)
    | "sltiu" => returnm (RISCV_SLTIU  : iop)
    | "xori" => returnm (RISCV_XORI  : iop)
    | "ori" => returnm (RISCV_ORI  : iop)
    | "andi" => returnm (RISCV_ANDI  : iop)
    | _ => exit tt  : M (iop)
    end)
    : M (iop).

Definition itype_mnemonic_forwards_matches (arg_ : iop) 
: bool :=
   match arg_ with
   | RISCV_ADDI => true
   | RISCV_SLTI => true
   | RISCV_SLTIU => true
   | RISCV_XORI => true
   | RISCV_ORI => true
   | RISCV_ANDI => true
   end.

Definition itype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "addi" => true
   | "slti" => true
   | "sltiu" => true
   | "xori" => true
   | "ori" => true
   | "andi" => true
   | _ => false
   end.

Definition itype_mnemonic_matches_prefix (arg_ : string) 
: option ((iop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1759_ := arg_ in
   if ((andb (string_startswith _stringappend_1759_ "addi")
          (match (string_drop _stringappend_1759_ (string_length "addi")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1759_ (string_length "addi")) with
     | s_ => Some (RISCV_ADDI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1759_ "slti")
               (match (string_drop _stringappend_1759_ (string_length "slti")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1759_ (string_length "slti")) with
     | s_ => Some (RISCV_SLTI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1759_ "sltiu")
               (match (string_drop _stringappend_1759_ (string_length "sltiu")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1759_ (string_length "sltiu")) with
     | s_ => Some (RISCV_SLTIU, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1759_ "xori")
               (match (string_drop _stringappend_1759_ (string_length "xori")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1759_ (string_length "xori")) with
     | s_ => Some (RISCV_XORI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1759_ "ori")
               (match (string_drop _stringappend_1759_ (string_length "ori")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1759_ (string_length "ori")) with
     | s_ => Some (RISCV_ORI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1759_ "andi")
               (match (string_drop _stringappend_1759_ (string_length "andi")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1759_ (string_length "andi")) with
     | s_ => Some (RISCV_ANDI, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition encdec_sop_forwards (arg_ : sop) 
: mword 3 :=
   match arg_ with
   | RISCV_SLLI => (vec_of_bits [B0;B0;B1]  : mword 3)
   | RISCV_SRLI => (vec_of_bits [B1;B0;B1]  : mword 3)
   | RISCV_SRAI => (vec_of_bits [B1;B0;B1]  : mword 3)
   end.

Definition encdec_sop_backwards (arg_ : mword 3) 
: sop :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then RISCV_SLLI
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1]  : mword 3))) then RISCV_SRLI
   else RISCV_SRAI.

Definition encdec_sop_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition encdec_sop_backwards_matches (arg_ : mword 3) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0;B1]  : mword 3))) then true
   else false.

Definition shiftiop_mnemonic_forwards (arg_ : sop) 
: string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftiop_mnemonic_backwards (arg_ : string) 
: M (sop) :=
   (match arg_ with
    | "slli" => returnm (RISCV_SLLI  : sop)
    | "srli" => returnm (RISCV_SRLI  : sop)
    | "srai" => returnm (RISCV_SRAI  : sop)
    | _ => exit tt  : M (sop)
    end)
    : M (sop).

Definition shiftiop_mnemonic_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftiop_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slli" => true | "srli" => true | "srai" => true | _ => false end.

Definition shiftiop_mnemonic_matches_prefix (arg_ : string) 
: option ((sop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1756_ := arg_ in
   if ((andb (string_startswith _stringappend_1756_ "slli")
          (match (string_drop _stringappend_1756_ (string_length "slli")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1756_ (string_length "slli")) with
     | s_ => Some (RISCV_SLLI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1756_ "srli")
               (match (string_drop _stringappend_1756_ (string_length "srli")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1756_ (string_length "srli")) with
     | s_ => Some (RISCV_SRLI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1756_ "srai")
               (match (string_drop _stringappend_1756_ (string_length "srai")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1756_ (string_length "srai")) with
     | s_ => Some (RISCV_SRAI, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition rtype_mnemonic_forwards (arg_ : rop) 
: string :=
   match arg_ with
   | RISCV_ADD => "add"
   | RISCV_SUB => "sub"
   | RISCV_SLL => "sll"
   | RISCV_SLT => "slt"
   | RISCV_SLTU => "sltu"
   | RISCV_XOR => "xor"
   | RISCV_SRL => "srl"
   | RISCV_SRA => "sra"
   | RISCV_OR => "or"
   | RISCV_AND => "and"
   end.

Definition rtype_mnemonic_backwards (arg_ : string) 
: M (rop) :=
   (match arg_ with
    | "add" => returnm (RISCV_ADD  : rop)
    | "sub" => returnm (RISCV_SUB  : rop)
    | "sll" => returnm (RISCV_SLL  : rop)
    | "slt" => returnm (RISCV_SLT  : rop)
    | "sltu" => returnm (RISCV_SLTU  : rop)
    | "xor" => returnm (RISCV_XOR  : rop)
    | "srl" => returnm (RISCV_SRL  : rop)
    | "sra" => returnm (RISCV_SRA  : rop)
    | "or" => returnm (RISCV_OR  : rop)
    | "and" => returnm (RISCV_AND  : rop)
    | _ => exit tt  : M (rop)
    end)
    : M (rop).

Definition rtype_mnemonic_forwards_matches (arg_ : rop) 
: bool :=
   match arg_ with
   | RISCV_ADD => true
   | RISCV_SUB => true
   | RISCV_SLL => true
   | RISCV_SLT => true
   | RISCV_SLTU => true
   | RISCV_XOR => true
   | RISCV_SRL => true
   | RISCV_SRA => true
   | RISCV_OR => true
   | RISCV_AND => true
   end.

Definition rtype_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "add" => true
   | "sub" => true
   | "sll" => true
   | "slt" => true
   | "sltu" => true
   | "xor" => true
   | "srl" => true
   | "sra" => true
   | "or" => true
   | "and" => true
   | _ => false
   end.

Definition rtype_mnemonic_matches_prefix (arg_ : string) 
: option ((rop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1746_ := arg_ in
   if ((andb (string_startswith _stringappend_1746_ "add")
          (match (string_drop _stringappend_1746_ (string_length "add")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "add")) with
     | s_ => Some (RISCV_ADD, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "sub")
               (match (string_drop _stringappend_1746_ (string_length "sub")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "sub")) with
     | s_ => Some (RISCV_SUB, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "sll")
               (match (string_drop _stringappend_1746_ (string_length "sll")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "sll")) with
     | s_ => Some (RISCV_SLL, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "slt")
               (match (string_drop _stringappend_1746_ (string_length "slt")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "slt")) with
     | s_ => Some (RISCV_SLT, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "sltu")
               (match (string_drop _stringappend_1746_ (string_length "sltu")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "sltu")) with
     | s_ => Some (RISCV_SLTU, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "xor")
               (match (string_drop _stringappend_1746_ (string_length "xor")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "xor")) with
     | s_ => Some (RISCV_XOR, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "srl")
               (match (string_drop _stringappend_1746_ (string_length "srl")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "srl")) with
     | s_ => Some (RISCV_SRL, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "sra")
               (match (string_drop _stringappend_1746_ (string_length "sra")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "sra")) with
     | s_ => Some (RISCV_SRA, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "or")
               (match (string_drop _stringappend_1746_ (string_length "or")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "or")) with
     | s_ => Some (RISCV_OR, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1746_ "and")
               (match (string_drop _stringappend_1746_ (string_length "and")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1746_ (string_length "and")) with
     | s_ => Some (RISCV_AND, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition extend_value {n : Z} (is_unsigned : bool) (value : MemoryOpResult (mword (8 * n))) `{ArithFact (1 <=
  n /\
  n <= 8)} 
: MemoryOpResult (mword 64) :=
   match value with
   | MemValue (v) => MemValue (if (is_unsigned) then EXTZ 64 v else (EXTS 64 v)  : xlenbits)
   | MemException (e) => MemException e
   end.

Definition process_load {n : Z} (rd : mword 5) (addr : mword 64) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool) `{ArithFact (1 <=
  n /\
  n <= 8)} 
: M (bool) :=
   (match (extend_value is_unsigned value) with
    | MemValue (result) =>
       wX
         (projT1 ((regbits_to_regno rd)
          : {syn_n : Z & ArithFact (0 <= syn_n /\ (syn_n + 1) <= 32)})) result >>
       returnm (true
        : bool)
    | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
    end)
    : M (bool).

Definition check_misaligned (vaddr : mword 64) (width : word_width) 
: M (bool) :=
   (if ((plat_enable_misaligned_access tt)) then returnm (false  : bool)
    else
      (match width with
       | BYTE => returnm (false  : bool)
       | HALF =>
          cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__0 : mword 1 =>
          returnm ((eq_vec (w__0  : mword 1) ((bool_to_bits true)  : mword 1))
           : bool)
       | WORD =>
          (or_boolM
             (cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__1 : mword 1 =>
              returnm ((eq_vec (w__1  : mword 1) ((bool_to_bits true)  : mword 1))
               : bool))
             (cast_unit_vec (access_vec_dec vaddr 1) >>= fun w__2 : mword 1 =>
              returnm ((eq_vec (w__2  : mword 1) ((bool_to_bits true)  : mword 1))
               : bool)))
           : M (bool)
       | DOUBLE =>
          (or_boolM
             (cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__4 : mword 1 =>
              returnm ((eq_vec (w__4  : mword 1) ((bool_to_bits true)  : mword 1))
               : bool))
             ((or_boolM
                 (cast_unit_vec (access_vec_dec vaddr 1) >>= fun w__5 : mword 1 =>
                  returnm ((eq_vec (w__5  : mword 1) ((bool_to_bits true)  : mword 1))
                   : bool))
                 (cast_unit_vec (access_vec_dec vaddr 2) >>= fun w__6 : mword 1 =>
                  returnm ((eq_vec (w__6  : mword 1) ((bool_to_bits true)  : mword 1))
                   : bool)))
              : M (bool)))
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Definition maybe_aq_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => ".aq" | false => "" end.

Definition maybe_aq_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | ".aq" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_aq_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_aq_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | ".aq" => true | "" => true | _ => false end.

Definition maybe_aq_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1744_ := arg_ in
   if ((andb (string_startswith _stringappend_1744_ ".aq")
          (match (string_drop _stringappend_1744_ (string_length ".aq")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1744_ (string_length ".aq")) with
     | s_ => Some (true, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1744_ "")
               (match (string_drop _stringappend_1744_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1744_ (string_length "")) with
     | s_ => Some (false, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition maybe_rl_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => ".rl" | false => "" end.

Definition maybe_rl_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | ".rl" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_rl_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_rl_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | ".rl" => true | "" => true | _ => false end.

Definition maybe_rl_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1742_ := arg_ in
   if ((andb (string_startswith _stringappend_1742_ ".rl")
          (match (string_drop _stringappend_1742_ (string_length ".rl")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1742_ (string_length ".rl")) with
     | s_ => Some (true, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1742_ "")
               (match (string_drop _stringappend_1742_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1742_ (string_length "")) with
     | s_ => Some (false, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition maybe_u_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => "u" | false => "" end.

Definition maybe_u_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "u" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_u_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_u_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "u" => true | "" => true | _ => false end.

Definition maybe_u_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1740_ := arg_ in
   if ((andb (string_startswith _stringappend_1740_ "u")
          (match (string_drop _stringappend_1740_ (string_length "u")) with | s_ => true end))) then
     match (string_drop _stringappend_1740_ (string_length "u")) with
     | s_ => Some (true, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1740_ "")
               (match (string_drop _stringappend_1740_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1740_ (string_length "")) with
     | s_ => Some (false, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition shiftw_mnemonic_forwards (arg_ : sop) 
: string :=
   match arg_ with | RISCV_SLLI => "slli" | RISCV_SRLI => "srli" | RISCV_SRAI => "srai" end.

Definition shiftw_mnemonic_backwards (arg_ : string) 
: M (sop) :=
   (match arg_ with
    | "slli" => returnm (RISCV_SLLI  : sop)
    | "srli" => returnm (RISCV_SRLI  : sop)
    | "srai" => returnm (RISCV_SRAI  : sop)
    | _ => exit tt  : M (sop)
    end)
    : M (sop).

Definition shiftw_mnemonic_forwards_matches (arg_ : sop) 
: bool :=
   match arg_ with | RISCV_SLLI => true | RISCV_SRLI => true | RISCV_SRAI => true end.

Definition shiftw_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slli" => true | "srli" => true | "srai" => true | _ => false end.

Definition shiftw_mnemonic_matches_prefix (arg_ : string) 
: option ((sop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1737_ := arg_ in
   if ((andb (string_startswith _stringappend_1737_ "slli")
          (match (string_drop _stringappend_1737_ (string_length "slli")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1737_ (string_length "slli")) with
     | s_ => Some (RISCV_SLLI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1737_ "srli")
               (match (string_drop _stringappend_1737_ (string_length "srli")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1737_ (string_length "srli")) with
     | s_ => Some (RISCV_SRLI, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1737_ "srai")
               (match (string_drop _stringappend_1737_ (string_length "srai")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1737_ (string_length "srai")) with
     | s_ => Some (RISCV_SRAI, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition rtypew_mnemonic_forwards (arg_ : ropw) 
: string :=
   match arg_ with
   | RISCV_ADDW => "addw"
   | RISCV_SUBW => "subw"
   | RISCV_SLLW => "sllw"
   | RISCV_SRLW => "srlw"
   | RISCV_SRAW => "sraw"
   end.

Definition rtypew_mnemonic_backwards (arg_ : string) 
: M (ropw) :=
   (match arg_ with
    | "addw" => returnm (RISCV_ADDW  : ropw)
    | "subw" => returnm (RISCV_SUBW  : ropw)
    | "sllw" => returnm (RISCV_SLLW  : ropw)
    | "srlw" => returnm (RISCV_SRLW  : ropw)
    | "sraw" => returnm (RISCV_SRAW  : ropw)
    | _ => exit tt  : M (ropw)
    end)
    : M (ropw).

Definition rtypew_mnemonic_forwards_matches (arg_ : ropw) 
: bool :=
   match arg_ with
   | RISCV_ADDW => true
   | RISCV_SUBW => true
   | RISCV_SLLW => true
   | RISCV_SRLW => true
   | RISCV_SRAW => true
   end.

Definition rtypew_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "addw" => true
   | "subw" => true
   | "sllw" => true
   | "srlw" => true
   | "sraw" => true
   | _ => false
   end.

Definition rtypew_mnemonic_matches_prefix (arg_ : string) 
: option ((ropw * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1732_ := arg_ in
   if ((andb (string_startswith _stringappend_1732_ "addw")
          (match (string_drop _stringappend_1732_ (string_length "addw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1732_ (string_length "addw")) with
     | s_ => Some (RISCV_ADDW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1732_ "subw")
               (match (string_drop _stringappend_1732_ (string_length "subw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1732_ (string_length "subw")) with
     | s_ => Some (RISCV_SUBW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1732_ "sllw")
               (match (string_drop _stringappend_1732_ (string_length "sllw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1732_ (string_length "sllw")) with
     | s_ => Some (RISCV_SLLW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1732_ "srlw")
               (match (string_drop _stringappend_1732_ (string_length "srlw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1732_ (string_length "srlw")) with
     | s_ => Some (RISCV_SRLW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1732_ "sraw")
               (match (string_drop _stringappend_1732_ (string_length "sraw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1732_ (string_length "sraw")) with
     | s_ => Some (RISCV_SRAW, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition shiftiwop_mnemonic_forwards (arg_ : sopw) 
: string :=
   match arg_ with | RISCV_SLLIW => "slliw" | RISCV_SRLIW => "srliw" | RISCV_SRAIW => "sraiw" end.

Definition shiftiwop_mnemonic_backwards (arg_ : string) 
: M (sopw) :=
   (match arg_ with
    | "slliw" => returnm (RISCV_SLLIW  : sopw)
    | "srliw" => returnm (RISCV_SRLIW  : sopw)
    | "sraiw" => returnm (RISCV_SRAIW  : sopw)
    | _ => exit tt  : M (sopw)
    end)
    : M (sopw).

Definition shiftiwop_mnemonic_forwards_matches (arg_ : sopw) 
: bool :=
   match arg_ with | RISCV_SLLIW => true | RISCV_SRLIW => true | RISCV_SRAIW => true end.

Definition shiftiwop_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "slliw" => true | "srliw" => true | "sraiw" => true | _ => false end.

Definition shiftiwop_mnemonic_matches_prefix (arg_ : string) 
: option ((sopw * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1729_ := arg_ in
   if ((andb (string_startswith _stringappend_1729_ "slliw")
          (match (string_drop _stringappend_1729_ (string_length "slliw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1729_ (string_length "slliw")) with
     | s_ => Some (RISCV_SLLIW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1729_ "srliw")
               (match (string_drop _stringappend_1729_ (string_length "srliw")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1729_ (string_length "srliw")) with
     | s_ => Some (RISCV_SRLIW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1729_ "sraiw")
               (match (string_drop _stringappend_1729_ (string_length "sraiw")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1729_ (string_length "sraiw")) with
     | s_ => Some (RISCV_SRAIW, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition encdec_mul_op_forwards (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: M (mword 3) :=
   let arg_ := (arg0, arg1, arg2) in
   (match arg_ with
    | (false, true, true) => returnm ((vec_of_bits [B0;B0;B0]  : mword 3)  : mword 3)
    | (true, true, true) => returnm ((vec_of_bits [B0;B0;B1]  : mword 3)  : mword 3)
    | (true, true, false) => returnm ((vec_of_bits [B0;B1;B0]  : mword 3)  : mword 3)
    | (true, false, false) => returnm ((vec_of_bits [B0;B1;B1]  : mword 3)  : mword 3)
    | _ => exit tt  : M (mword 3)
    end)
    : M (mword 3).

Definition encdec_mul_op_backwards (arg_ : mword 3) 
: (bool * bool * bool) :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then (false, true, true)
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then (true, true, true)
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B0]  : mword 3))) then (true, true, false)
   else (true, false, false).

Definition encdec_mul_op_forwards_matches (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: bool :=
   let arg_ := (arg0, arg1, arg2) in
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition encdec_mul_op_backwards_matches (arg_ : mword 3) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B0;B1]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B0]  : mword 3))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0;B1;B1]  : mword 3))) then true
   else false.

Definition mul_mnemonic_forwards (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: M (string) :=
   let arg_ := (arg0, arg1, arg2) in
   (match arg_ with
    | (false, true, true) => returnm ("mul"  : string)
    | (true, true, true) => returnm ("mulh"  : string)
    | (true, true, false) => returnm ("mulhsu"  : string)
    | (true, false, false) => returnm ("mulhu"  : string)
    | _ => exit tt  : M (string)
    end)
    : M (string).

Definition mul_mnemonic_backwards (arg_ : string) 
: M ((bool * bool * bool)) :=
   (match arg_ with
    | "mul" => returnm ((false, true, true)  : (bool * bool * bool))
    | "mulh" => returnm ((true, true, true)  : (bool * bool * bool))
    | "mulhsu" => returnm ((true, true, false)  : (bool * bool * bool))
    | "mulhu" => returnm ((true, false, false)  : (bool * bool * bool))
    | _ => exit tt  : M ((bool * bool * bool))
    end)
    : M ((bool * bool * bool)).

Definition mul_mnemonic_forwards_matches (arg0 : bool) (arg1 : bool) (arg2 : bool) 
: bool :=
   let arg_ := (arg0, arg1, arg2) in
   match arg_ with
   | (false, true, true) => true
   | (true, true, true) => true
   | (true, true, false) => true
   | (true, false, false) => true
   | _ => false
   end.

Definition mul_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "mul" => true
   | "mulh" => true
   | "mulhsu" => true
   | "mulhu" => true
   | _ => false
   end.

Definition mul_mnemonic_matches_prefix (arg_ : string) 
: option (((bool * bool * bool) * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1725_ := arg_ in
   if ((andb (string_startswith _stringappend_1725_ "mul")
          (match (string_drop _stringappend_1725_ (string_length "mul")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1725_ (string_length "mul")) with
     | s_ => Some ((false, true, true), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1725_ "mulh")
               (match (string_drop _stringappend_1725_ (string_length "mulh")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1725_ (string_length "mulh")) with
     | s_ => Some ((true, true, true), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1725_ "mulhsu")
               (match (string_drop _stringappend_1725_ (string_length "mulhsu")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1725_ (string_length "mulhsu")) with
     | s_ => Some ((true, true, false), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1725_ "mulhu")
               (match (string_drop _stringappend_1725_ (string_length "mulhu")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1725_ (string_length "mulhu")) with
     | s_ => Some ((true, false, false), sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition maybe_not_u_forwards (arg_ : bool) 
: string :=
   match arg_ with | false => "u" | true => "" end.

Definition maybe_not_u_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "u" => returnm (false  : bool)
    | "" => returnm (true  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_not_u_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | false => true | true => true end.

Definition maybe_not_u_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "u" => true | "" => true | _ => false end.

Definition maybe_not_u_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1723_ := arg_ in
   if ((andb (string_startswith _stringappend_1723_ "u")
          (match (string_drop _stringappend_1723_ (string_length "u")) with | s_ => true end))) then
     match (string_drop _stringappend_1723_ (string_length "u")) with
     | s_ => Some (false, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1723_ "")
               (match (string_drop _stringappend_1723_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1723_ (string_length "")) with
     | s_ => Some (true, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition bit_maybe_r_forwards (arg_ : mword 1) 
: string :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then "r"
   else "".

Definition bit_maybe_r_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "r" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_r_forwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_r_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "r" => true | "" => true | _ => false end.

Definition bit_maybe_r_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1721_ := arg_ in
   if ((andb (string_startswith _stringappend_1721_ "r")
          (match (string_drop _stringappend_1721_ (string_length "r")) with | s_ => true end))) then
     match (string_drop _stringappend_1721_ (string_length "r")) with
     | s_ => Some ((vec_of_bits [B1]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1721_ "")
               (match (string_drop _stringappend_1721_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1721_ (string_length "")) with
     | s_ => Some ((vec_of_bits [B0]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition bit_maybe_w_forwards (arg_ : mword 1) 
: string :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then "w"
   else "".

Definition bit_maybe_w_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "w" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_w_forwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_w_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "w" => true | "" => true | _ => false end.

Definition bit_maybe_w_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1719_ := arg_ in
   if ((andb (string_startswith _stringappend_1719_ "w")
          (match (string_drop _stringappend_1719_ (string_length "w")) with | s_ => true end))) then
     match (string_drop _stringappend_1719_ (string_length "w")) with
     | s_ => Some ((vec_of_bits [B1]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1719_ "")
               (match (string_drop _stringappend_1719_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1719_ (string_length "")) with
     | s_ => Some ((vec_of_bits [B0]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition bit_maybe_i_forwards (arg_ : mword 1) 
: string :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then "i"
   else "".

Definition bit_maybe_i_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "i" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_i_forwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_i_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "i" => true | "" => true | _ => false end.

Definition bit_maybe_i_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1717_ := arg_ in
   if ((andb (string_startswith _stringappend_1717_ "i")
          (match (string_drop _stringappend_1717_ (string_length "i")) with | s_ => true end))) then
     match (string_drop _stringappend_1717_ (string_length "i")) with
     | s_ => Some ((vec_of_bits [B1]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1717_ "")
               (match (string_drop _stringappend_1717_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1717_ (string_length "")) with
     | s_ => Some ((vec_of_bits [B0]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition bit_maybe_o_forwards (arg_ : mword 1) 
: string :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then "o"
   else "".

Definition bit_maybe_o_backwards (arg_ : string) 
: M (mword 1) :=
   (match arg_ with
    | "o" => returnm ((vec_of_bits [B1]  : mword 1)  : mword 1)
    | "" => returnm ((vec_of_bits [B0]  : mword 1)  : mword 1)
    | _ => exit tt  : M (mword 1)
    end)
    : M (mword 1).

Definition bit_maybe_o_forwards_matches (arg_ : mword 1) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B1]  : mword 1))) then true
   else if ((eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then true
   else false.

Definition bit_maybe_o_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "o" => true | "" => true | _ => false end.

Definition bit_maybe_o_matches_prefix (arg_ : string) 
: option ((mword 1 * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1715_ := arg_ in
   if ((andb (string_startswith _stringappend_1715_ "o")
          (match (string_drop _stringappend_1715_ (string_length "o")) with | s_ => true end))) then
     match (string_drop _stringappend_1715_ (string_length "o")) with
     | s_ => Some ((vec_of_bits [B1]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1715_ "")
               (match (string_drop _stringappend_1715_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1715_ (string_length "")) with
     | s_ => Some ((vec_of_bits [B0]  : mword 1), sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition fence_bits_forwards (arg_ : mword 4) 
: string :=
   match arg_ with
   | v__0 =>
      let r : bits 1 := subrange_vec_dec v__0 3 3 in
      let w : bits 1 := subrange_vec_dec v__0 2 2 in
      let i : bits 1 := subrange_vec_dec v__0 1 1 in
      let o : bits 1 := subrange_vec_dec v__0 0 0 in
      string_append (bit_maybe_r_forwards r)
        (string_append (bit_maybe_w_forwards w)
           (string_append (bit_maybe_i_forwards i) (string_append (bit_maybe_o_forwards o) "")))
   end.

Definition fence_bits_backwards (arg_ : string) 
: M (mword 4) :=
   let _stringappend_1703_ := arg_ in
   match (bit_maybe_r_matches_prefix _stringappend_1703_) with
   | Some (_stringappend_1704_,(existT _ _stringappend_1705_ _)) =>
      returnm ((_stringappend_1704_, build_ex _stringappend_1705_)
       : (mword 1 * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__1 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
   let '(r, existT _ _stringappend_1705_ _) := w__1  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
   let _stringappend_1706_ := string_drop _stringappend_1703_ (build_ex _stringappend_1705_) in
   match (bit_maybe_w_matches_prefix _stringappend_1706_) with
   | Some (_stringappend_1707_,(existT _ _stringappend_1708_ _)) =>
      returnm ((_stringappend_1707_, build_ex _stringappend_1708_)
       : (mword 1 * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__3 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
   let '(w, existT _ _stringappend_1708_ _) := w__3  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
   let _stringappend_1709_ := string_drop _stringappend_1706_ (build_ex _stringappend_1708_) in
   match (bit_maybe_i_matches_prefix _stringappend_1709_) with
   | Some (_stringappend_1710_,(existT _ _stringappend_1711_ _)) =>
      returnm ((_stringappend_1710_, build_ex _stringappend_1711_)
       : (mword 1 * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__5 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
   let '(i, existT _ _stringappend_1711_ _) := w__5  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
   let _stringappend_1712_ := string_drop _stringappend_1709_ (build_ex _stringappend_1711_) in
   match (bit_maybe_o_matches_prefix _stringappend_1712_) with
   | Some (_stringappend_1713_,(existT _ _stringappend_1714_ _)) =>
      returnm ((_stringappend_1713_, build_ex _stringappend_1714_)
       : (mword 1 * {n : Z & ArithFact (n >= 0)}))
   | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
   end >>= fun w__7 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
   let '(o, existT _ _stringappend_1714_ _) := w__7  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
   (match (string_drop _stringappend_1712_ (build_ex _stringappend_1714_)) with
    | "" =>
       returnm ((concat_vec (r  : bits 1)
                   (concat_vec (w  : bits 1) (concat_vec (i  : bits 1) (o  : bits 1))))
        : mword 4)
    | _ => exit tt  : M (mword 4)
    end)
    : M (mword 4).

Definition fence_bits_forwards_matches (arg_ : mword 4) 
: bool :=
   match arg_ with | v__1 => true end.

Definition fence_bits_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_1691_ := arg_ in
   (if ((match (bit_maybe_r_matches_prefix _stringappend_1691_) with
         | Some (_stringappend_1692_,(existT _ _stringappend_1693_ _)) =>
            let _stringappend_1694_ :=
              string_drop _stringappend_1691_ (build_ex _stringappend_1693_) in
            if ((match (bit_maybe_w_matches_prefix _stringappend_1694_) with
                 | Some (_stringappend_1695_,(existT _ _stringappend_1696_ _)) =>
                    let _stringappend_1697_ :=
                      string_drop _stringappend_1694_ (build_ex _stringappend_1696_) in
                    if ((match (bit_maybe_i_matches_prefix _stringappend_1697_) with
                         | Some (_stringappend_1698_,(existT _ _stringappend_1699_ _)) =>
                            let _stringappend_1700_ :=
                              string_drop _stringappend_1697_ (build_ex _stringappend_1699_) in
                            if ((match (bit_maybe_o_matches_prefix _stringappend_1700_) with
                                 | Some (_stringappend_1701_,(existT _ _stringappend_1702_ _)) =>
                                    match (string_drop _stringappend_1700_
                                             (build_ex
                                             _stringappend_1702_)) with
                                    | "" => true
                                    | _ => false
                                    end
                                 | None => false
                                 end)) then
                              true
                            else false
                         | None => false
                         end)) then
                      true
                    else false
                 | None => false
                 end)) then
              true
            else false
         | None => false
         end)) then
      match (bit_maybe_r_matches_prefix _stringappend_1691_) with
      | Some (_stringappend_1692_,(existT _ _stringappend_1693_ _)) =>
         returnm ((_stringappend_1692_, build_ex _stringappend_1693_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__1 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(r, existT _ _stringappend_1693_ _) := w__1  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1694_ := string_drop _stringappend_1691_ (build_ex _stringappend_1693_) in
      match (bit_maybe_w_matches_prefix _stringappend_1694_) with
      | Some (_stringappend_1695_,(existT _ _stringappend_1696_ _)) =>
         returnm ((_stringappend_1695_, build_ex _stringappend_1696_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__3 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(w, existT _ _stringappend_1696_ _) := w__3  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1697_ := string_drop _stringappend_1694_ (build_ex _stringappend_1696_) in
      match (bit_maybe_i_matches_prefix _stringappend_1697_) with
      | Some (_stringappend_1698_,(existT _ _stringappend_1699_ _)) =>
         returnm ((_stringappend_1698_, build_ex _stringappend_1699_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__5 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(i, existT _ _stringappend_1699_ _) := w__5  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1700_ := string_drop _stringappend_1697_ (build_ex _stringappend_1699_) in
      match (bit_maybe_o_matches_prefix _stringappend_1700_) with
      | Some (_stringappend_1701_,(existT _ _stringappend_1702_ _)) =>
         returnm ((_stringappend_1701_, build_ex _stringappend_1702_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__7 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(o, existT _ _stringappend_1702_ _) := w__7  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      (match (string_drop _stringappend_1700_ (build_ex _stringappend_1702_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else returnm (false  : bool))
    : M (bool).

Definition fence_bits_matches_prefix (arg_ : string) 
: M (option ((mword 4 * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_1679_ := arg_ in
   (if ((match (bit_maybe_r_matches_prefix _stringappend_1679_) with
         | Some (_stringappend_1680_,(existT _ _stringappend_1681_ _)) =>
            let _stringappend_1682_ :=
              string_drop _stringappend_1679_ (build_ex _stringappend_1681_) in
            if ((match (bit_maybe_w_matches_prefix _stringappend_1682_) with
                 | Some (_stringappend_1683_,(existT _ _stringappend_1684_ _)) =>
                    let _stringappend_1685_ :=
                      string_drop _stringappend_1682_ (build_ex _stringappend_1684_) in
                    if ((match (bit_maybe_i_matches_prefix _stringappend_1685_) with
                         | Some (_stringappend_1686_,(existT _ _stringappend_1687_ _)) =>
                            let _stringappend_1688_ :=
                              string_drop _stringappend_1685_ (build_ex _stringappend_1687_) in
                            if ((match (bit_maybe_o_matches_prefix _stringappend_1688_) with
                                 | Some (_stringappend_1689_,(existT _ _stringappend_1690_ _)) =>
                                    match (string_drop _stringappend_1688_
                                             (build_ex
                                             _stringappend_1690_)) with
                                    | s_ => true
                                    end
                                 | None => false
                                 end)) then
                              true
                            else false
                         | None => false
                         end)) then
                      true
                    else false
                 | None => false
                 end)) then
              true
            else false
         | None => false
         end)) then
      match (bit_maybe_r_matches_prefix _stringappend_1679_) with
      | Some (_stringappend_1680_,(existT _ _stringappend_1681_ _)) =>
         returnm ((_stringappend_1680_, build_ex _stringappend_1681_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__1 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(r, existT _ _stringappend_1681_ _) := w__1  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1682_ := string_drop _stringappend_1679_ (build_ex _stringappend_1681_) in
      match (bit_maybe_w_matches_prefix _stringappend_1682_) with
      | Some (_stringappend_1683_,(existT _ _stringappend_1684_ _)) =>
         returnm ((_stringappend_1683_, build_ex _stringappend_1684_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__3 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(w, existT _ _stringappend_1684_ _) := w__3  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1685_ := string_drop _stringappend_1682_ (build_ex _stringappend_1684_) in
      match (bit_maybe_i_matches_prefix _stringappend_1685_) with
      | Some (_stringappend_1686_,(existT _ _stringappend_1687_ _)) =>
         returnm ((_stringappend_1686_, build_ex _stringappend_1687_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__5 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(i, existT _ _stringappend_1687_ _) := w__5  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1688_ := string_drop _stringappend_1685_ (build_ex _stringappend_1687_) in
      match (bit_maybe_o_matches_prefix _stringappend_1688_) with
      | Some (_stringappend_1689_,(existT _ _stringappend_1690_ _)) =>
         returnm ((_stringappend_1689_, build_ex _stringappend_1690_)
          : (mword 1 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 1 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__7 : (mword 1 * {n : Z & ArithFact (n >= 0)}) =>
      let '(o, existT _ _stringappend_1690_ _) := w__7  : (mword 1 * {n : Z & ArithFact (n >= 0)}) in
      returnm ((match (string_drop _stringappend_1688_ (build_ex _stringappend_1690_)) with
                | s_ =>
                   Some (concat_vec (r  : bits 1)
                           (concat_vec (w  : bits 1) (concat_vec (i  : bits 1) (o  : bits 1))),
                         sub_nat (string_length arg_) (string_length s_))
                end)
       : option ((mword 4 * {n : Z & ArithFact (n >= 0)})))
    else returnm (None  : option ((mword 4 * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((mword 4 * {n : Z & ArithFact (n >= 0)}))).

Definition aqrl_str (aq : bool) (rl : bool) 
: string :=
   match (aq, rl) with
   | (false, false) => ""
   | (false, true) => ".rl"
   | (true, false) => ".aq"
   | (true, true) => ".aqrl"
   end.

Definition lrsc_width_str (width : word_width) 
: string :=
   match width with | BYTE => ".b" | HALF => ".h" | WORD => ".w" | DOUBLE => ".d" end.

Definition process_loadres {n : Z} (rd : mword 5) (addr : mword 64) (value : MemoryOpResult (mword (8 * n))) (is_unsigned : bool) `{ArithFact (1 <=
  n /\
  n <= 8)} 
: M (bool) :=
   (match (extend_value is_unsigned value) with
    | MemValue (result) =>
       let '_ := (load_reservation addr)  : unit in
       wX
         (projT1 ((regbits_to_regno rd)
          : {syn_n : Z & ArithFact (0 <= syn_n /\ (syn_n + 1) <= 32)})) result >>
       returnm (true
        : bool)
    | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
    end)
    : M (bool).

Definition encdec_amoop_forwards (arg_ : amoop) 
: mword 5 :=
   match arg_ with
   | AMOSWAP => (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5)
   | AMOADD => (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
   | AMOXOR => (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5)
   | AMOAND => (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5)
   | AMOOR => (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5)
   | AMOMIN => (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5)
   | AMOMAX => (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5)
   | AMOMINU => (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5)
   | AMOMAXU => (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5)
   end.

Definition encdec_amoop_backwards (arg_ : mword 5) 
: amoop :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((regbits_to_regno p0_)
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOSWAP
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOADD
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOXOR
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOAND
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOOR
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMIN
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMAX
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     AMOMINU
   else AMOMAXU.

Definition encdec_amoop_forwards_matches (arg_ : amoop) 
: bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition encdec_amoop_backwards_matches (arg_ : mword 5) 
: bool :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb
                          (projT1 ((regbits_to_regno p0_)
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B1]  : mword 5))
                           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B0;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno p0_)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B1;B1;B1;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
     true
   else false.

Definition amo_mnemonic_forwards (arg_ : amoop) 
: string :=
   match arg_ with
   | AMOSWAP => "amoswap"
   | AMOADD => "amoadd"
   | AMOXOR => "amoxor"
   | AMOAND => "amoand"
   | AMOOR => "amoor"
   | AMOMIN => "amomin"
   | AMOMAX => "amomax"
   | AMOMINU => "amominu"
   | AMOMAXU => "amomaxu"
   end.

Definition amo_mnemonic_backwards (arg_ : string) 
: M (amoop) :=
   (match arg_ with
    | "amoswap" => returnm (AMOSWAP  : amoop)
    | "amoadd" => returnm (AMOADD  : amoop)
    | "amoxor" => returnm (AMOXOR  : amoop)
    | "amoand" => returnm (AMOAND  : amoop)
    | "amoor" => returnm (AMOOR  : amoop)
    | "amomin" => returnm (AMOMIN  : amoop)
    | "amomax" => returnm (AMOMAX  : amoop)
    | "amominu" => returnm (AMOMINU  : amoop)
    | "amomaxu" => returnm (AMOMAXU  : amoop)
    | _ => exit tt  : M (amoop)
    end)
    : M (amoop).

Definition amo_mnemonic_forwards_matches (arg_ : amoop) 
: bool :=
   match arg_ with
   | AMOSWAP => true
   | AMOADD => true
   | AMOXOR => true
   | AMOAND => true
   | AMOOR => true
   | AMOMIN => true
   | AMOMAX => true
   | AMOMINU => true
   | AMOMAXU => true
   end.

Definition amo_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with
   | "amoswap" => true
   | "amoadd" => true
   | "amoxor" => true
   | "amoand" => true
   | "amoor" => true
   | "amomin" => true
   | "amomax" => true
   | "amominu" => true
   | "amomaxu" => true
   | _ => false
   end.

Definition amo_mnemonic_matches_prefix (arg_ : string) 
: option ((amoop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1670_ := arg_ in
   if ((andb (string_startswith _stringappend_1670_ "amoswap")
          (match (string_drop _stringappend_1670_ (string_length "amoswap")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1670_ (string_length "amoswap")) with
     | s_ => Some (AMOSWAP, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amoadd")
               (match (string_drop _stringappend_1670_ (string_length "amoadd")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amoadd")) with
     | s_ => Some (AMOADD, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amoxor")
               (match (string_drop _stringappend_1670_ (string_length "amoxor")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amoxor")) with
     | s_ => Some (AMOXOR, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amoand")
               (match (string_drop _stringappend_1670_ (string_length "amoand")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amoand")) with
     | s_ => Some (AMOAND, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amoor")
               (match (string_drop _stringappend_1670_ (string_length "amoor")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amoor")) with
     | s_ => Some (AMOOR, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amomin")
               (match (string_drop _stringappend_1670_ (string_length "amomin")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amomin")) with
     | s_ => Some (AMOMIN, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amomax")
               (match (string_drop _stringappend_1670_ (string_length "amomax")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amomax")) with
     | s_ => Some (AMOMAX, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amominu")
               (match (string_drop _stringappend_1670_ (string_length "amominu")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amominu")) with
     | s_ => Some (AMOMINU, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1670_ "amomaxu")
               (match (string_drop _stringappend_1670_ (string_length "amomaxu")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1670_ (string_length "amomaxu")) with
     | s_ => Some (AMOMAXU, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition encdec_csrop_forwards (arg_ : csrop) 
: mword 2 :=
   match arg_ with
   | CSRRW => (vec_of_bits [B0;B1]  : mword 2)
   | CSRRS => (vec_of_bits [B1;B0]  : mword 2)
   | CSRRC => (vec_of_bits [B1;B1]  : mword 2)
   end.

Definition encdec_csrop_backwards (arg_ : mword 2) 
: csrop :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B1]  : mword 2))) then CSRRW
   else if ((eq_vec p0_ (vec_of_bits [B1;B0]  : mword 2))) then CSRRS
   else CSRRC.

Definition encdec_csrop_forwards_matches (arg_ : csrop) 
: bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition encdec_csrop_backwards_matches (arg_ : mword 2) 
: bool :=
   let p0_ := arg_ in
   if ((eq_vec p0_ (vec_of_bits [B0;B1]  : mword 2))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B0]  : mword 2))) then true
   else if ((eq_vec p0_ (vec_of_bits [B1;B1]  : mword 2))) then true
   else false.

Definition readCSR (csr : mword 12) 
: M (mword 64) :=
   let b__0 := csr in
   (if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mvendorid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B0]  : mword 12))) then
      (read_reg marchid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B0;B1;B1]  : mword 12))) then
      (read_reg mimpid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B1;B1;B0;B0;B0;B1;B0;B1;B0;B0]  : mword 12))) then
      (read_reg mhartid_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__4 : Mstatus => returnm ((_get_Mstatus_bits w__4)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      read_reg misa_ref >>= fun w__5 : Misa => returnm ((_get_Misa_bits w__5)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg medeleg_ref >>= fun w__6 : Medeleg => returnm ((_get_Medeleg_bits w__6)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg mideleg_ref >>= fun w__7 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__7)
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__8 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__8)
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg mtvec_ref >>= fun w__9 : Mtvec => returnm ((_get_Mtvec_bits w__9)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg mcounteren_ref >>= fun w__10 : Counteren =>
      returnm ((EXTZ 64 (_get_Counteren_bits w__10))
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg mscratch_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mepc_ref  : M (mword 64)) >>= fun w__12 : mword 64 =>
      pc_alignment_mask tt >>= fun w__13 : mword 64 => returnm ((and_vec w__12 w__13)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg mcause_ref >>= fun w__14 : Mcause => returnm ((_get_Mcause_bits w__14)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      (read_reg mtval_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__16 : Minterrupts =>
      returnm ((_get_Minterrupts_bits w__16)
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg pmpcfg0_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
      (read_reg pmpaddr0_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__19 : Mstatus =>
      returnm ((_get_Sstatus_bits (lower_mstatus w__19))
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg sedeleg_ref >>= fun w__20 : Sedeleg =>
      returnm ((_get_Sedeleg_bits w__20)
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg sideleg_ref >>= fun w__21 : Sinterrupts =>
      returnm ((_get_Sinterrupts_bits w__21)
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__22 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__23 : Minterrupts =>
      returnm ((_get_Sinterrupts_bits (lower_mie w__22 w__23))
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg stvec_ref >>= fun w__24 : Mtvec => returnm ((_get_Mtvec_bits w__24)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg scounteren_ref >>= fun w__25 : Counteren =>
      returnm ((EXTZ 64 (_get_Counteren_bits w__25))
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg sscratch_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg sepc_ref  : M (mword 64)) >>= fun w__27 : mword 64 =>
      pc_alignment_mask tt >>= fun w__28 : mword 64 => returnm ((and_vec w__27 w__28)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg scause_ref >>= fun w__29 : Mcause => returnm ((_get_Mcause_bits w__29)  : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      (read_reg stval_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__31 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__32 : Minterrupts =>
      returnm ((_get_Sinterrupts_bits (lower_mip w__31 w__32))
       : xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg satp_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg mcycle_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      (read_reg mtime_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      (read_reg minstret_ref  : M (mword 64))
       : M (xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      (read_reg tselect_ref  : M (mword 64)) >>= fun w__37 : mword 64 =>
      returnm ((not_vec w__37)
       : xlenbits)
    else
      let '_ := (print_bits "unhandled read to CSR " csr)  : unit in
      returnm ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0]
                 : mword 64)
       : mword 64)) >>= fun res : xlenbits =>
   let '_ :=
     (print_endline
        (String.append "CSR "
           (String.append ((csr_name csr)  : string) (String.append " -> " (string_of_bits res)))))
      : unit in
   returnm (res
    : mword 64).

Definition writeCSR (csr : mword 12) (value : mword 64) 
: M (unit) :=
   let b__0 := csr in
   (if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__0 : Mstatus =>
      write_reg mstatus_ref (legalize_mstatus w__0 value) >>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      returnm ((Some (_get_Mstatus_bits w__1))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      read_reg misa_ref >>= fun w__2 : Misa =>
      legalize_misa w__2 value >>= fun w__3 : Misa =>
      write_reg misa_ref w__3 >>
      read_reg misa_ref >>= fun w__4 : Misa =>
      returnm ((Some (_get_Misa_bits w__4))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg medeleg_ref >>= fun w__5 : Medeleg =>
      write_reg medeleg_ref (legalize_medeleg w__5 value) >>
      read_reg medeleg_ref >>= fun w__6 : Medeleg =>
      returnm ((Some (_get_Medeleg_bits w__6))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      read_reg mideleg_ref >>= fun w__7 : Minterrupts =>
      write_reg mideleg_ref (legalize_mideleg w__7 value) >>
      read_reg mideleg_ref >>= fun w__8 : Minterrupts =>
      returnm ((Some (_get_Minterrupts_bits w__8))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__9 : Minterrupts =>
      write_reg mie_ref (legalize_mie w__9 value) >>
      read_reg mie_ref >>= fun w__10 : Minterrupts =>
      returnm ((Some (_get_Minterrupts_bits w__10))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg mtvec_ref >>= fun w__11 : Mtvec =>
      write_reg mtvec_ref (legalize_tvec w__11 value) >>
      read_reg mtvec_ref >>= fun w__12 : Mtvec =>
      returnm ((Some (_get_Mtvec_bits w__12))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg mcounteren_ref >>= fun w__13 : Counteren =>
      legalize_mcounteren w__13 value >>= fun w__14 : Counteren =>
      write_reg mcounteren_ref w__14 >>
      read_reg mcounteren_ref >>= fun w__15 : Counteren =>
      returnm ((Some (EXTZ 64 (_get_Counteren_bits w__15)))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg mscratch_ref value >>
      (read_reg mscratch_ref  : M (mword 64)) >>= fun w__16 : mword 64 =>
      returnm ((Some w__16)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      legalize_xepc value >>= fun w__17 : xlenbits =>
      write_reg mepc_ref w__17 >>
      (read_reg mepc_ref  : M (mword 64)) >>= fun w__18 : mword 64 =>
      returnm ((Some w__18)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      _set_Mcause_bits mcause_ref value >>
      read_reg mcause_ref >>= fun w__19 : Mcause =>
      returnm ((Some (_get_Mcause_bits w__19))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      write_reg mtval_ref value >>
      (read_reg mtval_ref  : M (mword 64)) >>= fun w__20 : mword 64 =>
      returnm ((Some w__20)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__21 : Minterrupts =>
      write_reg mip_ref (legalize_mip w__21 value) >>
      read_reg mip_ref >>= fun w__22 : Minterrupts =>
      returnm ((Some (_get_Minterrupts_bits w__22))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg pmpcfg0_ref value >>
      (read_reg pmpcfg0_ref  : M (mword 64)) >>= fun w__23 : mword 64 =>
      returnm ((Some w__23)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B1;B1;B1;B0;B1;B1;B0;B0;B0;B0]  : mword 12))) then
      write_reg pmpaddr0_ref value >>
      (read_reg pmpaddr0_ref  : M (mword 64)) >>= fun w__24 : mword 64 =>
      returnm ((Some w__24)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      read_reg mstatus_ref >>= fun w__25 : Mstatus =>
      write_reg mstatus_ref (legalize_sstatus w__25 value) >>
      read_reg mstatus_ref >>= fun w__26 : Mstatus =>
      returnm ((Some (_get_Mstatus_bits w__26))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      read_reg sedeleg_ref >>= fun w__27 : Sedeleg =>
      write_reg sedeleg_ref (legalize_sedeleg w__27 value) >>
      read_reg sedeleg_ref >>= fun w__28 : Sedeleg =>
      returnm ((Some (_get_Sedeleg_bits w__28))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      _set_Sinterrupts_bits sideleg_ref value >>
      read_reg sideleg_ref >>= fun w__29 : Sinterrupts =>
      returnm ((Some (_get_Sinterrupts_bits w__29))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mie_ref >>= fun w__30 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__31 : Minterrupts =>
      write_reg mie_ref (legalize_sie w__30 w__31 value) >>
      read_reg mie_ref >>= fun w__32 : Minterrupts =>
      returnm ((Some (_get_Minterrupts_bits w__32))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12))) then
      read_reg stvec_ref >>= fun w__33 : Mtvec =>
      write_reg stvec_ref (legalize_tvec w__33 value) >>
      read_reg stvec_ref >>= fun w__34 : Mtvec =>
      returnm ((Some (_get_Mtvec_bits w__34))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B1;B0]  : mword 12))) then
      read_reg scounteren_ref >>= fun w__35 : Counteren =>
      legalize_scounteren w__35 value >>= fun w__36 : Counteren =>
      write_reg scounteren_ref w__36 >>
      read_reg scounteren_ref >>= fun w__37 : Counteren =>
      returnm ((Some (EXTZ 64 (_get_Counteren_bits w__37)))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg sscratch_ref value >>
      (read_reg sscratch_ref  : M (mword 64)) >>= fun w__38 : mword 64 =>
      returnm ((Some w__38)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B1]  : mword 12))) then
      legalize_xepc value >>= fun w__39 : xlenbits =>
      write_reg sepc_ref w__39 >>
      (read_reg sepc_ref  : M (mword 64)) >>= fun w__40 : mword 64 =>
      returnm ((Some w__40)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      _set_Mcause_bits scause_ref value >>
      read_reg scause_ref >>= fun w__41 : Mcause =>
      returnm ((Some (_get_Mcause_bits w__41))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B1;B1]  : mword 12))) then
      write_reg stval_ref value >>
      (read_reg stval_ref  : M (mword 64)) >>= fun w__42 : mword 64 =>
      returnm ((Some w__42)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0;B0;B1;B0;B0]  : mword 12))) then
      read_reg mip_ref >>= fun w__43 : Minterrupts =>
      read_reg mideleg_ref >>= fun w__44 : Minterrupts =>
      write_reg mip_ref (legalize_sip w__43 w__44 value) >>
      read_reg mip_ref >>= fun w__45 : Minterrupts =>
      returnm ((Some (_get_Minterrupts_bits w__45))
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      cur_Architecture tt >>= fun w__46 : Architecture =>
      (read_reg satp_ref  : M (mword 64)) >>= fun w__47 : mword 64 =>
      write_reg satp_ref (legalize_satp w__46 w__47 value) >>
      (read_reg satp_ref  : M (mword 64)) >>= fun w__48 : mword 64 =>
      returnm ((Some w__48)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B0;B1;B1;B1;B1;B0;B1;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg tselect_ref value >>
      (read_reg tselect_ref  : M (mword 64)) >>= fun w__49 : mword 64 =>
      returnm ((Some w__49)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12))) then
      write_reg mcycle_ref value >>
      (read_reg mcycle_ref  : M (mword 64)) >>= fun w__50 : mword 64 =>
      returnm ((Some w__50)
       : option xlenbits)
    else if ((eq_vec b__0 (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  : mword 12))) then
      write_reg minstret_ref value >>
      write_reg minstret_written_ref true >>
      (read_reg minstret_ref  : M (mword 64)) >>= fun w__51 : mword 64 =>
      returnm ((Some w__51)
       : option xlenbits)
    else returnm (None  : option xlenbits)) >>= fun res : option xlenbits =>
   returnm ((match res with
             | Some (v) =>
                print_endline
                  (String.append "CSR "
                     (String.append ((csr_name csr)  : string)
                        (String.append " <- "
                           (String.append (string_of_bits v)
                              (String.append " (input: " (String.append (string_of_bits value) ")"))))))
             | None => print_bits "unhandled write to CSR " csr
             end)
    : unit).

Definition maybe_i_forwards (arg_ : bool) 
: string :=
   match arg_ with | true => "i" | false => "" end.

Definition maybe_i_backwards (arg_ : string) 
: M (bool) :=
   (match arg_ with
    | "i" => returnm (true  : bool)
    | "" => returnm (false  : bool)
    | _ => exit tt  : M (bool)
    end)
    : M (bool).

Definition maybe_i_forwards_matches (arg_ : bool) 
: bool :=
   match arg_ with | true => true | false => true end.

Definition maybe_i_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "i" => true | "" => true | _ => false end.

Definition maybe_i_matches_prefix (arg_ : string) 
: option ((bool * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1668_ := arg_ in
   if ((andb (string_startswith _stringappend_1668_ "i")
          (match (string_drop _stringappend_1668_ (string_length "i")) with | s_ => true end))) then
     match (string_drop _stringappend_1668_ (string_length "i")) with
     | s_ => Some (true, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1668_ "")
               (match (string_drop _stringappend_1668_ (string_length "")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1668_ (string_length "")) with
     | s_ => Some (false, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition csr_mnemonic_forwards (arg_ : csrop) 
: string :=
   match arg_ with | CSRRW => "csrrw" | CSRRS => "csrrs" | CSRRC => "csrrc" end.

Definition csr_mnemonic_backwards (arg_ : string) 
: M (csrop) :=
   (match arg_ with
    | "csrrw" => returnm (CSRRW  : csrop)
    | "csrrs" => returnm (CSRRS  : csrop)
    | "csrrc" => returnm (CSRRC  : csrop)
    | _ => exit tt  : M (csrop)
    end)
    : M (csrop).

Definition csr_mnemonic_forwards_matches (arg_ : csrop) 
: bool :=
   match arg_ with | CSRRW => true | CSRRS => true | CSRRC => true end.

Definition csr_mnemonic_backwards_matches (arg_ : string) 
: bool :=
   match arg_ with | "csrrw" => true | "csrrs" => true | "csrrc" => true | _ => false end.

Definition csr_mnemonic_matches_prefix (arg_ : string) 
: option ((csrop * {n : Z & ArithFact (n >= 0)})) :=
   let _stringappend_1665_ := arg_ in
   if ((andb (string_startswith _stringappend_1665_ "csrrw")
          (match (string_drop _stringappend_1665_ (string_length "csrrw")) with | s_ => true end)))
   then
     match (string_drop _stringappend_1665_ (string_length "csrrw")) with
     | s_ => Some (CSRRW, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1665_ "csrrs")
               (match (string_drop _stringappend_1665_ (string_length "csrrs")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1665_ (string_length "csrrs")) with
     | s_ => Some (CSRRS, sub_nat (string_length arg_) (string_length s_))
     end
   else if ((andb (string_startswith _stringappend_1665_ "csrrc")
               (match (string_drop _stringappend_1665_ (string_length "csrrc")) with
                | s_ => true
                end))) then
     match (string_drop _stringappend_1665_ (string_length "csrrc")) with
     | s_ => Some (CSRRC, sub_nat (string_length arg_) (string_length s_))
     end
   else None.

Definition decodeCompressed (v__2 : mword 16) 
: option ast :=
   if sumbool_of_bool ((andb
                          (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
                          (andb
                             (Z.eqb
                                (projT1 ((regbits_to_regno (subrange_vec_dec v__2 11 7))
                                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                             (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))))
   then
     let nzi1 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzi0 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((andb (eq_vec nzi1 (vec_of_bits [B0]  : mword 1))
                            (Z.eqb
                               (projT1 ((regbits_to_regno nzi0)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       Some (NOP tt)
     else None
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let nz54 : bits 2 := subrange_vec_dec v__2 12 11 in
     let nz96 : bits 4 := subrange_vec_dec v__2 10 7 in
     let nz2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let nz3 : bits 1 := subrange_vec_dec v__2 5 5 in
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let nzimm := (concat_vec nz96 (concat_vec nz54 (concat_vec nz3 nz2)))  : bits 8 in
     if ((eq_vec nzimm (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8))) then None
     else Some (C_ADDI4SPN (rd,nzimm))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let ui2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let ui6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui6 (concat_vec ui53 ui2))  : bits 5 in
     Some (C_LW (uimm,rs1,rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let ui76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let rd : cregbits := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui76 ui53)  : bits 5 in
     Some (C_LD (uimm,rs1,rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs1 : cregbits := subrange_vec_dec v__2 9 7 in
     let ui2 : bits 1 := subrange_vec_dec v__2 6 6 in
     let ui6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui6 (concat_vec ui53 ui2))  : bits 5 in
     Some (C_SW (uimm,rs1,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let rs1 : bits 3 := subrange_vec_dec v__2 9 7 in
     let ui76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let rs2 : bits 3 := subrange_vec_dec v__2 4 2 in
     let uimm := (concat_vec ui76 ui53)  : bits 5 in
     Some (C_SD (uimm,rs1,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let nzi5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let nzi40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let nzi := (concat_vec nzi5 nzi40)  : bits 6 in
     if sumbool_of_bool ((orb (eq_vec nzi (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
                            (Z.eqb
                               (projT1 ((regbits_to_regno rsd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_ADDI (nzi,rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let imm5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let imm40 : bits 5 := subrange_vec_dec v__2 6 2 in
     Some (C_ADDIW (concat_vec imm5 imm40,rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let imm5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let imm40 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((regbits_to_regno rd)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((regbits_to_regno zreg)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LI (concat_vec imm5 imm40,rd))
   else if sumbool_of_bool ((andb
                               (eq_vec (subrange_vec_dec v__2 15 13)
                                  (vec_of_bits [B0;B1;B1]  : mword 3))
                               (andb
                                  (Z.eqb
                                     (projT1 ((regbits_to_regno (subrange_vec_dec v__2 11 7))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                                     (projT1 ((regbits_to_regno
                                                 (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                                  (eq_vec (subrange_vec_dec v__2 1 0)
                                     (vec_of_bits [B0;B1]  : mword 2))))) then
     let nzi9 : bits 1 := subrange_vec_dec v__2 12 12 in
     let nzi4 : bits 1 := subrange_vec_dec v__2 6 6 in
     let nzi6 : bits 1 := subrange_vec_dec v__2 5 5 in
     let nzi87 : bits 2 := subrange_vec_dec v__2 4 3 in
     let nzi5 : bits 1 := subrange_vec_dec v__2 2 2 in
     let nzimm := concat_vec nzi9 (concat_vec nzi87 (concat_vec nzi6 (concat_vec nzi5 nzi4))) in
     if ((eq_vec nzimm (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_ADDI16SP nzimm)
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let imm17 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let imm1612 : bits 5 := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno sp)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_LUI (concat_vec imm17 imm1612,rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if ((eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_SRLI (shamt,rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if ((eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))) then None
     else Some (C_SRAI (shamt,rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B0]  : mword 3))
               (andb (eq_vec (subrange_vec_dec v__2 11 10) (vec_of_bits [B1;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let i5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let i40 : bits 5 := subrange_vec_dec v__2 6 2 in
     Some (C_ANDI (concat_vec i5 i40,rsd))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_SUB (rsd,rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_XOR (rsd,rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B1;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_OR (rsd,rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B0;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B1;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_AND (rsd,rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B1;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B0]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_SUBW (rsd,rs2))
   else if ((andb
               (eq_vec (subrange_vec_dec v__2 15 10) (vec_of_bits [B1;B0;B0;B1;B1;B1]  : mword 6))
               (andb (eq_vec (subrange_vec_dec v__2 6 5) (vec_of_bits [B0;B1]  : mword 2))
                  (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2))))) then
     let rsd : cregbits := subrange_vec_dec v__2 9 7 in
     let rs2 : cregbits := subrange_vec_dec v__2 4 2 in
     Some (C_ADDW (rsd,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B0;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let i11 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i4 : bits 1 := subrange_vec_dec v__2 11 11 in
     let i98 : bits 2 := subrange_vec_dec v__2 10 9 in
     let i10 : bits 1 := subrange_vec_dec v__2 8 8 in
     let i6 : bits 1 := subrange_vec_dec v__2 7 7 in
     let i7 : bits 1 := subrange_vec_dec v__2 6 6 in
     let i31 : bits 3 := subrange_vec_dec v__2 5 3 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     Some (C_J (concat_vec i11
                  (concat_vec i10
                     (concat_vec i98
                        (concat_vec i7 (concat_vec i6 (concat_vec i5 (concat_vec i4 i31))))))))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let i8 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i43 : bits 2 := subrange_vec_dec v__2 11 10 in
     let rs : cregbits := subrange_vec_dec v__2 9 7 in
     let i76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let i21 : bits 2 := subrange_vec_dec v__2 4 3 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     Some (C_BEQZ (concat_vec i8 (concat_vec i76 (concat_vec i5 (concat_vec i43 i21))),rs))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
     let i8 : bits 1 := subrange_vec_dec v__2 12 12 in
     let i43 : bits 2 := subrange_vec_dec v__2 11 10 in
     let rs : cregbits := subrange_vec_dec v__2 9 7 in
     let i76 : bits 2 := subrange_vec_dec v__2 6 5 in
     let i21 : bits 2 := subrange_vec_dec v__2 4 3 in
     let i5 : bits 1 := subrange_vec_dec v__2 2 2 in
     Some (C_BNEZ (concat_vec i8 (concat_vec i76 (concat_vec i5 (concat_vec i43 i21))),rs))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B0;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let nzui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let nzui40 : bits 5 := subrange_vec_dec v__2 6 2 in
     let shamt : bits 6 := concat_vec nzui5 nzui40 in
     if sumbool_of_bool ((orb (eq_vec shamt (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6))
                            (Z.eqb
                               (projT1 ((regbits_to_regno rsd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_SLLI (shamt,rsd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let ui42 : bits 3 := subrange_vec_dec v__2 6 4 in
     let ui76 : bits 2 := subrange_vec_dec v__2 3 2 in
     let uimm : bits 6 := concat_vec ui76 (concat_vec ui5 ui42) in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((regbits_to_regno rd)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((regbits_to_regno zreg)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LWSP (uimm,rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B0;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui5 : bits 1 := subrange_vec_dec v__2 12 12 in
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let ui43 : bits 2 := subrange_vec_dec v__2 6 5 in
     let ui86 : bits 3 := subrange_vec_dec v__2 4 2 in
     let uimm : bits 6 := concat_vec ui86 (concat_vec ui5 ui43) in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((regbits_to_regno rd)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((regbits_to_regno zreg)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_LDSP (uimm,rd))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B0]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui52 : bits 4 := subrange_vec_dec v__2 12 9 in
     let ui76 : bits 2 := subrange_vec_dec v__2 8 7 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     let uimm : bits 6 := concat_vec ui76 ui52 in
     Some (C_SWSP (uimm,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 13) (vec_of_bits [B1;B1;B1]  : mword 3))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let ui53 : bits 3 := subrange_vec_dec v__2 12 10 in
     let ui86 : bits 3 := subrange_vec_dec v__2 9 7 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     let uimm : bits 6 := concat_vec ui86 ui53 in
     Some (C_SDSP (uimm,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  : mword 7))))
   then
     let rs1 : regbits := subrange_vec_dec v__2 11 7 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((regbits_to_regno rs1)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((regbits_to_regno zreg)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_JR rs1)
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B1]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 6 0) (vec_of_bits [B0;B0;B0;B0;B0;B1;B0]  : mword 7))))
   then
     let rs1 : regbits := subrange_vec_dec v__2 11 7 in
     if sumbool_of_bool ((Z.eqb
                            (projT1 ((regbits_to_regno rs1)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                            (projT1 ((regbits_to_regno zreg)
                             : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) then
       None
     else Some (C_JALR rs1)
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B0]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let rd : regbits := subrange_vec_dec v__2 11 7 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_MV (rd,rs2))
   else if ((andb (eq_vec (subrange_vec_dec v__2 15 12) (vec_of_bits [B1;B0;B0;B1]  : mword 4))
               (eq_vec (subrange_vec_dec v__2 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
     let rsd : regbits := subrange_vec_dec v__2 11 7 in
     let rs2 : regbits := subrange_vec_dec v__2 6 2 in
     if sumbool_of_bool ((orb
                            (Z.eqb
                               (projT1 ((regbits_to_regno rsd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
                            (Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                               (projT1 ((regbits_to_regno zreg)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
       None
     else Some (C_ADD (rsd,rs2))
   else if ((eq_vec v__2 (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 16)))
   then
     Some (C_ILLEGAL tt)
   else None.

Fixpoint execute_WFI (g__26 : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (match w__0 with
    | Machine => returnm (true  : bool)
    | Supervisor =>
       read_reg mstatus_ref >>= fun w__1 : Mstatus =>
       (if ((eq_vec (_get_Mstatus_TW w__1) ((bool_to_bits true)  : mword 1))) then
          handle_illegal tt >> returnm (false  : bool)
        else returnm (true  : bool))
        : M (bool)
    | User => handle_illegal tt >> returnm (false  : bool)
    end)
    : M (bool).

Fixpoint execute_UTYPE (imm : mword 20) (rd : mword 5) (op : uop) 
: M (bool) :=
   let off : xlenbits :=
     EXTS 64 (concat_vec imm (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)) in
   match op with
   | RISCV_LUI => returnm (off  : xlenbits)
   | RISCV_AUIPC =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
      returnm ((add_vec w__0 off)
       : xlenbits)
   end >>= fun ret : xlenbits =>
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) ret >>
   returnm (true
    : bool).

Fixpoint execute_THREAD_START (g__29 : unit)  : bool := true.

Fixpoint execute_STORECON (aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   match width with
   | BYTE => returnm (true  : bool)
   | HALF =>
      cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__0 : mword 1 =>
      returnm ((eq_vec (w__0  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool)
   | WORD =>
      returnm ((eq_vec (subrange_vec_dec vaddr 1 0) (vec_of_bits [B0;B0]  : mword 2))  : bool)
   | DOUBLE =>
      returnm ((eq_vec (subrange_vec_dec vaddr 2 0) (vec_of_bits [B0;B0;B0]  : mword 3))  : bool)
   end >>= fun aligned : bool =>
   (if ((negb aligned)) then handle_mem_exception vaddr E_SAMO_Addr_Align >> returnm (false  : bool)
    else
      match_reservation vaddr >>= fun w__1 : bool =>
      (if ((eq_vec ((bool_to_bits w__1)  : mword 1) ((bool_to_bits false)  : mword 1))) then
         wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
           (EXTZ 64 (vec_of_bits [B1]  : mword 1)) >>
         returnm (true
          : bool)
       else
         translateAddr vaddr Write Data >>= fun w__2 : TR_Result =>
         (match w__2 with
          | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
          | TR_Address (addr) =>
             match width with
             | WORD => (mem_write_ea addr 4 aq rl true)  : M (MemoryOpResult unit)
             | DOUBLE => (mem_write_ea addr 8 aq rl true)  : M (MemoryOpResult unit)
             | _ => (internal_error "STORECON expected word or double")  : M (MemoryOpResult unit)
             end >>= fun eares : MemoryOpResult unit =>
             (match eares with
              | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
              | MemValue (_) =>
                 rX
                   (projT1 ((regbits_to_regno rs2)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
                 match width with
                 | WORD =>
                    (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl true)
                     : M (MemoryOpResult bool)
                 | DOUBLE => (mem_write_value addr 8 rs2_val aq rl true)  : M (MemoryOpResult bool)
                 | _ =>
                    (internal_error "STORECON expected word or double")  : M (MemoryOpResult bool)
                 end >>= fun res : MemoryOpResult bool =>
                 (match res with
                  | MemValue (true) =>
                     wX
                       (projT1 ((regbits_to_regno rd)
                        : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                       (EXTZ 64 (vec_of_bits [B0]  : mword 1)) >>
                     let '_ := (cancel_reservation tt)  : unit in
                     returnm (true
                      : bool)
                  | MemValue (false) =>
                     wX
                       (projT1 ((regbits_to_regno rd)
                        : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                       (EXTZ 64 (vec_of_bits [B1]  : mword 1)) >>
                     let '_ := (cancel_reservation tt)  : unit in
                     returnm (true
                      : bool)
                  | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
                  end)
                  : M (bool)
              end)
              : M (bool)
          end)
          : M (bool))
       : M (bool))
    : M (bool).

Fixpoint execute_STORE (imm : mword 12) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (aq : bool) (rl : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let vaddr : xlenbits := add_vec w__0 (EXTS 64 imm) in
   check_misaligned vaddr width >>= fun w__1 : bool =>
   (if (w__1) then handle_mem_exception vaddr E_SAMO_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Write Data >>= fun w__2 : TR_Result =>
      (match w__2 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          match width with
          | BYTE => (mem_write_ea addr 1 aq rl false)  : M (MemoryOpResult unit)
          | HALF => (mem_write_ea addr 2 aq rl false)  : M (MemoryOpResult unit)
          | WORD => (mem_write_ea addr 4 aq rl false)  : M (MemoryOpResult unit)
          | DOUBLE => (mem_write_ea addr 8 aq rl false)  : M (MemoryOpResult unit)
          end >>= fun eares : MemoryOpResult unit =>
          (match eares with
           | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
           | MemValue (_) =>
              rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
              match width with
              | BYTE =>
                 (mem_write_value addr 1 (subrange_vec_dec rs2_val 7 0) aq rl false)
                  : M (MemoryOpResult bool)
              | HALF =>
                 (mem_write_value addr 2 (subrange_vec_dec rs2_val 15 0) aq rl false)
                  : M (MemoryOpResult bool)
              | WORD =>
                 (mem_write_value addr 4 (subrange_vec_dec rs2_val 31 0) aq rl false)
                  : M (MemoryOpResult bool)
              | DOUBLE => (mem_write_value addr 8 rs2_val aq rl false)  : M (MemoryOpResult bool)
              end >>= fun res : MemoryOpResult bool =>
              (match res with
               | MemValue (true) => returnm (true  : bool)
               | MemValue (false) =>
                  (internal_error "store got false from mem_write_value")  : M (bool)
               | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
               end)
               : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Fixpoint execute_STOP_FETCHING (g__28 : unit)  : bool := true.

Fixpoint execute_SRET (g__24 : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   match w__0 with
   | User => (handle_illegal tt)  : M (unit)
   | Supervisor =>
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      (if ((eq_vec (_get_Mstatus_TSR w__1) ((bool_to_bits true)  : mword 1))) then
         (handle_illegal tt)
          : M (unit)
       else
         read_reg cur_privilege_ref >>= fun w__2 : Privilege =>
         (read_reg PC_ref  : M (mword 64)) >>= fun w__3 : mword 64 =>
         handle_exception w__2 (CTL_SRET tt) w__3 >>= fun w__4 : xlenbits =>
         write_reg nextPC_ref w__4
          : M (unit))
       : M (unit)
   | Machine =>
      read_reg cur_privilege_ref >>= fun w__5 : Privilege =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__6 : mword 64 =>
      handle_exception w__5 (CTL_SRET tt) w__6 >>= fun w__7 : xlenbits =>
      write_reg nextPC_ref w__7
       : M (unit)
   end >>
   returnm (false
    : bool).

Fixpoint execute_SHIFTW (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sop) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val shamt
     | RISCV_SRLI => shift_bits_right rs1_val shamt
     | RISCV_SRAI => shift_right_arith32 rs1_val shamt
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 result) >>
   returnm (true
    : bool).

Fixpoint execute_SHIFTIWOP (shamt : mword 5) (rs1 : mword 5) (rd : mword 5) (op : sopw) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let result : xlenbits :=
     match op with
     | RISCV_SLLIW => EXTS 64 (shift_bits_left (subrange_vec_dec rs1_val 31 0) shamt)
     | RISCV_SRLIW => EXTS 64 (shift_bits_right (subrange_vec_dec rs1_val 31 0) shamt)
     | RISCV_SRAIW => EXTS 64 (shift_right_arith32 (subrange_vec_dec rs1_val 31 0) shamt)
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_SHIFTIOP (shamt : mword 6) (rs1 : mword 5) (rd : mword 5) (op : sop) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let result : xlenbits :=
     match op with
     | RISCV_SLLI => shift_bits_left rs1_val shamt
     | RISCV_SRLI => shift_bits_right rs1_val shamt
     | RISCV_SRAI => shift_right_arith64 rs1_val shamt
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_SFENCE_VMA (rs1 : mword 5) (rs2 : mword 5) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (if ((eq_vec ((privLevel_to_bits w__0)  : mword 2) ((privLevel_to_bits User)  : mword 2))) then
      handle_illegal tt >> returnm (false  : bool)
    else
      read_reg mstatus_ref >>= fun w__1 : Mstatus =>
      read_reg mstatus_ref >>= fun w__2 : Mstatus =>
      let p__20 := (architecture (_get_Mstatus_SXL w__1), _get_Mstatus_TVM w__2) in
      (match p__20 with
       | (Some (RV64), v_0) =>
          (if ((eq_vec v_0 ((bool_to_bits true)  : mword 1))) then
             handle_illegal tt >> returnm (false  : bool)
           else if ((eq_vec v_0 ((bool_to_bits false)  : mword 1))) then
             (if sumbool_of_bool ((Z.eqb
                                     (projT1 ((regbits_to_regno rs1)
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
                returnm (None
                 : option vaddr39)
              else
                rX
                  (projT1 ((regbits_to_regno rs1)
                   : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__3 : mword 64 =>
                returnm ((Some (subrange_vec_dec w__3 38 0))
                 : option vaddr39)) >>= fun addr : option vaddr39 =>
             (if sumbool_of_bool ((Z.eqb
                                     (projT1 ((regbits_to_regno rs2)
                                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
                returnm (None
                 : option asid64)
              else
                rX
                  (projT1 ((regbits_to_regno rs2)
                   : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__4 : mword 64 =>
                returnm ((Some (subrange_vec_dec w__4 15 0))
                 : option asid64)) >>= fun asid : option asid64 =>
             flushTLB asid addr >> returnm (true  : bool)
           else
             (match (Some RV64, v_0) with
              | (g__18, g__19) => (internal_error "unimplemented sfence architecture")  : M (bool)
              end)
              : M (bool))
           : M (bool)
       | (g__18, g__19) => (internal_error "unimplemented sfence architecture")  : M (bool)
       end)
       : M (bool))
    : M (bool).

Fixpoint execute_RTYPEW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : ropw) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let result : bits 32 :=
     match op with
     | RISCV_ADDW => add_vec rs1_val rs2_val
     | RISCV_SUBW => sub_vec rs1_val rs2_val
     | RISCV_SLLW => shift_bits_left rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRLW => shift_bits_right rs1_val (subrange_vec_dec rs2_val 4 0)
     | RISCV_SRAW => shift_right_arith32 rs1_val (subrange_vec_dec rs2_val 4 0)
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 result) >>
   returnm (true
    : bool).

Fixpoint execute_RTYPE (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (op : rop) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let result : xlenbits :=
     match op with
     | RISCV_ADD => add_vec rs1_val rs2_val
     | RISCV_SUB => sub_vec rs1_val rs2_val
     | RISCV_SLL => shift_bits_left rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_SLT => EXTZ 64 ((bool_to_bits (zopz0zI_s rs1_val rs2_val))  : mword 1)
     | RISCV_SLTU => EXTZ 64 ((bool_to_bits (zopz0zI_u rs1_val rs2_val))  : mword 1)
     | RISCV_XOR => xor_vec rs1_val rs2_val
     | RISCV_SRL => shift_bits_right rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_SRA => shift_right_arith64 rs1_val (subrange_vec_dec rs2_val 5 0)
     | RISCV_OR => or_vec rs1_val rs2_val
     | RISCV_AND => and_vec rs1_val rs2_val
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_RISCV_JALR (imm : mword 12) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   (read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) w__0 >>
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let newPC : xlenbits := add_vec w__1 (EXTS 64 imm) in
   write_reg nextPC_ref (concat_vec (subrange_vec_dec newPC 63 1) (vec_of_bits [B0]  : mword 1)) >>
   returnm (true
    : bool).

Fixpoint execute_RISCV_JAL (imm : mword 21) (rd : mword 5) 
: M (bool) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun pc : xlenbits =>
   (read_reg nextPC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) w__0 >>
   let offset : xlenbits := EXTS 64 imm in
   write_reg nextPC_ref (add_vec pc offset) >> returnm (true  : bool).

Fixpoint execute_REMW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let r : Z :=
     if sumbool_of_bool ((Z.eqb rs2_int 0)) then rs1_int
     else rem_round_zero rs1_int rs2_int in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 (to_bits 32 r)) >>
   returnm (true
    : bool).

Fixpoint execute_REM (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let r : Z :=
     if sumbool_of_bool ((Z.eqb rs2_int 0)) then rs1_int
     else rem_round_zero rs1_int rs2_int in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (to_bits xlen r) >>
   returnm (true
    : bool).

Fixpoint execute_NOP (g__27 : unit)  : bool := true.

Fixpoint execute_MULW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := projT1 (sint rs1_val) in
   let rs2_int : Z := projT1 (sint rs2_val) in
   let result32 := subrange_vec_dec (to_bits 64 (Z.mul rs1_int rs2_int)) 31 0 in
   let result : xlenbits := EXTS 64 result32 in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_MUL (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (high : bool) (signed1 : bool) (signed2 : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (signed1) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (signed2) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let result128 := to_bits 128 (Z.mul rs1_int rs2_int) in
   let result :=
     if (high) then subrange_vec_dec result128 127 64
     else subrange_vec_dec result128 63 0 in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_MRET (g__23 : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   (if ((eq_vec ((privLevel_to_bits w__0)  : mword 2) ((privLevel_to_bits Machine)  : mword 2)))
    then
      read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
      (read_reg PC_ref  : M (mword 64)) >>= fun w__2 : mword 64 =>
      handle_exception w__1 (CTL_MRET tt) w__2 >>= fun w__3 : xlenbits =>
      write_reg nextPC_ref w__3
       : M (unit)
    else (handle_illegal tt)  : M (unit)) >>
   returnm (false
    : bool).

Fixpoint execute_LOADRES (aq : bool) (rl : bool) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   match width with
   | BYTE => returnm (true  : bool)
   | HALF =>
      cast_unit_vec (access_vec_dec vaddr 0) >>= fun w__0 : mword 1 =>
      returnm ((eq_vec (w__0  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool)
   | WORD =>
      returnm ((eq_vec (subrange_vec_dec vaddr 1 0) (vec_of_bits [B0;B0]  : mword 2))  : bool)
   | DOUBLE =>
      returnm ((eq_vec (subrange_vec_dec vaddr 2 0) (vec_of_bits [B0;B0;B0]  : mword 3))  : bool)
   end >>= fun aligned : bool =>
   (if ((negb aligned)) then handle_mem_exception vaddr E_Load_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Read Data >>= fun w__1 : TR_Result =>
      (match w__1 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          (match width with
           | WORD =>
              mem_read addr 4 aq rl true >>= fun w__2 : MemoryOpResult (mword 32) =>
              (process_loadres (n := 4) rd vaddr w__2 false)
               : M (bool)
           | DOUBLE =>
              mem_read addr 8 aq rl true >>= fun w__4 : MemoryOpResult (mword 64) =>
              (process_loadres (n := 8) rd vaddr w__4 false)
               : M (bool)
           | _ => (internal_error "LOADRES expected WORD or DOUBLE")  : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Fixpoint execute_LOAD (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (is_unsigned : bool) (width : word_width) (aq : bool) (rl : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let vaddr : xlenbits := add_vec w__0 (EXTS 64 imm) in
   check_misaligned vaddr width >>= fun w__1 : bool =>
   (if (w__1) then handle_mem_exception vaddr E_Load_Addr_Align >> returnm (false  : bool)
    else
      translateAddr vaddr Read Data >>= fun w__2 : TR_Result =>
      (match w__2 with
       | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
       | TR_Address (addr) =>
          (match width with
           | BYTE =>
              mem_read addr 1 aq rl false >>= fun w__3 : MemoryOpResult (mword 8) =>
              (process_load (n := 1) rd vaddr w__3 is_unsigned)
               : M (bool)
           | HALF =>
              mem_read addr 2 aq rl false >>= fun w__5 : MemoryOpResult (mword 16) =>
              (process_load (n := 2) rd vaddr w__5 is_unsigned)
               : M (bool)
           | WORD =>
              mem_read addr 4 aq rl false >>= fun w__7 : MemoryOpResult (mword 32) =>
              (process_load (n := 4) rd vaddr w__7 is_unsigned)
               : M (bool)
           | DOUBLE =>
              mem_read addr 8 aq rl false >>= fun w__9 : MemoryOpResult (mword 64) =>
              (process_load (n := 8) rd vaddr w__9 is_unsigned)
               : M (bool)
           end)
           : M (bool)
       end)
       : M (bool))
    : M (bool).

Fixpoint execute_ITYPE (imm : mword 12) (rs1 : mword 5) (rd : mword 5) (op : iop) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   let immext : xlenbits := EXTS 64 imm in
   let result : xlenbits :=
     match op with
     | RISCV_ADDI => add_vec rs1_val immext
     | RISCV_SLTI => EXTZ 64 ((bool_to_bits (zopz0zI_s rs1_val immext))  : mword 1)
     | RISCV_SLTIU => EXTZ 64 ((bool_to_bits (zopz0zI_u rs1_val immext))  : mword 1)
     | RISCV_XORI => xor_vec rs1_val immext
     | RISCV_ORI => or_vec rs1_val immext
     | RISCV_ANDI => and_vec rs1_val immext
     end in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) result >>
   returnm (true
    : bool).

Fixpoint execute_ILLEGAL (s : mword 32)  : M (bool) := handle_illegal tt >> returnm (false  : bool).

Fixpoint execute_FENCEI (g__21 : unit)  : bool := true.

Fixpoint execute_FENCE (pred : mword 4) (succ : mword 4) 
: M (bool) :=
   match (pred, succ) with
   | (v__132, v__133) =>
      (if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
              (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_rw_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_r_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_r_r tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_rw_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_w_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
         (MEM_fence_w_rw tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_rw_r tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B1;B0]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
         (MEM_fence_r_w tt)
          : M (unit)
       else if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B1]  : mword 2))
                   (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
         (MEM_fence_w_r tt)
          : M (unit)
       else
         returnm ((if ((andb (eq_vec (subrange_vec_dec v__132 1 0) (vec_of_bits [B0;B0]  : mword 2))
                          (eq_vec (subrange_vec_dec v__133 1 0) (vec_of_bits [B0;B0]  : mword 2))))
                   then
                     tt
                   else
                     let '_ := (print_endline "FIXME: unsupported fence")  : unit in
                     tt)
          : unit))
       : M (unit)
   end >>
   returnm (true
    : bool).

Fixpoint execute_ECALL (g__22 : unit) 
: M (bool) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   let t : sync_exception :=
     {| sync_exception_trap :=
          (match w__0 with
           | User => E_U_EnvCall
           | Supervisor => E_S_EnvCall
           | Machine => E_M_EnvCall
           end); 
        sync_exception_excinfo := (None  : option xlenbits) |} in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   (read_reg PC_ref  : M (mword 64)) >>= fun w__2 : mword 64 =>
   handle_exception w__1 (CTL_TRAP t) w__2 >>= fun w__3 : xlenbits =>
   write_reg nextPC_ref w__3 >> returnm (false  : bool).

Fixpoint execute_EBREAK (g__25 : unit) 
: M (bool) :=
   (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
   handle_mem_exception w__0 E_Breakpoint >> returnm (false  : bool).

Fixpoint execute_DIVW (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let rs1_val := subrange_vec_dec w__0 31 0 in
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__1 : mword 64 =>
   let rs2_val := subrange_vec_dec w__1 31 0 in
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let q : Z := if sumbool_of_bool ((Z.eqb rs2_int 0)) then -1 else quot_round_zero rs1_int rs2_int in
   let q' : Z :=
     if sumbool_of_bool ((andb s
                            (Z.gtb q (projT1 (sub_range (build_ex (projT1 (pow2 31))) (build_ex 1))))))
     then
        (Z.sub ( 0) ((pow 2 31)))
     else q in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 (to_bits 32 q')) >>
   returnm (true
    : bool).

Fixpoint execute_DIV (rs2 : mword 5) (rs1 : mword 5) (rd : mword 5) (s : bool) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let rs1_int : Z := if (s) then projT1 (sint rs1_val) else projT1 (uint rs1_val) in
   let rs2_int : Z := if (s) then projT1 (sint rs2_val) else projT1 (uint rs2_val) in
   let q : Z := if sumbool_of_bool ((Z.eqb rs2_int 0)) then -1 else quot_round_zero rs1_int rs2_int in
   let q' : Z := if sumbool_of_bool ((andb s (Z.gtb q xlen_max_signed))) then xlen_min_signed else q in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (to_bits xlen q') >>
   returnm (true
    : bool).

Fixpoint execute_C_ILLEGAL (g__30 : unit) 
: M (bool) :=
   handle_illegal tt >> returnm (false  : bool).

Fixpoint execute_C_ADDIW (imm : mword 6) (rsd : mword 5) 
: M (bool) :=
   let imm : bits 32 := EXTS 32 imm in
   rX (projT1 ((regbits_to_regno rsd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs_val =>
   let res : bits 32 := add_vec (subrange_vec_dec rs_val 31 0) imm in
   wX (projT1 ((regbits_to_regno rsd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 res) >>
   returnm (true
    : bool).

Fixpoint execute_CSR (csr : mword 12) (rs1 : mword 5) (rd : mword 5) (is_imm : bool) (op : csrop) 
: M (bool) :=
   (if (is_imm) then returnm ((EXTZ 64 rs1)  : xlenbits)
    else
      (rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))
       : M (xlenbits)) >>= fun rs1_val : xlenbits =>
   let isWrite : bool :=
     match op with
     | CSRRW => true
     | _ => if (is_imm) then neq_int (projT1 (uint rs1_val)) 0 else neq_int (projT1 (uint rs1)) 0
     end in
   read_reg cur_privilege_ref >>= fun w__1 : Privilege =>
   check_CSR csr w__1 isWrite >>= fun w__2 : bool =>
   (if ((negb w__2)) then handle_illegal tt >> returnm (false  : bool)
    else
      readCSR csr >>= fun csr_val =>
      (if (isWrite) then
         let new_val : xlenbits :=
           match op with
           | CSRRW => rs1_val
           | CSRRS => or_vec csr_val rs1_val
           | CSRRC => and_vec csr_val (not_vec rs1_val)
           end in
         (writeCSR csr new_val)
          : M (unit)
       else returnm (tt  : unit)) >>
      wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) csr_val >>
      returnm (true
       : bool))
    : M (bool).

Fixpoint execute_BTYPE (imm : mword 13) (rs2 : mword 5) (rs1 : mword 5) (op : bop) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs1_val =>
   rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val =>
   let taken : bool :=
     match op with
     | RISCV_BEQ => eq_vec rs1_val rs2_val
     | RISCV_BNE => neq_vec rs1_val rs2_val
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     end in
   (if (taken) then
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
      write_reg nextPC_ref (add_vec w__0 (EXTS 64 imm))
       : M (unit)
    else returnm (tt  : unit)) >>
   returnm (true
    : bool).

Fixpoint execute_AMO (op : amoop) (aq : bool) (rl : bool) (rs2 : mword 5) (rs1 : mword 5) (width : word_width) (rd : mword 5) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun vaddr : xlenbits =>
   translateAddr vaddr ReadWrite Data >>= fun w__0 : TR_Result =>
   (match w__0 with
    | TR_Failure (e) => handle_mem_exception vaddr e >> returnm (false  : bool)
    | TR_Address (addr) =>
       match width with
       | WORD => (mem_write_ea addr 4 (andb aq rl) rl true)  : M (MemoryOpResult unit)
       | DOUBLE => (mem_write_ea addr 8 (andb aq rl) rl true)  : M (MemoryOpResult unit)
       | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult unit)
       end >>= fun eares : MemoryOpResult unit =>
       (match eares with
        | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
        | MemValue (_) =>
           match width with
           | WORD =>
              mem_read addr 4 aq (andb aq rl) true >>= fun w__4 : MemoryOpResult (mword 32) =>
              returnm ((extend_value (n := 4) false w__4)
               : MemoryOpResult xlenbits)
           | DOUBLE =>
              mem_read addr 8 aq (andb aq rl) true >>= fun w__5 : MemoryOpResult (mword 64) =>
              returnm ((extend_value (n := 8) false w__5)
               : MemoryOpResult xlenbits)
           | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult xlenbits)
           end >>= fun rval : MemoryOpResult xlenbits =>
           (match rval with
            | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
            | MemValue (loaded) =>
               rX (projT1 ((regbits_to_regno rs2)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun rs2_val : xlenbits =>
               let result : xlenbits :=
                 match op with
                 | AMOSWAP => rs2_val
                 | AMOADD => add_vec rs2_val loaded
                 | AMOXOR => xor_vec rs2_val loaded
                 | AMOAND => and_vec rs2_val loaded
                 | AMOOR => or_vec rs2_val loaded
                 | AMOMIN => vector64 (Z.min (projT1 (sint rs2_val)) (projT1 (sint loaded)))
                 | AMOMAX => vector64 (Z.max (projT1 (sint rs2_val)) (projT1 (sint loaded)))
                 | AMOMINU =>
                    vector64
                      (projT1 (min_nat (build_ex (projT1 (uint rs2_val)))
                                 (build_ex (projT1 (uint loaded)))))
                 | AMOMAXU =>
                    vector64
                      (projT1 (max_nat (build_ex (projT1 (uint rs2_val)))
                                 (build_ex (projT1 (uint loaded)))))
                 end in
               match width with
               | WORD =>
                  (mem_write_value addr 4 (subrange_vec_dec result 31 0) (andb aq rl) rl true)
                   : M (MemoryOpResult bool)
               | DOUBLE =>
                  (mem_write_value addr 8 result (andb aq rl) rl true)  : M (MemoryOpResult bool)
               | _ => (internal_error "AMO expected WORD or DOUBLE")  : M (MemoryOpResult bool)
               end >>= fun wval : MemoryOpResult bool =>
               (match wval with
                | MemValue (true) =>
                   wX
                     (projT1 ((regbits_to_regno rd)
                      : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) loaded >>
                   returnm (true
                    : bool)
                | MemValue (false) =>
                   (internal_error "AMO got false from mem_write_value")  : M (bool)
                | MemException (e) => handle_mem_exception addr e >> returnm (false  : bool)
                end)
                : M (bool)
            end)
            : M (bool)
        end)
        : M (bool)
    end)
    : M (bool).

Fixpoint execute_ADDIW (imm : mword 12) (rs1 : mword 5) (rd : mword 5) 
: M (bool) :=
   rX (projT1 ((regbits_to_regno rs1)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) >>= fun w__0 : mword 64 =>
   let result : xlenbits := add_vec (EXTS 64 imm) w__0 in
   wX (projT1 ((regbits_to_regno rd)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
     (EXTS 64 (subrange_vec_dec result 31 0)) >>
   returnm (true
    : bool).

Definition expand_ast (i : ast) : ast :=
match i with
   | C_ADDI4SPN (rdc,nzimm) =>
      let imm : bits 12 :=
        concat_vec (vec_of_bits [B0;B0]  : mword 2)
          (concat_vec nzimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rd := creg2reg_bits rdc in
      ( (ITYPE (imm,sp,rd,RISCV_ADDI)))
       
   | C_LW (uimm,rsc,rdc) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rd := creg2reg_bits rdc in
      let rs := creg2reg_bits rsc in
      ( (LOAD (imm,rs,rd,false,WORD,false,false)))
       
   | C_LD (uimm,rsc,rdc) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      let rd := creg2reg_bits rdc in
      let rs := creg2reg_bits rsc in
      ( (LOAD (imm,rs,rd,false,DOUBLE,false,false)))
       
   | C_SW (uimm,rsc1,rsc2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      let rs1 := creg2reg_bits rsc1 in
      let rs2 := creg2reg_bits rsc2 in
      ( (STORE (imm,rs2,rs1,WORD,false,false)))
       
   | C_SD (uimm,rsc1,rsc2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      let rs1 := creg2reg_bits rsc1 in
      let rs2 := creg2reg_bits rsc2 in
      ( (STORE (imm,rs2,rs1,DOUBLE,false,false)))
       
   | C_ADDI (nzi,rsd) =>
      let imm : bits 12 := EXTS 12 nzi in
      ( (ITYPE (imm,rsd,rsd,RISCV_ADDI)))
       
   | C_JAL (imm) =>
      ( (RISCV_JAL (EXTS 21 (concat_vec imm (vec_of_bits [B0]  : mword 1)),ra)))  
   | C_LI (imm,rd) =>
      let imm : bits 12 := EXTS 12 imm in
      ( (ITYPE (imm,zreg,rd,RISCV_ADDI)))
       
   | C_ADDI16SP (imm) =>
      let imm : bits 12 := EXTS 12 (concat_vec imm (vec_of_bits [B0;B0;B0;B0]  : mword 4)) in
      ( (ITYPE (imm,sp,sp,RISCV_ADDI)))
       
   | C_LUI (imm,rd) =>
      let res : bits 20 := EXTS 20 imm in
      ( (UTYPE (res,rd,RISCV_LUI)))
       
   | C_SRLI (shamt,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (SHIFTIOP (shamt,rsd,rsd,RISCV_SRLI)))
       
   | C_SRAI (shamt,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (SHIFTIOP (shamt,rsd,rsd,RISCV_SRAI)))
       
   | C_ANDI (imm,rsd) =>
      let rsd := creg2reg_bits rsd in
      ( (ITYPE (EXTS 12 imm,rsd,rsd,RISCV_ANDI)))
       
   | C_SUB (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2,rsd,rsd,RISCV_SUB)))
       
   | C_XOR (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2,rsd,rsd,RISCV_XOR)))
       
   | C_OR (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2,rsd,rsd,RISCV_OR)))
       
   | C_AND (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPE (rs2,rsd,rsd,RISCV_AND)))
       
   | C_SUBW (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPEW (rs2,rsd,rsd,RISCV_SUBW)))
       
   | C_ADDW (rsd,rs2) =>
      let rsd := creg2reg_bits rsd in
      let rs2 := creg2reg_bits rs2 in
      ( (RTYPEW (rs2,rsd,rsd,RISCV_ADDW)))
       
   | C_J (imm) =>
      ( (RISCV_JAL (EXTS 21 (concat_vec imm (vec_of_bits [B0]  : mword 1)),zreg)))
       
   | C_BEQZ (imm,rs) =>
      (
         (BTYPE (EXTS 13 (concat_vec imm (vec_of_bits [B0]  : mword 1)),zreg,creg2reg_bits rs,RISCV_BEQ)))
       
   | C_BNEZ (imm,rs) =>
      (
         (BTYPE (EXTS 13 (concat_vec imm (vec_of_bits [B0]  : mword 1)),zreg,creg2reg_bits rs,RISCV_BNE)))
       
   | C_SLLI (shamt,rsd) => ( (SHIFTIOP (shamt,rsd,rsd,RISCV_SLLI)))  
   | C_LWSP (uimm,rd) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      ( (LOAD (imm,sp,rd,false,WORD,false,false)))
       
   | C_LDSP (uimm,rd) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      ( (LOAD (imm,sp,rd,false,DOUBLE,false,false)))
       
   | C_SWSP (uimm,rs2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0]  : mword 2)) in
      ( (STORE (imm,rs2,sp,WORD,false,false)))
       
   | C_SDSP (uimm,rs2) =>
      let imm : bits 12 := EXTZ 12 (concat_vec uimm (vec_of_bits [B0;B0;B0]  : mword 3)) in
      ( (STORE (imm,rs2,sp,DOUBLE,false,false)))
       
   | C_JR (rs1) =>
      ( (RISCV_JALR (EXTZ 12 (vec_of_bits [B0]  : mword 1),rs1,zreg)))  
   | C_JALR (rs1) =>
      ( (RISCV_JALR (EXTZ 12 (vec_of_bits [B0]  : mword 1),rs1,ra)))  
   | C_MV (rd,rs2) => ( (RTYPE (rs2,zreg,rd,RISCV_ADD)))  
   | C_ADD (rsd,rs2) => ( (RTYPE (rs2,rsd,rsd,RISCV_ADD)))  
| _ => i
end.

Fixpoint execute (merge_var : ast) 
: M (bool) :=
let merge_var := expand_ast merge_var in
   match merge_var with
   | UTYPE (imm,rd,op) => (execute_UTYPE imm rd op)  : M (bool)
   | RISCV_JAL (imm,rd) => (execute_RISCV_JAL imm rd)  : M (bool)
   | RISCV_JALR (imm,rs1,rd) => (execute_RISCV_JALR imm rs1 rd)  : M (bool)
   | BTYPE (imm,rs2,rs1,op) => (execute_BTYPE imm rs2 rs1 op)  : M (bool)
   | ITYPE (imm,rs1,rd,op) => (execute_ITYPE imm rs1 rd op)  : M (bool)
   | SHIFTIOP (shamt,rs1,rd,op) => (execute_SHIFTIOP shamt rs1 rd op)  : M (bool)
   | RTYPE (rs2,rs1,rd,op) => (execute_RTYPE rs2 rs1 rd op)  : M (bool)
   | LOAD (imm,rs1,rd,is_unsigned,width,aq,rl) =>
      (execute_LOAD imm rs1 rd is_unsigned width aq rl)  : M (bool)
   | STORE (imm,rs2,rs1,width,aq,rl) => (execute_STORE imm rs2 rs1 width aq rl)  : M (bool)
   | ADDIW (imm,rs1,rd) => (execute_ADDIW imm rs1 rd)  : M (bool)
   | SHIFTW (shamt,rs1,rd,op) => (execute_SHIFTW shamt rs1 rd op)  : M (bool)
   | RTYPEW (rs2,rs1,rd,op) => (execute_RTYPEW rs2 rs1 rd op)  : M (bool)
   | SHIFTIWOP (shamt,rs1,rd,op) => (execute_SHIFTIWOP shamt rs1 rd op)  : M (bool)
   | MUL (rs2,rs1,rd,high,signed1,signed2) =>
      (execute_MUL rs2 rs1 rd high signed1 signed2)  : M (bool)
   | DIV (rs2,rs1,rd,s) => (execute_DIV rs2 rs1 rd s)  : M (bool)
   | REM (rs2,rs1,rd,s) => (execute_REM rs2 rs1 rd s)  : M (bool)
   | MULW (rs2,rs1,rd) => (execute_MULW rs2 rs1 rd)  : M (bool)
   | DIVW (rs2,rs1,rd,s) => (execute_DIVW rs2 rs1 rd s)  : M (bool)
   | REMW (rs2,rs1,rd,s) => (execute_REMW rs2 rs1 rd s)  : M (bool)
   | FENCE (pred,succ) => (execute_FENCE pred succ)  : M (bool)
   | FENCEI (g__21) => returnm ((execute_FENCEI g__21)  : bool)
   | ECALL (g__22) => (execute_ECALL g__22)  : M (bool)
   | MRET (g__23) => (execute_MRET g__23)  : M (bool)
   | SRET (g__24) => (execute_SRET g__24)  : M (bool)
   | EBREAK (g__25) => (execute_EBREAK g__25)  : M (bool)
   | WFI (g__26) => (execute_WFI g__26)  : M (bool)
   | SFENCE_VMA (rs1,rs2) => (execute_SFENCE_VMA rs1 rs2)  : M (bool)
   | LOADRES (aq,rl,rs1,width,rd) => (execute_LOADRES aq rl rs1 width rd)  : M (bool)
   | STORECON (aq,rl,rs2,rs1,width,rd) => (execute_STORECON aq rl rs2 rs1 width rd)  : M (bool)
   | AMO (op,aq,rl,rs2,rs1,width,rd) => (execute_AMO op aq rl rs2 rs1 width rd)  : M (bool)
   | CSR (csr,rs1,rd,is_imm,op) => (execute_CSR csr rs1 rd is_imm op)  : M (bool)
   | NOP (g__27) => returnm ((execute_NOP g__27)  : bool)
   | C_ADDIW (imm,rsd) => (execute_C_ADDIW imm rsd)  : M (bool)
   | STOP_FETCHING (g__28) => returnm ((execute_STOP_FETCHING g__28)  : bool)
   | THREAD_START (g__29) => returnm ((execute_THREAD_START g__29)  : bool)
   | ILLEGAL (s) => (execute_ILLEGAL s)  : M (bool)
   | C_ILLEGAL (g__30) => (execute_C_ILLEGAL g__30)  : M (bool)
| _ => Fail "Unexpanded instruction"
   end.

Definition assembly_forwards (arg_ : ast) 
: M (string) :=
   (match arg_ with
    | UTYPE (imm,rd,op) =>
       returnm ((string_append (utype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt) (string_append (string_of_bits imm) "")))))
        : string)
    | RISCV_JAL (imm,rd) =>
       returnm ((string_append "jal"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt) (string_append (string_of_bits imm) "")))))
        : string)
    | RISCV_JALR (imm,rs1,rd) =>
       returnm ((string_append "jalr"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | BTYPE (imm,rs2,rs1,op) =>
       returnm ((string_append (btype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rs1)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs2)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | ITYPE (imm,rs1,rd,op) =>
       returnm ((string_append (itype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | SHIFTIOP (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftiop_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (string_of_bits shamt) ""))))))
        : string)
    | RTYPE (rs2,rs1,rd,op) =>
       returnm ((string_append (rtype_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | LOAD (imm,rs1,rd,is_unsigned,size,aq,rl) =>
       returnm ((string_append "l"
                   (string_append (size_mnemonic_forwards size)
                      (string_append (maybe_u_forwards is_unsigned)
                         (string_append (maybe_aq_forwards aq)
                            (string_append (maybe_rl_forwards rl)
                               (string_append (spc_forwards tt)
                                  (string_append (reg_name_forwards rd)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs1)
                                           (string_append (sep_forwards tt)
                                              (string_append (string_of_bits imm) "")))))))))))
        : string)
    | STORE (imm,rs1,rd,size,aq,rl) =>
       returnm ((string_append "s"
                   (string_append (size_mnemonic_forwards size)
                      (string_append (maybe_aq_forwards aq)
                         (string_append (maybe_rl_forwards rl)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1)
                                        (string_append (sep_forwards tt)
                                           (string_append (string_of_bits imm) ""))))))))))
        : string)
    | ADDIW (imm,rs1,rd) =>
       returnm ((string_append "addiw"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits imm) "")))))))
        : string)
    | SHIFTW (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftw_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (string_of_bits shamt) "")))))))
        : string)
    | RTYPEW (rs2,rs1,rd,op) =>
       returnm ((string_append (rtypew_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | SHIFTIWOP (shamt,rs1,rd,op) =>
       returnm ((string_append (shiftiwop_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (string_of_bits shamt) ""))))))
        : string)
    | MUL (rs2,rs1,rd,high,signed1,signed2) =>
       mul_mnemonic_forwards high signed1 signed2 >>= fun w__0 : string =>
       returnm ((string_append w__0
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | DIV (rs2,rs1,rd,s) =>
       returnm ((string_append "div"
                   (string_append (maybe_not_u_forwards s)
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (reg_name_forwards rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs2) ""))))))))
        : string)
    | REM (rs2,rs1,rd,s) =>
       returnm ((string_append "rem"
                   (string_append (maybe_not_u_forwards s)
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (reg_name_forwards rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs2) ""))))))))
        : string)
    | MULW (rs2,rs1,rd) =>
       returnm ((string_append "mulw"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs2) "")))))))
        : string)
    | DIVW (rs2,rs1,rd,s) =>
       returnm ((string_append "div"
                   (string_append (maybe_not_u_forwards s)
                      (string_append "w"
                         (string_append (spc_forwards tt)
                            (string_append (reg_name_forwards rd)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs1)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs2) "")))))))))
        : string)
    | REMW (rs2,rs1,rd,s) =>
       returnm ((string_append "rem"
                   (string_append (maybe_not_u_forwards s)
                      (string_append "w"
                         (string_append (spc_forwards tt)
                            (string_append (reg_name_forwards rd)
                               (string_append (sep_forwards tt)
                                  (string_append (reg_name_forwards rs1)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs2) "")))))))))
        : string)
    | FENCE (pred,succ) =>
       returnm ((string_append "fence"
                   (string_append (spc_forwards tt)
                      (string_append (fence_bits_forwards pred)
                         (string_append (sep_forwards tt)
                            (string_append (fence_bits_forwards succ) "")))))
        : string)
    | FENCEI (tt) => returnm ("fence.i"  : string)
    | ECALL (tt) => returnm ("ecall"  : string)
    | MRET (tt) => returnm ("mret"  : string)
    | SRET (tt) => returnm ("sret"  : string)
    | EBREAK (tt) => returnm ("ebreak"  : string)
    | WFI (tt) => returnm ("wfi"  : string)
    | SFENCE_VMA (rs1,rs2) =>
       returnm ((string_append "sfence.vma"
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rs1)
                         (string_append (sep_forwards tt) (string_append (reg_name_forwards rs2) "")))))
        : string)
    | LOADRES (aq,rl,rs1,size,rd) =>
       returnm ((string_append "lr."
                   (string_append (maybe_aq_forwards aq)
                      (string_append (maybe_rl_forwards rl)
                         (string_append (size_mnemonic_forwards size)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1) ""))))))))
        : string)
    | STORECON (aq,rl,rs2,rs1,size,rd) =>
       returnm ((string_append "sc."
                   (string_append (maybe_aq_forwards aq)
                      (string_append (maybe_rl_forwards rl)
                         (string_append (size_mnemonic_forwards size)
                            (string_append (spc_forwards tt)
                               (string_append (reg_name_forwards rd)
                                  (string_append (sep_forwards tt)
                                     (string_append (reg_name_forwards rs1)
                                        (string_append (sep_forwards tt)
                                           (string_append (reg_name_forwards rs2) ""))))))))))
        : string)
    | AMO (op,aq,rl,rs2,rs1,width,rd) =>
       returnm ((string_append (amo_mnemonic_forwards op)
                   (string_append "."
                      (string_append (size_mnemonic_forwards width)
                         (string_append (maybe_aq_forwards aq)
                            (string_append (maybe_rl_forwards rl)
                               (string_append (spc_forwards tt)
                                  (string_append (reg_name_forwards rd)
                                     (string_append (sep_forwards tt)
                                        (string_append (reg_name_forwards rs1)
                                           (string_append (sep_forwards tt)
                                              (string_append (reg_name_forwards rs2) "")))))))))))
        : string)
    | CSR (csr,rs1,rd,true,op) =>
       returnm ((string_append (csr_mnemonic_forwards op)
                   (string_append "i"
                      (string_append (spc_forwards tt)
                         (string_append (reg_name_forwards rd)
                            (string_append (sep_forwards tt)
                               (string_append (string_of_bits rs1)
                                  (string_append (sep_forwards tt)
                                     (string_append (csr_name_map_forwards csr) ""))))))))
        : string)
    | CSR (csr,rs1,rd,false,op) =>
       returnm ((string_append (csr_mnemonic_forwards op)
                   (string_append (spc_forwards tt)
                      (string_append (reg_name_forwards rd)
                         (string_append (sep_forwards tt)
                            (string_append (reg_name_forwards rs1)
                               (string_append (sep_forwards tt)
                                  (string_append (csr_name_map_forwards csr) "")))))))
        : string)
    | ILLEGAL (s) =>
       returnm ((string_append "illegal"
                   (string_append (spc_forwards tt) (string_append (string_of_bits s) "")))
        : string)
    | _ => exit tt  : M (string)
    end)
    : M (string).
(*
Definition assembly_backwards (arg_ : string) 
: M (ast) :=
   let _stringappend_1112_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_1112_) with
   | Some (_stringappend_1113_,(existT _ _stringappend_1114_ _)) =>
      let _stringappend_1115_ := string_drop _stringappend_1112_ (build_ex _stringappend_1114_) in
      match (spc_matches_prefix _stringappend_1115_) with
      | Some (_stringappend_1116_,(existT _ _stringappend_1117_ _)) =>
         let _stringappend_1118_ := string_drop _stringappend_1115_ (build_ex _stringappend_1117_) in
         match (reg_name_matches_prefix _stringappend_1118_) with
         | Some (_stringappend_1119_,(existT _ _stringappend_1120_ _)) =>
            let _stringappend_1121_ :=
              string_drop _stringappend_1118_ (build_ex _stringappend_1120_) in
            sep_matches_prefix _stringappend_1121_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (_stringappend_1122_,(existT _ _stringappend_1123_ _)) =>
                              let _stringappend_1124_ :=
                                string_drop _stringappend_1121_ (build_ex _stringappend_1123_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_1124_) with
                                   | Some (_stringappend_1125_,(existT _ _stringappend_1126_ _)) =>
                                      match (string_drop _stringappend_1124_
                                               (build_ex
                                               _stringappend_1126_)) with
                                      | "" => true
                                      | _ => false
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      match (utype_mnemonic_matches_prefix _stringappend_1112_) with
      | Some (_stringappend_1113_,(existT _ _stringappend_1114_ _)) =>
         returnm ((_stringappend_1113_, build_ex _stringappend_1114_)
          : (uop * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__5 : (uop * {n : Z & ArithFact (n >= 0)}) =>
      let '(op, existT _ _stringappend_1114_ _) := w__5  : (uop * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1115_ := string_drop _stringappend_1112_ (build_ex _stringappend_1114_) in
      match (spc_matches_prefix _stringappend_1115_) with
      | Some (_stringappend_1116_,(existT _ _stringappend_1117_ _)) =>
         returnm ((_stringappend_1116_, build_ex _stringappend_1117_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__7 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1117_ _) := w__7  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1118_ := string_drop _stringappend_1115_ (build_ex _stringappend_1117_) in
      match (reg_name_matches_prefix _stringappend_1118_) with
      | Some (_stringappend_1119_,(existT _ _stringappend_1120_ _)) =>
         returnm ((_stringappend_1119_, build_ex _stringappend_1120_)
          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__9 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
      let '(rd, existT _ _stringappend_1120_ _) := w__9  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1121_ := string_drop _stringappend_1118_ (build_ex _stringappend_1120_) in
      sep_matches_prefix _stringappend_1121_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=
        0)})) =>
      match w__10 with
      | Some (_stringappend_1122_,(existT _ _stringappend_1123_ _)) =>
         returnm ((_stringappend_1122_, build_ex _stringappend_1123_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__12 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_1123_ _) := w__12  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_1124_ := string_drop _stringappend_1121_ (build_ex _stringappend_1123_) in
      match (hex_bits_20_matches_prefix _stringappend_1124_) with
      | Some (_stringappend_1125_,(existT _ _stringappend_1126_ _)) =>
         returnm ((_stringappend_1125_, build_ex _stringappend_1126_)
          : (mword 20 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__14 : (mword 20 * {n : Z & ArithFact (n >= 0)}) =>
      let '(imm, existT _ _stringappend_1126_ _) :=
        w__14
         : (mword 20 * {n : Z & ArithFact (n >= 0)}) in
      (match (string_drop _stringappend_1124_ (build_ex _stringappend_1126_)) with
       | "" => returnm ((UTYPE (imm,rd,op))  : ast)
       | _ => exit tt  : M (ast)
       end)
       : M (ast)
    else
      and_boolM (returnm ((string_startswith _stringappend_1112_ "jal")  : bool))
        (let _stringappend_1128_ := string_drop _stringappend_1112_ (string_length "jal") in
        match (spc_matches_prefix _stringappend_1128_) with
        | Some (_stringappend_1129_,(existT _ _stringappend_1130_ _)) =>
           let _stringappend_1131_ := string_drop _stringappend_1128_ (build_ex _stringappend_1130_) in
           match (reg_name_matches_prefix _stringappend_1131_) with
           | Some (_stringappend_1132_,(existT _ _stringappend_1133_ _)) =>
              let _stringappend_1134_ :=
                string_drop _stringappend_1131_ (build_ex _stringappend_1133_) in
              sep_matches_prefix _stringappend_1134_ >>= fun w__17 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__17 with
                             | Some (_stringappend_1135_,(existT _ _stringappend_1136_ _)) =>
                                let _stringappend_1137_ :=
                                  string_drop _stringappend_1134_ (build_ex _stringappend_1136_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_1137_) with
                                     | Some (_stringappend_1138_,(existT _ _stringappend_1139_ _)) =>
                                        match (string_drop _stringappend_1137_
                                                 (build_ex
                                                 _stringappend_1139_)) with
                                        | "" => true
                                        | _ => false
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__18 : bool =>
           returnm ((if (w__18) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__19 : bool =>
        returnm ((if (w__19) then true
                  else false)
         : bool)) >>= fun w__20 : bool =>
      (if (w__20) then
         let _stringappend_1128_ := string_drop _stringappend_1112_ (string_length "jal") in
         match (spc_matches_prefix _stringappend_1128_) with
         | Some (_stringappend_1129_,(existT _ _stringappend_1130_ _)) =>
            returnm ((_stringappend_1129_, build_ex _stringappend_1130_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__22 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_1130_ _) := w__22  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_1131_ := string_drop _stringappend_1128_ (build_ex _stringappend_1130_) in
         match (reg_name_matches_prefix _stringappend_1131_) with
         | Some (_stringappend_1132_,(existT _ _stringappend_1133_ _)) =>
            returnm ((_stringappend_1132_, build_ex _stringappend_1133_)
             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__24 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
         let '(rd, existT _ _stringappend_1133_ _) :=
           w__24
            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_1134_ := string_drop _stringappend_1131_ (build_ex _stringappend_1133_) in
         sep_matches_prefix _stringappend_1134_ >>= fun w__25 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         match w__25 with
         | Some (_stringappend_1135_,(existT _ _stringappend_1136_ _)) =>
            returnm ((_stringappend_1135_, build_ex _stringappend_1136_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__27 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_1136_ _) := w__27  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_1137_ := string_drop _stringappend_1134_ (build_ex _stringappend_1136_) in
         match (hex_bits_21_matches_prefix _stringappend_1137_) with
         | Some (_stringappend_1138_,(existT _ _stringappend_1139_ _)) =>
            returnm ((_stringappend_1138_, build_ex _stringappend_1139_)
             : (mword 21 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__29 : (mword 21 * {n : Z & ArithFact (n >= 0)}) =>
         let '(imm, existT _ _stringappend_1139_ _) :=
           w__29
            : (mword 21 * {n : Z & ArithFact (n >= 0)}) in
         (match (string_drop _stringappend_1137_ (build_ex _stringappend_1139_)) with
          | "" => returnm ((RISCV_JAL (imm,rd))  : ast)
          | _ => exit tt  : M (ast)
          end)
          : M (ast)
       else
         and_boolM (returnm ((string_startswith _stringappend_1112_ "jalr")  : bool))
           (let _stringappend_1141_ := string_drop _stringappend_1112_ (string_length "jalr") in
           match (spc_matches_prefix _stringappend_1141_) with
           | Some (_stringappend_1142_,(existT _ _stringappend_1143_ _)) =>
              let _stringappend_1144_ :=
                string_drop _stringappend_1141_ (build_ex _stringappend_1143_) in
              match (reg_name_matches_prefix _stringappend_1144_) with
              | Some (_stringappend_1145_,(existT _ _stringappend_1146_ _)) =>
                 let _stringappend_1147_ :=
                   string_drop _stringappend_1144_ (build_ex _stringappend_1146_) in
                 sep_matches_prefix _stringappend_1147_ >>= fun w__32 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__32 with
                 | Some (_stringappend_1148_,(existT _ _stringappend_1149_ _)) =>
                    let _stringappend_1150_ :=
                      string_drop _stringappend_1147_ (build_ex _stringappend_1149_) in
                    match (reg_name_matches_prefix _stringappend_1150_) with
                    | Some (_stringappend_1151_,(existT _ _stringappend_1152_ _)) =>
                       let _stringappend_1153_ :=
                         string_drop _stringappend_1150_ (build_ex _stringappend_1152_) in
                       sep_matches_prefix _stringappend_1153_ >>= fun w__33 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__33 with
                                      | Some (_stringappend_1154_,(existT _ _stringappend_1155_ _)) =>
                                         let _stringappend_1156_ :=
                                           string_drop _stringappend_1153_
                                             (build_ex
                                             _stringappend_1155_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_1156_) with
                                              | Some
                                                (_stringappend_1157_,(existT _ _stringappend_1158_ _)) =>
                                                 match (string_drop _stringappend_1156_
                                                          (build_ex
                                                          _stringappend_1158_)) with
                                                 | "" => true
                                                 | _ => false
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__34 : bool =>
                    returnm ((if (w__34) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__35 : bool =>
                 returnm ((if (w__35) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__36 : bool =>
              returnm ((if (w__36) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__37 : bool =>
           returnm ((if (w__37) then true
                     else false)
            : bool)) >>= fun w__38 : bool =>
         (if (w__38) then
            let _stringappend_1141_ := string_drop _stringappend_1112_ (string_length "jalr") in
            match (spc_matches_prefix _stringappend_1141_) with
            | Some (_stringappend_1142_,(existT _ _stringappend_1143_ _)) =>
               returnm ((_stringappend_1142_, build_ex _stringappend_1143_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__40 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_1143_ _) :=
              w__40
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_1144_ :=
              string_drop _stringappend_1141_ (build_ex _stringappend_1143_) in
            match (reg_name_matches_prefix _stringappend_1144_) with
            | Some (_stringappend_1145_,(existT _ _stringappend_1146_ _)) =>
               returnm ((_stringappend_1145_, build_ex _stringappend_1146_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__42 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rd, existT _ _stringappend_1146_ _) :=
              w__42
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_1147_ :=
              string_drop _stringappend_1144_ (build_ex _stringappend_1146_) in
            sep_matches_prefix _stringappend_1147_ >>= fun w__43 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__43 with
            | Some (_stringappend_1148_,(existT _ _stringappend_1149_ _)) =>
               returnm ((_stringappend_1148_, build_ex _stringappend_1149_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__45 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_1149_ _) :=
              w__45
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_1150_ :=
              string_drop _stringappend_1147_ (build_ex _stringappend_1149_) in
            match (reg_name_matches_prefix _stringappend_1150_) with
            | Some (_stringappend_1151_,(existT _ _stringappend_1152_ _)) =>
               returnm ((_stringappend_1151_, build_ex _stringappend_1152_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__47 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rs1, existT _ _stringappend_1152_ _) :=
              w__47
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_1153_ :=
              string_drop _stringappend_1150_ (build_ex _stringappend_1152_) in
            sep_matches_prefix _stringappend_1153_ >>= fun w__48 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__48 with
            | Some (_stringappend_1154_,(existT _ _stringappend_1155_ _)) =>
               returnm ((_stringappend_1154_, build_ex _stringappend_1155_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__50 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_1155_ _) :=
              w__50
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_1156_ :=
              string_drop _stringappend_1153_ (build_ex _stringappend_1155_) in
            match (hex_bits_12_matches_prefix _stringappend_1156_) with
            | Some (_stringappend_1157_,(existT _ _stringappend_1158_ _)) =>
               returnm ((_stringappend_1157_, build_ex _stringappend_1158_)
                : (mword 12 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__52 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
            let '(imm, existT _ _stringappend_1158_ _) :=
              w__52
               : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
            (match (string_drop _stringappend_1156_ (build_ex _stringappend_1158_)) with
             | "" => returnm ((RISCV_JALR (imm,rs1,rd))  : ast)
             | _ => exit tt  : M (ast)
             end)
             : M (ast)
          else
            match (btype_mnemonic_matches_prefix _stringappend_1112_) with
            | Some (_stringappend_1160_,(existT _ _stringappend_1161_ _)) =>
               let _stringappend_1162_ :=
                 string_drop _stringappend_1112_ (build_ex _stringappend_1161_) in
               match (spc_matches_prefix _stringappend_1162_) with
               | Some (_stringappend_1163_,(existT _ _stringappend_1164_ _)) =>
                  let _stringappend_1165_ :=
                    string_drop _stringappend_1162_ (build_ex _stringappend_1164_) in
                  match (reg_name_matches_prefix _stringappend_1165_) with
                  | Some (_stringappend_1166_,(existT _ _stringappend_1167_ _)) =>
                     let _stringappend_1168_ :=
                       string_drop _stringappend_1165_ (build_ex _stringappend_1167_) in
                     sep_matches_prefix _stringappend_1168_ >>= fun w__55 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__55 with
                     | Some (_stringappend_1169_,(existT _ _stringappend_1170_ _)) =>
                        let _stringappend_1171_ :=
                          string_drop _stringappend_1168_ (build_ex _stringappend_1170_) in
                        match (reg_name_matches_prefix _stringappend_1171_) with
                        | Some (_stringappend_1172_,(existT _ _stringappend_1173_ _)) =>
                           let _stringappend_1174_ :=
                             string_drop _stringappend_1171_ (build_ex _stringappend_1173_) in
                           sep_matches_prefix _stringappend_1174_ >>= fun w__56 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__56 with
                                          | Some
                                            (_stringappend_1175_,(existT _ _stringappend_1176_ _)) =>
                                             let _stringappend_1177_ :=
                                               string_drop _stringappend_1174_
                                                 (build_ex
                                                 _stringappend_1176_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_1177_) with
                                                  | Some
                                                    (_stringappend_1178_,(existT _ _stringappend_1179_ _)) =>
                                                     match (string_drop _stringappend_1177_
                                                              (build_ex
                                                              _stringappend_1179_)) with
                                                     | "" => true
                                                     | _ => false
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__57 : bool =>
                        returnm ((if (w__57) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__58 : bool =>
                     returnm ((if (w__58) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__59 : bool =>
                  returnm ((if (w__59) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__60 : bool =>
               returnm ((if (w__60) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__61 : bool =>
            (if (w__61) then
               match (btype_mnemonic_matches_prefix _stringappend_1112_) with
               | Some (_stringappend_1160_,(existT _ _stringappend_1161_ _)) =>
                  returnm ((_stringappend_1160_, build_ex _stringappend_1161_)
                   : (bop * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__63 : (bop * {n : Z & ArithFact (n >= 0)}) =>
               let '(op, existT _ _stringappend_1161_ _) :=
                 w__63
                  : (bop * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1162_ :=
                 string_drop _stringappend_1112_ (build_ex _stringappend_1161_) in
               match (spc_matches_prefix _stringappend_1162_) with
               | Some (_stringappend_1163_,(existT _ _stringappend_1164_ _)) =>
                  returnm ((_stringappend_1163_, build_ex _stringappend_1164_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__65 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_1164_ _) :=
                 w__65
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1165_ :=
                 string_drop _stringappend_1162_ (build_ex _stringappend_1164_) in
               match (reg_name_matches_prefix _stringappend_1165_) with
               | Some (_stringappend_1166_,(existT _ _stringappend_1167_ _)) =>
                  returnm ((_stringappend_1166_, build_ex _stringappend_1167_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__67 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs1, existT _ _stringappend_1167_ _) :=
                 w__67
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1168_ :=
                 string_drop _stringappend_1165_ (build_ex _stringappend_1167_) in
               sep_matches_prefix _stringappend_1168_ >>= fun w__68 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__68 with
               | Some (_stringappend_1169_,(existT _ _stringappend_1170_ _)) =>
                  returnm ((_stringappend_1169_, build_ex _stringappend_1170_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__70 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_1170_ _) :=
                 w__70
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1171_ :=
                 string_drop _stringappend_1168_ (build_ex _stringappend_1170_) in
               match (reg_name_matches_prefix _stringappend_1171_) with
               | Some (_stringappend_1172_,(existT _ _stringappend_1173_ _)) =>
                  returnm ((_stringappend_1172_, build_ex _stringappend_1173_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__72 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs2, existT _ _stringappend_1173_ _) :=
                 w__72
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1174_ :=
                 string_drop _stringappend_1171_ (build_ex _stringappend_1173_) in
               sep_matches_prefix _stringappend_1174_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__73 with
               | Some (_stringappend_1175_,(existT _ _stringappend_1176_ _)) =>
                  returnm ((_stringappend_1175_, build_ex _stringappend_1176_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__75 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_1176_ _) :=
                 w__75
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_1177_ :=
                 string_drop _stringappend_1174_ (build_ex _stringappend_1176_) in
               match (hex_bits_13_matches_prefix _stringappend_1177_) with
               | Some (_stringappend_1178_,(existT _ _stringappend_1179_ _)) =>
                  returnm ((_stringappend_1178_, build_ex _stringappend_1179_)
                   : (mword 13 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__77 : (mword 13 * {n : Z & ArithFact (n >= 0)}) =>
               let '(imm, existT _ _stringappend_1179_ _) :=
                 w__77
                  : (mword 13 * {n : Z & ArithFact (n >= 0)}) in
               (match (string_drop _stringappend_1177_ (build_ex _stringappend_1179_)) with
                | "" => returnm ((BTYPE (imm,rs2,rs1,op))  : ast)
                | _ => exit tt  : M (ast)
                end)
                : M (ast)
             else
               match (itype_mnemonic_matches_prefix _stringappend_1112_) with
               | Some (_stringappend_1181_,(existT _ _stringappend_1182_ _)) =>
                  let _stringappend_1183_ :=
                    string_drop _stringappend_1112_ (build_ex _stringappend_1182_) in
                  match (spc_matches_prefix _stringappend_1183_) with
                  | Some (_stringappend_1184_,(existT _ _stringappend_1185_ _)) =>
                     let _stringappend_1186_ :=
                       string_drop _stringappend_1183_ (build_ex _stringappend_1185_) in
                     match (reg_name_matches_prefix _stringappend_1186_) with
                     | Some (_stringappend_1187_,(existT _ _stringappend_1188_ _)) =>
                        let _stringappend_1189_ :=
                          string_drop _stringappend_1186_ (build_ex _stringappend_1188_) in
                        sep_matches_prefix _stringappend_1189_ >>= fun w__80 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__80 with
                        | Some (_stringappend_1190_,(existT _ _stringappend_1191_ _)) =>
                           let _stringappend_1192_ :=
                             string_drop _stringappend_1189_ (build_ex _stringappend_1191_) in
                           match (reg_name_matches_prefix _stringappend_1192_) with
                           | Some (_stringappend_1193_,(existT _ _stringappend_1194_ _)) =>
                              let _stringappend_1195_ :=
                                string_drop _stringappend_1192_ (build_ex _stringappend_1194_) in
                              sep_matches_prefix _stringappend_1195_ >>= fun w__81 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__81 with
                                             | Some
                                               (_stringappend_1196_,(existT _ _stringappend_1197_ _)) =>
                                                let _stringappend_1198_ :=
                                                  string_drop _stringappend_1195_
                                                    (build_ex
                                                    _stringappend_1197_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_1198_) with
                                                     | Some
                                                       (_stringappend_1199_,(existT _ _stringappend_1200_ _)) =>
                                                        match (string_drop _stringappend_1198_
                                                                 (build_ex
                                                                 _stringappend_1200_)) with
                                                        | "" => true
                                                        | _ => false
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__82 : bool =>
                           returnm ((if (w__82) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__83 : bool =>
                        returnm ((if (w__83) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__84 : bool =>
                     returnm ((if (w__84) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__85 : bool =>
                  returnm ((if (w__85) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__86 : bool =>
               (if (w__86) then
                  match (itype_mnemonic_matches_prefix _stringappend_1112_) with
                  | Some (_stringappend_1181_,(existT _ _stringappend_1182_ _)) =>
                     returnm ((_stringappend_1181_, build_ex _stringappend_1182_)
                      : (iop * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__88 : (iop * {n : Z & ArithFact (n >= 0)}) =>
                  let '(op, existT _ _stringappend_1182_ _) :=
                    w__88
                     : (iop * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1183_ :=
                    string_drop _stringappend_1112_ (build_ex _stringappend_1182_) in
                  match (spc_matches_prefix _stringappend_1183_) with
                  | Some (_stringappend_1184_,(existT _ _stringappend_1185_ _)) =>
                     returnm ((_stringappend_1184_, build_ex _stringappend_1185_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__90 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_1185_ _) :=
                    w__90
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1186_ :=
                    string_drop _stringappend_1183_ (build_ex _stringappend_1185_) in
                  match (reg_name_matches_prefix _stringappend_1186_) with
                  | Some (_stringappend_1187_,(existT _ _stringappend_1188_ _)) =>
                     returnm ((_stringappend_1187_, build_ex _stringappend_1188_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__92 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rd, existT _ _stringappend_1188_ _) :=
                    w__92
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1189_ :=
                    string_drop _stringappend_1186_ (build_ex _stringappend_1188_) in
                  sep_matches_prefix _stringappend_1189_ >>= fun w__93 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__93 with
                  | Some (_stringappend_1190_,(existT _ _stringappend_1191_ _)) =>
                     returnm ((_stringappend_1190_, build_ex _stringappend_1191_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__95 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_1191_ _) :=
                    w__95
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1192_ :=
                    string_drop _stringappend_1189_ (build_ex _stringappend_1191_) in
                  match (reg_name_matches_prefix _stringappend_1192_) with
                  | Some (_stringappend_1193_,(existT _ _stringappend_1194_ _)) =>
                     returnm ((_stringappend_1193_, build_ex _stringappend_1194_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__97 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rs1, existT _ _stringappend_1194_ _) :=
                    w__97
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1195_ :=
                    string_drop _stringappend_1192_ (build_ex _stringappend_1194_) in
                  sep_matches_prefix _stringappend_1195_ >>= fun w__98 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__98 with
                  | Some (_stringappend_1196_,(existT _ _stringappend_1197_ _)) =>
                     returnm ((_stringappend_1196_, build_ex _stringappend_1197_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__100 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_1197_ _) :=
                    w__100
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_1198_ :=
                    string_drop _stringappend_1195_ (build_ex _stringappend_1197_) in
                  match (hex_bits_12_matches_prefix _stringappend_1198_) with
                  | Some (_stringappend_1199_,(existT _ _stringappend_1200_ _)) =>
                     returnm ((_stringappend_1199_, build_ex _stringappend_1200_)
                      : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__102 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(imm, existT _ _stringappend_1200_ _) :=
                    w__102
                     : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                  (match (string_drop _stringappend_1198_ (build_ex _stringappend_1200_)) with
                   | "" => returnm ((ITYPE (imm,rs1,rd,op))  : ast)
                   | _ => exit tt  : M (ast)
                   end)
                   : M (ast)
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_1112_) with
                  | Some (_stringappend_1202_,(existT _ _stringappend_1203_ _)) =>
                     let _stringappend_1204_ :=
                       string_drop _stringappend_1112_ (build_ex _stringappend_1203_) in
                     match (spc_matches_prefix _stringappend_1204_) with
                     | Some (_stringappend_1205_,(existT _ _stringappend_1206_ _)) =>
                        let _stringappend_1207_ :=
                          string_drop _stringappend_1204_ (build_ex _stringappend_1206_) in
                        match (reg_name_matches_prefix _stringappend_1207_) with
                        | Some (_stringappend_1208_,(existT _ _stringappend_1209_ _)) =>
                           let _stringappend_1210_ :=
                             string_drop _stringappend_1207_ (build_ex _stringappend_1209_) in
                           sep_matches_prefix _stringappend_1210_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__105 with
                                          | Some
                                            (_stringappend_1211_,(existT _ _stringappend_1212_ _)) =>
                                             let _stringappend_1213_ :=
                                               string_drop _stringappend_1210_
                                                 (build_ex
                                                 _stringappend_1212_) in
                                             if ((match (reg_name_matches_prefix _stringappend_1213_) with
                                                  | Some
                                                    (_stringappend_1214_,(existT _ _stringappend_1215_ _)) =>
                                                     let _stringappend_1216_ :=
                                                       string_drop _stringappend_1213_
                                                         (build_ex
                                                         _stringappend_1215_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_1216_) with
                                                          | Some
                                                            (_stringappend_1217_,(existT _ _stringappend_1218_ _)) =>
                                                             match (string_drop _stringappend_1216_
                                                                      (build_ex
                                                                      _stringappend_1218_)) with
                                                             | "" => true
                                                             | _ => false
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__106 : bool =>
                        returnm ((if (w__106) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__107 : bool =>
                     returnm ((if (w__107) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__108 : bool =>
                  (if (w__108) then
                     match (shiftiop_mnemonic_matches_prefix _stringappend_1112_) with
                     | Some (_stringappend_1202_,(existT _ _stringappend_1203_ _)) =>
                        returnm ((_stringappend_1202_, build_ex _stringappend_1203_)
                         : (sop * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__110 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                     let '(op, existT _ _stringappend_1203_ _) :=
                       w__110
                        : (sop * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_1204_ :=
                       string_drop _stringappend_1112_ (build_ex _stringappend_1203_) in
                     match (spc_matches_prefix _stringappend_1204_) with
                     | Some (_stringappend_1205_,(existT _ _stringappend_1206_ _)) =>
                        returnm ((_stringappend_1205_, build_ex _stringappend_1206_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__112 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_1206_ _) :=
                       w__112
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_1207_ :=
                       string_drop _stringappend_1204_ (build_ex _stringappend_1206_) in
                     match (reg_name_matches_prefix _stringappend_1207_) with
                     | Some (_stringappend_1208_,(existT _ _stringappend_1209_ _)) =>
                        returnm ((_stringappend_1208_, build_ex _stringappend_1209_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__114 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rd, existT _ _stringappend_1209_ _) :=
                       w__114
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_1210_ :=
                       string_drop _stringappend_1207_ (build_ex _stringappend_1209_) in
                     sep_matches_prefix _stringappend_1210_ >>= fun w__115 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__115 with
                     | Some (_stringappend_1211_,(existT _ _stringappend_1212_ _)) =>
                        returnm ((_stringappend_1211_, build_ex _stringappend_1212_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__117 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_1212_ _) :=
                       w__117
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_1213_ :=
                       string_drop _stringappend_1210_ (build_ex _stringappend_1212_) in
                     match (reg_name_matches_prefix _stringappend_1213_) with
                     | Some (_stringappend_1214_,(existT _ _stringappend_1215_ _)) =>
                        returnm ((_stringappend_1214_, build_ex _stringappend_1215_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__119 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rs1, existT _ _stringappend_1215_ _) :=
                       w__119
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_1216_ :=
                       string_drop _stringappend_1213_ (build_ex _stringappend_1215_) in
                     match (hex_bits_6_matches_prefix _stringappend_1216_) with
                     | Some (_stringappend_1217_,(existT _ _stringappend_1218_ _)) =>
                        returnm ((_stringappend_1217_, build_ex _stringappend_1218_)
                         : (mword 6 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__121 : (mword 6 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(shamt, existT _ _stringappend_1218_ _) :=
                       w__121
                        : (mword 6 * {n : Z & ArithFact (n >= 0)}) in
                     (match (string_drop _stringappend_1216_ (build_ex _stringappend_1218_)) with
                      | "" => returnm ((SHIFTIOP (shamt,rs1,rd,op))  : ast)
                      | _ => exit tt  : M (ast)
                      end)
                      : M (ast)
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_1112_) with
                     | Some (_stringappend_1220_,(existT _ _stringappend_1221_ _)) =>
                        let _stringappend_1222_ :=
                          string_drop _stringappend_1112_ (build_ex _stringappend_1221_) in
                        match (spc_matches_prefix _stringappend_1222_) with
                        | Some (_stringappend_1223_,(existT _ _stringappend_1224_ _)) =>
                           let _stringappend_1225_ :=
                             string_drop _stringappend_1222_ (build_ex _stringappend_1224_) in
                           match (reg_name_matches_prefix _stringappend_1225_) with
                           | Some (_stringappend_1226_,(existT _ _stringappend_1227_ _)) =>
                              let _stringappend_1228_ :=
                                string_drop _stringappend_1225_ (build_ex _stringappend_1227_) in
                              sep_matches_prefix _stringappend_1228_ >>= fun w__124 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__124 with
                              | Some (_stringappend_1229_,(existT _ _stringappend_1230_ _)) =>
                                 let _stringappend_1231_ :=
                                   string_drop _stringappend_1228_ (build_ex _stringappend_1230_) in
                                 match (reg_name_matches_prefix _stringappend_1231_) with
                                 | Some (_stringappend_1232_,(existT _ _stringappend_1233_ _)) =>
                                    let _stringappend_1234_ :=
                                      string_drop _stringappend_1231_ (build_ex _stringappend_1233_) in
                                    sep_matches_prefix _stringappend_1234_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__125 with
                                                   | Some
                                                     (_stringappend_1235_,(existT _ _stringappend_1236_ _)) =>
                                                      let _stringappend_1237_ :=
                                                        string_drop _stringappend_1234_
                                                          (build_ex
                                                          _stringappend_1236_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_1237_) with
                                                           | Some
                                                             (_stringappend_1238_,(existT _ _stringappend_1239_ _)) =>
                                                              match (string_drop _stringappend_1237_
                                                                       (build_ex
                                                                       _stringappend_1239_)) with
                                                              | "" => true
                                                              | _ => false
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__126 : bool =>
                                 returnm ((if (w__126) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__127 : bool =>
                              returnm ((if (w__127) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__128 : bool =>
                           returnm ((if (w__128) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__129 : bool =>
                        returnm ((if (w__129) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__130 : bool =>
                     (if (w__130) then
                        match (rtype_mnemonic_matches_prefix _stringappend_1112_) with
                        | Some (_stringappend_1220_,(existT _ _stringappend_1221_ _)) =>
                           returnm ((_stringappend_1220_, build_ex _stringappend_1221_)
                            : (rop * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__132 : (rop * {n : Z & ArithFact (n >= 0)}) =>
                        let '(op, existT _ _stringappend_1221_ _) :=
                          w__132
                           : (rop * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1222_ :=
                          string_drop _stringappend_1112_ (build_ex _stringappend_1221_) in
                        match (spc_matches_prefix _stringappend_1222_) with
                        | Some (_stringappend_1223_,(existT _ _stringappend_1224_ _)) =>
                           returnm ((_stringappend_1223_, build_ex _stringappend_1224_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__134 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_1224_ _) :=
                          w__134
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1225_ :=
                          string_drop _stringappend_1222_ (build_ex _stringappend_1224_) in
                        match (reg_name_matches_prefix _stringappend_1225_) with
                        | Some (_stringappend_1226_,(existT _ _stringappend_1227_ _)) =>
                           returnm ((_stringappend_1226_, build_ex _stringappend_1227_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__136 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rd, existT _ _stringappend_1227_ _) :=
                          w__136
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1228_ :=
                          string_drop _stringappend_1225_ (build_ex _stringappend_1227_) in
                        sep_matches_prefix _stringappend_1228_ >>= fun w__137 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__137 with
                        | Some (_stringappend_1229_,(existT _ _stringappend_1230_ _)) =>
                           returnm ((_stringappend_1229_, build_ex _stringappend_1230_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__139 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_1230_ _) :=
                          w__139
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1231_ :=
                          string_drop _stringappend_1228_ (build_ex _stringappend_1230_) in
                        match (reg_name_matches_prefix _stringappend_1231_) with
                        | Some (_stringappend_1232_,(existT _ _stringappend_1233_ _)) =>
                           returnm ((_stringappend_1232_, build_ex _stringappend_1233_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__141 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs1, existT _ _stringappend_1233_ _) :=
                          w__141
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1234_ :=
                          string_drop _stringappend_1231_ (build_ex _stringappend_1233_) in
                        sep_matches_prefix _stringappend_1234_ >>= fun w__142 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__142 with
                        | Some (_stringappend_1235_,(existT _ _stringappend_1236_ _)) =>
                           returnm ((_stringappend_1235_, build_ex _stringappend_1236_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__144 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_1236_ _) :=
                          w__144
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_1237_ :=
                          string_drop _stringappend_1234_ (build_ex _stringappend_1236_) in
                        match (reg_name_matches_prefix _stringappend_1237_) with
                        | Some (_stringappend_1238_,(existT _ _stringappend_1239_ _)) =>
                           returnm ((_stringappend_1238_, build_ex _stringappend_1239_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__146 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs2, existT _ _stringappend_1239_ _) :=
                          w__146
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        (match (string_drop _stringappend_1237_ (build_ex _stringappend_1239_)) with
                         | "" => returnm ((RTYPE (rs2,rs1,rd,op))  : ast)
                         | _ => exit tt  : M (ast)
                         end)
                         : M (ast)
                      else
                        and_boolM (returnm ((string_startswith _stringappend_1112_ "l")  : bool))
                          (let _stringappend_1241_ :=
                            string_drop _stringappend_1112_ (string_length "l") in
                          match (size_mnemonic_matches_prefix _stringappend_1241_) with
                          | Some (_stringappend_1242_,(existT _ _stringappend_1243_ _)) =>
                             let _stringappend_1244_ :=
                               string_drop _stringappend_1241_ (build_ex _stringappend_1243_) in
                             match (maybe_u_matches_prefix _stringappend_1244_) with
                             | Some (_stringappend_1245_,(existT _ _stringappend_1246_ _)) =>
                                let _stringappend_1247_ :=
                                  string_drop _stringappend_1244_ (build_ex _stringappend_1246_) in
                                match (maybe_aq_matches_prefix _stringappend_1247_) with
                                | Some (_stringappend_1248_,(existT _ _stringappend_1249_ _)) =>
                                   let _stringappend_1250_ :=
                                     string_drop _stringappend_1247_ (build_ex _stringappend_1249_) in
                                   match (maybe_rl_matches_prefix _stringappend_1250_) with
                                   | Some (_stringappend_1251_,(existT _ _stringappend_1252_ _)) =>
                                      let _stringappend_1253_ :=
                                        string_drop _stringappend_1250_
                                          (build_ex
                                          _stringappend_1252_) in
                                      match (spc_matches_prefix _stringappend_1253_) with
                                      | Some (_stringappend_1254_,(existT _ _stringappend_1255_ _)) =>
                                         let _stringappend_1256_ :=
                                           string_drop _stringappend_1253_
                                             (build_ex
                                             _stringappend_1255_) in
                                         match (reg_name_matches_prefix _stringappend_1256_) with
                                         | Some
                                           (_stringappend_1257_,(existT _ _stringappend_1258_ _)) =>
                                            let _stringappend_1259_ :=
                                              string_drop _stringappend_1256_
                                                (build_ex
                                                _stringappend_1258_) in
                                            sep_matches_prefix _stringappend_1259_ >>= fun w__149 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__149 with
                                            | Some
                                              (_stringappend_1260_,(existT _ _stringappend_1261_ _)) =>
                                               let _stringappend_1262_ :=
                                                 string_drop _stringappend_1259_
                                                   (build_ex
                                                   _stringappend_1261_) in
                                               match (reg_name_matches_prefix _stringappend_1262_) with
                                               | Some
                                                 (_stringappend_1263_,(existT _ _stringappend_1264_ _)) =>
                                                  let _stringappend_1265_ :=
                                                    string_drop _stringappend_1262_
                                                      (build_ex
                                                      _stringappend_1264_) in
                                                  sep_matches_prefix _stringappend_1265_ >>= fun w__150 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__150 with
                                                                 | Some
                                                                   (_stringappend_1266_,(existT _ _stringappend_1267_ _)) =>
                                                                    let _stringappend_1268_ :=
                                                                      string_drop
                                                                        _stringappend_1265_
                                                                        (build_ex
                                                                        _stringappend_1267_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_1268_) with
                                                                         | Some
                                                                           (_stringappend_1269_,(existT _ _stringappend_1270_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_1268_
                                                                                     (build_ex
                                                                                     _stringappend_1270_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__151 : bool =>
                                               returnm ((if (w__151) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__152 : bool =>
                                            returnm ((if (w__152) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__153 : bool =>
                                         returnm ((if (w__153) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__154 : bool =>
                                      returnm ((if (w__154) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__155 : bool =>
                                   returnm ((if (w__155) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__156 : bool =>
                                returnm ((if (w__156) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__157 : bool =>
                             returnm ((if (w__157) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__158 : bool =>
                          returnm ((if (w__158) then true
                                    else false)
                           : bool)) >>= fun w__159 : bool =>
                        (if (w__159) then
                           let _stringappend_1241_ :=
                             string_drop _stringappend_1112_ (string_length "l") in
                           match (size_mnemonic_matches_prefix _stringappend_1241_) with
                           | Some (_stringappend_1242_,(existT _ _stringappend_1243_ _)) =>
                              returnm ((_stringappend_1242_, build_ex _stringappend_1243_)
                               : (word_width * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__161 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                           let '(size, existT _ _stringappend_1243_ _) :=
                             w__161
                              : (word_width * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1244_ :=
                             string_drop _stringappend_1241_ (build_ex _stringappend_1243_) in
                           match (maybe_u_matches_prefix _stringappend_1244_) with
                           | Some (_stringappend_1245_,(existT _ _stringappend_1246_ _)) =>
                              returnm ((_stringappend_1245_, build_ex _stringappend_1246_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__163 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(is_unsigned, existT _ _stringappend_1246_ _) :=
                             w__163
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1247_ :=
                             string_drop _stringappend_1244_ (build_ex _stringappend_1246_) in
                           match (maybe_aq_matches_prefix _stringappend_1247_) with
                           | Some (_stringappend_1248_,(existT _ _stringappend_1249_ _)) =>
                              returnm ((_stringappend_1248_, build_ex _stringappend_1249_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__165 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(aq, existT _ _stringappend_1249_ _) :=
                             w__165
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1250_ :=
                             string_drop _stringappend_1247_ (build_ex _stringappend_1249_) in
                           match (maybe_rl_matches_prefix _stringappend_1250_) with
                           | Some (_stringappend_1251_,(existT _ _stringappend_1252_ _)) =>
                              returnm ((_stringappend_1251_, build_ex _stringappend_1252_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__167 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rl, existT _ _stringappend_1252_ _) :=
                             w__167
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1253_ :=
                             string_drop _stringappend_1250_ (build_ex _stringappend_1252_) in
                           match (spc_matches_prefix _stringappend_1253_) with
                           | Some (_stringappend_1254_,(existT _ _stringappend_1255_ _)) =>
                              returnm ((_stringappend_1254_, build_ex _stringappend_1255_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__169 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_1255_ _) :=
                             w__169
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1256_ :=
                             string_drop _stringappend_1253_ (build_ex _stringappend_1255_) in
                           match (reg_name_matches_prefix _stringappend_1256_) with
                           | Some (_stringappend_1257_,(existT _ _stringappend_1258_ _)) =>
                              returnm ((_stringappend_1257_, build_ex _stringappend_1258_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__171 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rd, existT _ _stringappend_1258_ _) :=
                             w__171
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1259_ :=
                             string_drop _stringappend_1256_ (build_ex _stringappend_1258_) in
                           sep_matches_prefix _stringappend_1259_ >>= fun w__172 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__172 with
                           | Some (_stringappend_1260_,(existT _ _stringappend_1261_ _)) =>
                              returnm ((_stringappend_1260_, build_ex _stringappend_1261_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__174 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_1261_ _) :=
                             w__174
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1262_ :=
                             string_drop _stringappend_1259_ (build_ex _stringappend_1261_) in
                           match (reg_name_matches_prefix _stringappend_1262_) with
                           | Some (_stringappend_1263_,(existT _ _stringappend_1264_ _)) =>
                              returnm ((_stringappend_1263_, build_ex _stringappend_1264_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__176 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rs1, existT _ _stringappend_1264_ _) :=
                             w__176
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1265_ :=
                             string_drop _stringappend_1262_ (build_ex _stringappend_1264_) in
                           sep_matches_prefix _stringappend_1265_ >>= fun w__177 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__177 with
                           | Some (_stringappend_1266_,(existT _ _stringappend_1267_ _)) =>
                              returnm ((_stringappend_1266_, build_ex _stringappend_1267_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__179 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_1267_ _) :=
                             w__179
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_1268_ :=
                             string_drop _stringappend_1265_ (build_ex _stringappend_1267_) in
                           match (hex_bits_12_matches_prefix _stringappend_1268_) with
                           | Some (_stringappend_1269_,(existT _ _stringappend_1270_ _)) =>
                              returnm ((_stringappend_1269_, build_ex _stringappend_1270_)
                               : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__181 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(imm, existT _ _stringappend_1270_ _) :=
                             w__181
                              : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                           (match (string_drop _stringappend_1268_ (build_ex _stringappend_1270_)) with
                            | "" => returnm ((LOAD (imm,rs1,rd,is_unsigned,size,aq,rl))  : ast)
                            | _ => exit tt  : M (ast)
                            end)
                            : M (ast)
                         else
                           and_boolM (returnm ((string_startswith _stringappend_1112_ "s")  : bool))
                             (let _stringappend_1272_ :=
                               string_drop _stringappend_1112_ (string_length "s") in
                             match (size_mnemonic_matches_prefix _stringappend_1272_) with
                             | Some (_stringappend_1273_,(existT _ _stringappend_1274_ _)) =>
                                let _stringappend_1275_ :=
                                  string_drop _stringappend_1272_ (build_ex _stringappend_1274_) in
                                match (maybe_aq_matches_prefix _stringappend_1275_) with
                                | Some (_stringappend_1276_,(existT _ _stringappend_1277_ _)) =>
                                   let _stringappend_1278_ :=
                                     string_drop _stringappend_1275_ (build_ex _stringappend_1277_) in
                                   match (maybe_rl_matches_prefix _stringappend_1278_) with
                                   | Some (_stringappend_1279_,(existT _ _stringappend_1280_ _)) =>
                                      let _stringappend_1281_ :=
                                        string_drop _stringappend_1278_
                                          (build_ex
                                          _stringappend_1280_) in
                                      match (spc_matches_prefix _stringappend_1281_) with
                                      | Some (_stringappend_1282_,(existT _ _stringappend_1283_ _)) =>
                                         let _stringappend_1284_ :=
                                           string_drop _stringappend_1281_
                                             (build_ex
                                             _stringappend_1283_) in
                                         match (reg_name_matches_prefix _stringappend_1284_) with
                                         | Some
                                           (_stringappend_1285_,(existT _ _stringappend_1286_ _)) =>
                                            let _stringappend_1287_ :=
                                              string_drop _stringappend_1284_
                                                (build_ex
                                                _stringappend_1286_) in
                                            sep_matches_prefix _stringappend_1287_ >>= fun w__184 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__184 with
                                            | Some
                                              (_stringappend_1288_,(existT _ _stringappend_1289_ _)) =>
                                               let _stringappend_1290_ :=
                                                 string_drop _stringappend_1287_
                                                   (build_ex
                                                   _stringappend_1289_) in
                                               match (reg_name_matches_prefix _stringappend_1290_) with
                                               | Some
                                                 (_stringappend_1291_,(existT _ _stringappend_1292_ _)) =>
                                                  let _stringappend_1293_ :=
                                                    string_drop _stringappend_1290_
                                                      (build_ex
                                                      _stringappend_1292_) in
                                                  sep_matches_prefix _stringappend_1293_ >>= fun w__185 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__185 with
                                                                 | Some
                                                                   (_stringappend_1294_,(existT _ _stringappend_1295_ _)) =>
                                                                    let _stringappend_1296_ :=
                                                                      string_drop
                                                                        _stringappend_1293_
                                                                        (build_ex
                                                                        _stringappend_1295_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_1296_) with
                                                                         | Some
                                                                           (_stringappend_1297_,(existT _ _stringappend_1298_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_1296_
                                                                                     (build_ex
                                                                                     _stringappend_1298_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__186 : bool =>
                                               returnm ((if (w__186) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__187 : bool =>
                                            returnm ((if (w__187) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__188 : bool =>
                                         returnm ((if (w__188) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__189 : bool =>
                                      returnm ((if (w__189) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__190 : bool =>
                                   returnm ((if (w__190) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__191 : bool =>
                                returnm ((if (w__191) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__192 : bool =>
                             returnm ((if (w__192) then true
                                       else false)
                              : bool)) >>= fun w__193 : bool =>
                           (if (w__193) then
                              let _stringappend_1272_ :=
                                string_drop _stringappend_1112_ (string_length "s") in
                              match (size_mnemonic_matches_prefix _stringappend_1272_) with
                              | Some (_stringappend_1273_,(existT _ _stringappend_1274_ _)) =>
                                 returnm ((_stringappend_1273_, build_ex _stringappend_1274_)
                                  : (word_width * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__195 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                              let '(size, existT _ _stringappend_1274_ _) :=
                                w__195
                                 : (word_width * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1275_ :=
                                string_drop _stringappend_1272_ (build_ex _stringappend_1274_) in
                              match (maybe_aq_matches_prefix _stringappend_1275_) with
                              | Some (_stringappend_1276_,(existT _ _stringappend_1277_ _)) =>
                                 returnm ((_stringappend_1276_, build_ex _stringappend_1277_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__197 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(aq, existT _ _stringappend_1277_ _) :=
                                w__197
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1278_ :=
                                string_drop _stringappend_1275_ (build_ex _stringappend_1277_) in
                              match (maybe_rl_matches_prefix _stringappend_1278_) with
                              | Some (_stringappend_1279_,(existT _ _stringappend_1280_ _)) =>
                                 returnm ((_stringappend_1279_, build_ex _stringappend_1280_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__199 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rl, existT _ _stringappend_1280_ _) :=
                                w__199
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1281_ :=
                                string_drop _stringappend_1278_ (build_ex _stringappend_1280_) in
                              match (spc_matches_prefix _stringappend_1281_) with
                              | Some (_stringappend_1282_,(existT _ _stringappend_1283_ _)) =>
                                 returnm ((_stringappend_1282_, build_ex _stringappend_1283_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__201 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_1283_ _) :=
                                w__201
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1284_ :=
                                string_drop _stringappend_1281_ (build_ex _stringappend_1283_) in
                              match (reg_name_matches_prefix _stringappend_1284_) with
                              | Some (_stringappend_1285_,(existT _ _stringappend_1286_ _)) =>
                                 returnm ((_stringappend_1285_, build_ex _stringappend_1286_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__203 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rd, existT _ _stringappend_1286_ _) :=
                                w__203
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1287_ :=
                                string_drop _stringappend_1284_ (build_ex _stringappend_1286_) in
                              sep_matches_prefix _stringappend_1287_ >>= fun w__204 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__204 with
                              | Some (_stringappend_1288_,(existT _ _stringappend_1289_ _)) =>
                                 returnm ((_stringappend_1288_, build_ex _stringappend_1289_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__206 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_1289_ _) :=
                                w__206
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1290_ :=
                                string_drop _stringappend_1287_ (build_ex _stringappend_1289_) in
                              match (reg_name_matches_prefix _stringappend_1290_) with
                              | Some (_stringappend_1291_,(existT _ _stringappend_1292_ _)) =>
                                 returnm ((_stringappend_1291_, build_ex _stringappend_1292_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__208 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rs1, existT _ _stringappend_1292_ _) :=
                                w__208
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1293_ :=
                                string_drop _stringappend_1290_ (build_ex _stringappend_1292_) in
                              sep_matches_prefix _stringappend_1293_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__209 with
                              | Some (_stringappend_1294_,(existT _ _stringappend_1295_ _)) =>
                                 returnm ((_stringappend_1294_, build_ex _stringappend_1295_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__211 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_1295_ _) :=
                                w__211
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_1296_ :=
                                string_drop _stringappend_1293_ (build_ex _stringappend_1295_) in
                              match (hex_bits_12_matches_prefix _stringappend_1296_) with
                              | Some (_stringappend_1297_,(existT _ _stringappend_1298_ _)) =>
                                 returnm ((_stringappend_1297_, build_ex _stringappend_1298_)
                                  : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__213 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(imm, existT _ _stringappend_1298_ _) :=
                                w__213
                                 : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                              (match (string_drop _stringappend_1296_ (build_ex _stringappend_1298_)) with
                               | "" => returnm ((STORE (imm,rs1,rd,size,aq,rl))  : ast)
                               | _ => exit tt  : M (ast)
                               end)
                               : M (ast)
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_1112_ "addiw")
                                  : bool))
                                (let _stringappend_1300_ :=
                                  string_drop _stringappend_1112_ (string_length "addiw") in
                                match (spc_matches_prefix _stringappend_1300_) with
                                | Some (_stringappend_1301_,(existT _ _stringappend_1302_ _)) =>
                                   let _stringappend_1303_ :=
                                     string_drop _stringappend_1300_ (build_ex _stringappend_1302_) in
                                   match (reg_name_matches_prefix _stringappend_1303_) with
                                   | Some (_stringappend_1304_,(existT _ _stringappend_1305_ _)) =>
                                      let _stringappend_1306_ :=
                                        string_drop _stringappend_1303_
                                          (build_ex
                                          _stringappend_1305_) in
                                      sep_matches_prefix _stringappend_1306_ >>= fun w__216 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__216 with
                                      | Some (_stringappend_1307_,(existT _ _stringappend_1308_ _)) =>
                                         let _stringappend_1309_ :=
                                           string_drop _stringappend_1306_
                                             (build_ex
                                             _stringappend_1308_) in
                                         match (reg_name_matches_prefix _stringappend_1309_) with
                                         | Some
                                           (_stringappend_1310_,(existT _ _stringappend_1311_ _)) =>
                                            let _stringappend_1312_ :=
                                              string_drop _stringappend_1309_
                                                (build_ex
                                                _stringappend_1311_) in
                                            sep_matches_prefix _stringappend_1312_ >>= fun w__217 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__217 with
                                                           | Some
                                                             (_stringappend_1313_,(existT _ _stringappend_1314_ _)) =>
                                                              let _stringappend_1315_ :=
                                                                string_drop _stringappend_1312_
                                                                  (build_ex
                                                                  _stringappend_1314_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_1315_) with
                                                                   | Some
                                                                     (_stringappend_1316_,(existT _ _stringappend_1317_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_1315_
                                                                               (build_ex
                                                                               _stringappend_1317_)) with
                                                                      | "" => true
                                                                      | _ => false
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__218 : bool =>
                                         returnm ((if (w__218) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__219 : bool =>
                                      returnm ((if (w__219) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__220 : bool =>
                                   returnm ((if (w__220) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__221 : bool =>
                                returnm ((if (w__221) then true
                                          else false)
                                 : bool)) >>= fun w__222 : bool =>
                              (if (w__222) then
                                 let _stringappend_1300_ :=
                                   string_drop _stringappend_1112_ (string_length "addiw") in
                                 match (spc_matches_prefix _stringappend_1300_) with
                                 | Some (_stringappend_1301_,(existT _ _stringappend_1302_ _)) =>
                                    returnm ((_stringappend_1301_, build_ex _stringappend_1302_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__224 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_1302_ _) :=
                                   w__224
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_1303_ :=
                                   string_drop _stringappend_1300_ (build_ex _stringappend_1302_) in
                                 match (reg_name_matches_prefix _stringappend_1303_) with
                                 | Some (_stringappend_1304_,(existT _ _stringappend_1305_ _)) =>
                                    returnm ((_stringappend_1304_, build_ex _stringappend_1305_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__226 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rd, existT _ _stringappend_1305_ _) :=
                                   w__226
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_1306_ :=
                                   string_drop _stringappend_1303_ (build_ex _stringappend_1305_) in
                                 sep_matches_prefix _stringappend_1306_ >>= fun w__227 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__227 with
                                 | Some (_stringappend_1307_,(existT _ _stringappend_1308_ _)) =>
                                    returnm ((_stringappend_1307_, build_ex _stringappend_1308_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__229 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_1308_ _) :=
                                   w__229
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_1309_ :=
                                   string_drop _stringappend_1306_ (build_ex _stringappend_1308_) in
                                 match (reg_name_matches_prefix _stringappend_1309_) with
                                 | Some (_stringappend_1310_,(existT _ _stringappend_1311_ _)) =>
                                    returnm ((_stringappend_1310_, build_ex _stringappend_1311_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__231 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rs1, existT _ _stringappend_1311_ _) :=
                                   w__231
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_1312_ :=
                                   string_drop _stringappend_1309_ (build_ex _stringappend_1311_) in
                                 sep_matches_prefix _stringappend_1312_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__232 with
                                 | Some (_stringappend_1313_,(existT _ _stringappend_1314_ _)) =>
                                    returnm ((_stringappend_1313_, build_ex _stringappend_1314_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__234 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_1314_ _) :=
                                   w__234
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_1315_ :=
                                   string_drop _stringappend_1312_ (build_ex _stringappend_1314_) in
                                 match (hex_bits_12_matches_prefix _stringappend_1315_) with
                                 | Some (_stringappend_1316_,(existT _ _stringappend_1317_ _)) =>
                                    returnm ((_stringappend_1316_, build_ex _stringappend_1317_)
                                     : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__236 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(imm, existT _ _stringappend_1317_ _) :=
                                   w__236
                                    : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                                 (match (string_drop _stringappend_1315_
                                           (build_ex
                                           _stringappend_1317_)) with
                                  | "" => returnm ((ADDIW (imm,rs1,rd))  : ast)
                                  | _ => exit tt  : M (ast)
                                  end)
                                  : M (ast)
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_1112_) with
                                 | Some (_stringappend_1319_,(existT _ _stringappend_1320_ _)) =>
                                    let _stringappend_1321_ :=
                                      string_drop _stringappend_1112_ (build_ex _stringappend_1320_) in
                                    match (spc_matches_prefix _stringappend_1321_) with
                                    | Some (_stringappend_1322_,(existT _ _stringappend_1323_ _)) =>
                                       let _stringappend_1324_ :=
                                         string_drop _stringappend_1321_
                                           (build_ex
                                           _stringappend_1323_) in
                                       match (reg_name_matches_prefix _stringappend_1324_) with
                                       | Some (_stringappend_1325_,(existT _ _stringappend_1326_ _)) =>
                                          let _stringappend_1327_ :=
                                            string_drop _stringappend_1324_
                                              (build_ex
                                              _stringappend_1326_) in
                                          sep_matches_prefix _stringappend_1327_ >>= fun w__239 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__239 with
                                          | Some
                                            (_stringappend_1328_,(existT _ _stringappend_1329_ _)) =>
                                             let _stringappend_1330_ :=
                                               string_drop _stringappend_1327_
                                                 (build_ex
                                                 _stringappend_1329_) in
                                             match (reg_name_matches_prefix _stringappend_1330_) with
                                             | Some
                                               (_stringappend_1331_,(existT _ _stringappend_1332_ _)) =>
                                                let _stringappend_1333_ :=
                                                  string_drop _stringappend_1330_
                                                    (build_ex
                                                    _stringappend_1332_) in
                                                sep_matches_prefix _stringappend_1333_ >>= fun w__240 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__240 with
                                                               | Some
                                                                 (_stringappend_1334_,(existT _ _stringappend_1335_ _)) =>
                                                                  let _stringappend_1336_ :=
                                                                    string_drop _stringappend_1333_
                                                                      (build_ex
                                                                      _stringappend_1335_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_1336_) with
                                                                       | Some
                                                                         (_stringappend_1337_,(existT _ _stringappend_1338_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_1336_
                                                                                   (build_ex
                                                                                   _stringappend_1338_)) with
                                                                          | "" => true
                                                                          | _ => false
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__241 : bool =>
                                             returnm ((if (w__241) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__242 : bool =>
                                          returnm ((if (w__242) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__243 : bool =>
                                       returnm ((if (w__243) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__244 : bool =>
                                    returnm ((if (w__244) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__245 : bool =>
                                 (if (w__245) then
                                    match (shiftw_mnemonic_matches_prefix _stringappend_1112_) with
                                    | Some (_stringappend_1319_,(existT _ _stringappend_1320_ _)) =>
                                       returnm ((_stringappend_1319_, build_ex _stringappend_1320_)
                                        : (sop * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__247 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(op, existT _ _stringappend_1320_ _) :=
                                      w__247
                                       : (sop * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1321_ :=
                                      string_drop _stringappend_1112_ (build_ex _stringappend_1320_) in
                                    match (spc_matches_prefix _stringappend_1321_) with
                                    | Some (_stringappend_1322_,(existT _ _stringappend_1323_ _)) =>
                                       returnm ((_stringappend_1322_, build_ex _stringappend_1323_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__249 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_1323_ _) :=
                                      w__249
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1324_ :=
                                      string_drop _stringappend_1321_ (build_ex _stringappend_1323_) in
                                    match (reg_name_matches_prefix _stringappend_1324_) with
                                    | Some (_stringappend_1325_,(existT _ _stringappend_1326_ _)) =>
                                       returnm ((_stringappend_1325_, build_ex _stringappend_1326_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__251 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rd, existT _ _stringappend_1326_ _) :=
                                      w__251
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1327_ :=
                                      string_drop _stringappend_1324_ (build_ex _stringappend_1326_) in
                                    sep_matches_prefix _stringappend_1327_ >>= fun w__252 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__252 with
                                    | Some (_stringappend_1328_,(existT _ _stringappend_1329_ _)) =>
                                       returnm ((_stringappend_1328_, build_ex _stringappend_1329_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__254 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_1329_ _) :=
                                      w__254
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1330_ :=
                                      string_drop _stringappend_1327_ (build_ex _stringappend_1329_) in
                                    match (reg_name_matches_prefix _stringappend_1330_) with
                                    | Some (_stringappend_1331_,(existT _ _stringappend_1332_ _)) =>
                                       returnm ((_stringappend_1331_, build_ex _stringappend_1332_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__256 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rs1, existT _ _stringappend_1332_ _) :=
                                      w__256
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1333_ :=
                                      string_drop _stringappend_1330_ (build_ex _stringappend_1332_) in
                                    sep_matches_prefix _stringappend_1333_ >>= fun w__257 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__257 with
                                    | Some (_stringappend_1334_,(existT _ _stringappend_1335_ _)) =>
                                       returnm ((_stringappend_1334_, build_ex _stringappend_1335_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__259 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_1335_ _) :=
                                      w__259
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_1336_ :=
                                      string_drop _stringappend_1333_ (build_ex _stringappend_1335_) in
                                    match (hex_bits_5_matches_prefix _stringappend_1336_) with
                                    | Some (_stringappend_1337_,(existT _ _stringappend_1338_ _)) =>
                                       returnm ((_stringappend_1337_, build_ex _stringappend_1338_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__261 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(shamt, existT _ _stringappend_1338_ _) :=
                                      w__261
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    (match (string_drop _stringappend_1336_
                                              (build_ex
                                              _stringappend_1338_)) with
                                     | "" => returnm ((SHIFTW (shamt,rs1,rd,op))  : ast)
                                     | _ => exit tt  : M (ast)
                                     end)
                                     : M (ast)
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_1112_) with
                                    | Some (_stringappend_1340_,(existT _ _stringappend_1341_ _)) =>
                                       let _stringappend_1342_ :=
                                         string_drop _stringappend_1112_
                                           (build_ex
                                           _stringappend_1341_) in
                                       match (spc_matches_prefix _stringappend_1342_) with
                                       | Some (_stringappend_1343_,(existT _ _stringappend_1344_ _)) =>
                                          let _stringappend_1345_ :=
                                            string_drop _stringappend_1342_
                                              (build_ex
                                              _stringappend_1344_) in
                                          match (reg_name_matches_prefix _stringappend_1345_) with
                                          | Some
                                            (_stringappend_1346_,(existT _ _stringappend_1347_ _)) =>
                                             let _stringappend_1348_ :=
                                               string_drop _stringappend_1345_
                                                 (build_ex
                                                 _stringappend_1347_) in
                                             sep_matches_prefix _stringappend_1348_ >>= fun w__264 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__264 with
                                             | Some
                                               (_stringappend_1349_,(existT _ _stringappend_1350_ _)) =>
                                                let _stringappend_1351_ :=
                                                  string_drop _stringappend_1348_
                                                    (build_ex
                                                    _stringappend_1350_) in
                                                match (reg_name_matches_prefix _stringappend_1351_) with
                                                | Some
                                                  (_stringappend_1352_,(existT _ _stringappend_1353_ _)) =>
                                                   let _stringappend_1354_ :=
                                                     string_drop _stringappend_1351_
                                                       (build_ex
                                                       _stringappend_1353_) in
                                                   sep_matches_prefix _stringappend_1354_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__265 with
                                                                  | Some
                                                                    (_stringappend_1355_,(existT _ _stringappend_1356_ _)) =>
                                                                     let _stringappend_1357_ :=
                                                                       string_drop
                                                                         _stringappend_1354_
                                                                         (build_ex
                                                                         _stringappend_1356_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_1357_) with
                                                                          | Some
                                                                            (_stringappend_1358_,(existT _ _stringappend_1359_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_1357_
                                                                                      (build_ex
                                                                                      _stringappend_1359_)) with
                                                                             | "" => true
                                                                             | _ => false
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__266 : bool =>
                                                returnm ((if (w__266) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__267 : bool =>
                                             returnm ((if (w__267) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__268 : bool =>
                                          returnm ((if (w__268) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__269 : bool =>
                                       returnm ((if (w__269) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__270 : bool =>
                                    (if (w__270) then
                                       match (rtypew_mnemonic_matches_prefix _stringappend_1112_) with
                                       | Some (_stringappend_1340_,(existT _ _stringappend_1341_ _)) =>
                                          returnm ((_stringappend_1340_,
                                                    build_ex
                                                    _stringappend_1341_)
                                           : (ropw * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__272 : (ropw * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(op, existT _ _stringappend_1341_ _) :=
                                         w__272
                                          : (ropw * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1342_ :=
                                         string_drop _stringappend_1112_
                                           (build_ex
                                           _stringappend_1341_) in
                                       match (spc_matches_prefix _stringappend_1342_) with
                                       | Some (_stringappend_1343_,(existT _ _stringappend_1344_ _)) =>
                                          returnm ((_stringappend_1343_,
                                                    build_ex
                                                    _stringappend_1344_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__274 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_1344_ _) :=
                                         w__274
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1345_ :=
                                         string_drop _stringappend_1342_
                                           (build_ex
                                           _stringappend_1344_) in
                                       match (reg_name_matches_prefix _stringappend_1345_) with
                                       | Some (_stringappend_1346_,(existT _ _stringappend_1347_ _)) =>
                                          returnm ((_stringappend_1346_,
                                                    build_ex
                                                    _stringappend_1347_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__276 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rd, existT _ _stringappend_1347_ _) :=
                                         w__276
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1348_ :=
                                         string_drop _stringappend_1345_
                                           (build_ex
                                           _stringappend_1347_) in
                                       sep_matches_prefix _stringappend_1348_ >>= fun w__277 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__277 with
                                       | Some (_stringappend_1349_,(existT _ _stringappend_1350_ _)) =>
                                          returnm ((_stringappend_1349_,
                                                    build_ex
                                                    _stringappend_1350_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__279 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_1350_ _) :=
                                         w__279
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1351_ :=
                                         string_drop _stringappend_1348_
                                           (build_ex
                                           _stringappend_1350_) in
                                       match (reg_name_matches_prefix _stringappend_1351_) with
                                       | Some (_stringappend_1352_,(existT _ _stringappend_1353_ _)) =>
                                          returnm ((_stringappend_1352_,
                                                    build_ex
                                                    _stringappend_1353_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__281 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs1, existT _ _stringappend_1353_ _) :=
                                         w__281
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1354_ :=
                                         string_drop _stringappend_1351_
                                           (build_ex
                                           _stringappend_1353_) in
                                       sep_matches_prefix _stringappend_1354_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__282 with
                                       | Some (_stringappend_1355_,(existT _ _stringappend_1356_ _)) =>
                                          returnm ((_stringappend_1355_,
                                                    build_ex
                                                    _stringappend_1356_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__284 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_1356_ _) :=
                                         w__284
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_1357_ :=
                                         string_drop _stringappend_1354_
                                           (build_ex
                                           _stringappend_1356_) in
                                       match (reg_name_matches_prefix _stringappend_1357_) with
                                       | Some (_stringappend_1358_,(existT _ _stringappend_1359_ _)) =>
                                          returnm ((_stringappend_1358_,
                                                    build_ex
                                                    _stringappend_1359_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__286 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs2, existT _ _stringappend_1359_ _) :=
                                         w__286
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       (match (string_drop _stringappend_1357_
                                                 (build_ex
                                                 _stringappend_1359_)) with
                                        | "" => returnm ((RTYPEW (rs2,rs1,rd,op))  : ast)
                                        | _ => exit tt  : M (ast)
                                        end)
                                        : M (ast)
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_1112_) with
                                       | Some (_stringappend_1361_,(existT _ _stringappend_1362_ _)) =>
                                          let _stringappend_1363_ :=
                                            string_drop _stringappend_1112_
                                              (build_ex
                                              _stringappend_1362_) in
                                          match (spc_matches_prefix _stringappend_1363_) with
                                          | Some
                                            (_stringappend_1364_,(existT _ _stringappend_1365_ _)) =>
                                             let _stringappend_1366_ :=
                                               string_drop _stringappend_1363_
                                                 (build_ex
                                                 _stringappend_1365_) in
                                             match (reg_name_matches_prefix _stringappend_1366_) with
                                             | Some
                                               (_stringappend_1367_,(existT _ _stringappend_1368_ _)) =>
                                                let _stringappend_1369_ :=
                                                  string_drop _stringappend_1366_
                                                    (build_ex
                                                    _stringappend_1368_) in
                                                sep_matches_prefix _stringappend_1369_ >>= fun w__289 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__289 with
                                                               | Some
                                                                 (_stringappend_1370_,(existT _ _stringappend_1371_ _)) =>
                                                                  let _stringappend_1372_ :=
                                                                    string_drop _stringappend_1369_
                                                                      (build_ex
                                                                      _stringappend_1371_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_1372_) with
                                                                       | Some
                                                                         (_stringappend_1373_,(existT _ _stringappend_1374_ _)) =>
                                                                          let _stringappend_1375_ :=
                                                                            string_drop
                                                                              _stringappend_1372_
                                                                              (build_ex
                                                                              _stringappend_1374_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_1375_) with
                                                                               | Some
                                                                                 (_stringappend_1376_,(existT _ _stringappend_1377_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_1375_
                                                                                           (build_ex
                                                                                           _stringappend_1377_)) with
                                                                                  | "" => true
                                                                                  | _ => false
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__290 : bool =>
                                             returnm ((if (w__290) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__291 : bool =>
                                          returnm ((if (w__291) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__292 : bool =>
                                       (if (w__292) then
                                          match (shiftiwop_mnemonic_matches_prefix
                                                   _stringappend_1112_) with
                                          | Some
                                            (_stringappend_1361_,(existT _ _stringappend_1362_ _)) =>
                                             returnm ((_stringappend_1361_,
                                                       build_ex
                                                       _stringappend_1362_)
                                              : (sopw * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__294 : (sopw * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(op, existT _ _stringappend_1362_ _) :=
                                            w__294
                                             : (sopw * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_1363_ :=
                                            string_drop _stringappend_1112_
                                              (build_ex
                                              _stringappend_1362_) in
                                          match (spc_matches_prefix _stringappend_1363_) with
                                          | Some
                                            (_stringappend_1364_,(existT _ _stringappend_1365_ _)) =>
                                             returnm ((_stringappend_1364_,
                                                       build_ex
                                                       _stringappend_1365_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__296 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_1365_ _) :=
                                            w__296
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_1366_ :=
                                            string_drop _stringappend_1363_
                                              (build_ex
                                              _stringappend_1365_) in
                                          match (reg_name_matches_prefix _stringappend_1366_) with
                                          | Some
                                            (_stringappend_1367_,(existT _ _stringappend_1368_ _)) =>
                                             returnm ((_stringappend_1367_,
                                                       build_ex
                                                       _stringappend_1368_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__298 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rd, existT _ _stringappend_1368_ _) :=
                                            w__298
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_1369_ :=
                                            string_drop _stringappend_1366_
                                              (build_ex
                                              _stringappend_1368_) in
                                          sep_matches_prefix _stringappend_1369_ >>= fun w__299 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__299 with
                                          | Some
                                            (_stringappend_1370_,(existT _ _stringappend_1371_ _)) =>
                                             returnm ((_stringappend_1370_,
                                                       build_ex
                                                       _stringappend_1371_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__301 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_1371_ _) :=
                                            w__301
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_1372_ :=
                                            string_drop _stringappend_1369_
                                              (build_ex
                                              _stringappend_1371_) in
                                          match (reg_name_matches_prefix _stringappend_1372_) with
                                          | Some
                                            (_stringappend_1373_,(existT _ _stringappend_1374_ _)) =>
                                             returnm ((_stringappend_1373_,
                                                       build_ex
                                                       _stringappend_1374_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__303 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rs1, existT _ _stringappend_1374_ _) :=
                                            w__303
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_1375_ :=
                                            string_drop _stringappend_1372_
                                              (build_ex
                                              _stringappend_1374_) in
                                          match (hex_bits_5_matches_prefix _stringappend_1375_) with
                                          | Some
                                            (_stringappend_1376_,(existT _ _stringappend_1377_ _)) =>
                                             returnm ((_stringappend_1376_,
                                                       build_ex
                                                       _stringappend_1377_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__305 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(shamt, existT _ _stringappend_1377_ _) :=
                                            w__305
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          (match (string_drop _stringappend_1375_
                                                    (build_ex
                                                    _stringappend_1377_)) with
                                           | "" => returnm ((SHIFTIWOP (shamt,rs1,rd,op))  : ast)
                                           | _ => exit tt  : M (ast)
                                           end)
                                           : M (ast)
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_1112_) with
                                          | Some
                                            (_stringappend_1379_,(existT _ _stringappend_1380_ _)) =>
                                             let _stringappend_1381_ :=
                                               string_drop _stringappend_1112_
                                                 (build_ex
                                                 _stringappend_1380_) in
                                             match (spc_matches_prefix _stringappend_1381_) with
                                             | Some
                                               (_stringappend_1382_,(existT _ _stringappend_1383_ _)) =>
                                                let _stringappend_1384_ :=
                                                  string_drop _stringappend_1381_
                                                    (build_ex
                                                    _stringappend_1383_) in
                                                match (reg_name_matches_prefix _stringappend_1384_) with
                                                | Some
                                                  (_stringappend_1385_,(existT _ _stringappend_1386_ _)) =>
                                                   let _stringappend_1387_ :=
                                                     string_drop _stringappend_1384_
                                                       (build_ex
                                                       _stringappend_1386_) in
                                                   sep_matches_prefix _stringappend_1387_ >>= fun w__308 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__308 with
                                                   | Some
                                                     (_stringappend_1388_,(existT _ _stringappend_1389_ _)) =>
                                                      let _stringappend_1390_ :=
                                                        string_drop _stringappend_1387_
                                                          (build_ex
                                                          _stringappend_1389_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_1390_) with
                                                      | Some
                                                        (_stringappend_1391_,(existT _ _stringappend_1392_ _)) =>
                                                         let _stringappend_1393_ :=
                                                           string_drop _stringappend_1390_
                                                             (build_ex
                                                             _stringappend_1392_) in
                                                         sep_matches_prefix _stringappend_1393_ >>= fun w__309 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__309 with
                                                                        | Some
                                                                          (_stringappend_1394_,(existT _ _stringappend_1395_ _)) =>
                                                                           let _stringappend_1396_ :=
                                                                             string_drop
                                                                               _stringappend_1393_
                                                                               (build_ex
                                                                               _stringappend_1395_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_1396_) with
                                                                                | Some
                                                                                  (_stringappend_1397_,(existT _ _stringappend_1398_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_1396_
                                                                                            (build_ex
                                                                                            _stringappend_1398_)) with
                                                                                   | "" => true
                                                                                   | _ => false
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__310 : bool =>
                                                      returnm ((if (w__310) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__311 : bool =>
                                                   returnm ((if (w__311) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__312 : bool =>
                                                returnm ((if (w__312) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__313 : bool =>
                                             returnm ((if (w__313) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__314 : bool =>
                                          (if (w__314) then
                                             match (mul_mnemonic_matches_prefix _stringappend_1112_) with
                                             | Some
                                               (_stringappend_1379_,(existT _ _stringappend_1380_ _)) =>
                                                returnm ((_stringappend_1379_,
                                                          build_ex
                                                          _stringappend_1380_)
                                                 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             | _ =>
                                                exit tt
                                                 : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             end >>= fun w__316 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '((high, signed1, signed2), existT _ _stringappend_1380_ _) :=
                                               w__316
                                                : ((bool * bool * bool) * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1381_ :=
                                               string_drop _stringappend_1112_
                                                 (build_ex
                                                 _stringappend_1380_) in
                                             match (spc_matches_prefix _stringappend_1381_) with
                                             | Some
                                               (_stringappend_1382_,(existT _ _stringappend_1383_ _)) =>
                                                returnm ((_stringappend_1382_,
                                                          build_ex
                                                          _stringappend_1383_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__318 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_1383_ _) :=
                                               w__318
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1384_ :=
                                               string_drop _stringappend_1381_
                                                 (build_ex
                                                 _stringappend_1383_) in
                                             match (reg_name_matches_prefix _stringappend_1384_) with
                                             | Some
                                               (_stringappend_1385_,(existT _ _stringappend_1386_ _)) =>
                                                returnm ((_stringappend_1385_,
                                                          build_ex
                                                          _stringappend_1386_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__320 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rd, existT _ _stringappend_1386_ _) :=
                                               w__320
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1387_ :=
                                               string_drop _stringappend_1384_
                                                 (build_ex
                                                 _stringappend_1386_) in
                                             sep_matches_prefix _stringappend_1387_ >>= fun w__321 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__321 with
                                             | Some
                                               (_stringappend_1388_,(existT _ _stringappend_1389_ _)) =>
                                                returnm ((_stringappend_1388_,
                                                          build_ex
                                                          _stringappend_1389_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__323 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_1389_ _) :=
                                               w__323
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1390_ :=
                                               string_drop _stringappend_1387_
                                                 (build_ex
                                                 _stringappend_1389_) in
                                             match (reg_name_matches_prefix _stringappend_1390_) with
                                             | Some
                                               (_stringappend_1391_,(existT _ _stringappend_1392_ _)) =>
                                                returnm ((_stringappend_1391_,
                                                          build_ex
                                                          _stringappend_1392_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__325 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs1, existT _ _stringappend_1392_ _) :=
                                               w__325
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1393_ :=
                                               string_drop _stringappend_1390_
                                                 (build_ex
                                                 _stringappend_1392_) in
                                             sep_matches_prefix _stringappend_1393_ >>= fun w__326 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__326 with
                                             | Some
                                               (_stringappend_1394_,(existT _ _stringappend_1395_ _)) =>
                                                returnm ((_stringappend_1394_,
                                                          build_ex
                                                          _stringappend_1395_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__328 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_1395_ _) :=
                                               w__328
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_1396_ :=
                                               string_drop _stringappend_1393_
                                                 (build_ex
                                                 _stringappend_1395_) in
                                             match (reg_name_matches_prefix _stringappend_1396_) with
                                             | Some
                                               (_stringappend_1397_,(existT _ _stringappend_1398_ _)) =>
                                                returnm ((_stringappend_1397_,
                                                          build_ex
                                                          _stringappend_1398_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__330 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs2, existT _ _stringappend_1398_ _) :=
                                               w__330
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             (match (string_drop _stringappend_1396_
                                                       (build_ex
                                                       _stringappend_1398_)) with
                                              | "" =>
                                                 returnm ((MUL (rs2,rs1,rd,high,signed1,signed2))
                                                  : ast)
                                              | _ => exit tt  : M (ast)
                                              end)
                                              : M (ast)
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_1112_
                                                            "div")
                                                 : bool))
                                               (let _stringappend_1400_ :=
                                                 string_drop _stringappend_1112_
                                                   (string_length "div") in
                                               match (maybe_not_u_matches_prefix _stringappend_1400_) with
                                               | Some
                                                 (_stringappend_1401_,(existT _ _stringappend_1402_ _)) =>
                                                  let _stringappend_1403_ :=
                                                    string_drop _stringappend_1400_
                                                      (build_ex
                                                      _stringappend_1402_) in
                                                  match (spc_matches_prefix _stringappend_1403_) with
                                                  | Some
                                                    (_stringappend_1404_,(existT _ _stringappend_1405_ _)) =>
                                                     let _stringappend_1406_ :=
                                                       string_drop _stringappend_1403_
                                                         (build_ex
                                                         _stringappend_1405_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_1406_) with
                                                     | Some
                                                       (_stringappend_1407_,(existT _ _stringappend_1408_ _)) =>
                                                        let _stringappend_1409_ :=
                                                          string_drop _stringappend_1406_
                                                            (build_ex
                                                            _stringappend_1408_) in
                                                        sep_matches_prefix _stringappend_1409_ >>= fun w__333 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__333 with
                                                        | Some
                                                          (_stringappend_1410_,(existT _ _stringappend_1411_ _)) =>
                                                           let _stringappend_1412_ :=
                                                             string_drop _stringappend_1409_
                                                               (build_ex
                                                               _stringappend_1411_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_1412_) with
                                                           | Some
                                                             (_stringappend_1413_,(existT _ _stringappend_1414_ _)) =>
                                                              let _stringappend_1415_ :=
                                                                string_drop _stringappend_1412_
                                                                  (build_ex
                                                                  _stringappend_1414_) in
                                                              sep_matches_prefix _stringappend_1415_ >>= fun w__334 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__334 with
                                                                             | Some
                                                                               (_stringappend_1416_,(existT _ _stringappend_1417_ _)) =>
                                                                                let _stringappend_1418_ :=
                                                                                  string_drop
                                                                                    _stringappend_1415_
                                                                                    (build_ex
                                                                                    _stringappend_1417_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_1418_) with
                                                                                     | Some
                                                                                       (_stringappend_1419_,(existT _ _stringappend_1420_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_1418_
                                                                                                 (build_ex
                                                                                                 _stringappend_1420_)) with
                                                                                        | "" => true
                                                                                        | _ => false
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__335 : bool =>
                                                           returnm ((if (w__335) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__336 : bool =>
                                                        returnm ((if (w__336) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__337 : bool =>
                                                     returnm ((if (w__337) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__338 : bool =>
                                                  returnm ((if (w__338) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__339 : bool =>
                                               returnm ((if (w__339) then true
                                                         else false)
                                                : bool)) >>= fun w__340 : bool =>
                                             (if (w__340) then
                                                let _stringappend_1400_ :=
                                                  string_drop _stringappend_1112_
                                                    (string_length "div") in
                                                match (maybe_not_u_matches_prefix
                                                         _stringappend_1400_) with
                                                | Some
                                                  (_stringappend_1401_,(existT _ _stringappend_1402_ _)) =>
                                                   returnm ((_stringappend_1401_,
                                                             build_ex
                                                             _stringappend_1402_)
                                                    : (bool * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__342 : (bool * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(s, existT _ _stringappend_1402_ _) :=
                                                  w__342
                                                   : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1403_ :=
                                                  string_drop _stringappend_1400_
                                                    (build_ex
                                                    _stringappend_1402_) in
                                                match (spc_matches_prefix _stringappend_1403_) with
                                                | Some
                                                  (_stringappend_1404_,(existT _ _stringappend_1405_ _)) =>
                                                   returnm ((_stringappend_1404_,
                                                             build_ex
                                                             _stringappend_1405_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__344 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_1405_ _) :=
                                                  w__344
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1406_ :=
                                                  string_drop _stringappend_1403_
                                                    (build_ex
                                                    _stringappend_1405_) in
                                                match (reg_name_matches_prefix _stringappend_1406_) with
                                                | Some
                                                  (_stringappend_1407_,(existT _ _stringappend_1408_ _)) =>
                                                   returnm ((_stringappend_1407_,
                                                             build_ex
                                                             _stringappend_1408_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__346 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rd, existT _ _stringappend_1408_ _) :=
                                                  w__346
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1409_ :=
                                                  string_drop _stringappend_1406_
                                                    (build_ex
                                                    _stringappend_1408_) in
                                                sep_matches_prefix _stringappend_1409_ >>= fun w__347 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__347 with
                                                | Some
                                                  (_stringappend_1410_,(existT _ _stringappend_1411_ _)) =>
                                                   returnm ((_stringappend_1410_,
                                                             build_ex
                                                             _stringappend_1411_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__349 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_1411_ _) :=
                                                  w__349
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1412_ :=
                                                  string_drop _stringappend_1409_
                                                    (build_ex
                                                    _stringappend_1411_) in
                                                match (reg_name_matches_prefix _stringappend_1412_) with
                                                | Some
                                                  (_stringappend_1413_,(existT _ _stringappend_1414_ _)) =>
                                                   returnm ((_stringappend_1413_,
                                                             build_ex
                                                             _stringappend_1414_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__351 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs1, existT _ _stringappend_1414_ _) :=
                                                  w__351
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1415_ :=
                                                  string_drop _stringappend_1412_
                                                    (build_ex
                                                    _stringappend_1414_) in
                                                sep_matches_prefix _stringappend_1415_ >>= fun w__352 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__352 with
                                                | Some
                                                  (_stringappend_1416_,(existT _ _stringappend_1417_ _)) =>
                                                   returnm ((_stringappend_1416_,
                                                             build_ex
                                                             _stringappend_1417_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__354 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_1417_ _) :=
                                                  w__354
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_1418_ :=
                                                  string_drop _stringappend_1415_
                                                    (build_ex
                                                    _stringappend_1417_) in
                                                match (reg_name_matches_prefix _stringappend_1418_) with
                                                | Some
                                                  (_stringappend_1419_,(existT _ _stringappend_1420_ _)) =>
                                                   returnm ((_stringappend_1419_,
                                                             build_ex
                                                             _stringappend_1420_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__356 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs2, existT _ _stringappend_1420_ _) :=
                                                  w__356
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                (match (string_drop _stringappend_1418_
                                                          (build_ex
                                                          _stringappend_1420_)) with
                                                 | "" => returnm ((DIV (rs2,rs1,rd,s))  : ast)
                                                 | _ => exit tt  : M (ast)
                                                 end)
                                                 : M (ast)
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_1112_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_1422_ :=
                                                    string_drop _stringappend_1112_
                                                      (string_length "rem") in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_1422_) with
                                                  | Some
                                                    (_stringappend_1423_,(existT _ _stringappend_1424_ _)) =>
                                                     let _stringappend_1425_ :=
                                                       string_drop _stringappend_1422_
                                                         (build_ex
                                                         _stringappend_1424_) in
                                                     match (spc_matches_prefix _stringappend_1425_) with
                                                     | Some
                                                       (_stringappend_1426_,(existT _ _stringappend_1427_ _)) =>
                                                        let _stringappend_1428_ :=
                                                          string_drop _stringappend_1425_
                                                            (build_ex
                                                            _stringappend_1427_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_1428_) with
                                                        | Some
                                                          (_stringappend_1429_,(existT _ _stringappend_1430_ _)) =>
                                                           let _stringappend_1431_ :=
                                                             string_drop _stringappend_1428_
                                                               (build_ex
                                                               _stringappend_1430_) in
                                                           sep_matches_prefix _stringappend_1431_ >>= fun w__359 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__359 with
                                                           | Some
                                                             (_stringappend_1432_,(existT _ _stringappend_1433_ _)) =>
                                                              let _stringappend_1434_ :=
                                                                string_drop _stringappend_1431_
                                                                  (build_ex
                                                                  _stringappend_1433_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_1434_) with
                                                              | Some
                                                                (_stringappend_1435_,(existT _ _stringappend_1436_ _)) =>
                                                                 let _stringappend_1437_ :=
                                                                   string_drop _stringappend_1434_
                                                                     (build_ex
                                                                     _stringappend_1436_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_1437_ >>= fun w__360 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__360 with
                                                                                | Some
                                                                                  (_stringappend_1438_,(existT _ _stringappend_1439_ _)) =>
                                                                                   let _stringappend_1440_ :=
                                                                                     string_drop
                                                                                       _stringappend_1437_
                                                                                       (build_ex
                                                                                       _stringappend_1439_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_1440_) with
                                                                                        | Some
                                                                                          (_stringappend_1441_,(existT _ _stringappend_1442_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_1440_
                                                                                                    (build_ex
                                                                                                    _stringappend_1442_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__361 : bool =>
                                                              returnm ((if (w__361) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__362 : bool =>
                                                           returnm ((if (w__362) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__363 : bool =>
                                                        returnm ((if (w__363) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__364 : bool =>
                                                     returnm ((if (w__364) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__365 : bool =>
                                                  returnm ((if (w__365) then true
                                                            else false)
                                                   : bool)) >>= fun w__366 : bool =>
                                                (if (w__366) then
                                                   let _stringappend_1422_ :=
                                                     string_drop _stringappend_1112_
                                                       (string_length "rem") in
                                                   match (maybe_not_u_matches_prefix
                                                            _stringappend_1422_) with
                                                   | Some
                                                     (_stringappend_1423_,(existT _ _stringappend_1424_ _)) =>
                                                      returnm ((_stringappend_1423_,
                                                                build_ex
                                                                _stringappend_1424_)
                                                       : (bool * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__368 : (bool * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(s, existT _ _stringappend_1424_ _) :=
                                                     w__368
                                                      : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1425_ :=
                                                     string_drop _stringappend_1422_
                                                       (build_ex
                                                       _stringappend_1424_) in
                                                   match (spc_matches_prefix _stringappend_1425_) with
                                                   | Some
                                                     (_stringappend_1426_,(existT _ _stringappend_1427_ _)) =>
                                                      returnm ((_stringappend_1426_,
                                                                build_ex
                                                                _stringappend_1427_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__370 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_1427_ _) :=
                                                     w__370
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1428_ :=
                                                     string_drop _stringappend_1425_
                                                       (build_ex
                                                       _stringappend_1427_) in
                                                   match (reg_name_matches_prefix
                                                            _stringappend_1428_) with
                                                   | Some
                                                     (_stringappend_1429_,(existT _ _stringappend_1430_ _)) =>
                                                      returnm ((_stringappend_1429_,
                                                                build_ex
                                                                _stringappend_1430_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__372 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rd, existT _ _stringappend_1430_ _) :=
                                                     w__372
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1431_ :=
                                                     string_drop _stringappend_1428_
                                                       (build_ex
                                                       _stringappend_1430_) in
                                                   sep_matches_prefix _stringappend_1431_ >>= fun w__373 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__373 with
                                                   | Some
                                                     (_stringappend_1432_,(existT _ _stringappend_1433_ _)) =>
                                                      returnm ((_stringappend_1432_,
                                                                build_ex
                                                                _stringappend_1433_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__375 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_1433_ _) :=
                                                     w__375
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1434_ :=
                                                     string_drop _stringappend_1431_
                                                       (build_ex
                                                       _stringappend_1433_) in
                                                   match (reg_name_matches_prefix
                                                            _stringappend_1434_) with
                                                   | Some
                                                     (_stringappend_1435_,(existT _ _stringappend_1436_ _)) =>
                                                      returnm ((_stringappend_1435_,
                                                                build_ex
                                                                _stringappend_1436_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__377 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs1, existT _ _stringappend_1436_ _) :=
                                                     w__377
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1437_ :=
                                                     string_drop _stringappend_1434_
                                                       (build_ex
                                                       _stringappend_1436_) in
                                                   sep_matches_prefix _stringappend_1437_ >>= fun w__378 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__378 with
                                                   | Some
                                                     (_stringappend_1438_,(existT _ _stringappend_1439_ _)) =>
                                                      returnm ((_stringappend_1438_,
                                                                build_ex
                                                                _stringappend_1439_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__380 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_1439_ _) :=
                                                     w__380
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_1440_ :=
                                                     string_drop _stringappend_1437_
                                                       (build_ex
                                                       _stringappend_1439_) in
                                                   match (reg_name_matches_prefix
                                                            _stringappend_1440_) with
                                                   | Some
                                                     (_stringappend_1441_,(existT _ _stringappend_1442_ _)) =>
                                                      returnm ((_stringappend_1441_,
                                                                build_ex
                                                                _stringappend_1442_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__382 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs2, existT _ _stringappend_1442_ _) :=
                                                     w__382
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   (match (string_drop _stringappend_1440_
                                                             (build_ex
                                                             _stringappend_1442_)) with
                                                    | "" => returnm ((REM (rs2,rs1,rd,s))  : ast)
                                                    | _ => exit tt  : M (ast)
                                                    end)
                                                    : M (ast)
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith
                                                                  _stringappend_1112_ "mulw")
                                                       : bool))
                                                     (let _stringappend_1444_ :=
                                                       string_drop _stringappend_1112_
                                                         (string_length "mulw") in
                                                     match (spc_matches_prefix _stringappend_1444_) with
                                                     | Some
                                                       (_stringappend_1445_,(existT _ _stringappend_1446_ _)) =>
                                                        let _stringappend_1447_ :=
                                                          string_drop _stringappend_1444_
                                                            (build_ex
                                                            _stringappend_1446_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_1447_) with
                                                        | Some
                                                          (_stringappend_1448_,(existT _ _stringappend_1449_ _)) =>
                                                           let _stringappend_1450_ :=
                                                             string_drop _stringappend_1447_
                                                               (build_ex
                                                               _stringappend_1449_) in
                                                           sep_matches_prefix _stringappend_1450_ >>= fun w__385 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__385 with
                                                           | Some
                                                             (_stringappend_1451_,(existT _ _stringappend_1452_ _)) =>
                                                              let _stringappend_1453_ :=
                                                                string_drop _stringappend_1450_
                                                                  (build_ex
                                                                  _stringappend_1452_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_1453_) with
                                                              | Some
                                                                (_stringappend_1454_,(existT _ _stringappend_1455_ _)) =>
                                                                 let _stringappend_1456_ :=
                                                                   string_drop _stringappend_1453_
                                                                     (build_ex
                                                                     _stringappend_1455_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_1456_ >>= fun w__386 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__386 with
                                                                                | Some
                                                                                  (_stringappend_1457_,(existT _ _stringappend_1458_ _)) =>
                                                                                   let _stringappend_1459_ :=
                                                                                     string_drop
                                                                                       _stringappend_1456_
                                                                                       (build_ex
                                                                                       _stringappend_1458_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_1459_) with
                                                                                        | Some
                                                                                          (_stringappend_1460_,(existT _ _stringappend_1461_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_1459_
                                                                                                    (build_ex
                                                                                                    _stringappend_1461_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__387 : bool =>
                                                              returnm ((if (w__387) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__388 : bool =>
                                                           returnm ((if (w__388) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__389 : bool =>
                                                        returnm ((if (w__389) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__390 : bool =>
                                                     returnm ((if (w__390) then true
                                                               else false)
                                                      : bool)) >>= fun w__391 : bool =>
                                                   (if (w__391) then
                                                      let _stringappend_1444_ :=
                                                        string_drop _stringappend_1112_
                                                          (string_length "mulw") in
                                                      match (spc_matches_prefix _stringappend_1444_) with
                                                      | Some
                                                        (_stringappend_1445_,(existT _ _stringappend_1446_ _)) =>
                                                         returnm ((_stringappend_1445_,
                                                                   build_ex
                                                                   _stringappend_1446_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__393 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_1446_ _) :=
                                                        w__393
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_1447_ :=
                                                        string_drop _stringappend_1444_
                                                          (build_ex
                                                          _stringappend_1446_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_1447_) with
                                                      | Some
                                                        (_stringappend_1448_,(existT _ _stringappend_1449_ _)) =>
                                                         returnm ((_stringappend_1448_,
                                                                   build_ex
                                                                   _stringappend_1449_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__395 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rd, existT _ _stringappend_1449_ _) :=
                                                        w__395
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_1450_ :=
                                                        string_drop _stringappend_1447_
                                                          (build_ex
                                                          _stringappend_1449_) in
                                                      sep_matches_prefix _stringappend_1450_ >>= fun w__396 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__396 with
                                                      | Some
                                                        (_stringappend_1451_,(existT _ _stringappend_1452_ _)) =>
                                                         returnm ((_stringappend_1451_,
                                                                   build_ex
                                                                   _stringappend_1452_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__398 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_1452_ _) :=
                                                        w__398
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_1453_ :=
                                                        string_drop _stringappend_1450_
                                                          (build_ex
                                                          _stringappend_1452_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_1453_) with
                                                      | Some
                                                        (_stringappend_1454_,(existT _ _stringappend_1455_ _)) =>
                                                         returnm ((_stringappend_1454_,
                                                                   build_ex
                                                                   _stringappend_1455_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__400 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs1, existT _ _stringappend_1455_ _) :=
                                                        w__400
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_1456_ :=
                                                        string_drop _stringappend_1453_
                                                          (build_ex
                                                          _stringappend_1455_) in
                                                      sep_matches_prefix _stringappend_1456_ >>= fun w__401 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__401 with
                                                      | Some
                                                        (_stringappend_1457_,(existT _ _stringappend_1458_ _)) =>
                                                         returnm ((_stringappend_1457_,
                                                                   build_ex
                                                                   _stringappend_1458_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__403 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_1458_ _) :=
                                                        w__403
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_1459_ :=
                                                        string_drop _stringappend_1456_
                                                          (build_ex
                                                          _stringappend_1458_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_1459_) with
                                                      | Some
                                                        (_stringappend_1460_,(existT _ _stringappend_1461_ _)) =>
                                                         returnm ((_stringappend_1460_,
                                                                   build_ex
                                                                   _stringappend_1461_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__405 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs2, existT _ _stringappend_1461_ _) :=
                                                        w__405
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      (match (string_drop _stringappend_1459_
                                                                (build_ex
                                                                _stringappend_1461_)) with
                                                       | "" => returnm ((MULW (rs2,rs1,rd))  : ast)
                                                       | _ => exit tt  : M (ast)
                                                       end)
                                                       : M (ast)
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_1112_ "div")
                                                          : bool))
                                                        (let _stringappend_1463_ :=
                                                          string_drop _stringappend_1112_
                                                            (string_length "div") in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_1463_) with
                                                        | Some
                                                          (_stringappend_1464_,(existT _ _stringappend_1465_ _)) =>
                                                           let _stringappend_1466_ :=
                                                             string_drop _stringappend_1463_
                                                               (build_ex
                                                               _stringappend_1465_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_1466_ "w")
                                                               : bool))
                                                             (let _stringappend_1467_ :=
                                                               string_drop _stringappend_1466_
                                                                 (string_length "w") in
                                                             match (spc_matches_prefix
                                                                      _stringappend_1467_) with
                                                             | Some
                                                               (_stringappend_1468_,(existT _ _stringappend_1469_ _)) =>
                                                                let _stringappend_1470_ :=
                                                                  string_drop _stringappend_1467_
                                                                    (build_ex
                                                                    _stringappend_1469_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_1470_) with
                                                                | Some
                                                                  (_stringappend_1471_,(existT _ _stringappend_1472_ _)) =>
                                                                   let _stringappend_1473_ :=
                                                                     string_drop _stringappend_1470_
                                                                       (build_ex
                                                                       _stringappend_1472_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_1473_ >>= fun w__408 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__408 with
                                                                   | Some
                                                                     (_stringappend_1474_,(existT _ _stringappend_1475_ _)) =>
                                                                      let _stringappend_1476_ :=
                                                                        string_drop
                                                                          _stringappend_1473_
                                                                          (build_ex
                                                                          _stringappend_1475_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_1476_) with
                                                                      | Some
                                                                        (_stringappend_1477_,(existT _ _stringappend_1478_ _)) =>
                                                                         let _stringappend_1479_ :=
                                                                           string_drop
                                                                             _stringappend_1476_
                                                                             (build_ex
                                                                             _stringappend_1478_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_1479_ >>= fun w__409 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__409 with
                                                                                        | Some
                                                                                          (_stringappend_1480_,(existT _ _stringappend_1481_ _)) =>
                                                                                           let _stringappend_1482_ :=
                                                                                             string_drop
                                                                                               _stringappend_1479_
                                                                                               (build_ex
                                                                                               _stringappend_1481_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_1482_) with
                                                                                                | Some
                                                                                                  (_stringappend_1483_,(existT _ _stringappend_1484_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_1482_
                                                                                                            (build_ex
                                                                                                            _stringappend_1484_)) with
                                                                                                   | "" =>
                                                                                                      true
                                                                                                   | _ =>
                                                                                                      false
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__410 : bool =>
                                                                      returnm ((if (w__410) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__411 : bool =>
                                                                   returnm ((if (w__411) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__412 : bool =>
                                                                returnm ((if (w__412) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__413 : bool =>
                                                             returnm ((if (w__413) then true
                                                                       else false)
                                                              : bool)) >>= fun w__414 : bool =>
                                                           returnm ((if (w__414) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__415 : bool =>
                                                        returnm ((if (w__415) then true
                                                                  else false)
                                                         : bool)) >>= fun w__416 : bool =>
                                                      (if (w__416) then
                                                         let _stringappend_1463_ :=
                                                           string_drop _stringappend_1112_
                                                             (string_length "div") in
                                                         match (maybe_not_u_matches_prefix
                                                                  _stringappend_1463_) with
                                                         | Some
                                                           (_stringappend_1464_,(existT _ _stringappend_1465_ _)) =>
                                                            returnm ((_stringappend_1464_,
                                                                      build_ex
                                                                      _stringappend_1465_)
                                                             : (bool * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__418 : (bool * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(s, existT _ _stringappend_1465_ _) :=
                                                           w__418
                                                            : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1466_ :=
                                                           string_drop _stringappend_1463_
                                                             (build_ex
                                                             _stringappend_1465_) in
                                                         let _stringappend_1467_ :=
                                                           string_drop _stringappend_1466_
                                                             (string_length "w") in
                                                         match (spc_matches_prefix
                                                                  _stringappend_1467_) with
                                                         | Some
                                                           (_stringappend_1468_,(existT _ _stringappend_1469_ _)) =>
                                                            returnm ((_stringappend_1468_,
                                                                      build_ex
                                                                      _stringappend_1469_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__420 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_1469_ _) :=
                                                           w__420
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1470_ :=
                                                           string_drop _stringappend_1467_
                                                             (build_ex
                                                             _stringappend_1469_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_1470_) with
                                                         | Some
                                                           (_stringappend_1471_,(existT _ _stringappend_1472_ _)) =>
                                                            returnm ((_stringappend_1471_,
                                                                      build_ex
                                                                      _stringappend_1472_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__422 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rd, existT _ _stringappend_1472_ _) :=
                                                           w__422
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1473_ :=
                                                           string_drop _stringappend_1470_
                                                             (build_ex
                                                             _stringappend_1472_) in
                                                         sep_matches_prefix _stringappend_1473_ >>= fun w__423 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__423 with
                                                         | Some
                                                           (_stringappend_1474_,(existT _ _stringappend_1475_ _)) =>
                                                            returnm ((_stringappend_1474_,
                                                                      build_ex
                                                                      _stringappend_1475_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__425 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_1475_ _) :=
                                                           w__425
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1476_ :=
                                                           string_drop _stringappend_1473_
                                                             (build_ex
                                                             _stringappend_1475_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_1476_) with
                                                         | Some
                                                           (_stringappend_1477_,(existT _ _stringappend_1478_ _)) =>
                                                            returnm ((_stringappend_1477_,
                                                                      build_ex
                                                                      _stringappend_1478_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__427 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs1, existT _ _stringappend_1478_ _) :=
                                                           w__427
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1479_ :=
                                                           string_drop _stringappend_1476_
                                                             (build_ex
                                                             _stringappend_1478_) in
                                                         sep_matches_prefix _stringappend_1479_ >>= fun w__428 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__428 with
                                                         | Some
                                                           (_stringappend_1480_,(existT _ _stringappend_1481_ _)) =>
                                                            returnm ((_stringappend_1480_,
                                                                      build_ex
                                                                      _stringappend_1481_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__430 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_1481_ _) :=
                                                           w__430
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_1482_ :=
                                                           string_drop _stringappend_1479_
                                                             (build_ex
                                                             _stringappend_1481_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_1482_) with
                                                         | Some
                                                           (_stringappend_1483_,(existT _ _stringappend_1484_ _)) =>
                                                            returnm ((_stringappend_1483_,
                                                                      build_ex
                                                                      _stringappend_1484_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__432 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs2, existT _ _stringappend_1484_ _) :=
                                                           w__432
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         (match (string_drop _stringappend_1482_
                                                                   (build_ex
                                                                   _stringappend_1484_)) with
                                                          | "" =>
                                                             returnm ((DIVW (rs2,rs1,rd,s))  : ast)
                                                          | _ => exit tt  : M (ast)
                                                          end)
                                                          : M (ast)
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_1112_ "rem")
                                                             : bool))
                                                           (let _stringappend_1486_ :=
                                                             string_drop _stringappend_1112_
                                                               (string_length "rem") in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_1486_) with
                                                           | Some
                                                             (_stringappend_1487_,(existT _ _stringappend_1488_ _)) =>
                                                              let _stringappend_1489_ :=
                                                                string_drop _stringappend_1486_
                                                                  (build_ex
                                                                  _stringappend_1488_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_1489_ "w")
                                                                  : bool))
                                                                (let _stringappend_1490_ :=
                                                                  string_drop _stringappend_1489_
                                                                    (string_length "w") in
                                                                match (spc_matches_prefix
                                                                         _stringappend_1490_) with
                                                                | Some
                                                                  (_stringappend_1491_,(existT _ _stringappend_1492_ _)) =>
                                                                   let _stringappend_1493_ :=
                                                                     string_drop _stringappend_1490_
                                                                       (build_ex
                                                                       _stringappend_1492_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_1493_) with
                                                                   | Some
                                                                     (_stringappend_1494_,(existT _ _stringappend_1495_ _)) =>
                                                                      let _stringappend_1496_ :=
                                                                        string_drop
                                                                          _stringappend_1493_
                                                                          (build_ex
                                                                          _stringappend_1495_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_1496_ >>= fun w__435 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__435 with
                                                                      | Some
                                                                        (_stringappend_1497_,(existT _ _stringappend_1498_ _)) =>
                                                                         let _stringappend_1499_ :=
                                                                           string_drop
                                                                             _stringappend_1496_
                                                                             (build_ex
                                                                             _stringappend_1498_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_1499_) with
                                                                         | Some
                                                                           (_stringappend_1500_,(existT _ _stringappend_1501_ _)) =>
                                                                            let _stringappend_1502_ :=
                                                                              string_drop
                                                                                _stringappend_1499_
                                                                                (build_ex
                                                                                _stringappend_1501_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1502_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__436 with
                                                                                           | Some
                                                                                             (_stringappend_1503_,(existT _ _stringappend_1504_ _)) =>
                                                                                              let _stringappend_1505_ :=
                                                                                                string_drop
                                                                                                  _stringappend_1502_
                                                                                                  (build_ex
                                                                                                  _stringappend_1504_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_1505_) with
                                                                                                   | Some
                                                                                                     (_stringappend_1506_,(existT _ _stringappend_1507_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_1505_
                                                                                                               (build_ex
                                                                                                               _stringappend_1507_)) with
                                                                                                      | "" =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__437 : bool =>
                                                                         returnm ((if (w__437) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__438 : bool =>
                                                                      returnm ((if (w__438) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__439 : bool =>
                                                                   returnm ((if (w__439) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__440 : bool =>
                                                                returnm ((if (w__440) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__441 : bool =>
                                                              returnm ((if (w__441) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__442 : bool =>
                                                           returnm ((if (w__442) then true
                                                                     else false)
                                                            : bool)) >>= fun w__443 : bool =>
                                                         (if (w__443) then
                                                            let _stringappend_1486_ :=
                                                              string_drop _stringappend_1112_
                                                                (string_length "rem") in
                                                            match (maybe_not_u_matches_prefix
                                                                     _stringappend_1486_) with
                                                            | Some
                                                              (_stringappend_1487_,(existT _ _stringappend_1488_ _)) =>
                                                               returnm ((_stringappend_1487_,
                                                                         build_ex
                                                                         _stringappend_1488_)
                                                                : (bool * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__445 : (bool * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(s, existT _ _stringappend_1488_ _) :=
                                                              w__445
                                                               : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_1489_ :=
                                                              string_drop _stringappend_1486_
                                                                (build_ex
                                                                _stringappend_1488_) in
                                                            let _stringappend_1490_ :=
                                                              string_drop _stringappend_1489_
                                                                (string_length "w") in
                                                            match (spc_matches_prefix
                                                                     _stringappend_1490_) with
                                                            | Some
                                                              (_stringappend_1491_,(existT _ _stringappend_1492_ _)) =>
                                                               returnm ((_stringappend_1491_,
                                                                         build_ex
                                                                         _stringappend_1492_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__447 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_1492_ _) :=
                                                              w__447
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_1493_ :=
                                                              string_drop _stringappend_1490_
                                                                (build_ex
                                                                _stringappend_1492_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_1493_) with
                                                            | Some
                                                              (_stringappend_1494_,(existT _ _stringappend_1495_ _)) =>
                                                               returnm ((_stringappend_1494_,
                                                                         build_ex
                                                                         _stringappend_1495_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__449 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rd, existT _ _stringappend_1495_ _) :=
                                                              w__449
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_1496_ :=
                                                              string_drop _stringappend_1493_
                                                                (build_ex
                                                                _stringappend_1495_) in
                                                            sep_matches_prefix _stringappend_1496_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__450 with
                                                            | Some
                                                              (_stringappend_1497_,(existT _ _stringappend_1498_ _)) =>
                                                               returnm ((_stringappend_1497_,
                                                                         build_ex
                                                                         _stringappend_1498_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__452 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_1498_ _) :=
                                                              w__452
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_1499_ :=
                                                              string_drop _stringappend_1496_
                                                                (build_ex
                                                                _stringappend_1498_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_1499_) with
                                                            | Some
                                                              (_stringappend_1500_,(existT _ _stringappend_1501_ _)) =>
                                                               returnm ((_stringappend_1500_,
                                                                         build_ex
                                                                         _stringappend_1501_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__454 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs1, existT _ _stringappend_1501_ _) :=
                                                              w__454
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_1502_ :=
                                                              string_drop _stringappend_1499_
                                                                (build_ex
                                                                _stringappend_1501_) in
                                                            sep_matches_prefix _stringappend_1502_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__455 with
                                                            | Some
                                                              (_stringappend_1503_,(existT _ _stringappend_1504_ _)) =>
                                                               returnm ((_stringappend_1503_,
                                                                         build_ex
                                                                         _stringappend_1504_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__457 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_1504_ _) :=
                                                              w__457
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_1505_ :=
                                                              string_drop _stringappend_1502_
                                                                (build_ex
                                                                _stringappend_1504_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_1505_) with
                                                            | Some
                                                              (_stringappend_1506_,(existT _ _stringappend_1507_ _)) =>
                                                               returnm ((_stringappend_1506_,
                                                                         build_ex
                                                                         _stringappend_1507_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__459 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs2, existT _ _stringappend_1507_ _) :=
                                                              w__459
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            (match (string_drop _stringappend_1505_
                                                                      (build_ex
                                                                      _stringappend_1507_)) with
                                                             | "" =>
                                                                returnm ((REMW (rs2,rs1,rd,s))
                                                                 : ast)
                                                             | _ => exit tt  : M (ast)
                                                             end)
                                                             : M (ast)
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_1112_
                                                                           "fence")
                                                                : bool))
                                                              (let _stringappend_1509_ :=
                                                                string_drop _stringappend_1112_
                                                                  (string_length "fence") in
                                                              match (spc_matches_prefix
                                                                       _stringappend_1509_) with
                                                              | Some
                                                                (_stringappend_1510_,(existT _ _stringappend_1511_ _)) =>
                                                                 let _stringappend_1512_ :=
                                                                   string_drop _stringappend_1509_
                                                                     (build_ex
                                                                     _stringappend_1511_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_1512_ >>= fun w__462 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__462 with
                                                                 | Some
                                                                   (_stringappend_1513_,(existT _ _stringappend_1514_ _)) =>
                                                                    let _stringappend_1515_ :=
                                                                      string_drop
                                                                        _stringappend_1512_
                                                                        (build_ex
                                                                        _stringappend_1514_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_1515_ >>= fun w__463 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__463 with
                                                                    | Some
                                                                      (_stringappend_1516_,(existT _ _stringappend_1517_ _)) =>
                                                                       let _stringappend_1518_ :=
                                                                         string_drop
                                                                           _stringappend_1515_
                                                                           (build_ex
                                                                           _stringappend_1517_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_1518_ >>= fun w__464 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__464 with
                                                                                      | Some
                                                                                        (_stringappend_1519_,(existT _ _stringappend_1520_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_1518_
                                                                                                  (build_ex
                                                                                                  _stringappend_1520_)) with
                                                                                         | "" =>
                                                                                            true
                                                                                         | _ =>
                                                                                            false
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__465 : bool =>
                                                                    returnm ((if (w__465) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__466 : bool =>
                                                                 returnm ((if (w__466) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__467 : bool =>
                                                              returnm ((if (w__467) then true
                                                                        else false)
                                                               : bool)) >>= fun w__468 : bool =>
                                                            (if (w__468) then
                                                               let _stringappend_1509_ :=
                                                                 string_drop _stringappend_1112_
                                                                   (string_length "fence") in
                                                               match (spc_matches_prefix
                                                                        _stringappend_1509_) with
                                                               | Some
                                                                 (_stringappend_1510_,(existT _ _stringappend_1511_ _)) =>
                                                                  returnm ((_stringappend_1510_,
                                                                            build_ex
                                                                            _stringappend_1511_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__470 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_1511_ _) :=
                                                                 w__470
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_1512_ :=
                                                                 string_drop _stringappend_1509_
                                                                   (build_ex
                                                                   _stringappend_1511_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_1512_ >>= fun w__471 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__471 with
                                                               | Some
                                                                 (_stringappend_1513_,(existT _ _stringappend_1514_ _)) =>
                                                                  returnm ((_stringappend_1513_,
                                                                            build_ex
                                                                            _stringappend_1514_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__473 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(pred, existT _ _stringappend_1514_ _) :=
                                                                 w__473
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_1515_ :=
                                                                 string_drop _stringappend_1512_
                                                                   (build_ex
                                                                   _stringappend_1514_) in
                                                               sep_matches_prefix
                                                                 _stringappend_1515_ >>= fun w__474 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__474 with
                                                               | Some
                                                                 (_stringappend_1516_,(existT _ _stringappend_1517_ _)) =>
                                                                  returnm ((_stringappend_1516_,
                                                                            build_ex
                                                                            _stringappend_1517_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__476 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_1517_ _) :=
                                                                 w__476
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_1518_ :=
                                                                 string_drop _stringappend_1515_
                                                                   (build_ex
                                                                   _stringappend_1517_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_1518_ >>= fun w__477 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__477 with
                                                               | Some
                                                                 (_stringappend_1519_,(existT _ _stringappend_1520_ _)) =>
                                                                  returnm ((_stringappend_1519_,
                                                                            build_ex
                                                                            _stringappend_1520_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__479 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(succ, existT _ _stringappend_1520_ _) :=
                                                                 w__479
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               (match (string_drop
                                                                         _stringappend_1518_
                                                                         (build_ex
                                                                         _stringappend_1520_)) with
                                                                | "" =>
                                                                   returnm ((FENCE (pred,succ))
                                                                    : ast)
                                                                | _ => exit tt  : M (ast)
                                                                end)
                                                                : M (ast)
                                                             else
                                                               (match _stringappend_1112_ with
                                                                | "fence.i" =>
                                                                   returnm ((FENCEI tt)  : ast)
                                                                | "ecall" =>
                                                                   returnm ((ECALL tt)  : ast)
                                                                | "mret" =>
                                                                   returnm ((MRET tt)  : ast)
                                                                | "sret" =>
                                                                   returnm ((SRET tt)  : ast)
                                                                | "ebreak" =>
                                                                   returnm ((EBREAK tt)  : ast)
                                                                | "wfi" => returnm ((WFI tt)  : ast)
                                                                | _stringappend_1112_ =>
                                                                   and_boolM
                                                                     (returnm ((string_startswith
                                                                                  _stringappend_1112_
                                                                                  "sfence.vma")
                                                                       : bool))
                                                                     (let _stringappend_1522_ :=
                                                                       string_drop
                                                                         _stringappend_1112_
                                                                         (string_length "sfence.vma") in
                                                                     match (spc_matches_prefix
                                                                              _stringappend_1522_) with
                                                                     | Some
                                                                       (_stringappend_1523_,(existT _ _stringappend_1524_ _)) =>
                                                                        let _stringappend_1525_ :=
                                                                          string_drop
                                                                            _stringappend_1522_
                                                                            (build_ex
                                                                            _stringappend_1524_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_1525_) with
                                                                        | Some
                                                                          (_stringappend_1526_,(existT _ _stringappend_1527_ _)) =>
                                                                           let _stringappend_1528_ :=
                                                                             string_drop
                                                                               _stringappend_1525_
                                                                               (build_ex
                                                                               _stringappend_1527_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_1528_ >>= fun w__482 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           returnm ((if ((match w__482 with
                                                                                          | Some
                                                                                            (_stringappend_1529_,(existT _ _stringappend_1530_ _)) =>
                                                                                             let _stringappend_1531_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1528_
                                                                                                 (build_ex
                                                                                                 _stringappend_1530_) in
                                                                                             if ((match (reg_name_matches_prefix
                                                                                                           _stringappend_1531_) with
                                                                                                  | Some
                                                                                                    (_stringappend_1532_,(existT _ _stringappend_1533_ _)) =>
                                                                                                     match (string_drop
                                                                                                              _stringappend_1531_
                                                                                                              (build_ex
                                                                                                              _stringappend_1533_)) with
                                                                                                     | "" =>
                                                                                                        true
                                                                                                     | _ =>
                                                                                                        false
                                                                                                     end
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false
                                                                                          | None =>
                                                                                             false
                                                                                          end)) then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__483 : bool =>
                                                                        returnm ((if (w__483) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)
                                                                     | None =>
                                                                        returnm (false  : bool)
                                                                     end >>= fun w__484 : bool =>
                                                                     returnm ((if (w__484) then true
                                                                               else false)
                                                                      : bool)) >>= fun w__485 : bool =>
                                                                   (if (w__485) then
                                                                      let _stringappend_1522_ :=
                                                                        string_drop
                                                                          _stringappend_1112_
                                                                          (string_length
                                                                             "sfence.vma") in
                                                                      match (spc_matches_prefix
                                                                               _stringappend_1522_) with
                                                                      | Some
                                                                        (_stringappend_1523_,(existT _ _stringappend_1524_ _)) =>
                                                                         returnm ((_stringappend_1523_,
                                                                                   build_ex
                                                                                   _stringappend_1524_)
                                                                          : (unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__487 : (unit * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(tt, existT _ _stringappend_1524_ _) :=
                                                                        w__487
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_1525_ :=
                                                                        string_drop
                                                                          _stringappend_1522_
                                                                          (build_ex
                                                                          _stringappend_1524_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_1525_) with
                                                                      | Some
                                                                        (_stringappend_1526_,(existT _ _stringappend_1527_ _)) =>
                                                                         returnm ((_stringappend_1526_,
                                                                                   build_ex
                                                                                   _stringappend_1527_)
                                                                          : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__489 : (mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(rs1, existT _ _stringappend_1527_ _) :=
                                                                        w__489
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_1528_ :=
                                                                        string_drop
                                                                          _stringappend_1525_
                                                                          (build_ex
                                                                          _stringappend_1527_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_1528_ >>= fun w__490 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__490 with
                                                                      | Some
                                                                        (_stringappend_1529_,(existT _ _stringappend_1530_ _)) =>
                                                                         returnm ((_stringappend_1529_,
                                                                                   build_ex
                                                                                   _stringappend_1530_)
                                                                          : (unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__492 : (unit * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(tt, existT _ _stringappend_1530_ _) :=
                                                                        w__492
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_1531_ :=
                                                                        string_drop
                                                                          _stringappend_1528_
                                                                          (build_ex
                                                                          _stringappend_1530_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_1531_) with
                                                                      | Some
                                                                        (_stringappend_1532_,(existT _ _stringappend_1533_ _)) =>
                                                                         returnm ((_stringappend_1532_,
                                                                                   build_ex
                                                                                   _stringappend_1533_)
                                                                          : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__494 : (mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(rs2, existT _ _stringappend_1533_ _) :=
                                                                        w__494
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      (match (string_drop
                                                                                _stringappend_1531_
                                                                                (build_ex
                                                                                _stringappend_1533_)) with
                                                                       | "" =>
                                                                          returnm ((SFENCE_VMA (rs1,rs2))
                                                                           : ast)
                                                                       | _ => exit tt  : M (ast)
                                                                       end)
                                                                       : M (ast)
                                                                    else
                                                                      and_boolM
                                                                        (returnm ((string_startswith
                                                                                     _stringappend_1112_
                                                                                     "lr.")
                                                                          : bool))
                                                                        (let _stringappend_1535_ :=
                                                                          string_drop
                                                                            _stringappend_1112_
                                                                            (string_length "lr.") in
                                                                        match (maybe_aq_matches_prefix
                                                                                 _stringappend_1535_) with
                                                                        | Some
                                                                          (_stringappend_1536_,(existT _ _stringappend_1537_ _)) =>
                                                                           let _stringappend_1538_ :=
                                                                             string_drop
                                                                               _stringappend_1535_
                                                                               (build_ex
                                                                               _stringappend_1537_) in
                                                                           match (maybe_rl_matches_prefix
                                                                                    _stringappend_1538_) with
                                                                           | Some
                                                                             (_stringappend_1539_,(existT _ _stringappend_1540_ _)) =>
                                                                              let _stringappend_1541_ :=
                                                                                string_drop
                                                                                  _stringappend_1538_
                                                                                  (build_ex
                                                                                  _stringappend_1540_) in
                                                                              match (size_mnemonic_matches_prefix
                                                                                       _stringappend_1541_) with
                                                                              | Some
                                                                                (_stringappend_1542_,(existT _ _stringappend_1543_ _)) =>
                                                                                 let _stringappend_1544_ :=
                                                                                   string_drop
                                                                                     _stringappend_1541_
                                                                                     (build_ex
                                                                                     _stringappend_1543_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_1544_) with
                                                                                 | Some
                                                                                   (_stringappend_1545_,(existT _ _stringappend_1546_ _)) =>
                                                                                    let _stringappend_1547_ :=
                                                                                      string_drop
                                                                                        _stringappend_1544_
                                                                                        (build_ex
                                                                                        _stringappend_1546_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_1547_) with
                                                                                    | Some
                                                                                      (_stringappend_1548_,(existT _ _stringappend_1549_ _)) =>
                                                                                       let _stringappend_1550_ :=
                                                                                         string_drop
                                                                                           _stringappend_1547_
                                                                                           (build_ex
                                                                                           _stringappend_1549_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_1550_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       returnm ((if ((match w__497 with
                                                                                                      | Some
                                                                                                        (_stringappend_1551_,(existT _ _stringappend_1552_ _)) =>
                                                                                                         let _stringappend_1553_ :=
                                                                                                           string_drop
                                                                                                             _stringappend_1550_
                                                                                                             (build_ex
                                                                                                             _stringappend_1552_) in
                                                                                                         if
                                                                                                           ((match (reg_name_matches_prefix
                                                                                                                      _stringappend_1553_) with
                                                                                                             | Some
                                                                                                               (_stringappend_1554_,(existT _ _stringappend_1555_ _)) =>
                                                                                                                match (string_drop
                                                                                                                         _stringappend_1553_
                                                                                                                         (build_ex
                                                                                                                         _stringappend_1555_)) with
                                                                                                                | "" =>
                                                                                                                   true
                                                                                                                | _ =>
                                                                                                                   false
                                                                                                                end
                                                                                                             | None =>
                                                                                                                false
                                                                                                             end))
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false
                                                                                                      | None =>
                                                                                                         false
                                                                                                      end))
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__498 : bool =>
                                                                                    returnm ((if (w__498)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__499 : bool =>
                                                                                 returnm ((if (w__499)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__500 : bool =>
                                                                              returnm ((if (w__500)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__501 : bool =>
                                                                           returnm ((if (w__501)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__502 : bool =>
                                                                        returnm ((if (w__502) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)) >>= fun w__503 : bool =>
                                                                      (if (w__503) then
                                                                         let _stringappend_1535_ :=
                                                                           string_drop
                                                                             _stringappend_1112_
                                                                             (string_length "lr.") in
                                                                         match (maybe_aq_matches_prefix
                                                                                  _stringappend_1535_) with
                                                                         | Some
                                                                           (_stringappend_1536_,(existT _ _stringappend_1537_ _)) =>
                                                                            returnm ((_stringappend_1536_,
                                                                                      build_ex
                                                                                      _stringappend_1537_)
                                                                             : (bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__505 : (bool * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(aq, existT _ _stringappend_1537_ _) :=
                                                                           w__505
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1538_ :=
                                                                           string_drop
                                                                             _stringappend_1535_
                                                                             (build_ex
                                                                             _stringappend_1537_) in
                                                                         match (maybe_rl_matches_prefix
                                                                                  _stringappend_1538_) with
                                                                         | Some
                                                                           (_stringappend_1539_,(existT _ _stringappend_1540_ _)) =>
                                                                            returnm ((_stringappend_1539_,
                                                                                      build_ex
                                                                                      _stringappend_1540_)
                                                                             : (bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__507 : (bool * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rl, existT _ _stringappend_1540_ _) :=
                                                                           w__507
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1541_ :=
                                                                           string_drop
                                                                             _stringappend_1538_
                                                                             (build_ex
                                                                             _stringappend_1540_) in
                                                                         match (size_mnemonic_matches_prefix
                                                                                  _stringappend_1541_) with
                                                                         | Some
                                                                           (_stringappend_1542_,(existT _ _stringappend_1543_ _)) =>
                                                                            returnm ((_stringappend_1542_,
                                                                                      build_ex
                                                                                      _stringappend_1543_)
                                                                             : (word_width * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((word_width * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__509 : (word_width * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(size, existT _ _stringappend_1543_ _) :=
                                                                           w__509
                                                                            : (word_width * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1544_ :=
                                                                           string_drop
                                                                             _stringappend_1541_
                                                                             (build_ex
                                                                             _stringappend_1543_) in
                                                                         match (spc_matches_prefix
                                                                                  _stringappend_1544_) with
                                                                         | Some
                                                                           (_stringappend_1545_,(existT _ _stringappend_1546_ _)) =>
                                                                            returnm ((_stringappend_1545_,
                                                                                      build_ex
                                                                                      _stringappend_1546_)
                                                                             : (unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__511 : (unit * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(tt, existT _ _stringappend_1546_ _) :=
                                                                           w__511
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1547_ :=
                                                                           string_drop
                                                                             _stringappend_1544_
                                                                             (build_ex
                                                                             _stringappend_1546_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_1547_) with
                                                                         | Some
                                                                           (_stringappend_1548_,(existT _ _stringappend_1549_ _)) =>
                                                                            returnm ((_stringappend_1548_,
                                                                                      build_ex
                                                                                      _stringappend_1549_)
                                                                             : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__513 : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rd, existT _ _stringappend_1549_ _) :=
                                                                           w__513
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1550_ :=
                                                                           string_drop
                                                                             _stringappend_1547_
                                                                             (build_ex
                                                                             _stringappend_1549_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_1550_ >>= fun w__514 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         match w__514 with
                                                                         | Some
                                                                           (_stringappend_1551_,(existT _ _stringappend_1552_ _)) =>
                                                                            returnm ((_stringappend_1551_,
                                                                                      build_ex
                                                                                      _stringappend_1552_)
                                                                             : (unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__516 : (unit * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(tt, existT _ _stringappend_1552_ _) :=
                                                                           w__516
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1553_ :=
                                                                           string_drop
                                                                             _stringappend_1550_
                                                                             (build_ex
                                                                             _stringappend_1552_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_1553_) with
                                                                         | Some
                                                                           (_stringappend_1554_,(existT _ _stringappend_1555_ _)) =>
                                                                            returnm ((_stringappend_1554_,
                                                                                      build_ex
                                                                                      _stringappend_1555_)
                                                                             : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__518 : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rs1, existT _ _stringappend_1555_ _) :=
                                                                           w__518
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         (match (string_drop
                                                                                   _stringappend_1553_
                                                                                   (build_ex
                                                                                   _stringappend_1555_)) with
                                                                          | "" =>
                                                                             returnm ((LOADRES (aq,rl,rs1,size,rd))
                                                                              : ast)
                                                                          | _ => exit tt  : M (ast)
                                                                          end)
                                                                          : M (ast)
                                                                       else
                                                                         and_boolM
                                                                           (returnm ((string_startswith
                                                                                        _stringappend_1112_
                                                                                        "sc.")
                                                                             : bool))
                                                                           (let _stringappend_1557_ :=
                                                                             string_drop
                                                                               _stringappend_1112_
                                                                               (string_length "sc.") in
                                                                           match (maybe_aq_matches_prefix
                                                                                    _stringappend_1557_) with
                                                                           | Some
                                                                             (_stringappend_1558_,(existT _ _stringappend_1559_ _)) =>
                                                                              let _stringappend_1560_ :=
                                                                                string_drop
                                                                                  _stringappend_1557_
                                                                                  (build_ex
                                                                                  _stringappend_1559_) in
                                                                              match (maybe_rl_matches_prefix
                                                                                       _stringappend_1560_) with
                                                                              | Some
                                                                                (_stringappend_1561_,(existT _ _stringappend_1562_ _)) =>
                                                                                 let _stringappend_1563_ :=
                                                                                   string_drop
                                                                                     _stringappend_1560_
                                                                                     (build_ex
                                                                                     _stringappend_1562_) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1563_) with
                                                                                 | Some
                                                                                   (_stringappend_1564_,(existT _ _stringappend_1565_ _)) =>
                                                                                    let _stringappend_1566_ :=
                                                                                      string_drop
                                                                                        _stringappend_1563_
                                                                                        (build_ex
                                                                                        _stringappend_1565_) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1566_) with
                                                                                    | Some
                                                                                      (_stringappend_1567_,(existT _ _stringappend_1568_ _)) =>
                                                                                       let _stringappend_1569_ :=
                                                                                         string_drop
                                                                                           _stringappend_1566_
                                                                                           (build_ex
                                                                                           _stringappend_1568_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1569_) with
                                                                                       | Some
                                                                                         (_stringappend_1570_,(existT _ _stringappend_1571_ _)) =>
                                                                                          let _stringappend_1572_ :=
                                                                                            string_drop
                                                                                              _stringappend_1569_
                                                                                              (build_ex
                                                                                              _stringappend_1571_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1572_ >>= fun w__521 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__521 with
                                                                                          | Some
                                                                                            (_stringappend_1573_,(existT _ _stringappend_1574_ _)) =>
                                                                                             let _stringappend_1575_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1572_
                                                                                                 (build_ex
                                                                                                 _stringappend_1574_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1575_) with
                                                                                             | Some
                                                                                               (_stringappend_1576_,(existT _ _stringappend_1577_ _)) =>
                                                                                                let _stringappend_1578_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1575_
                                                                                                    (build_ex
                                                                                                    _stringappend_1577_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1578_ >>= fun w__522 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__522 with
                                                                                                              | Some
                                                                                                                (_stringappend_1579_,(existT _ _stringappend_1580_ _)) =>
                                                                                                                 let _stringappend_1581_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1578_
                                                                                                                     (build_ex
                                                                                                                     _stringappend_1580_) in
                                                                                                                 if
                                                                                                                   ((match (reg_name_matches_prefix
                                                                                                                              _stringappend_1581_) with
                                                                                                                     | Some
                                                                                                                       (_stringappend_1582_,(existT _ _stringappend_1583_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1581_
                                                                                                                                 (build_ex
                                                                                                                                 _stringappend_1583_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__523 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__523)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__524 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__524)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__525 : bool =>
                                                                                       returnm ((if (w__525)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__526 : bool =>
                                                                                    returnm ((if (w__526)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__527 : bool =>
                                                                                 returnm ((if (w__527)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__528 : bool =>
                                                                              returnm ((if (w__528)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__529 : bool =>
                                                                           returnm ((if (w__529)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)) >>= fun w__530 : bool =>
                                                                         (if (w__530) then
                                                                            let _stringappend_1557_ :=
                                                                              string_drop
                                                                                _stringappend_1112_
                                                                                (string_length "sc.") in
                                                                            match (maybe_aq_matches_prefix
                                                                                     _stringappend_1557_) with
                                                                            | Some
                                                                              (_stringappend_1558_,(existT _ _stringappend_1559_ _)) =>
                                                                               returnm ((_stringappend_1558_,
                                                                                         build_ex
                                                                                         _stringappend_1559_)
                                                                                : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__532 : (bool * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(aq, existT _ _stringappend_1559_ _) :=
                                                                              w__532
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1560_ :=
                                                                              string_drop
                                                                                _stringappend_1557_
                                                                                (build_ex
                                                                                _stringappend_1559_) in
                                                                            match (maybe_rl_matches_prefix
                                                                                     _stringappend_1560_) with
                                                                            | Some
                                                                              (_stringappend_1561_,(existT _ _stringappend_1562_ _)) =>
                                                                               returnm ((_stringappend_1561_,
                                                                                         build_ex
                                                                                         _stringappend_1562_)
                                                                                : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__534 : (bool * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rl, existT _ _stringappend_1562_ _) :=
                                                                              w__534
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1563_ :=
                                                                              string_drop
                                                                                _stringappend_1560_
                                                                                (build_ex
                                                                                _stringappend_1562_) in
                                                                            match (size_mnemonic_matches_prefix
                                                                                     _stringappend_1563_) with
                                                                            | Some
                                                                              (_stringappend_1564_,(existT _ _stringappend_1565_ _)) =>
                                                                               returnm ((_stringappend_1564_,
                                                                                         build_ex
                                                                                         _stringappend_1565_)
                                                                                : (word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__536 : (word_width * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(size, existT _ _stringappend_1565_ _) :=
                                                                              w__536
                                                                               : (word_width * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1566_ :=
                                                                              string_drop
                                                                                _stringappend_1563_
                                                                                (build_ex
                                                                                _stringappend_1565_) in
                                                                            match (spc_matches_prefix
                                                                                     _stringappend_1566_) with
                                                                            | Some
                                                                              (_stringappend_1567_,(existT _ _stringappend_1568_ _)) =>
                                                                               returnm ((_stringappend_1567_,
                                                                                         build_ex
                                                                                         _stringappend_1568_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__538 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1568_ _) :=
                                                                              w__538
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1569_ :=
                                                                              string_drop
                                                                                _stringappend_1566_
                                                                                (build_ex
                                                                                _stringappend_1568_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1569_) with
                                                                            | Some
                                                                              (_stringappend_1570_,(existT _ _stringappend_1571_ _)) =>
                                                                               returnm ((_stringappend_1570_,
                                                                                         build_ex
                                                                                         _stringappend_1571_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__540 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rd, existT _ _stringappend_1571_ _) :=
                                                                              w__540
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1572_ :=
                                                                              string_drop
                                                                                _stringappend_1569_
                                                                                (build_ex
                                                                                _stringappend_1571_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1572_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            match w__541 with
                                                                            | Some
                                                                              (_stringappend_1573_,(existT _ _stringappend_1574_ _)) =>
                                                                               returnm ((_stringappend_1573_,
                                                                                         build_ex
                                                                                         _stringappend_1574_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__543 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1574_ _) :=
                                                                              w__543
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1575_ :=
                                                                              string_drop
                                                                                _stringappend_1572_
                                                                                (build_ex
                                                                                _stringappend_1574_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1575_) with
                                                                            | Some
                                                                              (_stringappend_1576_,(existT _ _stringappend_1577_ _)) =>
                                                                               returnm ((_stringappend_1576_,
                                                                                         build_ex
                                                                                         _stringappend_1577_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__545 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rs1, existT _ _stringappend_1577_ _) :=
                                                                              w__545
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1578_ :=
                                                                              string_drop
                                                                                _stringappend_1575_
                                                                                (build_ex
                                                                                _stringappend_1577_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1578_ >>= fun w__546 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            match w__546 with
                                                                            | Some
                                                                              (_stringappend_1579_,(existT _ _stringappend_1580_ _)) =>
                                                                               returnm ((_stringappend_1579_,
                                                                                         build_ex
                                                                                         _stringappend_1580_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__548 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1580_ _) :=
                                                                              w__548
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1581_ :=
                                                                              string_drop
                                                                                _stringappend_1578_
                                                                                (build_ex
                                                                                _stringappend_1580_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1581_) with
                                                                            | Some
                                                                              (_stringappend_1582_,(existT _ _stringappend_1583_ _)) =>
                                                                               returnm ((_stringappend_1582_,
                                                                                         build_ex
                                                                                         _stringappend_1583_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__550 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rs2, existT _ _stringappend_1583_ _) :=
                                                                              w__550
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            (match (string_drop
                                                                                      _stringappend_1581_
                                                                                      (build_ex
                                                                                      _stringappend_1583_)) with
                                                                             | "" =>
                                                                                returnm ((STORECON (aq,rl,rs2,rs1,size,rd))
                                                                                 : ast)
                                                                             | _ =>
                                                                                exit tt  : M (ast)
                                                                             end)
                                                                             : M (ast)
                                                                          else
                                                                            match (amo_mnemonic_matches_prefix
                                                                                     _stringappend_1112_) with
                                                                            | Some
                                                                              (_stringappend_1585_,(existT _ _stringappend_1586_ _)) =>
                                                                               let _stringappend_1587_ :=
                                                                                 string_drop
                                                                                   _stringappend_1112_
                                                                                   (build_ex
                                                                                   _stringappend_1586_) in
                                                                               and_boolM
                                                                                 (returnm ((string_startswith
                                                                                              _stringappend_1587_
                                                                                              ".")
                                                                                   : bool))
                                                                                 (let _stringappend_1588_ :=
                                                                                   string_drop
                                                                                     _stringappend_1587_
                                                                                     (string_length
                                                                                        ".") in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1588_) with
                                                                                 | Some
                                                                                   (_stringappend_1589_,(existT _ _stringappend_1590_ _)) =>
                                                                                    let _stringappend_1591_ :=
                                                                                      string_drop
                                                                                        _stringappend_1588_
                                                                                        (build_ex
                                                                                        _stringappend_1590_) in
                                                                                    match (maybe_aq_matches_prefix
                                                                                             _stringappend_1591_) with
                                                                                    | Some
                                                                                      (_stringappend_1592_,(existT _ _stringappend_1593_ _)) =>
                                                                                       let _stringappend_1594_ :=
                                                                                         string_drop
                                                                                           _stringappend_1591_
                                                                                           (build_ex
                                                                                           _stringappend_1593_) in
                                                                                       match (maybe_rl_matches_prefix
                                                                                                _stringappend_1594_) with
                                                                                       | Some
                                                                                         (_stringappend_1595_,(existT _ _stringappend_1596_ _)) =>
                                                                                          let _stringappend_1597_ :=
                                                                                            string_drop
                                                                                              _stringappend_1594_
                                                                                              (build_ex
                                                                                              _stringappend_1596_) in
                                                                                          match (spc_matches_prefix
                                                                                                   _stringappend_1597_) with
                                                                                          | Some
                                                                                            (_stringappend_1598_,(existT _ _stringappend_1599_ _)) =>
                                                                                             let _stringappend_1600_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1597_
                                                                                                 (build_ex
                                                                                                 _stringappend_1599_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1600_) with
                                                                                             | Some
                                                                                               (_stringappend_1601_,(existT _ _stringappend_1602_ _)) =>
                                                                                                let _stringappend_1603_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1600_
                                                                                                    (build_ex
                                                                                                    _stringappend_1602_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1603_ >>= fun w__553 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                match w__553 with
                                                                                                | Some
                                                                                                  (_stringappend_1604_,(existT _ _stringappend_1605_ _)) =>
                                                                                                   let _stringappend_1606_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_1603_
                                                                                                       (build_ex
                                                                                                       _stringappend_1605_) in
                                                                                                   match (reg_name_matches_prefix
                                                                                                            _stringappend_1606_) with
                                                                                                   | Some
                                                                                                     (_stringappend_1607_,(existT _ _stringappend_1608_ _)) =>
                                                                                                      let _stringappend_1609_ :=
                                                                                                        string_drop
                                                                                                          _stringappend_1606_
                                                                                                          (build_ex
                                                                                                          _stringappend_1608_) in
                                                                                                      sep_matches_prefix
                                                                                                        _stringappend_1609_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                        0)})) =>
                                                                                                      returnm ((if
                                                                                                                  ((match w__554 with
                                                                                                                    | Some
                                                                                                                      (_stringappend_1610_,(existT _ _stringappend_1611_ _)) =>
                                                                                                                       let _stringappend_1612_ :=
                                                                                                                         string_drop
                                                                                                                           _stringappend_1609_
                                                                                                                           (build_ex
                                                                                                                           _stringappend_1611_) in
                                                                                                                       if
                                                                                                                         ((match (reg_name_matches_prefix
                                                                                                                                    _stringappend_1612_) with
                                                                                                                           | Some
                                                                                                                             (_stringappend_1613_,(existT _ _stringappend_1614_ _)) =>
                                                                                                                              match (string_drop
                                                                                                                                       _stringappend_1612_
                                                                                                                                       (build_ex
                                                                                                                                       _stringappend_1614_)) with
                                                                                                                              | "" =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                           | None =>
                                                                                                                              false
                                                                                                                           end))
                                                                                                                       then
                                                                                                                         true
                                                                                                                       else
                                                                                                                         false
                                                                                                                    | None =>
                                                                                                                       false
                                                                                                                    end))
                                                                                                                then
                                                                                                                  true
                                                                                                                else
                                                                                                                  false)
                                                                                                       : bool)
                                                                                                   | None =>
                                                                                                      returnm (false
                                                                                                       : bool)
                                                                                                   end >>= fun w__555 : bool =>
                                                                                                   returnm ((if
                                                                                                               (w__555)
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false)
                                                                                                    : bool)
                                                                                                | None =>
                                                                                                   returnm (false
                                                                                                    : bool)
                                                                                                end >>= fun w__556 : bool =>
                                                                                                returnm ((if
                                                                                                            (w__556)
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__557 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__557)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__558 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__558)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__559 : bool =>
                                                                                       returnm ((if (w__559)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__560 : bool =>
                                                                                    returnm ((if (w__560)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__561 : bool =>
                                                                                 returnm ((if (w__561)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)) >>= fun w__562 : bool =>
                                                                               returnm ((if (w__562)
                                                                                         then
                                                                                           true
                                                                                         else false)
                                                                                : bool)
                                                                            | None =>
                                                                               returnm (false
                                                                                : bool)
                                                                            end >>= fun w__563 : bool =>
                                                                            (if (w__563) then
                                                                               match (amo_mnemonic_matches_prefix
                                                                                        _stringappend_1112_) with
                                                                               | Some
                                                                                 (_stringappend_1585_,(existT _ _stringappend_1586_ _)) =>
                                                                                  returnm ((_stringappend_1585_,
                                                                                            build_ex
                                                                                            _stringappend_1586_)
                                                                                   : (amoop * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((amoop * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__565 : (amoop * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(op, existT _ _stringappend_1586_ _) :=
                                                                                 w__565
                                                                                  : (amoop * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1587_ :=
                                                                                 string_drop
                                                                                   _stringappend_1112_
                                                                                   (build_ex
                                                                                   _stringappend_1586_) in
                                                                               let _stringappend_1588_ :=
                                                                                 string_drop
                                                                                   _stringappend_1587_
                                                                                   (string_length
                                                                                      ".") in
                                                                               match (size_mnemonic_matches_prefix
                                                                                        _stringappend_1588_) with
                                                                               | Some
                                                                                 (_stringappend_1589_,(existT _ _stringappend_1590_ _)) =>
                                                                                  returnm ((_stringappend_1589_,
                                                                                            build_ex
                                                                                            _stringappend_1590_)
                                                                                   : (word_width * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((word_width * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__567 : (word_width * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(width, existT _ _stringappend_1590_ _) :=
                                                                                 w__567
                                                                                  : (word_width * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1591_ :=
                                                                                 string_drop
                                                                                   _stringappend_1588_
                                                                                   (build_ex
                                                                                   _stringappend_1590_) in
                                                                               match (maybe_aq_matches_prefix
                                                                                        _stringappend_1591_) with
                                                                               | Some
                                                                                 (_stringappend_1592_,(existT _ _stringappend_1593_ _)) =>
                                                                                  returnm ((_stringappend_1592_,
                                                                                            build_ex
                                                                                            _stringappend_1593_)
                                                                                   : (bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__569 : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(aq, existT _ _stringappend_1593_ _) :=
                                                                                 w__569
                                                                                  : (bool * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1594_ :=
                                                                                 string_drop
                                                                                   _stringappend_1591_
                                                                                   (build_ex
                                                                                   _stringappend_1593_) in
                                                                               match (maybe_rl_matches_prefix
                                                                                        _stringappend_1594_) with
                                                                               | Some
                                                                                 (_stringappend_1595_,(existT _ _stringappend_1596_ _)) =>
                                                                                  returnm ((_stringappend_1595_,
                                                                                            build_ex
                                                                                            _stringappend_1596_)
                                                                                   : (bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__571 : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rl, existT _ _stringappend_1596_ _) :=
                                                                                 w__571
                                                                                  : (bool * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1597_ :=
                                                                                 string_drop
                                                                                   _stringappend_1594_
                                                                                   (build_ex
                                                                                   _stringappend_1596_) in
                                                                               match (spc_matches_prefix
                                                                                        _stringappend_1597_) with
                                                                               | Some
                                                                                 (_stringappend_1598_,(existT _ _stringappend_1599_ _)) =>
                                                                                  returnm ((_stringappend_1598_,
                                                                                            build_ex
                                                                                            _stringappend_1599_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__573 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1599_ _) :=
                                                                                 w__573
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1600_ :=
                                                                                 string_drop
                                                                                   _stringappend_1597_
                                                                                   (build_ex
                                                                                   _stringappend_1599_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1600_) with
                                                                               | Some
                                                                                 (_stringappend_1601_,(existT _ _stringappend_1602_ _)) =>
                                                                                  returnm ((_stringappend_1601_,
                                                                                            build_ex
                                                                                            _stringappend_1602_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__575 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rd, existT _ _stringappend_1602_ _) :=
                                                                                 w__575
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1603_ :=
                                                                                 string_drop
                                                                                   _stringappend_1600_
                                                                                   (build_ex
                                                                                   _stringappend_1602_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1603_ >>= fun w__576 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               match w__576 with
                                                                               | Some
                                                                                 (_stringappend_1604_,(existT _ _stringappend_1605_ _)) =>
                                                                                  returnm ((_stringappend_1604_,
                                                                                            build_ex
                                                                                            _stringappend_1605_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__578 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1605_ _) :=
                                                                                 w__578
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1606_ :=
                                                                                 string_drop
                                                                                   _stringappend_1603_
                                                                                   (build_ex
                                                                                   _stringappend_1605_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1606_) with
                                                                               | Some
                                                                                 (_stringappend_1607_,(existT _ _stringappend_1608_ _)) =>
                                                                                  returnm ((_stringappend_1607_,
                                                                                            build_ex
                                                                                            _stringappend_1608_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__580 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rs1, existT _ _stringappend_1608_ _) :=
                                                                                 w__580
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1609_ :=
                                                                                 string_drop
                                                                                   _stringappend_1606_
                                                                                   (build_ex
                                                                                   _stringappend_1608_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1609_ >>= fun w__581 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               match w__581 with
                                                                               | Some
                                                                                 (_stringappend_1610_,(existT _ _stringappend_1611_ _)) =>
                                                                                  returnm ((_stringappend_1610_,
                                                                                            build_ex
                                                                                            _stringappend_1611_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__583 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1611_ _) :=
                                                                                 w__583
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1612_ :=
                                                                                 string_drop
                                                                                   _stringappend_1609_
                                                                                   (build_ex
                                                                                   _stringappend_1611_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1612_) with
                                                                               | Some
                                                                                 (_stringappend_1613_,(existT _ _stringappend_1614_ _)) =>
                                                                                  returnm ((_stringappend_1613_,
                                                                                            build_ex
                                                                                            _stringappend_1614_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__585 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rs2, existT _ _stringappend_1614_ _) :=
                                                                                 w__585
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               (match (string_drop
                                                                                         _stringappend_1612_
                                                                                         (build_ex
                                                                                         _stringappend_1614_)) with
                                                                                | "" =>
                                                                                   returnm ((AMO (op,aq,rl,rs2,rs1,width,rd))
                                                                                    : ast)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M (ast)
                                                                                end)
                                                                                : M (ast)
                                                                             else
                                                                               match (csr_mnemonic_matches_prefix
                                                                                        _stringappend_1112_) with
                                                                               | Some
                                                                                 (_stringappend_1616_,(existT _ _stringappend_1617_ _)) =>
                                                                                  let _stringappend_1618_ :=
                                                                                    string_drop
                                                                                      _stringappend_1112_
                                                                                      (build_ex
                                                                                      _stringappend_1617_) in
                                                                                  and_boolM
                                                                                    (returnm ((string_startswith
                                                                                                 _stringappend_1618_
                                                                                                 "i")
                                                                                      : bool))
                                                                                    (let _stringappend_1619_ :=
                                                                                      string_drop
                                                                                        _stringappend_1618_
                                                                                        (string_length
                                                                                           "i") in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1619_) with
                                                                                    | Some
                                                                                      (_stringappend_1620_,(existT _ _stringappend_1621_ _)) =>
                                                                                       let _stringappend_1622_ :=
                                                                                         string_drop
                                                                                           _stringappend_1619_
                                                                                           (build_ex
                                                                                           _stringappend_1621_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1622_) with
                                                                                       | Some
                                                                                         (_stringappend_1623_,(existT _ _stringappend_1624_ _)) =>
                                                                                          let _stringappend_1625_ :=
                                                                                            string_drop
                                                                                              _stringappend_1622_
                                                                                              (build_ex
                                                                                              _stringappend_1624_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1625_ >>= fun w__588 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__588 with
                                                                                          | Some
                                                                                            (_stringappend_1626_,(existT _ _stringappend_1627_ _)) =>
                                                                                             let _stringappend_1628_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1625_
                                                                                                 (build_ex
                                                                                                 _stringappend_1627_) in
                                                                                             match (hex_bits_5_matches_prefix
                                                                                                      _stringappend_1628_) with
                                                                                             | Some
                                                                                               (_stringappend_1629_,(existT _ _stringappend_1630_ _)) =>
                                                                                                let _stringappend_1631_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1628_
                                                                                                    (build_ex
                                                                                                    _stringappend_1630_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1631_ >>= fun w__589 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__589 with
                                                                                                              | Some
                                                                                                                (_stringappend_1632_,(existT _ _stringappend_1633_ _)) =>
                                                                                                                 let _stringappend_1634_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1631_
                                                                                                                     (build_ex
                                                                                                                     _stringappend_1633_) in
                                                                                                                 if
                                                                                                                   ((match (csr_name_map_matches_prefix
                                                                                                                              _stringappend_1634_) with
                                                                                                                     | Some
                                                                                                                       (_stringappend_1635_,(existT _ _stringappend_1636_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1634_
                                                                                                                                 (build_ex
                                                                                                                                 _stringappend_1636_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__590 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__590)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__591 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__591)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__592 : bool =>
                                                                                       returnm ((if (w__592)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__593 : bool =>
                                                                                    returnm ((if (w__593)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)) >>= fun w__594 : bool =>
                                                                                  returnm ((if (w__594)
                                                                                            then
                                                                                              true
                                                                                            else
                                                                                              false)
                                                                                   : bool)
                                                                               | None =>
                                                                                  returnm (false
                                                                                   : bool)
                                                                               end >>= fun w__595 : bool =>
                                                                               (if (w__595) then
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_1112_) with
                                                                                  | Some
                                                                                    (_stringappend_1616_,(existT _ _stringappend_1617_ _)) =>
                                                                                     returnm ((_stringappend_1616_,
                                                                                               build_ex
                                                                                               _stringappend_1617_)
                                                                                      : (csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__597 : (csrop * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(op, existT _ _stringappend_1617_ _) :=
                                                                                    w__597
                                                                                     : (csrop * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1618_ :=
                                                                                    string_drop
                                                                                      _stringappend_1112_
                                                                                      (build_ex
                                                                                      _stringappend_1617_) in
                                                                                  let _stringappend_1619_ :=
                                                                                    string_drop
                                                                                      _stringappend_1618_
                                                                                      (string_length
                                                                                         "i") in
                                                                                  match (spc_matches_prefix
                                                                                           _stringappend_1619_) with
                                                                                  | Some
                                                                                    (_stringappend_1620_,(existT _ _stringappend_1621_ _)) =>
                                                                                     returnm ((_stringappend_1620_,
                                                                                               build_ex
                                                                                               _stringappend_1621_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__599 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1621_ _) :=
                                                                                    w__599
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1622_ :=
                                                                                    string_drop
                                                                                      _stringappend_1619_
                                                                                      (build_ex
                                                                                      _stringappend_1621_) in
                                                                                  match (reg_name_matches_prefix
                                                                                           _stringappend_1622_) with
                                                                                  | Some
                                                                                    (_stringappend_1623_,(existT _ _stringappend_1624_ _)) =>
                                                                                     returnm ((_stringappend_1623_,
                                                                                               build_ex
                                                                                               _stringappend_1624_)
                                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__601 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(rd, existT _ _stringappend_1624_ _) :=
                                                                                    w__601
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1625_ :=
                                                                                    string_drop
                                                                                      _stringappend_1622_
                                                                                      (build_ex
                                                                                      _stringappend_1624_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1625_ >>= fun w__602 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  match w__602 with
                                                                                  | Some
                                                                                    (_stringappend_1626_,(existT _ _stringappend_1627_ _)) =>
                                                                                     returnm ((_stringappend_1626_,
                                                                                               build_ex
                                                                                               _stringappend_1627_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__604 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1627_ _) :=
                                                                                    w__604
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1628_ :=
                                                                                    string_drop
                                                                                      _stringappend_1625_
                                                                                      (build_ex
                                                                                      _stringappend_1627_) in
                                                                                  match (hex_bits_5_matches_prefix
                                                                                           _stringappend_1628_) with
                                                                                  | Some
                                                                                    (_stringappend_1629_,(existT _ _stringappend_1630_ _)) =>
                                                                                     returnm ((_stringappend_1629_,
                                                                                               build_ex
                                                                                               _stringappend_1630_)
                                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__606 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(rs1, existT _ _stringappend_1630_ _) :=
                                                                                    w__606
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1631_ :=
                                                                                    string_drop
                                                                                      _stringappend_1628_
                                                                                      (build_ex
                                                                                      _stringappend_1630_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1631_ >>= fun w__607 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  match w__607 with
                                                                                  | Some
                                                                                    (_stringappend_1632_,(existT _ _stringappend_1633_ _)) =>
                                                                                     returnm ((_stringappend_1632_,
                                                                                               build_ex
                                                                                               _stringappend_1633_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__609 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1633_ _) :=
                                                                                    w__609
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1634_ :=
                                                                                    string_drop
                                                                                      _stringappend_1631_
                                                                                      (build_ex
                                                                                      _stringappend_1633_) in
                                                                                  match (csr_name_map_matches_prefix
                                                                                           _stringappend_1634_) with
                                                                                  | Some
                                                                                    (_stringappend_1635_,(existT _ _stringappend_1636_ _)) =>
                                                                                     returnm ((_stringappend_1635_,
                                                                                               build_ex
                                                                                               _stringappend_1636_)
                                                                                      : (mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__611 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(csr, existT _ _stringappend_1636_ _) :=
                                                                                    w__611
                                                                                     : (mword 12 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  (match (string_drop
                                                                                            _stringappend_1634_
                                                                                            (build_ex
                                                                                            _stringappend_1636_)) with
                                                                                   | "" =>
                                                                                      returnm ((CSR (csr,rs1,rd,true,op))
                                                                                       : ast)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M (ast)
                                                                                   end)
                                                                                   : M (ast)
                                                                                else
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_1112_) with
                                                                                  | Some
                                                                                    (_stringappend_1638_,(existT _ _stringappend_1639_ _)) =>
                                                                                     let _stringappend_1640_ :=
                                                                                       string_drop
                                                                                         _stringappend_1112_
                                                                                         (build_ex
                                                                                         _stringappend_1639_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1640_) with
                                                                                     | Some
                                                                                       (_stringappend_1641_,(existT _ _stringappend_1642_ _)) =>
                                                                                        let _stringappend_1643_ :=
                                                                                          string_drop
                                                                                            _stringappend_1640_
                                                                                            (build_ex
                                                                                            _stringappend_1642_) in
                                                                                        match (reg_name_matches_prefix
                                                                                                 _stringappend_1643_) with
                                                                                        | Some
                                                                                          (_stringappend_1644_,(existT _ _stringappend_1645_ _)) =>
                                                                                           let _stringappend_1646_ :=
                                                                                             string_drop
                                                                                               _stringappend_1643_
                                                                                               (build_ex
                                                                                               _stringappend_1645_) in
                                                                                           sep_matches_prefix
                                                                                             _stringappend_1646_ >>= fun w__614 : option ((unit * {n : Z & ArithFact (n >=
                                                                                             0)})) =>
                                                                                           match w__614 with
                                                                                           | Some
                                                                                             (_stringappend_1647_,(existT _ _stringappend_1648_ _)) =>
                                                                                              let _stringappend_1649_ :=
                                                                                                string_drop
                                                                                                  _stringappend_1646_
                                                                                                  (build_ex
                                                                                                  _stringappend_1648_) in
                                                                                              match (reg_name_matches_prefix
                                                                                                       _stringappend_1649_) with
                                                                                              | Some
                                                                                                (_stringappend_1650_,(existT _ _stringappend_1651_ _)) =>
                                                                                                 let _stringappend_1652_ :=
                                                                                                   string_drop
                                                                                                     _stringappend_1649_
                                                                                                     (build_ex
                                                                                                     _stringappend_1651_) in
                                                                                                 sep_matches_prefix
                                                                                                   _stringappend_1652_ >>= fun w__615 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                   0)})) =>
                                                                                                 returnm ((if
                                                                                                             ((match w__615 with
                                                                                                               | Some
                                                                                                                 (_stringappend_1653_,(existT _ _stringappend_1654_ _)) =>
                                                                                                                  let _stringappend_1655_ :=
                                                                                                                    string_drop
                                                                                                                      _stringappend_1652_
                                                                                                                      (build_ex
                                                                                                                      _stringappend_1654_) in
                                                                                                                  if
                                                                                                                    ((match (csr_name_map_matches_prefix
                                                                                                                               _stringappend_1655_) with
                                                                                                                      | Some
                                                                                                                        (_stringappend_1656_,(existT _ _stringappend_1657_ _)) =>
                                                                                                                         match (string_drop
                                                                                                                                  _stringappend_1655_
                                                                                                                                  (build_ex
                                                                                                                                  _stringappend_1657_)) with
                                                                                                                         | "" =>
                                                                                                                            true
                                                                                                                         | _ =>
                                                                                                                            false
                                                                                                                         end
                                                                                                                      | None =>
                                                                                                                         false
                                                                                                                      end))
                                                                                                                  then
                                                                                                                    true
                                                                                                                  else
                                                                                                                    false
                                                                                                               | None =>
                                                                                                                  false
                                                                                                               end))
                                                                                                           then
                                                                                                             true
                                                                                                           else
                                                                                                             false)
                                                                                                  : bool)
                                                                                              | None =>
                                                                                                 returnm (false
                                                                                                  : bool)
                                                                                              end >>= fun w__616 : bool =>
                                                                                              returnm ((if
                                                                                                          (w__616)
                                                                                                        then
                                                                                                          true
                                                                                                        else
                                                                                                          false)
                                                                                               : bool)
                                                                                           | None =>
                                                                                              returnm (false
                                                                                               : bool)
                                                                                           end >>= fun w__617 : bool =>
                                                                                           returnm ((if
                                                                                                       (w__617)
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false)
                                                                                            : bool)
                                                                                        | None =>
                                                                                           returnm (false
                                                                                            : bool)
                                                                                        end >>= fun w__618 : bool =>
                                                                                        returnm ((if
                                                                                                    (w__618)
                                                                                                  then
                                                                                                    true
                                                                                                  else
                                                                                                    false)
                                                                                         : bool)
                                                                                     | None =>
                                                                                        returnm (false
                                                                                         : bool)
                                                                                     end >>= fun w__619 : bool =>
                                                                                     returnm ((if (w__619)
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)
                                                                                      : bool)
                                                                                  | None =>
                                                                                     returnm (false
                                                                                      : bool)
                                                                                  end >>= fun w__620 : bool =>
                                                                                  (if (w__620) then
                                                                                     match (csr_mnemonic_matches_prefix
                                                                                              _stringappend_1112_) with
                                                                                     | Some
                                                                                       (_stringappend_1638_,(existT _ _stringappend_1639_ _)) =>
                                                                                        returnm ((_stringappend_1638_,
                                                                                                  build_ex
                                                                                                  _stringappend_1639_)
                                                                                         : (csrop * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((csrop * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__622 : (csrop * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(op, existT _ _stringappend_1639_ _) :=
                                                                                       w__622
                                                                                        : (csrop * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1640_ :=
                                                                                       string_drop
                                                                                         _stringappend_1112_
                                                                                         (build_ex
                                                                                         _stringappend_1639_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1640_) with
                                                                                     | Some
                                                                                       (_stringappend_1641_,(existT _ _stringappend_1642_ _)) =>
                                                                                        returnm ((_stringappend_1641_,
                                                                                                  build_ex
                                                                                                  _stringappend_1642_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__624 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1642_ _) :=
                                                                                       w__624
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1643_ :=
                                                                                       string_drop
                                                                                         _stringappend_1640_
                                                                                         (build_ex
                                                                                         _stringappend_1642_) in
                                                                                     match (reg_name_matches_prefix
                                                                                              _stringappend_1643_) with
                                                                                     | Some
                                                                                       (_stringappend_1644_,(existT _ _stringappend_1645_ _)) =>
                                                                                        returnm ((_stringappend_1644_,
                                                                                                  build_ex
                                                                                                  _stringappend_1645_)
                                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__626 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(rd, existT _ _stringappend_1645_ _) :=
                                                                                       w__626
                                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1646_ :=
                                                                                       string_drop
                                                                                         _stringappend_1643_
                                                                                         (build_ex
                                                                                         _stringappend_1645_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1646_ >>= fun w__627 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     match w__627 with
                                                                                     | Some
                                                                                       (_stringappend_1647_,(existT _ _stringappend_1648_ _)) =>
                                                                                        returnm ((_stringappend_1647_,
                                                                                                  build_ex
                                                                                                  _stringappend_1648_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__629 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1648_ _) :=
                                                                                       w__629
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1649_ :=
                                                                                       string_drop
                                                                                         _stringappend_1646_
                                                                                         (build_ex
                                                                                         _stringappend_1648_) in
                                                                                     match (reg_name_matches_prefix
                                                                                              _stringappend_1649_) with
                                                                                     | Some
                                                                                       (_stringappend_1650_,(existT _ _stringappend_1651_ _)) =>
                                                                                        returnm ((_stringappend_1650_,
                                                                                                  build_ex
                                                                                                  _stringappend_1651_)
                                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__631 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(rs1, existT _ _stringappend_1651_ _) :=
                                                                                       w__631
                                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1652_ :=
                                                                                       string_drop
                                                                                         _stringappend_1649_
                                                                                         (build_ex
                                                                                         _stringappend_1651_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1652_ >>= fun w__632 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     match w__632 with
                                                                                     | Some
                                                                                       (_stringappend_1653_,(existT _ _stringappend_1654_ _)) =>
                                                                                        returnm ((_stringappend_1653_,
                                                                                                  build_ex
                                                                                                  _stringappend_1654_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__634 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1654_ _) :=
                                                                                       w__634
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1655_ :=
                                                                                       string_drop
                                                                                         _stringappend_1652_
                                                                                         (build_ex
                                                                                         _stringappend_1654_) in
                                                                                     match (csr_name_map_matches_prefix
                                                                                              _stringappend_1655_) with
                                                                                     | Some
                                                                                       (_stringappend_1656_,(existT _ _stringappend_1657_ _)) =>
                                                                                        returnm ((_stringappend_1656_,
                                                                                                  build_ex
                                                                                                  _stringappend_1657_)
                                                                                         : (mword 12 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__636 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(csr, existT _ _stringappend_1657_ _) :=
                                                                                       w__636
                                                                                        : (mword 12 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     (match (string_drop
                                                                                               _stringappend_1655_
                                                                                               (build_ex
                                                                                               _stringappend_1657_)) with
                                                                                      | "" =>
                                                                                         returnm ((CSR (csr,rs1,rd,false,op))
                                                                                          : ast)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (ast)
                                                                                      end)
                                                                                      : M (ast)
                                                                                   else
                                                                                     let _stringappend_1659_ :=
                                                                                       string_drop
                                                                                         _stringappend_1112_
                                                                                         (string_length
                                                                                            "illegal") in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1659_) with
                                                                                     | Some
                                                                                       (_stringappend_1660_,(existT _ _stringappend_1661_ _)) =>
                                                                                        returnm ((_stringappend_1660_,
                                                                                                  build_ex
                                                                                                  _stringappend_1661_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__640 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1661_ _) :=
                                                                                       w__640
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1662_ :=
                                                                                       string_drop
                                                                                         _stringappend_1659_
                                                                                         (build_ex
                                                                                         _stringappend_1661_) in
                                                                                     match (hex_bits_32_matches_prefix
                                                                                              _stringappend_1662_) with
                                                                                     | Some
                                                                                       (_stringappend_1663_,(existT _ _stringappend_1664_ _)) =>
                                                                                        returnm ((_stringappend_1663_,
                                                                                                  build_ex
                                                                                                  _stringappend_1664_)
                                                                                         : (mword 32 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__642 : (mword 32 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(s, existT _ _stringappend_1664_ _) :=
                                                                                       w__642
                                                                                        : (mword 32 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     (match (string_drop
                                                                                               _stringappend_1662_
                                                                                               (build_ex
                                                                                               _stringappend_1664_)) with
                                                                                      | "" =>
                                                                                         returnm ((ILLEGAL s)
                                                                                          : ast)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (ast)
                                                                                      end)
                                                                                      : M (ast))
                                                                                   : M (ast))
                                                                                : M (ast))
                                                                             : M (ast))
                                                                          : M (ast))
                                                                       : M (ast))
                                                                    : M (ast)
                                                                end)
                                                                : M (ast))
                                                             : M (ast))
                                                          : M (ast))
                                                       : M (ast))
                                                    : M (ast))
                                                 : M (ast))
                                              : M (ast))
                                           : M (ast))
                                        : M (ast))
                                     : M (ast))
                                  : M (ast))
                               : M (ast))
                            : M (ast))
                         : M (ast))
                      : M (ast))
                   : M (ast))
                : M (ast))
             : M (ast))
          : M (ast))
       : M (ast))
    : M (ast).

Definition assembly_forwards_matches (arg_ : ast) 
: bool :=
   match arg_ with
   | UTYPE (imm,rd,op) => true
   | RISCV_JAL (imm,rd) => true
   | RISCV_JALR (imm,rs1,rd) => true
   | BTYPE (imm,rs2,rs1,op) => true
   | ITYPE (imm,rs1,rd,op) => true
   | SHIFTIOP (shamt,rs1,rd,op) => true
   | RTYPE (rs2,rs1,rd,op) => true
   | LOAD (imm,rs1,rd,is_unsigned,size,aq,rl) => true
   | STORE (imm,rs1,rd,size,aq,rl) => true
   | ADDIW (imm,rs1,rd) => true
   | SHIFTW (shamt,rs1,rd,op) => true
   | RTYPEW (rs2,rs1,rd,op) => true
   | SHIFTIWOP (shamt,rs1,rd,op) => true
   | MUL (rs2,rs1,rd,high,signed1,signed2) => true
   | DIV (rs2,rs1,rd,s) => true
   | REM (rs2,rs1,rd,s) => true
   | MULW (rs2,rs1,rd) => true
   | DIVW (rs2,rs1,rd,s) => true
   | REMW (rs2,rs1,rd,s) => true
   | FENCE (pred,succ) => true
   | FENCEI (tt) => true
   | ECALL (tt) => true
   | MRET (tt) => true
   | SRET (tt) => true
   | EBREAK (tt) => true
   | WFI (tt) => true
   | SFENCE_VMA (rs1,rs2) => true
   | LOADRES (aq,rl,rs1,size,rd) => true
   | STORECON (aq,rl,rs2,rs1,size,rd) => true
   | AMO (op,aq,rl,rs2,rs1,width,rd) => true
   | CSR (csr,rs1,rd,true,op) => true
   | CSR (csr,rs1,rd,false,op) => true
   | ILLEGAL (s) => true
   | _ => false
   end.

Definition assembly_backwards_matches (arg_ : string) 
: M (bool) :=
   let _stringappend_559_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_559_) with
   | Some (_stringappend_560_,(existT _ _stringappend_561_ _)) =>
      let _stringappend_562_ := string_drop _stringappend_559_ (build_ex _stringappend_561_) in
      match (spc_matches_prefix _stringappend_562_) with
      | Some (_stringappend_563_,(existT _ _stringappend_564_ _)) =>
         let _stringappend_565_ := string_drop _stringappend_562_ (build_ex _stringappend_564_) in
         match (reg_name_matches_prefix _stringappend_565_) with
         | Some (_stringappend_566_,(existT _ _stringappend_567_ _)) =>
            let _stringappend_568_ := string_drop _stringappend_565_ (build_ex _stringappend_567_) in
            sep_matches_prefix _stringappend_568_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (_stringappend_569_,(existT _ _stringappend_570_ _)) =>
                              let _stringappend_571_ :=
                                string_drop _stringappend_568_ (build_ex _stringappend_570_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_571_) with
                                   | Some (_stringappend_572_,(existT _ _stringappend_573_ _)) =>
                                      match (string_drop _stringappend_571_
                                               (build_ex
                                               _stringappend_573_)) with
                                      | "" => true
                                      | _ => false
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      match (utype_mnemonic_matches_prefix _stringappend_559_) with
      | Some (_stringappend_560_,(existT _ _stringappend_561_ _)) =>
         returnm ((_stringappend_560_, build_ex _stringappend_561_)
          : (uop * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__5 : (uop * {n : Z & ArithFact (n >= 0)}) =>
      let '(op, existT _ _stringappend_561_ _) := w__5  : (uop * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_562_ := string_drop _stringappend_559_ (build_ex _stringappend_561_) in
      match (spc_matches_prefix _stringappend_562_) with
      | Some (_stringappend_563_,(existT _ _stringappend_564_ _)) =>
         returnm ((_stringappend_563_, build_ex _stringappend_564_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__7 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_564_ _) := w__7  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_565_ := string_drop _stringappend_562_ (build_ex _stringappend_564_) in
      match (reg_name_matches_prefix _stringappend_565_) with
      | Some (_stringappend_566_,(existT _ _stringappend_567_ _)) =>
         returnm ((_stringappend_566_, build_ex _stringappend_567_)
          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__9 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
      let '(rd, existT _ _stringappend_567_ _) := w__9  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_568_ := string_drop _stringappend_565_ (build_ex _stringappend_567_) in
      sep_matches_prefix _stringappend_568_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >=
        0)})) =>
      match w__10 with
      | Some (_stringappend_569_,(existT _ _stringappend_570_ _)) =>
         returnm ((_stringappend_569_, build_ex _stringappend_570_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__12 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_570_ _) := w__12  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_571_ := string_drop _stringappend_568_ (build_ex _stringappend_570_) in
      match (hex_bits_20_matches_prefix _stringappend_571_) with
      | Some (_stringappend_572_,(existT _ _stringappend_573_ _)) =>
         returnm ((_stringappend_572_, build_ex _stringappend_573_)
          : (mword 20 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__14 : (mword 20 * {n : Z & ArithFact (n >= 0)}) =>
      let '(imm, existT _ _stringappend_573_ _) :=
        w__14
         : (mword 20 * {n : Z & ArithFact (n >= 0)}) in
      (match (string_drop _stringappend_571_ (build_ex _stringappend_573_)) with
       | "" => returnm (true  : bool)
       | _ => exit tt  : M (bool)
       end)
       : M (bool)
    else
      and_boolM (returnm ((string_startswith _stringappend_559_ "jal")  : bool))
        (let _stringappend_575_ := string_drop _stringappend_559_ (string_length "jal") in
        match (spc_matches_prefix _stringappend_575_) with
        | Some (_stringappend_576_,(existT _ _stringappend_577_ _)) =>
           let _stringappend_578_ := string_drop _stringappend_575_ (build_ex _stringappend_577_) in
           match (reg_name_matches_prefix _stringappend_578_) with
           | Some (_stringappend_579_,(existT _ _stringappend_580_ _)) =>
              let _stringappend_581_ := string_drop _stringappend_578_ (build_ex _stringappend_580_) in
              sep_matches_prefix _stringappend_581_ >>= fun w__17 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__17 with
                             | Some (_stringappend_582_,(existT _ _stringappend_583_ _)) =>
                                let _stringappend_584_ :=
                                  string_drop _stringappend_581_ (build_ex _stringappend_583_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_584_) with
                                     | Some (_stringappend_585_,(existT _ _stringappend_586_ _)) =>
                                        match (string_drop _stringappend_584_
                                                 (build_ex
                                                 _stringappend_586_)) with
                                        | "" => true
                                        | _ => false
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__18 : bool =>
           returnm ((if (w__18) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__19 : bool =>
        returnm ((if (w__19) then true
                  else false)
         : bool)) >>= fun w__20 : bool =>
      (if (w__20) then
         let _stringappend_575_ := string_drop _stringappend_559_ (string_length "jal") in
         match (spc_matches_prefix _stringappend_575_) with
         | Some (_stringappend_576_,(existT _ _stringappend_577_ _)) =>
            returnm ((_stringappend_576_, build_ex _stringappend_577_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__22 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_577_ _) := w__22  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_578_ := string_drop _stringappend_575_ (build_ex _stringappend_577_) in
         match (reg_name_matches_prefix _stringappend_578_) with
         | Some (_stringappend_579_,(existT _ _stringappend_580_ _)) =>
            returnm ((_stringappend_579_, build_ex _stringappend_580_)
             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__24 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
         let '(rd, existT _ _stringappend_580_ _) :=
           w__24
            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_581_ := string_drop _stringappend_578_ (build_ex _stringappend_580_) in
         sep_matches_prefix _stringappend_581_ >>= fun w__25 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         match w__25 with
         | Some (_stringappend_582_,(existT _ _stringappend_583_ _)) =>
            returnm ((_stringappend_582_, build_ex _stringappend_583_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__27 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_583_ _) := w__27  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_584_ := string_drop _stringappend_581_ (build_ex _stringappend_583_) in
         match (hex_bits_21_matches_prefix _stringappend_584_) with
         | Some (_stringappend_585_,(existT _ _stringappend_586_ _)) =>
            returnm ((_stringappend_585_, build_ex _stringappend_586_)
             : (mword 21 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__29 : (mword 21 * {n : Z & ArithFact (n >= 0)}) =>
         let '(imm, existT _ _stringappend_586_ _) :=
           w__29
            : (mword 21 * {n : Z & ArithFact (n >= 0)}) in
         (match (string_drop _stringappend_584_ (build_ex _stringappend_586_)) with
          | "" => returnm (true  : bool)
          | _ => exit tt  : M (bool)
          end)
          : M (bool)
       else
         and_boolM (returnm ((string_startswith _stringappend_559_ "jalr")  : bool))
           (let _stringappend_588_ := string_drop _stringappend_559_ (string_length "jalr") in
           match (spc_matches_prefix _stringappend_588_) with
           | Some (_stringappend_589_,(existT _ _stringappend_590_ _)) =>
              let _stringappend_591_ := string_drop _stringappend_588_ (build_ex _stringappend_590_) in
              match (reg_name_matches_prefix _stringappend_591_) with
              | Some (_stringappend_592_,(existT _ _stringappend_593_ _)) =>
                 let _stringappend_594_ :=
                   string_drop _stringappend_591_ (build_ex _stringappend_593_) in
                 sep_matches_prefix _stringappend_594_ >>= fun w__32 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__32 with
                 | Some (_stringappend_595_,(existT _ _stringappend_596_ _)) =>
                    let _stringappend_597_ :=
                      string_drop _stringappend_594_ (build_ex _stringappend_596_) in
                    match (reg_name_matches_prefix _stringappend_597_) with
                    | Some (_stringappend_598_,(existT _ _stringappend_599_ _)) =>
                       let _stringappend_600_ :=
                         string_drop _stringappend_597_ (build_ex _stringappend_599_) in
                       sep_matches_prefix _stringappend_600_ >>= fun w__33 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__33 with
                                      | Some (_stringappend_601_,(existT _ _stringappend_602_ _)) =>
                                         let _stringappend_603_ :=
                                           string_drop _stringappend_600_
                                             (build_ex
                                             _stringappend_602_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_603_) with
                                              | Some
                                                (_stringappend_604_,(existT _ _stringappend_605_ _)) =>
                                                 match (string_drop _stringappend_603_
                                                          (build_ex
                                                          _stringappend_605_)) with
                                                 | "" => true
                                                 | _ => false
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__34 : bool =>
                    returnm ((if (w__34) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__35 : bool =>
                 returnm ((if (w__35) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__36 : bool =>
              returnm ((if (w__36) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__37 : bool =>
           returnm ((if (w__37) then true
                     else false)
            : bool)) >>= fun w__38 : bool =>
         (if (w__38) then
            let _stringappend_588_ := string_drop _stringappend_559_ (string_length "jalr") in
            match (spc_matches_prefix _stringappend_588_) with
            | Some (_stringappend_589_,(existT _ _stringappend_590_ _)) =>
               returnm ((_stringappend_589_, build_ex _stringappend_590_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__40 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_590_ _) :=
              w__40
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_591_ := string_drop _stringappend_588_ (build_ex _stringappend_590_) in
            match (reg_name_matches_prefix _stringappend_591_) with
            | Some (_stringappend_592_,(existT _ _stringappend_593_ _)) =>
               returnm ((_stringappend_592_, build_ex _stringappend_593_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__42 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rd, existT _ _stringappend_593_ _) :=
              w__42
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_594_ := string_drop _stringappend_591_ (build_ex _stringappend_593_) in
            sep_matches_prefix _stringappend_594_ >>= fun w__43 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__43 with
            | Some (_stringappend_595_,(existT _ _stringappend_596_ _)) =>
               returnm ((_stringappend_595_, build_ex _stringappend_596_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__45 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_596_ _) :=
              w__45
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_597_ := string_drop _stringappend_594_ (build_ex _stringappend_596_) in
            match (reg_name_matches_prefix _stringappend_597_) with
            | Some (_stringappend_598_,(existT _ _stringappend_599_ _)) =>
               returnm ((_stringappend_598_, build_ex _stringappend_599_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__47 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rs1, existT _ _stringappend_599_ _) :=
              w__47
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_600_ := string_drop _stringappend_597_ (build_ex _stringappend_599_) in
            sep_matches_prefix _stringappend_600_ >>= fun w__48 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__48 with
            | Some (_stringappend_601_,(existT _ _stringappend_602_ _)) =>
               returnm ((_stringappend_601_, build_ex _stringappend_602_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__50 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_602_ _) :=
              w__50
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_603_ := string_drop _stringappend_600_ (build_ex _stringappend_602_) in
            match (hex_bits_12_matches_prefix _stringappend_603_) with
            | Some (_stringappend_604_,(existT _ _stringappend_605_ _)) =>
               returnm ((_stringappend_604_, build_ex _stringappend_605_)
                : (mword 12 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__52 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
            let '(imm, existT _ _stringappend_605_ _) :=
              w__52
               : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
            (match (string_drop _stringappend_603_ (build_ex _stringappend_605_)) with
             | "" => returnm (true  : bool)
             | _ => exit tt  : M (bool)
             end)
             : M (bool)
          else
            match (btype_mnemonic_matches_prefix _stringappend_559_) with
            | Some (_stringappend_607_,(existT _ _stringappend_608_ _)) =>
               let _stringappend_609_ :=
                 string_drop _stringappend_559_ (build_ex _stringappend_608_) in
               match (spc_matches_prefix _stringappend_609_) with
               | Some (_stringappend_610_,(existT _ _stringappend_611_ _)) =>
                  let _stringappend_612_ :=
                    string_drop _stringappend_609_ (build_ex _stringappend_611_) in
                  match (reg_name_matches_prefix _stringappend_612_) with
                  | Some (_stringappend_613_,(existT _ _stringappend_614_ _)) =>
                     let _stringappend_615_ :=
                       string_drop _stringappend_612_ (build_ex _stringappend_614_) in
                     sep_matches_prefix _stringappend_615_ >>= fun w__55 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__55 with
                     | Some (_stringappend_616_,(existT _ _stringappend_617_ _)) =>
                        let _stringappend_618_ :=
                          string_drop _stringappend_615_ (build_ex _stringappend_617_) in
                        match (reg_name_matches_prefix _stringappend_618_) with
                        | Some (_stringappend_619_,(existT _ _stringappend_620_ _)) =>
                           let _stringappend_621_ :=
                             string_drop _stringappend_618_ (build_ex _stringappend_620_) in
                           sep_matches_prefix _stringappend_621_ >>= fun w__56 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__56 with
                                          | Some
                                            (_stringappend_622_,(existT _ _stringappend_623_ _)) =>
                                             let _stringappend_624_ :=
                                               string_drop _stringappend_621_
                                                 (build_ex
                                                 _stringappend_623_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_624_) with
                                                  | Some
                                                    (_stringappend_625_,(existT _ _stringappend_626_ _)) =>
                                                     match (string_drop _stringappend_624_
                                                              (build_ex
                                                              _stringappend_626_)) with
                                                     | "" => true
                                                     | _ => false
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__57 : bool =>
                        returnm ((if (w__57) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__58 : bool =>
                     returnm ((if (w__58) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__59 : bool =>
                  returnm ((if (w__59) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__60 : bool =>
               returnm ((if (w__60) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__61 : bool =>
            (if (w__61) then
               match (btype_mnemonic_matches_prefix _stringappend_559_) with
               | Some (_stringappend_607_,(existT _ _stringappend_608_ _)) =>
                  returnm ((_stringappend_607_, build_ex _stringappend_608_)
                   : (bop * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__63 : (bop * {n : Z & ArithFact (n >= 0)}) =>
               let '(op, existT _ _stringappend_608_ _) :=
                 w__63
                  : (bop * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_609_ :=
                 string_drop _stringappend_559_ (build_ex _stringappend_608_) in
               match (spc_matches_prefix _stringappend_609_) with
               | Some (_stringappend_610_,(existT _ _stringappend_611_ _)) =>
                  returnm ((_stringappend_610_, build_ex _stringappend_611_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__65 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_611_ _) :=
                 w__65
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_612_ :=
                 string_drop _stringappend_609_ (build_ex _stringappend_611_) in
               match (reg_name_matches_prefix _stringappend_612_) with
               | Some (_stringappend_613_,(existT _ _stringappend_614_ _)) =>
                  returnm ((_stringappend_613_, build_ex _stringappend_614_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__67 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs1, existT _ _stringappend_614_ _) :=
                 w__67
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_615_ :=
                 string_drop _stringappend_612_ (build_ex _stringappend_614_) in
               sep_matches_prefix _stringappend_615_ >>= fun w__68 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__68 with
               | Some (_stringappend_616_,(existT _ _stringappend_617_ _)) =>
                  returnm ((_stringappend_616_, build_ex _stringappend_617_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__70 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_617_ _) :=
                 w__70
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_618_ :=
                 string_drop _stringappend_615_ (build_ex _stringappend_617_) in
               match (reg_name_matches_prefix _stringappend_618_) with
               | Some (_stringappend_619_,(existT _ _stringappend_620_ _)) =>
                  returnm ((_stringappend_619_, build_ex _stringappend_620_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__72 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs2, existT _ _stringappend_620_ _) :=
                 w__72
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_621_ :=
                 string_drop _stringappend_618_ (build_ex _stringappend_620_) in
               sep_matches_prefix _stringappend_621_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__73 with
               | Some (_stringappend_622_,(existT _ _stringappend_623_ _)) =>
                  returnm ((_stringappend_622_, build_ex _stringappend_623_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__75 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_623_ _) :=
                 w__75
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_624_ :=
                 string_drop _stringappend_621_ (build_ex _stringappend_623_) in
               match (hex_bits_13_matches_prefix _stringappend_624_) with
               | Some (_stringappend_625_,(existT _ _stringappend_626_ _)) =>
                  returnm ((_stringappend_625_, build_ex _stringappend_626_)
                   : (mword 13 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__77 : (mword 13 * {n : Z & ArithFact (n >= 0)}) =>
               let '(imm, existT _ _stringappend_626_ _) :=
                 w__77
                  : (mword 13 * {n : Z & ArithFact (n >= 0)}) in
               (match (string_drop _stringappend_624_ (build_ex _stringappend_626_)) with
                | "" => returnm (true  : bool)
                | _ => exit tt  : M (bool)
                end)
                : M (bool)
             else
               match (itype_mnemonic_matches_prefix _stringappend_559_) with
               | Some (_stringappend_628_,(existT _ _stringappend_629_ _)) =>
                  let _stringappend_630_ :=
                    string_drop _stringappend_559_ (build_ex _stringappend_629_) in
                  match (spc_matches_prefix _stringappend_630_) with
                  | Some (_stringappend_631_,(existT _ _stringappend_632_ _)) =>
                     let _stringappend_633_ :=
                       string_drop _stringappend_630_ (build_ex _stringappend_632_) in
                     match (reg_name_matches_prefix _stringappend_633_) with
                     | Some (_stringappend_634_,(existT _ _stringappend_635_ _)) =>
                        let _stringappend_636_ :=
                          string_drop _stringappend_633_ (build_ex _stringappend_635_) in
                        sep_matches_prefix _stringappend_636_ >>= fun w__80 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__80 with
                        | Some (_stringappend_637_,(existT _ _stringappend_638_ _)) =>
                           let _stringappend_639_ :=
                             string_drop _stringappend_636_ (build_ex _stringappend_638_) in
                           match (reg_name_matches_prefix _stringappend_639_) with
                           | Some (_stringappend_640_,(existT _ _stringappend_641_ _)) =>
                              let _stringappend_642_ :=
                                string_drop _stringappend_639_ (build_ex _stringappend_641_) in
                              sep_matches_prefix _stringappend_642_ >>= fun w__81 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__81 with
                                             | Some
                                               (_stringappend_643_,(existT _ _stringappend_644_ _)) =>
                                                let _stringappend_645_ :=
                                                  string_drop _stringappend_642_
                                                    (build_ex
                                                    _stringappend_644_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_645_) with
                                                     | Some
                                                       (_stringappend_646_,(existT _ _stringappend_647_ _)) =>
                                                        match (string_drop _stringappend_645_
                                                                 (build_ex
                                                                 _stringappend_647_)) with
                                                        | "" => true
                                                        | _ => false
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__82 : bool =>
                           returnm ((if (w__82) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__83 : bool =>
                        returnm ((if (w__83) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__84 : bool =>
                     returnm ((if (w__84) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__85 : bool =>
                  returnm ((if (w__85) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__86 : bool =>
               (if (w__86) then
                  match (itype_mnemonic_matches_prefix _stringappend_559_) with
                  | Some (_stringappend_628_,(existT _ _stringappend_629_ _)) =>
                     returnm ((_stringappend_628_, build_ex _stringappend_629_)
                      : (iop * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__88 : (iop * {n : Z & ArithFact (n >= 0)}) =>
                  let '(op, existT _ _stringappend_629_ _) :=
                    w__88
                     : (iop * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_630_ :=
                    string_drop _stringappend_559_ (build_ex _stringappend_629_) in
                  match (spc_matches_prefix _stringappend_630_) with
                  | Some (_stringappend_631_,(existT _ _stringappend_632_ _)) =>
                     returnm ((_stringappend_631_, build_ex _stringappend_632_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__90 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_632_ _) :=
                    w__90
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_633_ :=
                    string_drop _stringappend_630_ (build_ex _stringappend_632_) in
                  match (reg_name_matches_prefix _stringappend_633_) with
                  | Some (_stringappend_634_,(existT _ _stringappend_635_ _)) =>
                     returnm ((_stringappend_634_, build_ex _stringappend_635_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__92 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rd, existT _ _stringappend_635_ _) :=
                    w__92
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_636_ :=
                    string_drop _stringappend_633_ (build_ex _stringappend_635_) in
                  sep_matches_prefix _stringappend_636_ >>= fun w__93 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__93 with
                  | Some (_stringappend_637_,(existT _ _stringappend_638_ _)) =>
                     returnm ((_stringappend_637_, build_ex _stringappend_638_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__95 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_638_ _) :=
                    w__95
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_639_ :=
                    string_drop _stringappend_636_ (build_ex _stringappend_638_) in
                  match (reg_name_matches_prefix _stringappend_639_) with
                  | Some (_stringappend_640_,(existT _ _stringappend_641_ _)) =>
                     returnm ((_stringappend_640_, build_ex _stringappend_641_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__97 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rs1, existT _ _stringappend_641_ _) :=
                    w__97
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_642_ :=
                    string_drop _stringappend_639_ (build_ex _stringappend_641_) in
                  sep_matches_prefix _stringappend_642_ >>= fun w__98 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__98 with
                  | Some (_stringappend_643_,(existT _ _stringappend_644_ _)) =>
                     returnm ((_stringappend_643_, build_ex _stringappend_644_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__100 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_644_ _) :=
                    w__100
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_645_ :=
                    string_drop _stringappend_642_ (build_ex _stringappend_644_) in
                  match (hex_bits_12_matches_prefix _stringappend_645_) with
                  | Some (_stringappend_646_,(existT _ _stringappend_647_ _)) =>
                     returnm ((_stringappend_646_, build_ex _stringappend_647_)
                      : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__102 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(imm, existT _ _stringappend_647_ _) :=
                    w__102
                     : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                  (match (string_drop _stringappend_645_ (build_ex _stringappend_647_)) with
                   | "" => returnm (true  : bool)
                   | _ => exit tt  : M (bool)
                   end)
                   : M (bool)
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_559_) with
                  | Some (_stringappend_649_,(existT _ _stringappend_650_ _)) =>
                     let _stringappend_651_ :=
                       string_drop _stringappend_559_ (build_ex _stringappend_650_) in
                     match (spc_matches_prefix _stringappend_651_) with
                     | Some (_stringappend_652_,(existT _ _stringappend_653_ _)) =>
                        let _stringappend_654_ :=
                          string_drop _stringappend_651_ (build_ex _stringappend_653_) in
                        match (reg_name_matches_prefix _stringappend_654_) with
                        | Some (_stringappend_655_,(existT _ _stringappend_656_ _)) =>
                           let _stringappend_657_ :=
                             string_drop _stringappend_654_ (build_ex _stringappend_656_) in
                           sep_matches_prefix _stringappend_657_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__105 with
                                          | Some
                                            (_stringappend_658_,(existT _ _stringappend_659_ _)) =>
                                             let _stringappend_660_ :=
                                               string_drop _stringappend_657_
                                                 (build_ex
                                                 _stringappend_659_) in
                                             if ((match (reg_name_matches_prefix _stringappend_660_) with
                                                  | Some
                                                    (_stringappend_661_,(existT _ _stringappend_662_ _)) =>
                                                     let _stringappend_663_ :=
                                                       string_drop _stringappend_660_
                                                         (build_ex
                                                         _stringappend_662_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_663_) with
                                                          | Some
                                                            (_stringappend_664_,(existT _ _stringappend_665_ _)) =>
                                                             match (string_drop _stringappend_663_
                                                                      (build_ex
                                                                      _stringappend_665_)) with
                                                             | "" => true
                                                             | _ => false
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__106 : bool =>
                        returnm ((if (w__106) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__107 : bool =>
                     returnm ((if (w__107) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__108 : bool =>
                  (if (w__108) then
                     match (shiftiop_mnemonic_matches_prefix _stringappend_559_) with
                     | Some (_stringappend_649_,(existT _ _stringappend_650_ _)) =>
                        returnm ((_stringappend_649_, build_ex _stringappend_650_)
                         : (sop * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__110 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                     let '(op, existT _ _stringappend_650_ _) :=
                       w__110
                        : (sop * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_651_ :=
                       string_drop _stringappend_559_ (build_ex _stringappend_650_) in
                     match (spc_matches_prefix _stringappend_651_) with
                     | Some (_stringappend_652_,(existT _ _stringappend_653_ _)) =>
                        returnm ((_stringappend_652_, build_ex _stringappend_653_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__112 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_653_ _) :=
                       w__112
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_654_ :=
                       string_drop _stringappend_651_ (build_ex _stringappend_653_) in
                     match (reg_name_matches_prefix _stringappend_654_) with
                     | Some (_stringappend_655_,(existT _ _stringappend_656_ _)) =>
                        returnm ((_stringappend_655_, build_ex _stringappend_656_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__114 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rd, existT _ _stringappend_656_ _) :=
                       w__114
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_657_ :=
                       string_drop _stringappend_654_ (build_ex _stringappend_656_) in
                     sep_matches_prefix _stringappend_657_ >>= fun w__115 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__115 with
                     | Some (_stringappend_658_,(existT _ _stringappend_659_ _)) =>
                        returnm ((_stringappend_658_, build_ex _stringappend_659_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__117 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_659_ _) :=
                       w__117
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_660_ :=
                       string_drop _stringappend_657_ (build_ex _stringappend_659_) in
                     match (reg_name_matches_prefix _stringappend_660_) with
                     | Some (_stringappend_661_,(existT _ _stringappend_662_ _)) =>
                        returnm ((_stringappend_661_, build_ex _stringappend_662_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__119 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rs1, existT _ _stringappend_662_ _) :=
                       w__119
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_663_ :=
                       string_drop _stringappend_660_ (build_ex _stringappend_662_) in
                     match (hex_bits_6_matches_prefix _stringappend_663_) with
                     | Some (_stringappend_664_,(existT _ _stringappend_665_ _)) =>
                        returnm ((_stringappend_664_, build_ex _stringappend_665_)
                         : (mword 6 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__121 : (mword 6 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(shamt, existT _ _stringappend_665_ _) :=
                       w__121
                        : (mword 6 * {n : Z & ArithFact (n >= 0)}) in
                     (match (string_drop _stringappend_663_ (build_ex _stringappend_665_)) with
                      | "" => returnm (true  : bool)
                      | _ => exit tt  : M (bool)
                      end)
                      : M (bool)
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_559_) with
                     | Some (_stringappend_667_,(existT _ _stringappend_668_ _)) =>
                        let _stringappend_669_ :=
                          string_drop _stringappend_559_ (build_ex _stringappend_668_) in
                        match (spc_matches_prefix _stringappend_669_) with
                        | Some (_stringappend_670_,(existT _ _stringappend_671_ _)) =>
                           let _stringappend_672_ :=
                             string_drop _stringappend_669_ (build_ex _stringappend_671_) in
                           match (reg_name_matches_prefix _stringappend_672_) with
                           | Some (_stringappend_673_,(existT _ _stringappend_674_ _)) =>
                              let _stringappend_675_ :=
                                string_drop _stringappend_672_ (build_ex _stringappend_674_) in
                              sep_matches_prefix _stringappend_675_ >>= fun w__124 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__124 with
                              | Some (_stringappend_676_,(existT _ _stringappend_677_ _)) =>
                                 let _stringappend_678_ :=
                                   string_drop _stringappend_675_ (build_ex _stringappend_677_) in
                                 match (reg_name_matches_prefix _stringappend_678_) with
                                 | Some (_stringappend_679_,(existT _ _stringappend_680_ _)) =>
                                    let _stringappend_681_ :=
                                      string_drop _stringappend_678_ (build_ex _stringappend_680_) in
                                    sep_matches_prefix _stringappend_681_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__125 with
                                                   | Some
                                                     (_stringappend_682_,(existT _ _stringappend_683_ _)) =>
                                                      let _stringappend_684_ :=
                                                        string_drop _stringappend_681_
                                                          (build_ex
                                                          _stringappend_683_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_684_) with
                                                           | Some
                                                             (_stringappend_685_,(existT _ _stringappend_686_ _)) =>
                                                              match (string_drop _stringappend_684_
                                                                       (build_ex
                                                                       _stringappend_686_)) with
                                                              | "" => true
                                                              | _ => false
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__126 : bool =>
                                 returnm ((if (w__126) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__127 : bool =>
                              returnm ((if (w__127) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__128 : bool =>
                           returnm ((if (w__128) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__129 : bool =>
                        returnm ((if (w__129) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__130 : bool =>
                     (if (w__130) then
                        match (rtype_mnemonic_matches_prefix _stringappend_559_) with
                        | Some (_stringappend_667_,(existT _ _stringappend_668_ _)) =>
                           returnm ((_stringappend_667_, build_ex _stringappend_668_)
                            : (rop * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__132 : (rop * {n : Z & ArithFact (n >= 0)}) =>
                        let '(op, existT _ _stringappend_668_ _) :=
                          w__132
                           : (rop * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_669_ :=
                          string_drop _stringappend_559_ (build_ex _stringappend_668_) in
                        match (spc_matches_prefix _stringappend_669_) with
                        | Some (_stringappend_670_,(existT _ _stringappend_671_ _)) =>
                           returnm ((_stringappend_670_, build_ex _stringappend_671_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__134 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_671_ _) :=
                          w__134
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_672_ :=
                          string_drop _stringappend_669_ (build_ex _stringappend_671_) in
                        match (reg_name_matches_prefix _stringappend_672_) with
                        | Some (_stringappend_673_,(existT _ _stringappend_674_ _)) =>
                           returnm ((_stringappend_673_, build_ex _stringappend_674_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__136 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rd, existT _ _stringappend_674_ _) :=
                          w__136
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_675_ :=
                          string_drop _stringappend_672_ (build_ex _stringappend_674_) in
                        sep_matches_prefix _stringappend_675_ >>= fun w__137 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__137 with
                        | Some (_stringappend_676_,(existT _ _stringappend_677_ _)) =>
                           returnm ((_stringappend_676_, build_ex _stringappend_677_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__139 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_677_ _) :=
                          w__139
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_678_ :=
                          string_drop _stringappend_675_ (build_ex _stringappend_677_) in
                        match (reg_name_matches_prefix _stringappend_678_) with
                        | Some (_stringappend_679_,(existT _ _stringappend_680_ _)) =>
                           returnm ((_stringappend_679_, build_ex _stringappend_680_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__141 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs1, existT _ _stringappend_680_ _) :=
                          w__141
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_681_ :=
                          string_drop _stringappend_678_ (build_ex _stringappend_680_) in
                        sep_matches_prefix _stringappend_681_ >>= fun w__142 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__142 with
                        | Some (_stringappend_682_,(existT _ _stringappend_683_ _)) =>
                           returnm ((_stringappend_682_, build_ex _stringappend_683_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__144 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_683_ _) :=
                          w__144
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_684_ :=
                          string_drop _stringappend_681_ (build_ex _stringappend_683_) in
                        match (reg_name_matches_prefix _stringappend_684_) with
                        | Some (_stringappend_685_,(existT _ _stringappend_686_ _)) =>
                           returnm ((_stringappend_685_, build_ex _stringappend_686_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__146 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs2, existT _ _stringappend_686_ _) :=
                          w__146
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        (match (string_drop _stringappend_684_ (build_ex _stringappend_686_)) with
                         | "" => returnm (true  : bool)
                         | _ => exit tt  : M (bool)
                         end)
                         : M (bool)
                      else
                        and_boolM (returnm ((string_startswith _stringappend_559_ "l")  : bool))
                          (let _stringappend_688_ :=
                            string_drop _stringappend_559_ (string_length "l") in
                          match (size_mnemonic_matches_prefix _stringappend_688_) with
                          | Some (_stringappend_689_,(existT _ _stringappend_690_ _)) =>
                             let _stringappend_691_ :=
                               string_drop _stringappend_688_ (build_ex _stringappend_690_) in
                             match (maybe_u_matches_prefix _stringappend_691_) with
                             | Some (_stringappend_692_,(existT _ _stringappend_693_ _)) =>
                                let _stringappend_694_ :=
                                  string_drop _stringappend_691_ (build_ex _stringappend_693_) in
                                match (maybe_aq_matches_prefix _stringappend_694_) with
                                | Some (_stringappend_695_,(existT _ _stringappend_696_ _)) =>
                                   let _stringappend_697_ :=
                                     string_drop _stringappend_694_ (build_ex _stringappend_696_) in
                                   match (maybe_rl_matches_prefix _stringappend_697_) with
                                   | Some (_stringappend_698_,(existT _ _stringappend_699_ _)) =>
                                      let _stringappend_700_ :=
                                        string_drop _stringappend_697_ (build_ex _stringappend_699_) in
                                      match (spc_matches_prefix _stringappend_700_) with
                                      | Some (_stringappend_701_,(existT _ _stringappend_702_ _)) =>
                                         let _stringappend_703_ :=
                                           string_drop _stringappend_700_
                                             (build_ex
                                             _stringappend_702_) in
                                         match (reg_name_matches_prefix _stringappend_703_) with
                                         | Some (_stringappend_704_,(existT _ _stringappend_705_ _)) =>
                                            let _stringappend_706_ :=
                                              string_drop _stringappend_703_
                                                (build_ex
                                                _stringappend_705_) in
                                            sep_matches_prefix _stringappend_706_ >>= fun w__149 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__149 with
                                            | Some
                                              (_stringappend_707_,(existT _ _stringappend_708_ _)) =>
                                               let _stringappend_709_ :=
                                                 string_drop _stringappend_706_
                                                   (build_ex
                                                   _stringappend_708_) in
                                               match (reg_name_matches_prefix _stringappend_709_) with
                                               | Some
                                                 (_stringappend_710_,(existT _ _stringappend_711_ _)) =>
                                                  let _stringappend_712_ :=
                                                    string_drop _stringappend_709_
                                                      (build_ex
                                                      _stringappend_711_) in
                                                  sep_matches_prefix _stringappend_712_ >>= fun w__150 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__150 with
                                                                 | Some
                                                                   (_stringappend_713_,(existT _ _stringappend_714_ _)) =>
                                                                    let _stringappend_715_ :=
                                                                      string_drop _stringappend_712_
                                                                        (build_ex
                                                                        _stringappend_714_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_715_) with
                                                                         | Some
                                                                           (_stringappend_716_,(existT _ _stringappend_717_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_715_
                                                                                     (build_ex
                                                                                     _stringappend_717_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__151 : bool =>
                                               returnm ((if (w__151) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__152 : bool =>
                                            returnm ((if (w__152) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__153 : bool =>
                                         returnm ((if (w__153) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__154 : bool =>
                                      returnm ((if (w__154) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__155 : bool =>
                                   returnm ((if (w__155) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__156 : bool =>
                                returnm ((if (w__156) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__157 : bool =>
                             returnm ((if (w__157) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__158 : bool =>
                          returnm ((if (w__158) then true
                                    else false)
                           : bool)) >>= fun w__159 : bool =>
                        (if (w__159) then
                           let _stringappend_688_ :=
                             string_drop _stringappend_559_ (string_length "l") in
                           match (size_mnemonic_matches_prefix _stringappend_688_) with
                           | Some (_stringappend_689_,(existT _ _stringappend_690_ _)) =>
                              returnm ((_stringappend_689_, build_ex _stringappend_690_)
                               : (word_width * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__161 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                           let '(size, existT _ _stringappend_690_ _) :=
                             w__161
                              : (word_width * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_691_ :=
                             string_drop _stringappend_688_ (build_ex _stringappend_690_) in
                           match (maybe_u_matches_prefix _stringappend_691_) with
                           | Some (_stringappend_692_,(existT _ _stringappend_693_ _)) =>
                              returnm ((_stringappend_692_, build_ex _stringappend_693_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__163 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(is_unsigned, existT _ _stringappend_693_ _) :=
                             w__163
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_694_ :=
                             string_drop _stringappend_691_ (build_ex _stringappend_693_) in
                           match (maybe_aq_matches_prefix _stringappend_694_) with
                           | Some (_stringappend_695_,(existT _ _stringappend_696_ _)) =>
                              returnm ((_stringappend_695_, build_ex _stringappend_696_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__165 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(aq, existT _ _stringappend_696_ _) :=
                             w__165
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_697_ :=
                             string_drop _stringappend_694_ (build_ex _stringappend_696_) in
                           match (maybe_rl_matches_prefix _stringappend_697_) with
                           | Some (_stringappend_698_,(existT _ _stringappend_699_ _)) =>
                              returnm ((_stringappend_698_, build_ex _stringappend_699_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__167 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rl, existT _ _stringappend_699_ _) :=
                             w__167
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_700_ :=
                             string_drop _stringappend_697_ (build_ex _stringappend_699_) in
                           match (spc_matches_prefix _stringappend_700_) with
                           | Some (_stringappend_701_,(existT _ _stringappend_702_ _)) =>
                              returnm ((_stringappend_701_, build_ex _stringappend_702_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__169 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_702_ _) :=
                             w__169
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_703_ :=
                             string_drop _stringappend_700_ (build_ex _stringappend_702_) in
                           match (reg_name_matches_prefix _stringappend_703_) with
                           | Some (_stringappend_704_,(existT _ _stringappend_705_ _)) =>
                              returnm ((_stringappend_704_, build_ex _stringappend_705_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__171 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rd, existT _ _stringappend_705_ _) :=
                             w__171
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_706_ :=
                             string_drop _stringappend_703_ (build_ex _stringappend_705_) in
                           sep_matches_prefix _stringappend_706_ >>= fun w__172 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__172 with
                           | Some (_stringappend_707_,(existT _ _stringappend_708_ _)) =>
                              returnm ((_stringappend_707_, build_ex _stringappend_708_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__174 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_708_ _) :=
                             w__174
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_709_ :=
                             string_drop _stringappend_706_ (build_ex _stringappend_708_) in
                           match (reg_name_matches_prefix _stringappend_709_) with
                           | Some (_stringappend_710_,(existT _ _stringappend_711_ _)) =>
                              returnm ((_stringappend_710_, build_ex _stringappend_711_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__176 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rs1, existT _ _stringappend_711_ _) :=
                             w__176
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_712_ :=
                             string_drop _stringappend_709_ (build_ex _stringappend_711_) in
                           sep_matches_prefix _stringappend_712_ >>= fun w__177 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__177 with
                           | Some (_stringappend_713_,(existT _ _stringappend_714_ _)) =>
                              returnm ((_stringappend_713_, build_ex _stringappend_714_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__179 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_714_ _) :=
                             w__179
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_715_ :=
                             string_drop _stringappend_712_ (build_ex _stringappend_714_) in
                           match (hex_bits_12_matches_prefix _stringappend_715_) with
                           | Some (_stringappend_716_,(existT _ _stringappend_717_ _)) =>
                              returnm ((_stringappend_716_, build_ex _stringappend_717_)
                               : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__181 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(imm, existT _ _stringappend_717_ _) :=
                             w__181
                              : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                           (match (string_drop _stringappend_715_ (build_ex _stringappend_717_)) with
                            | "" => returnm (true  : bool)
                            | _ => exit tt  : M (bool)
                            end)
                            : M (bool)
                         else
                           and_boolM (returnm ((string_startswith _stringappend_559_ "s")  : bool))
                             (let _stringappend_719_ :=
                               string_drop _stringappend_559_ (string_length "s") in
                             match (size_mnemonic_matches_prefix _stringappend_719_) with
                             | Some (_stringappend_720_,(existT _ _stringappend_721_ _)) =>
                                let _stringappend_722_ :=
                                  string_drop _stringappend_719_ (build_ex _stringappend_721_) in
                                match (maybe_aq_matches_prefix _stringappend_722_) with
                                | Some (_stringappend_723_,(existT _ _stringappend_724_ _)) =>
                                   let _stringappend_725_ :=
                                     string_drop _stringappend_722_ (build_ex _stringappend_724_) in
                                   match (maybe_rl_matches_prefix _stringappend_725_) with
                                   | Some (_stringappend_726_,(existT _ _stringappend_727_ _)) =>
                                      let _stringappend_728_ :=
                                        string_drop _stringappend_725_ (build_ex _stringappend_727_) in
                                      match (spc_matches_prefix _stringappend_728_) with
                                      | Some (_stringappend_729_,(existT _ _stringappend_730_ _)) =>
                                         let _stringappend_731_ :=
                                           string_drop _stringappend_728_
                                             (build_ex
                                             _stringappend_730_) in
                                         match (reg_name_matches_prefix _stringappend_731_) with
                                         | Some (_stringappend_732_,(existT _ _stringappend_733_ _)) =>
                                            let _stringappend_734_ :=
                                              string_drop _stringappend_731_
                                                (build_ex
                                                _stringappend_733_) in
                                            sep_matches_prefix _stringappend_734_ >>= fun w__184 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__184 with
                                            | Some
                                              (_stringappend_735_,(existT _ _stringappend_736_ _)) =>
                                               let _stringappend_737_ :=
                                                 string_drop _stringappend_734_
                                                   (build_ex
                                                   _stringappend_736_) in
                                               match (reg_name_matches_prefix _stringappend_737_) with
                                               | Some
                                                 (_stringappend_738_,(existT _ _stringappend_739_ _)) =>
                                                  let _stringappend_740_ :=
                                                    string_drop _stringappend_737_
                                                      (build_ex
                                                      _stringappend_739_) in
                                                  sep_matches_prefix _stringappend_740_ >>= fun w__185 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__185 with
                                                                 | Some
                                                                   (_stringappend_741_,(existT _ _stringappend_742_ _)) =>
                                                                    let _stringappend_743_ :=
                                                                      string_drop _stringappend_740_
                                                                        (build_ex
                                                                        _stringappend_742_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_743_) with
                                                                         | Some
                                                                           (_stringappend_744_,(existT _ _stringappend_745_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_743_
                                                                                     (build_ex
                                                                                     _stringappend_745_)) with
                                                                            | "" => true
                                                                            | _ => false
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__186 : bool =>
                                               returnm ((if (w__186) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__187 : bool =>
                                            returnm ((if (w__187) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__188 : bool =>
                                         returnm ((if (w__188) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__189 : bool =>
                                      returnm ((if (w__189) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__190 : bool =>
                                   returnm ((if (w__190) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__191 : bool =>
                                returnm ((if (w__191) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__192 : bool =>
                             returnm ((if (w__192) then true
                                       else false)
                              : bool)) >>= fun w__193 : bool =>
                           (if (w__193) then
                              let _stringappend_719_ :=
                                string_drop _stringappend_559_ (string_length "s") in
                              match (size_mnemonic_matches_prefix _stringappend_719_) with
                              | Some (_stringappend_720_,(existT _ _stringappend_721_ _)) =>
                                 returnm ((_stringappend_720_, build_ex _stringappend_721_)
                                  : (word_width * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__195 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                              let '(size, existT _ _stringappend_721_ _) :=
                                w__195
                                 : (word_width * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_722_ :=
                                string_drop _stringappend_719_ (build_ex _stringappend_721_) in
                              match (maybe_aq_matches_prefix _stringappend_722_) with
                              | Some (_stringappend_723_,(existT _ _stringappend_724_ _)) =>
                                 returnm ((_stringappend_723_, build_ex _stringappend_724_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__197 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(aq, existT _ _stringappend_724_ _) :=
                                w__197
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_725_ :=
                                string_drop _stringappend_722_ (build_ex _stringappend_724_) in
                              match (maybe_rl_matches_prefix _stringappend_725_) with
                              | Some (_stringappend_726_,(existT _ _stringappend_727_ _)) =>
                                 returnm ((_stringappend_726_, build_ex _stringappend_727_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__199 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rl, existT _ _stringappend_727_ _) :=
                                w__199
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_728_ :=
                                string_drop _stringappend_725_ (build_ex _stringappend_727_) in
                              match (spc_matches_prefix _stringappend_728_) with
                              | Some (_stringappend_729_,(existT _ _stringappend_730_ _)) =>
                                 returnm ((_stringappend_729_, build_ex _stringappend_730_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__201 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_730_ _) :=
                                w__201
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_731_ :=
                                string_drop _stringappend_728_ (build_ex _stringappend_730_) in
                              match (reg_name_matches_prefix _stringappend_731_) with
                              | Some (_stringappend_732_,(existT _ _stringappend_733_ _)) =>
                                 returnm ((_stringappend_732_, build_ex _stringappend_733_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__203 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rd, existT _ _stringappend_733_ _) :=
                                w__203
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_734_ :=
                                string_drop _stringappend_731_ (build_ex _stringappend_733_) in
                              sep_matches_prefix _stringappend_734_ >>= fun w__204 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__204 with
                              | Some (_stringappend_735_,(existT _ _stringappend_736_ _)) =>
                                 returnm ((_stringappend_735_, build_ex _stringappend_736_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__206 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_736_ _) :=
                                w__206
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_737_ :=
                                string_drop _stringappend_734_ (build_ex _stringappend_736_) in
                              match (reg_name_matches_prefix _stringappend_737_) with
                              | Some (_stringappend_738_,(existT _ _stringappend_739_ _)) =>
                                 returnm ((_stringappend_738_, build_ex _stringappend_739_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__208 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rs1, existT _ _stringappend_739_ _) :=
                                w__208
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_740_ :=
                                string_drop _stringappend_737_ (build_ex _stringappend_739_) in
                              sep_matches_prefix _stringappend_740_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__209 with
                              | Some (_stringappend_741_,(existT _ _stringappend_742_ _)) =>
                                 returnm ((_stringappend_741_, build_ex _stringappend_742_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__211 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_742_ _) :=
                                w__211
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_743_ :=
                                string_drop _stringappend_740_ (build_ex _stringappend_742_) in
                              match (hex_bits_12_matches_prefix _stringappend_743_) with
                              | Some (_stringappend_744_,(existT _ _stringappend_745_ _)) =>
                                 returnm ((_stringappend_744_, build_ex _stringappend_745_)
                                  : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__213 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(imm, existT _ _stringappend_745_ _) :=
                                w__213
                                 : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                              (match (string_drop _stringappend_743_ (build_ex _stringappend_745_)) with
                               | "" => returnm (true  : bool)
                               | _ => exit tt  : M (bool)
                               end)
                               : M (bool)
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_559_ "addiw")
                                  : bool))
                                (let _stringappend_747_ :=
                                  string_drop _stringappend_559_ (string_length "addiw") in
                                match (spc_matches_prefix _stringappend_747_) with
                                | Some (_stringappend_748_,(existT _ _stringappend_749_ _)) =>
                                   let _stringappend_750_ :=
                                     string_drop _stringappend_747_ (build_ex _stringappend_749_) in
                                   match (reg_name_matches_prefix _stringappend_750_) with
                                   | Some (_stringappend_751_,(existT _ _stringappend_752_ _)) =>
                                      let _stringappend_753_ :=
                                        string_drop _stringappend_750_ (build_ex _stringappend_752_) in
                                      sep_matches_prefix _stringappend_753_ >>= fun w__216 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__216 with
                                      | Some (_stringappend_754_,(existT _ _stringappend_755_ _)) =>
                                         let _stringappend_756_ :=
                                           string_drop _stringappend_753_
                                             (build_ex
                                             _stringappend_755_) in
                                         match (reg_name_matches_prefix _stringappend_756_) with
                                         | Some (_stringappend_757_,(existT _ _stringappend_758_ _)) =>
                                            let _stringappend_759_ :=
                                              string_drop _stringappend_756_
                                                (build_ex
                                                _stringappend_758_) in
                                            sep_matches_prefix _stringappend_759_ >>= fun w__217 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__217 with
                                                           | Some
                                                             (_stringappend_760_,(existT _ _stringappend_761_ _)) =>
                                                              let _stringappend_762_ :=
                                                                string_drop _stringappend_759_
                                                                  (build_ex
                                                                  _stringappend_761_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_762_) with
                                                                   | Some
                                                                     (_stringappend_763_,(existT _ _stringappend_764_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_762_
                                                                               (build_ex
                                                                               _stringappend_764_)) with
                                                                      | "" => true
                                                                      | _ => false
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__218 : bool =>
                                         returnm ((if (w__218) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__219 : bool =>
                                      returnm ((if (w__219) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__220 : bool =>
                                   returnm ((if (w__220) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__221 : bool =>
                                returnm ((if (w__221) then true
                                          else false)
                                 : bool)) >>= fun w__222 : bool =>
                              (if (w__222) then
                                 let _stringappend_747_ :=
                                   string_drop _stringappend_559_ (string_length "addiw") in
                                 match (spc_matches_prefix _stringappend_747_) with
                                 | Some (_stringappend_748_,(existT _ _stringappend_749_ _)) =>
                                    returnm ((_stringappend_748_, build_ex _stringappend_749_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__224 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_749_ _) :=
                                   w__224
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_750_ :=
                                   string_drop _stringappend_747_ (build_ex _stringappend_749_) in
                                 match (reg_name_matches_prefix _stringappend_750_) with
                                 | Some (_stringappend_751_,(existT _ _stringappend_752_ _)) =>
                                    returnm ((_stringappend_751_, build_ex _stringappend_752_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__226 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rd, existT _ _stringappend_752_ _) :=
                                   w__226
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_753_ :=
                                   string_drop _stringappend_750_ (build_ex _stringappend_752_) in
                                 sep_matches_prefix _stringappend_753_ >>= fun w__227 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__227 with
                                 | Some (_stringappend_754_,(existT _ _stringappend_755_ _)) =>
                                    returnm ((_stringappend_754_, build_ex _stringappend_755_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__229 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_755_ _) :=
                                   w__229
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_756_ :=
                                   string_drop _stringappend_753_ (build_ex _stringappend_755_) in
                                 match (reg_name_matches_prefix _stringappend_756_) with
                                 | Some (_stringappend_757_,(existT _ _stringappend_758_ _)) =>
                                    returnm ((_stringappend_757_, build_ex _stringappend_758_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__231 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rs1, existT _ _stringappend_758_ _) :=
                                   w__231
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_759_ :=
                                   string_drop _stringappend_756_ (build_ex _stringappend_758_) in
                                 sep_matches_prefix _stringappend_759_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__232 with
                                 | Some (_stringappend_760_,(existT _ _stringappend_761_ _)) =>
                                    returnm ((_stringappend_760_, build_ex _stringappend_761_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__234 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_761_ _) :=
                                   w__234
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_762_ :=
                                   string_drop _stringappend_759_ (build_ex _stringappend_761_) in
                                 match (hex_bits_12_matches_prefix _stringappend_762_) with
                                 | Some (_stringappend_763_,(existT _ _stringappend_764_ _)) =>
                                    returnm ((_stringappend_763_, build_ex _stringappend_764_)
                                     : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__236 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(imm, existT _ _stringappend_764_ _) :=
                                   w__236
                                    : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                                 (match (string_drop _stringappend_762_
                                           (build_ex
                                           _stringappend_764_)) with
                                  | "" => returnm (true  : bool)
                                  | _ => exit tt  : M (bool)
                                  end)
                                  : M (bool)
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_559_) with
                                 | Some (_stringappend_766_,(existT _ _stringappend_767_ _)) =>
                                    let _stringappend_768_ :=
                                      string_drop _stringappend_559_ (build_ex _stringappend_767_) in
                                    match (spc_matches_prefix _stringappend_768_) with
                                    | Some (_stringappend_769_,(existT _ _stringappend_770_ _)) =>
                                       let _stringappend_771_ :=
                                         string_drop _stringappend_768_
                                           (build_ex
                                           _stringappend_770_) in
                                       match (reg_name_matches_prefix _stringappend_771_) with
                                       | Some (_stringappend_772_,(existT _ _stringappend_773_ _)) =>
                                          let _stringappend_774_ :=
                                            string_drop _stringappend_771_
                                              (build_ex
                                              _stringappend_773_) in
                                          sep_matches_prefix _stringappend_774_ >>= fun w__239 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__239 with
                                          | Some
                                            (_stringappend_775_,(existT _ _stringappend_776_ _)) =>
                                             let _stringappend_777_ :=
                                               string_drop _stringappend_774_
                                                 (build_ex
                                                 _stringappend_776_) in
                                             match (reg_name_matches_prefix _stringappend_777_) with
                                             | Some
                                               (_stringappend_778_,(existT _ _stringappend_779_ _)) =>
                                                let _stringappend_780_ :=
                                                  string_drop _stringappend_777_
                                                    (build_ex
                                                    _stringappend_779_) in
                                                sep_matches_prefix _stringappend_780_ >>= fun w__240 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__240 with
                                                               | Some
                                                                 (_stringappend_781_,(existT _ _stringappend_782_ _)) =>
                                                                  let _stringappend_783_ :=
                                                                    string_drop _stringappend_780_
                                                                      (build_ex
                                                                      _stringappend_782_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_783_) with
                                                                       | Some
                                                                         (_stringappend_784_,(existT _ _stringappend_785_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_783_
                                                                                   (build_ex
                                                                                   _stringappend_785_)) with
                                                                          | "" => true
                                                                          | _ => false
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__241 : bool =>
                                             returnm ((if (w__241) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__242 : bool =>
                                          returnm ((if (w__242) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__243 : bool =>
                                       returnm ((if (w__243) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__244 : bool =>
                                    returnm ((if (w__244) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__245 : bool =>
                                 (if (w__245) then
                                    match (shiftw_mnemonic_matches_prefix _stringappend_559_) with
                                    | Some (_stringappend_766_,(existT _ _stringappend_767_ _)) =>
                                       returnm ((_stringappend_766_, build_ex _stringappend_767_)
                                        : (sop * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__247 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(op, existT _ _stringappend_767_ _) :=
                                      w__247
                                       : (sop * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_768_ :=
                                      string_drop _stringappend_559_ (build_ex _stringappend_767_) in
                                    match (spc_matches_prefix _stringappend_768_) with
                                    | Some (_stringappend_769_,(existT _ _stringappend_770_ _)) =>
                                       returnm ((_stringappend_769_, build_ex _stringappend_770_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__249 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_770_ _) :=
                                      w__249
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_771_ :=
                                      string_drop _stringappend_768_ (build_ex _stringappend_770_) in
                                    match (reg_name_matches_prefix _stringappend_771_) with
                                    | Some (_stringappend_772_,(existT _ _stringappend_773_ _)) =>
                                       returnm ((_stringappend_772_, build_ex _stringappend_773_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__251 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rd, existT _ _stringappend_773_ _) :=
                                      w__251
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_774_ :=
                                      string_drop _stringappend_771_ (build_ex _stringappend_773_) in
                                    sep_matches_prefix _stringappend_774_ >>= fun w__252 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__252 with
                                    | Some (_stringappend_775_,(existT _ _stringappend_776_ _)) =>
                                       returnm ((_stringappend_775_, build_ex _stringappend_776_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__254 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_776_ _) :=
                                      w__254
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_777_ :=
                                      string_drop _stringappend_774_ (build_ex _stringappend_776_) in
                                    match (reg_name_matches_prefix _stringappend_777_) with
                                    | Some (_stringappend_778_,(existT _ _stringappend_779_ _)) =>
                                       returnm ((_stringappend_778_, build_ex _stringappend_779_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__256 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rs1, existT _ _stringappend_779_ _) :=
                                      w__256
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_780_ :=
                                      string_drop _stringappend_777_ (build_ex _stringappend_779_) in
                                    sep_matches_prefix _stringappend_780_ >>= fun w__257 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__257 with
                                    | Some (_stringappend_781_,(existT _ _stringappend_782_ _)) =>
                                       returnm ((_stringappend_781_, build_ex _stringappend_782_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__259 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_782_ _) :=
                                      w__259
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_783_ :=
                                      string_drop _stringappend_780_ (build_ex _stringappend_782_) in
                                    match (hex_bits_5_matches_prefix _stringappend_783_) with
                                    | Some (_stringappend_784_,(existT _ _stringappend_785_ _)) =>
                                       returnm ((_stringappend_784_, build_ex _stringappend_785_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__261 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(shamt, existT _ _stringappend_785_ _) :=
                                      w__261
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    (match (string_drop _stringappend_783_
                                              (build_ex
                                              _stringappend_785_)) with
                                     | "" => returnm (true  : bool)
                                     | _ => exit tt  : M (bool)
                                     end)
                                     : M (bool)
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_559_) with
                                    | Some (_stringappend_787_,(existT _ _stringappend_788_ _)) =>
                                       let _stringappend_789_ :=
                                         string_drop _stringappend_559_
                                           (build_ex
                                           _stringappend_788_) in
                                       match (spc_matches_prefix _stringappend_789_) with
                                       | Some (_stringappend_790_,(existT _ _stringappend_791_ _)) =>
                                          let _stringappend_792_ :=
                                            string_drop _stringappend_789_
                                              (build_ex
                                              _stringappend_791_) in
                                          match (reg_name_matches_prefix _stringappend_792_) with
                                          | Some
                                            (_stringappend_793_,(existT _ _stringappend_794_ _)) =>
                                             let _stringappend_795_ :=
                                               string_drop _stringappend_792_
                                                 (build_ex
                                                 _stringappend_794_) in
                                             sep_matches_prefix _stringappend_795_ >>= fun w__264 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__264 with
                                             | Some
                                               (_stringappend_796_,(existT _ _stringappend_797_ _)) =>
                                                let _stringappend_798_ :=
                                                  string_drop _stringappend_795_
                                                    (build_ex
                                                    _stringappend_797_) in
                                                match (reg_name_matches_prefix _stringappend_798_) with
                                                | Some
                                                  (_stringappend_799_,(existT _ _stringappend_800_ _)) =>
                                                   let _stringappend_801_ :=
                                                     string_drop _stringappend_798_
                                                       (build_ex
                                                       _stringappend_800_) in
                                                   sep_matches_prefix _stringappend_801_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__265 with
                                                                  | Some
                                                                    (_stringappend_802_,(existT _ _stringappend_803_ _)) =>
                                                                     let _stringappend_804_ :=
                                                                       string_drop
                                                                         _stringappend_801_
                                                                         (build_ex
                                                                         _stringappend_803_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_804_) with
                                                                          | Some
                                                                            (_stringappend_805_,(existT _ _stringappend_806_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_804_
                                                                                      (build_ex
                                                                                      _stringappend_806_)) with
                                                                             | "" => true
                                                                             | _ => false
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__266 : bool =>
                                                returnm ((if (w__266) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__267 : bool =>
                                             returnm ((if (w__267) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__268 : bool =>
                                          returnm ((if (w__268) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__269 : bool =>
                                       returnm ((if (w__269) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__270 : bool =>
                                    (if (w__270) then
                                       match (rtypew_mnemonic_matches_prefix _stringappend_559_) with
                                       | Some (_stringappend_787_,(existT _ _stringappend_788_ _)) =>
                                          returnm ((_stringappend_787_, build_ex _stringappend_788_)
                                           : (ropw * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__272 : (ropw * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(op, existT _ _stringappend_788_ _) :=
                                         w__272
                                          : (ropw * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_789_ :=
                                         string_drop _stringappend_559_
                                           (build_ex
                                           _stringappend_788_) in
                                       match (spc_matches_prefix _stringappend_789_) with
                                       | Some (_stringappend_790_,(existT _ _stringappend_791_ _)) =>
                                          returnm ((_stringappend_790_, build_ex _stringappend_791_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__274 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_791_ _) :=
                                         w__274
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_792_ :=
                                         string_drop _stringappend_789_
                                           (build_ex
                                           _stringappend_791_) in
                                       match (reg_name_matches_prefix _stringappend_792_) with
                                       | Some (_stringappend_793_,(existT _ _stringappend_794_ _)) =>
                                          returnm ((_stringappend_793_, build_ex _stringappend_794_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__276 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rd, existT _ _stringappend_794_ _) :=
                                         w__276
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_795_ :=
                                         string_drop _stringappend_792_
                                           (build_ex
                                           _stringappend_794_) in
                                       sep_matches_prefix _stringappend_795_ >>= fun w__277 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__277 with
                                       | Some (_stringappend_796_,(existT _ _stringappend_797_ _)) =>
                                          returnm ((_stringappend_796_, build_ex _stringappend_797_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__279 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_797_ _) :=
                                         w__279
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_798_ :=
                                         string_drop _stringappend_795_
                                           (build_ex
                                           _stringappend_797_) in
                                       match (reg_name_matches_prefix _stringappend_798_) with
                                       | Some (_stringappend_799_,(existT _ _stringappend_800_ _)) =>
                                          returnm ((_stringappend_799_, build_ex _stringappend_800_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__281 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs1, existT _ _stringappend_800_ _) :=
                                         w__281
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_801_ :=
                                         string_drop _stringappend_798_
                                           (build_ex
                                           _stringappend_800_) in
                                       sep_matches_prefix _stringappend_801_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__282 with
                                       | Some (_stringappend_802_,(existT _ _stringappend_803_ _)) =>
                                          returnm ((_stringappend_802_, build_ex _stringappend_803_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__284 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_803_ _) :=
                                         w__284
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_804_ :=
                                         string_drop _stringappend_801_
                                           (build_ex
                                           _stringappend_803_) in
                                       match (reg_name_matches_prefix _stringappend_804_) with
                                       | Some (_stringappend_805_,(existT _ _stringappend_806_ _)) =>
                                          returnm ((_stringappend_805_, build_ex _stringappend_806_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__286 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs2, existT _ _stringappend_806_ _) :=
                                         w__286
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       (match (string_drop _stringappend_804_
                                                 (build_ex
                                                 _stringappend_806_)) with
                                        | "" => returnm (true  : bool)
                                        | _ => exit tt  : M (bool)
                                        end)
                                        : M (bool)
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_559_) with
                                       | Some (_stringappend_808_,(existT _ _stringappend_809_ _)) =>
                                          let _stringappend_810_ :=
                                            string_drop _stringappend_559_
                                              (build_ex
                                              _stringappend_809_) in
                                          match (spc_matches_prefix _stringappend_810_) with
                                          | Some
                                            (_stringappend_811_,(existT _ _stringappend_812_ _)) =>
                                             let _stringappend_813_ :=
                                               string_drop _stringappend_810_
                                                 (build_ex
                                                 _stringappend_812_) in
                                             match (reg_name_matches_prefix _stringappend_813_) with
                                             | Some
                                               (_stringappend_814_,(existT _ _stringappend_815_ _)) =>
                                                let _stringappend_816_ :=
                                                  string_drop _stringappend_813_
                                                    (build_ex
                                                    _stringappend_815_) in
                                                sep_matches_prefix _stringappend_816_ >>= fun w__289 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__289 with
                                                               | Some
                                                                 (_stringappend_817_,(existT _ _stringappend_818_ _)) =>
                                                                  let _stringappend_819_ :=
                                                                    string_drop _stringappend_816_
                                                                      (build_ex
                                                                      _stringappend_818_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_819_) with
                                                                       | Some
                                                                         (_stringappend_820_,(existT _ _stringappend_821_ _)) =>
                                                                          let _stringappend_822_ :=
                                                                            string_drop
                                                                              _stringappend_819_
                                                                              (build_ex
                                                                              _stringappend_821_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_822_) with
                                                                               | Some
                                                                                 (_stringappend_823_,(existT _ _stringappend_824_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_822_
                                                                                           (build_ex
                                                                                           _stringappend_824_)) with
                                                                                  | "" => true
                                                                                  | _ => false
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__290 : bool =>
                                             returnm ((if (w__290) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__291 : bool =>
                                          returnm ((if (w__291) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__292 : bool =>
                                       (if (w__292) then
                                          match (shiftiwop_mnemonic_matches_prefix
                                                   _stringappend_559_) with
                                          | Some
                                            (_stringappend_808_,(existT _ _stringappend_809_ _)) =>
                                             returnm ((_stringappend_808_,
                                                       build_ex
                                                       _stringappend_809_)
                                              : (sopw * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__294 : (sopw * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(op, existT _ _stringappend_809_ _) :=
                                            w__294
                                             : (sopw * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_810_ :=
                                            string_drop _stringappend_559_
                                              (build_ex
                                              _stringappend_809_) in
                                          match (spc_matches_prefix _stringappend_810_) with
                                          | Some
                                            (_stringappend_811_,(existT _ _stringappend_812_ _)) =>
                                             returnm ((_stringappend_811_,
                                                       build_ex
                                                       _stringappend_812_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__296 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_812_ _) :=
                                            w__296
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_813_ :=
                                            string_drop _stringappend_810_
                                              (build_ex
                                              _stringappend_812_) in
                                          match (reg_name_matches_prefix _stringappend_813_) with
                                          | Some
                                            (_stringappend_814_,(existT _ _stringappend_815_ _)) =>
                                             returnm ((_stringappend_814_,
                                                       build_ex
                                                       _stringappend_815_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__298 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rd, existT _ _stringappend_815_ _) :=
                                            w__298
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_816_ :=
                                            string_drop _stringappend_813_
                                              (build_ex
                                              _stringappend_815_) in
                                          sep_matches_prefix _stringappend_816_ >>= fun w__299 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__299 with
                                          | Some
                                            (_stringappend_817_,(existT _ _stringappend_818_ _)) =>
                                             returnm ((_stringappend_817_,
                                                       build_ex
                                                       _stringappend_818_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__301 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_818_ _) :=
                                            w__301
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_819_ :=
                                            string_drop _stringappend_816_
                                              (build_ex
                                              _stringappend_818_) in
                                          match (reg_name_matches_prefix _stringappend_819_) with
                                          | Some
                                            (_stringappend_820_,(existT _ _stringappend_821_ _)) =>
                                             returnm ((_stringappend_820_,
                                                       build_ex
                                                       _stringappend_821_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__303 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rs1, existT _ _stringappend_821_ _) :=
                                            w__303
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_822_ :=
                                            string_drop _stringappend_819_
                                              (build_ex
                                              _stringappend_821_) in
                                          match (hex_bits_5_matches_prefix _stringappend_822_) with
                                          | Some
                                            (_stringappend_823_,(existT _ _stringappend_824_ _)) =>
                                             returnm ((_stringappend_823_,
                                                       build_ex
                                                       _stringappend_824_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__305 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(shamt, existT _ _stringappend_824_ _) :=
                                            w__305
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          (match (string_drop _stringappend_822_
                                                    (build_ex
                                                    _stringappend_824_)) with
                                           | "" => returnm (true  : bool)
                                           | _ => exit tt  : M (bool)
                                           end)
                                           : M (bool)
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_559_) with
                                          | Some
                                            (_stringappend_826_,(existT _ _stringappend_827_ _)) =>
                                             let _stringappend_828_ :=
                                               string_drop _stringappend_559_
                                                 (build_ex
                                                 _stringappend_827_) in
                                             match (spc_matches_prefix _stringappend_828_) with
                                             | Some
                                               (_stringappend_829_,(existT _ _stringappend_830_ _)) =>
                                                let _stringappend_831_ :=
                                                  string_drop _stringappend_828_
                                                    (build_ex
                                                    _stringappend_830_) in
                                                match (reg_name_matches_prefix _stringappend_831_) with
                                                | Some
                                                  (_stringappend_832_,(existT _ _stringappend_833_ _)) =>
                                                   let _stringappend_834_ :=
                                                     string_drop _stringappend_831_
                                                       (build_ex
                                                       _stringappend_833_) in
                                                   sep_matches_prefix _stringappend_834_ >>= fun w__308 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__308 with
                                                   | Some
                                                     (_stringappend_835_,(existT _ _stringappend_836_ _)) =>
                                                      let _stringappend_837_ :=
                                                        string_drop _stringappend_834_
                                                          (build_ex
                                                          _stringappend_836_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_837_) with
                                                      | Some
                                                        (_stringappend_838_,(existT _ _stringappend_839_ _)) =>
                                                         let _stringappend_840_ :=
                                                           string_drop _stringappend_837_
                                                             (build_ex
                                                             _stringappend_839_) in
                                                         sep_matches_prefix _stringappend_840_ >>= fun w__309 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__309 with
                                                                        | Some
                                                                          (_stringappend_841_,(existT _ _stringappend_842_ _)) =>
                                                                           let _stringappend_843_ :=
                                                                             string_drop
                                                                               _stringappend_840_
                                                                               (build_ex
                                                                               _stringappend_842_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_843_) with
                                                                                | Some
                                                                                  (_stringappend_844_,(existT _ _stringappend_845_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_843_
                                                                                            (build_ex
                                                                                            _stringappend_845_)) with
                                                                                   | "" => true
                                                                                   | _ => false
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__310 : bool =>
                                                      returnm ((if (w__310) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__311 : bool =>
                                                   returnm ((if (w__311) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__312 : bool =>
                                                returnm ((if (w__312) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__313 : bool =>
                                             returnm ((if (w__313) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__314 : bool =>
                                          (if (w__314) then
                                             match (mul_mnemonic_matches_prefix _stringappend_559_) with
                                             | Some
                                               (_stringappend_826_,(existT _ _stringappend_827_ _)) =>
                                                returnm ((_stringappend_826_,
                                                          build_ex
                                                          _stringappend_827_)
                                                 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             | _ =>
                                                exit tt
                                                 : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             end >>= fun w__316 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '((high, signed1, signed2), existT _ _stringappend_827_ _) :=
                                               w__316
                                                : ((bool * bool * bool) * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_828_ :=
                                               string_drop _stringappend_559_
                                                 (build_ex
                                                 _stringappend_827_) in
                                             match (spc_matches_prefix _stringappend_828_) with
                                             | Some
                                               (_stringappend_829_,(existT _ _stringappend_830_ _)) =>
                                                returnm ((_stringappend_829_,
                                                          build_ex
                                                          _stringappend_830_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__318 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_830_ _) :=
                                               w__318
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_831_ :=
                                               string_drop _stringappend_828_
                                                 (build_ex
                                                 _stringappend_830_) in
                                             match (reg_name_matches_prefix _stringappend_831_) with
                                             | Some
                                               (_stringappend_832_,(existT _ _stringappend_833_ _)) =>
                                                returnm ((_stringappend_832_,
                                                          build_ex
                                                          _stringappend_833_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__320 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rd, existT _ _stringappend_833_ _) :=
                                               w__320
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_834_ :=
                                               string_drop _stringappend_831_
                                                 (build_ex
                                                 _stringappend_833_) in
                                             sep_matches_prefix _stringappend_834_ >>= fun w__321 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__321 with
                                             | Some
                                               (_stringappend_835_,(existT _ _stringappend_836_ _)) =>
                                                returnm ((_stringappend_835_,
                                                          build_ex
                                                          _stringappend_836_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__323 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_836_ _) :=
                                               w__323
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_837_ :=
                                               string_drop _stringappend_834_
                                                 (build_ex
                                                 _stringappend_836_) in
                                             match (reg_name_matches_prefix _stringappend_837_) with
                                             | Some
                                               (_stringappend_838_,(existT _ _stringappend_839_ _)) =>
                                                returnm ((_stringappend_838_,
                                                          build_ex
                                                          _stringappend_839_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__325 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs1, existT _ _stringappend_839_ _) :=
                                               w__325
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_840_ :=
                                               string_drop _stringappend_837_
                                                 (build_ex
                                                 _stringappend_839_) in
                                             sep_matches_prefix _stringappend_840_ >>= fun w__326 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__326 with
                                             | Some
                                               (_stringappend_841_,(existT _ _stringappend_842_ _)) =>
                                                returnm ((_stringappend_841_,
                                                          build_ex
                                                          _stringappend_842_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__328 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_842_ _) :=
                                               w__328
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_843_ :=
                                               string_drop _stringappend_840_
                                                 (build_ex
                                                 _stringappend_842_) in
                                             match (reg_name_matches_prefix _stringappend_843_) with
                                             | Some
                                               (_stringappend_844_,(existT _ _stringappend_845_ _)) =>
                                                returnm ((_stringappend_844_,
                                                          build_ex
                                                          _stringappend_845_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__330 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs2, existT _ _stringappend_845_ _) :=
                                               w__330
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             (match (string_drop _stringappend_843_
                                                       (build_ex
                                                       _stringappend_845_)) with
                                              | "" => returnm (true  : bool)
                                              | _ => exit tt  : M (bool)
                                              end)
                                              : M (bool)
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_559_ "div")
                                                 : bool))
                                               (let _stringappend_847_ :=
                                                 string_drop _stringappend_559_
                                                   (string_length "div") in
                                               match (maybe_not_u_matches_prefix _stringappend_847_) with
                                               | Some
                                                 (_stringappend_848_,(existT _ _stringappend_849_ _)) =>
                                                  let _stringappend_850_ :=
                                                    string_drop _stringappend_847_
                                                      (build_ex
                                                      _stringappend_849_) in
                                                  match (spc_matches_prefix _stringappend_850_) with
                                                  | Some
                                                    (_stringappend_851_,(existT _ _stringappend_852_ _)) =>
                                                     let _stringappend_853_ :=
                                                       string_drop _stringappend_850_
                                                         (build_ex
                                                         _stringappend_852_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_853_) with
                                                     | Some
                                                       (_stringappend_854_,(existT _ _stringappend_855_ _)) =>
                                                        let _stringappend_856_ :=
                                                          string_drop _stringappend_853_
                                                            (build_ex
                                                            _stringappend_855_) in
                                                        sep_matches_prefix _stringappend_856_ >>= fun w__333 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__333 with
                                                        | Some
                                                          (_stringappend_857_,(existT _ _stringappend_858_ _)) =>
                                                           let _stringappend_859_ :=
                                                             string_drop _stringappend_856_
                                                               (build_ex
                                                               _stringappend_858_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_859_) with
                                                           | Some
                                                             (_stringappend_860_,(existT _ _stringappend_861_ _)) =>
                                                              let _stringappend_862_ :=
                                                                string_drop _stringappend_859_
                                                                  (build_ex
                                                                  _stringappend_861_) in
                                                              sep_matches_prefix _stringappend_862_ >>= fun w__334 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__334 with
                                                                             | Some
                                                                               (_stringappend_863_,(existT _ _stringappend_864_ _)) =>
                                                                                let _stringappend_865_ :=
                                                                                  string_drop
                                                                                    _stringappend_862_
                                                                                    (build_ex
                                                                                    _stringappend_864_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_865_) with
                                                                                     | Some
                                                                                       (_stringappend_866_,(existT _ _stringappend_867_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_865_
                                                                                                 (build_ex
                                                                                                 _stringappend_867_)) with
                                                                                        | "" => true
                                                                                        | _ => false
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__335 : bool =>
                                                           returnm ((if (w__335) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__336 : bool =>
                                                        returnm ((if (w__336) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__337 : bool =>
                                                     returnm ((if (w__337) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__338 : bool =>
                                                  returnm ((if (w__338) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__339 : bool =>
                                               returnm ((if (w__339) then true
                                                         else false)
                                                : bool)) >>= fun w__340 : bool =>
                                             (if (w__340) then
                                                let _stringappend_847_ :=
                                                  string_drop _stringappend_559_
                                                    (string_length "div") in
                                                match (maybe_not_u_matches_prefix _stringappend_847_) with
                                                | Some
                                                  (_stringappend_848_,(existT _ _stringappend_849_ _)) =>
                                                   returnm ((_stringappend_848_,
                                                             build_ex
                                                             _stringappend_849_)
                                                    : (bool * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__342 : (bool * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(s, existT _ _stringappend_849_ _) :=
                                                  w__342
                                                   : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_850_ :=
                                                  string_drop _stringappend_847_
                                                    (build_ex
                                                    _stringappend_849_) in
                                                match (spc_matches_prefix _stringappend_850_) with
                                                | Some
                                                  (_stringappend_851_,(existT _ _stringappend_852_ _)) =>
                                                   returnm ((_stringappend_851_,
                                                             build_ex
                                                             _stringappend_852_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__344 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_852_ _) :=
                                                  w__344
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_853_ :=
                                                  string_drop _stringappend_850_
                                                    (build_ex
                                                    _stringappend_852_) in
                                                match (reg_name_matches_prefix _stringappend_853_) with
                                                | Some
                                                  (_stringappend_854_,(existT _ _stringappend_855_ _)) =>
                                                   returnm ((_stringappend_854_,
                                                             build_ex
                                                             _stringappend_855_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__346 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rd, existT _ _stringappend_855_ _) :=
                                                  w__346
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_856_ :=
                                                  string_drop _stringappend_853_
                                                    (build_ex
                                                    _stringappend_855_) in
                                                sep_matches_prefix _stringappend_856_ >>= fun w__347 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__347 with
                                                | Some
                                                  (_stringappend_857_,(existT _ _stringappend_858_ _)) =>
                                                   returnm ((_stringappend_857_,
                                                             build_ex
                                                             _stringappend_858_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__349 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_858_ _) :=
                                                  w__349
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_859_ :=
                                                  string_drop _stringappend_856_
                                                    (build_ex
                                                    _stringappend_858_) in
                                                match (reg_name_matches_prefix _stringappend_859_) with
                                                | Some
                                                  (_stringappend_860_,(existT _ _stringappend_861_ _)) =>
                                                   returnm ((_stringappend_860_,
                                                             build_ex
                                                             _stringappend_861_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__351 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs1, existT _ _stringappend_861_ _) :=
                                                  w__351
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_862_ :=
                                                  string_drop _stringappend_859_
                                                    (build_ex
                                                    _stringappend_861_) in
                                                sep_matches_prefix _stringappend_862_ >>= fun w__352 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__352 with
                                                | Some
                                                  (_stringappend_863_,(existT _ _stringappend_864_ _)) =>
                                                   returnm ((_stringappend_863_,
                                                             build_ex
                                                             _stringappend_864_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__354 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_864_ _) :=
                                                  w__354
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_865_ :=
                                                  string_drop _stringappend_862_
                                                    (build_ex
                                                    _stringappend_864_) in
                                                match (reg_name_matches_prefix _stringappend_865_) with
                                                | Some
                                                  (_stringappend_866_,(existT _ _stringappend_867_ _)) =>
                                                   returnm ((_stringappend_866_,
                                                             build_ex
                                                             _stringappend_867_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__356 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs2, existT _ _stringappend_867_ _) :=
                                                  w__356
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                (match (string_drop _stringappend_865_
                                                          (build_ex
                                                          _stringappend_867_)) with
                                                 | "" => returnm (true  : bool)
                                                 | _ => exit tt  : M (bool)
                                                 end)
                                                 : M (bool)
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_559_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_869_ :=
                                                    string_drop _stringappend_559_
                                                      (string_length "rem") in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_869_) with
                                                  | Some
                                                    (_stringappend_870_,(existT _ _stringappend_871_ _)) =>
                                                     let _stringappend_872_ :=
                                                       string_drop _stringappend_869_
                                                         (build_ex
                                                         _stringappend_871_) in
                                                     match (spc_matches_prefix _stringappend_872_) with
                                                     | Some
                                                       (_stringappend_873_,(existT _ _stringappend_874_ _)) =>
                                                        let _stringappend_875_ :=
                                                          string_drop _stringappend_872_
                                                            (build_ex
                                                            _stringappend_874_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_875_) with
                                                        | Some
                                                          (_stringappend_876_,(existT _ _stringappend_877_ _)) =>
                                                           let _stringappend_878_ :=
                                                             string_drop _stringappend_875_
                                                               (build_ex
                                                               _stringappend_877_) in
                                                           sep_matches_prefix _stringappend_878_ >>= fun w__359 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__359 with
                                                           | Some
                                                             (_stringappend_879_,(existT _ _stringappend_880_ _)) =>
                                                              let _stringappend_881_ :=
                                                                string_drop _stringappend_878_
                                                                  (build_ex
                                                                  _stringappend_880_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_881_) with
                                                              | Some
                                                                (_stringappend_882_,(existT _ _stringappend_883_ _)) =>
                                                                 let _stringappend_884_ :=
                                                                   string_drop _stringappend_881_
                                                                     (build_ex
                                                                     _stringappend_883_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_884_ >>= fun w__360 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__360 with
                                                                                | Some
                                                                                  (_stringappend_885_,(existT _ _stringappend_886_ _)) =>
                                                                                   let _stringappend_887_ :=
                                                                                     string_drop
                                                                                       _stringappend_884_
                                                                                       (build_ex
                                                                                       _stringappend_886_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_887_) with
                                                                                        | Some
                                                                                          (_stringappend_888_,(existT _ _stringappend_889_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_887_
                                                                                                    (build_ex
                                                                                                    _stringappend_889_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__361 : bool =>
                                                              returnm ((if (w__361) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__362 : bool =>
                                                           returnm ((if (w__362) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__363 : bool =>
                                                        returnm ((if (w__363) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__364 : bool =>
                                                     returnm ((if (w__364) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__365 : bool =>
                                                  returnm ((if (w__365) then true
                                                            else false)
                                                   : bool)) >>= fun w__366 : bool =>
                                                (if (w__366) then
                                                   let _stringappend_869_ :=
                                                     string_drop _stringappend_559_
                                                       (string_length "rem") in
                                                   match (maybe_not_u_matches_prefix
                                                            _stringappend_869_) with
                                                   | Some
                                                     (_stringappend_870_,(existT _ _stringappend_871_ _)) =>
                                                      returnm ((_stringappend_870_,
                                                                build_ex
                                                                _stringappend_871_)
                                                       : (bool * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__368 : (bool * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(s, existT _ _stringappend_871_ _) :=
                                                     w__368
                                                      : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_872_ :=
                                                     string_drop _stringappend_869_
                                                       (build_ex
                                                       _stringappend_871_) in
                                                   match (spc_matches_prefix _stringappend_872_) with
                                                   | Some
                                                     (_stringappend_873_,(existT _ _stringappend_874_ _)) =>
                                                      returnm ((_stringappend_873_,
                                                                build_ex
                                                                _stringappend_874_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__370 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_874_ _) :=
                                                     w__370
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_875_ :=
                                                     string_drop _stringappend_872_
                                                       (build_ex
                                                       _stringappend_874_) in
                                                   match (reg_name_matches_prefix _stringappend_875_) with
                                                   | Some
                                                     (_stringappend_876_,(existT _ _stringappend_877_ _)) =>
                                                      returnm ((_stringappend_876_,
                                                                build_ex
                                                                _stringappend_877_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__372 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rd, existT _ _stringappend_877_ _) :=
                                                     w__372
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_878_ :=
                                                     string_drop _stringappend_875_
                                                       (build_ex
                                                       _stringappend_877_) in
                                                   sep_matches_prefix _stringappend_878_ >>= fun w__373 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__373 with
                                                   | Some
                                                     (_stringappend_879_,(existT _ _stringappend_880_ _)) =>
                                                      returnm ((_stringappend_879_,
                                                                build_ex
                                                                _stringappend_880_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__375 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_880_ _) :=
                                                     w__375
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_881_ :=
                                                     string_drop _stringappend_878_
                                                       (build_ex
                                                       _stringappend_880_) in
                                                   match (reg_name_matches_prefix _stringappend_881_) with
                                                   | Some
                                                     (_stringappend_882_,(existT _ _stringappend_883_ _)) =>
                                                      returnm ((_stringappend_882_,
                                                                build_ex
                                                                _stringappend_883_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__377 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs1, existT _ _stringappend_883_ _) :=
                                                     w__377
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_884_ :=
                                                     string_drop _stringappend_881_
                                                       (build_ex
                                                       _stringappend_883_) in
                                                   sep_matches_prefix _stringappend_884_ >>= fun w__378 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__378 with
                                                   | Some
                                                     (_stringappend_885_,(existT _ _stringappend_886_ _)) =>
                                                      returnm ((_stringappend_885_,
                                                                build_ex
                                                                _stringappend_886_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__380 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_886_ _) :=
                                                     w__380
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_887_ :=
                                                     string_drop _stringappend_884_
                                                       (build_ex
                                                       _stringappend_886_) in
                                                   match (reg_name_matches_prefix _stringappend_887_) with
                                                   | Some
                                                     (_stringappend_888_,(existT _ _stringappend_889_ _)) =>
                                                      returnm ((_stringappend_888_,
                                                                build_ex
                                                                _stringappend_889_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__382 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs2, existT _ _stringappend_889_ _) :=
                                                     w__382
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   (match (string_drop _stringappend_887_
                                                             (build_ex
                                                             _stringappend_889_)) with
                                                    | "" => returnm (true  : bool)
                                                    | _ => exit tt  : M (bool)
                                                    end)
                                                    : M (bool)
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith _stringappend_559_
                                                                  "mulw")
                                                       : bool))
                                                     (let _stringappend_891_ :=
                                                       string_drop _stringappend_559_
                                                         (string_length "mulw") in
                                                     match (spc_matches_prefix _stringappend_891_) with
                                                     | Some
                                                       (_stringappend_892_,(existT _ _stringappend_893_ _)) =>
                                                        let _stringappend_894_ :=
                                                          string_drop _stringappend_891_
                                                            (build_ex
                                                            _stringappend_893_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_894_) with
                                                        | Some
                                                          (_stringappend_895_,(existT _ _stringappend_896_ _)) =>
                                                           let _stringappend_897_ :=
                                                             string_drop _stringappend_894_
                                                               (build_ex
                                                               _stringappend_896_) in
                                                           sep_matches_prefix _stringappend_897_ >>= fun w__385 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__385 with
                                                           | Some
                                                             (_stringappend_898_,(existT _ _stringappend_899_ _)) =>
                                                              let _stringappend_900_ :=
                                                                string_drop _stringappend_897_
                                                                  (build_ex
                                                                  _stringappend_899_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_900_) with
                                                              | Some
                                                                (_stringappend_901_,(existT _ _stringappend_902_ _)) =>
                                                                 let _stringappend_903_ :=
                                                                   string_drop _stringappend_900_
                                                                     (build_ex
                                                                     _stringappend_902_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_903_ >>= fun w__386 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__386 with
                                                                                | Some
                                                                                  (_stringappend_904_,(existT _ _stringappend_905_ _)) =>
                                                                                   let _stringappend_906_ :=
                                                                                     string_drop
                                                                                       _stringappend_903_
                                                                                       (build_ex
                                                                                       _stringappend_905_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_906_) with
                                                                                        | Some
                                                                                          (_stringappend_907_,(existT _ _stringappend_908_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_906_
                                                                                                    (build_ex
                                                                                                    _stringappend_908_)) with
                                                                                           | "" =>
                                                                                              true
                                                                                           | _ =>
                                                                                              false
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__387 : bool =>
                                                              returnm ((if (w__387) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__388 : bool =>
                                                           returnm ((if (w__388) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__389 : bool =>
                                                        returnm ((if (w__389) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__390 : bool =>
                                                     returnm ((if (w__390) then true
                                                               else false)
                                                      : bool)) >>= fun w__391 : bool =>
                                                   (if (w__391) then
                                                      let _stringappend_891_ :=
                                                        string_drop _stringappend_559_
                                                          (string_length "mulw") in
                                                      match (spc_matches_prefix _stringappend_891_) with
                                                      | Some
                                                        (_stringappend_892_,(existT _ _stringappend_893_ _)) =>
                                                         returnm ((_stringappend_892_,
                                                                   build_ex
                                                                   _stringappend_893_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__393 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_893_ _) :=
                                                        w__393
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_894_ :=
                                                        string_drop _stringappend_891_
                                                          (build_ex
                                                          _stringappend_893_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_894_) with
                                                      | Some
                                                        (_stringappend_895_,(existT _ _stringappend_896_ _)) =>
                                                         returnm ((_stringappend_895_,
                                                                   build_ex
                                                                   _stringappend_896_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__395 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rd, existT _ _stringappend_896_ _) :=
                                                        w__395
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_897_ :=
                                                        string_drop _stringappend_894_
                                                          (build_ex
                                                          _stringappend_896_) in
                                                      sep_matches_prefix _stringappend_897_ >>= fun w__396 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__396 with
                                                      | Some
                                                        (_stringappend_898_,(existT _ _stringappend_899_ _)) =>
                                                         returnm ((_stringappend_898_,
                                                                   build_ex
                                                                   _stringappend_899_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__398 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_899_ _) :=
                                                        w__398
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_900_ :=
                                                        string_drop _stringappend_897_
                                                          (build_ex
                                                          _stringappend_899_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_900_) with
                                                      | Some
                                                        (_stringappend_901_,(existT _ _stringappend_902_ _)) =>
                                                         returnm ((_stringappend_901_,
                                                                   build_ex
                                                                   _stringappend_902_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__400 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs1, existT _ _stringappend_902_ _) :=
                                                        w__400
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_903_ :=
                                                        string_drop _stringappend_900_
                                                          (build_ex
                                                          _stringappend_902_) in
                                                      sep_matches_prefix _stringappend_903_ >>= fun w__401 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__401 with
                                                      | Some
                                                        (_stringappend_904_,(existT _ _stringappend_905_ _)) =>
                                                         returnm ((_stringappend_904_,
                                                                   build_ex
                                                                   _stringappend_905_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__403 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_905_ _) :=
                                                        w__403
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_906_ :=
                                                        string_drop _stringappend_903_
                                                          (build_ex
                                                          _stringappend_905_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_906_) with
                                                      | Some
                                                        (_stringappend_907_,(existT _ _stringappend_908_ _)) =>
                                                         returnm ((_stringappend_907_,
                                                                   build_ex
                                                                   _stringappend_908_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__405 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs2, existT _ _stringappend_908_ _) :=
                                                        w__405
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      (match (string_drop _stringappend_906_
                                                                (build_ex
                                                                _stringappend_908_)) with
                                                       | "" => returnm (true  : bool)
                                                       | _ => exit tt  : M (bool)
                                                       end)
                                                       : M (bool)
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_559_ "div")
                                                          : bool))
                                                        (let _stringappend_910_ :=
                                                          string_drop _stringappend_559_
                                                            (string_length "div") in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_910_) with
                                                        | Some
                                                          (_stringappend_911_,(existT _ _stringappend_912_ _)) =>
                                                           let _stringappend_913_ :=
                                                             string_drop _stringappend_910_
                                                               (build_ex
                                                               _stringappend_912_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_913_ "w")
                                                               : bool))
                                                             (let _stringappend_914_ :=
                                                               string_drop _stringappend_913_
                                                                 (string_length "w") in
                                                             match (spc_matches_prefix
                                                                      _stringappend_914_) with
                                                             | Some
                                                               (_stringappend_915_,(existT _ _stringappend_916_ _)) =>
                                                                let _stringappend_917_ :=
                                                                  string_drop _stringappend_914_
                                                                    (build_ex
                                                                    _stringappend_916_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_917_) with
                                                                | Some
                                                                  (_stringappend_918_,(existT _ _stringappend_919_ _)) =>
                                                                   let _stringappend_920_ :=
                                                                     string_drop _stringappend_917_
                                                                       (build_ex
                                                                       _stringappend_919_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_920_ >>= fun w__408 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__408 with
                                                                   | Some
                                                                     (_stringappend_921_,(existT _ _stringappend_922_ _)) =>
                                                                      let _stringappend_923_ :=
                                                                        string_drop
                                                                          _stringappend_920_
                                                                          (build_ex
                                                                          _stringappend_922_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_923_) with
                                                                      | Some
                                                                        (_stringappend_924_,(existT _ _stringappend_925_ _)) =>
                                                                         let _stringappend_926_ :=
                                                                           string_drop
                                                                             _stringappend_923_
                                                                             (build_ex
                                                                             _stringappend_925_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_926_ >>= fun w__409 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__409 with
                                                                                        | Some
                                                                                          (_stringappend_927_,(existT _ _stringappend_928_ _)) =>
                                                                                           let _stringappend_929_ :=
                                                                                             string_drop
                                                                                               _stringappend_926_
                                                                                               (build_ex
                                                                                               _stringappend_928_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_929_) with
                                                                                                | Some
                                                                                                  (_stringappend_930_,(existT _ _stringappend_931_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_929_
                                                                                                            (build_ex
                                                                                                            _stringappend_931_)) with
                                                                                                   | "" =>
                                                                                                      true
                                                                                                   | _ =>
                                                                                                      false
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__410 : bool =>
                                                                      returnm ((if (w__410) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__411 : bool =>
                                                                   returnm ((if (w__411) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__412 : bool =>
                                                                returnm ((if (w__412) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__413 : bool =>
                                                             returnm ((if (w__413) then true
                                                                       else false)
                                                              : bool)) >>= fun w__414 : bool =>
                                                           returnm ((if (w__414) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__415 : bool =>
                                                        returnm ((if (w__415) then true
                                                                  else false)
                                                         : bool)) >>= fun w__416 : bool =>
                                                      (if (w__416) then
                                                         let _stringappend_910_ :=
                                                           string_drop _stringappend_559_
                                                             (string_length "div") in
                                                         match (maybe_not_u_matches_prefix
                                                                  _stringappend_910_) with
                                                         | Some
                                                           (_stringappend_911_,(existT _ _stringappend_912_ _)) =>
                                                            returnm ((_stringappend_911_,
                                                                      build_ex
                                                                      _stringappend_912_)
                                                             : (bool * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__418 : (bool * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(s, existT _ _stringappend_912_ _) :=
                                                           w__418
                                                            : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_913_ :=
                                                           string_drop _stringappend_910_
                                                             (build_ex
                                                             _stringappend_912_) in
                                                         let _stringappend_914_ :=
                                                           string_drop _stringappend_913_
                                                             (string_length "w") in
                                                         match (spc_matches_prefix
                                                                  _stringappend_914_) with
                                                         | Some
                                                           (_stringappend_915_,(existT _ _stringappend_916_ _)) =>
                                                            returnm ((_stringappend_915_,
                                                                      build_ex
                                                                      _stringappend_916_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__420 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_916_ _) :=
                                                           w__420
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_917_ :=
                                                           string_drop _stringappend_914_
                                                             (build_ex
                                                             _stringappend_916_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_917_) with
                                                         | Some
                                                           (_stringappend_918_,(existT _ _stringappend_919_ _)) =>
                                                            returnm ((_stringappend_918_,
                                                                      build_ex
                                                                      _stringappend_919_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__422 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rd, existT _ _stringappend_919_ _) :=
                                                           w__422
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_920_ :=
                                                           string_drop _stringappend_917_
                                                             (build_ex
                                                             _stringappend_919_) in
                                                         sep_matches_prefix _stringappend_920_ >>= fun w__423 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__423 with
                                                         | Some
                                                           (_stringappend_921_,(existT _ _stringappend_922_ _)) =>
                                                            returnm ((_stringappend_921_,
                                                                      build_ex
                                                                      _stringappend_922_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__425 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_922_ _) :=
                                                           w__425
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_923_ :=
                                                           string_drop _stringappend_920_
                                                             (build_ex
                                                             _stringappend_922_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_923_) with
                                                         | Some
                                                           (_stringappend_924_,(existT _ _stringappend_925_ _)) =>
                                                            returnm ((_stringappend_924_,
                                                                      build_ex
                                                                      _stringappend_925_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__427 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs1, existT _ _stringappend_925_ _) :=
                                                           w__427
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_926_ :=
                                                           string_drop _stringappend_923_
                                                             (build_ex
                                                             _stringappend_925_) in
                                                         sep_matches_prefix _stringappend_926_ >>= fun w__428 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__428 with
                                                         | Some
                                                           (_stringappend_927_,(existT _ _stringappend_928_ _)) =>
                                                            returnm ((_stringappend_927_,
                                                                      build_ex
                                                                      _stringappend_928_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__430 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_928_ _) :=
                                                           w__430
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_929_ :=
                                                           string_drop _stringappend_926_
                                                             (build_ex
                                                             _stringappend_928_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_929_) with
                                                         | Some
                                                           (_stringappend_930_,(existT _ _stringappend_931_ _)) =>
                                                            returnm ((_stringappend_930_,
                                                                      build_ex
                                                                      _stringappend_931_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__432 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs2, existT _ _stringappend_931_ _) :=
                                                           w__432
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         (match (string_drop _stringappend_929_
                                                                   (build_ex
                                                                   _stringappend_931_)) with
                                                          | "" => returnm (true  : bool)
                                                          | _ => exit tt  : M (bool)
                                                          end)
                                                          : M (bool)
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_559_ "rem")
                                                             : bool))
                                                           (let _stringappend_933_ :=
                                                             string_drop _stringappend_559_
                                                               (string_length "rem") in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_933_) with
                                                           | Some
                                                             (_stringappend_934_,(existT _ _stringappend_935_ _)) =>
                                                              let _stringappend_936_ :=
                                                                string_drop _stringappend_933_
                                                                  (build_ex
                                                                  _stringappend_935_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_936_ "w")
                                                                  : bool))
                                                                (let _stringappend_937_ :=
                                                                  string_drop _stringappend_936_
                                                                    (string_length "w") in
                                                                match (spc_matches_prefix
                                                                         _stringappend_937_) with
                                                                | Some
                                                                  (_stringappend_938_,(existT _ _stringappend_939_ _)) =>
                                                                   let _stringappend_940_ :=
                                                                     string_drop _stringappend_937_
                                                                       (build_ex
                                                                       _stringappend_939_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_940_) with
                                                                   | Some
                                                                     (_stringappend_941_,(existT _ _stringappend_942_ _)) =>
                                                                      let _stringappend_943_ :=
                                                                        string_drop
                                                                          _stringappend_940_
                                                                          (build_ex
                                                                          _stringappend_942_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_943_ >>= fun w__435 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__435 with
                                                                      | Some
                                                                        (_stringappend_944_,(existT _ _stringappend_945_ _)) =>
                                                                         let _stringappend_946_ :=
                                                                           string_drop
                                                                             _stringappend_943_
                                                                             (build_ex
                                                                             _stringappend_945_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_946_) with
                                                                         | Some
                                                                           (_stringappend_947_,(existT _ _stringappend_948_ _)) =>
                                                                            let _stringappend_949_ :=
                                                                              string_drop
                                                                                _stringappend_946_
                                                                                (build_ex
                                                                                _stringappend_948_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_949_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__436 with
                                                                                           | Some
                                                                                             (_stringappend_950_,(existT _ _stringappend_951_ _)) =>
                                                                                              let _stringappend_952_ :=
                                                                                                string_drop
                                                                                                  _stringappend_949_
                                                                                                  (build_ex
                                                                                                  _stringappend_951_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_952_) with
                                                                                                   | Some
                                                                                                     (_stringappend_953_,(existT _ _stringappend_954_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_952_
                                                                                                               (build_ex
                                                                                                               _stringappend_954_)) with
                                                                                                      | "" =>
                                                                                                         true
                                                                                                      | _ =>
                                                                                                         false
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__437 : bool =>
                                                                         returnm ((if (w__437) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__438 : bool =>
                                                                      returnm ((if (w__438) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__439 : bool =>
                                                                   returnm ((if (w__439) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__440 : bool =>
                                                                returnm ((if (w__440) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__441 : bool =>
                                                              returnm ((if (w__441) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__442 : bool =>
                                                           returnm ((if (w__442) then true
                                                                     else false)
                                                            : bool)) >>= fun w__443 : bool =>
                                                         (if (w__443) then
                                                            let _stringappend_933_ :=
                                                              string_drop _stringappend_559_
                                                                (string_length "rem") in
                                                            match (maybe_not_u_matches_prefix
                                                                     _stringappend_933_) with
                                                            | Some
                                                              (_stringappend_934_,(existT _ _stringappend_935_ _)) =>
                                                               returnm ((_stringappend_934_,
                                                                         build_ex
                                                                         _stringappend_935_)
                                                                : (bool * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__445 : (bool * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(s, existT _ _stringappend_935_ _) :=
                                                              w__445
                                                               : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_936_ :=
                                                              string_drop _stringappend_933_
                                                                (build_ex
                                                                _stringappend_935_) in
                                                            let _stringappend_937_ :=
                                                              string_drop _stringappend_936_
                                                                (string_length "w") in
                                                            match (spc_matches_prefix
                                                                     _stringappend_937_) with
                                                            | Some
                                                              (_stringappend_938_,(existT _ _stringappend_939_ _)) =>
                                                               returnm ((_stringappend_938_,
                                                                         build_ex
                                                                         _stringappend_939_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__447 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_939_ _) :=
                                                              w__447
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_940_ :=
                                                              string_drop _stringappend_937_
                                                                (build_ex
                                                                _stringappend_939_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_940_) with
                                                            | Some
                                                              (_stringappend_941_,(existT _ _stringappend_942_ _)) =>
                                                               returnm ((_stringappend_941_,
                                                                         build_ex
                                                                         _stringappend_942_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__449 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rd, existT _ _stringappend_942_ _) :=
                                                              w__449
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_943_ :=
                                                              string_drop _stringappend_940_
                                                                (build_ex
                                                                _stringappend_942_) in
                                                            sep_matches_prefix _stringappend_943_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__450 with
                                                            | Some
                                                              (_stringappend_944_,(existT _ _stringappend_945_ _)) =>
                                                               returnm ((_stringappend_944_,
                                                                         build_ex
                                                                         _stringappend_945_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__452 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_945_ _) :=
                                                              w__452
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_946_ :=
                                                              string_drop _stringappend_943_
                                                                (build_ex
                                                                _stringappend_945_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_946_) with
                                                            | Some
                                                              (_stringappend_947_,(existT _ _stringappend_948_ _)) =>
                                                               returnm ((_stringappend_947_,
                                                                         build_ex
                                                                         _stringappend_948_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__454 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs1, existT _ _stringappend_948_ _) :=
                                                              w__454
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_949_ :=
                                                              string_drop _stringappend_946_
                                                                (build_ex
                                                                _stringappend_948_) in
                                                            sep_matches_prefix _stringappend_949_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__455 with
                                                            | Some
                                                              (_stringappend_950_,(existT _ _stringappend_951_ _)) =>
                                                               returnm ((_stringappend_950_,
                                                                         build_ex
                                                                         _stringappend_951_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__457 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_951_ _) :=
                                                              w__457
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_952_ :=
                                                              string_drop _stringappend_949_
                                                                (build_ex
                                                                _stringappend_951_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_952_) with
                                                            | Some
                                                              (_stringappend_953_,(existT _ _stringappend_954_ _)) =>
                                                               returnm ((_stringappend_953_,
                                                                         build_ex
                                                                         _stringappend_954_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__459 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs2, existT _ _stringappend_954_ _) :=
                                                              w__459
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            (match (string_drop _stringappend_952_
                                                                      (build_ex
                                                                      _stringappend_954_)) with
                                                             | "" => returnm (true  : bool)
                                                             | _ => exit tt  : M (bool)
                                                             end)
                                                             : M (bool)
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_559_
                                                                           "fence")
                                                                : bool))
                                                              (let _stringappend_956_ :=
                                                                string_drop _stringappend_559_
                                                                  (string_length "fence") in
                                                              match (spc_matches_prefix
                                                                       _stringappend_956_) with
                                                              | Some
                                                                (_stringappend_957_,(existT _ _stringappend_958_ _)) =>
                                                                 let _stringappend_959_ :=
                                                                   string_drop _stringappend_956_
                                                                     (build_ex
                                                                     _stringappend_958_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_959_ >>= fun w__462 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__462 with
                                                                 | Some
                                                                   (_stringappend_960_,(existT _ _stringappend_961_ _)) =>
                                                                    let _stringappend_962_ :=
                                                                      string_drop _stringappend_959_
                                                                        (build_ex
                                                                        _stringappend_961_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_962_ >>= fun w__463 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__463 with
                                                                    | Some
                                                                      (_stringappend_963_,(existT _ _stringappend_964_ _)) =>
                                                                       let _stringappend_965_ :=
                                                                         string_drop
                                                                           _stringappend_962_
                                                                           (build_ex
                                                                           _stringappend_964_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_965_ >>= fun w__464 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__464 with
                                                                                      | Some
                                                                                        (_stringappend_966_,(existT _ _stringappend_967_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_965_
                                                                                                  (build_ex
                                                                                                  _stringappend_967_)) with
                                                                                         | "" =>
                                                                                            true
                                                                                         | _ =>
                                                                                            false
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__465 : bool =>
                                                                    returnm ((if (w__465) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__466 : bool =>
                                                                 returnm ((if (w__466) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__467 : bool =>
                                                              returnm ((if (w__467) then true
                                                                        else false)
                                                               : bool)) >>= fun w__468 : bool =>
                                                            (if (w__468) then
                                                               let _stringappend_956_ :=
                                                                 string_drop _stringappend_559_
                                                                   (string_length "fence") in
                                                               match (spc_matches_prefix
                                                                        _stringappend_956_) with
                                                               | Some
                                                                 (_stringappend_957_,(existT _ _stringappend_958_ _)) =>
                                                                  returnm ((_stringappend_957_,
                                                                            build_ex
                                                                            _stringappend_958_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__470 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_958_ _) :=
                                                                 w__470
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_959_ :=
                                                                 string_drop _stringappend_956_
                                                                   (build_ex
                                                                   _stringappend_958_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_959_ >>= fun w__471 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__471 with
                                                               | Some
                                                                 (_stringappend_960_,(existT _ _stringappend_961_ _)) =>
                                                                  returnm ((_stringappend_960_,
                                                                            build_ex
                                                                            _stringappend_961_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__473 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(pred, existT _ _stringappend_961_ _) :=
                                                                 w__473
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_962_ :=
                                                                 string_drop _stringappend_959_
                                                                   (build_ex
                                                                   _stringappend_961_) in
                                                               sep_matches_prefix _stringappend_962_ >>= fun w__474 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__474 with
                                                               | Some
                                                                 (_stringappend_963_,(existT _ _stringappend_964_ _)) =>
                                                                  returnm ((_stringappend_963_,
                                                                            build_ex
                                                                            _stringappend_964_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__476 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_964_ _) :=
                                                                 w__476
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_965_ :=
                                                                 string_drop _stringappend_962_
                                                                   (build_ex
                                                                   _stringappend_964_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_965_ >>= fun w__477 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__477 with
                                                               | Some
                                                                 (_stringappend_966_,(existT _ _stringappend_967_ _)) =>
                                                                  returnm ((_stringappend_966_,
                                                                            build_ex
                                                                            _stringappend_967_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__479 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(succ, existT _ _stringappend_967_ _) :=
                                                                 w__479
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               (match (string_drop
                                                                         _stringappend_965_
                                                                         (build_ex
                                                                         _stringappend_967_)) with
                                                                | "" => returnm (true  : bool)
                                                                | _ => exit tt  : M (bool)
                                                                end)
                                                                : M (bool)
                                                             else
                                                               (match _stringappend_559_ with
                                                                | "fence.i" =>
                                                                   returnm (true  : bool)
                                                                | "ecall" => returnm (true  : bool)
                                                                | "mret" => returnm (true  : bool)
                                                                | "sret" => returnm (true  : bool)
                                                                | "ebreak" => returnm (true  : bool)
                                                                | "wfi" => returnm (true  : bool)
                                                                | _stringappend_559_ =>
                                                                   and_boolM
                                                                     (returnm ((string_startswith
                                                                                  _stringappend_559_
                                                                                  "sfence.vma")
                                                                       : bool))
                                                                     (let _stringappend_969_ :=
                                                                       string_drop
                                                                         _stringappend_559_
                                                                         (string_length "sfence.vma") in
                                                                     match (spc_matches_prefix
                                                                              _stringappend_969_) with
                                                                     | Some
                                                                       (_stringappend_970_,(existT _ _stringappend_971_ _)) =>
                                                                        let _stringappend_972_ :=
                                                                          string_drop
                                                                            _stringappend_969_
                                                                            (build_ex
                                                                            _stringappend_971_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_972_) with
                                                                        | Some
                                                                          (_stringappend_973_,(existT _ _stringappend_974_ _)) =>
                                                                           let _stringappend_975_ :=
                                                                             string_drop
                                                                               _stringappend_972_
                                                                               (build_ex
                                                                               _stringappend_974_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_975_ >>= fun w__482 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           returnm ((if ((match w__482 with
                                                                                          | Some
                                                                                            (_stringappend_976_,(existT _ _stringappend_977_ _)) =>
                                                                                             let _stringappend_978_ :=
                                                                                               string_drop
                                                                                                 _stringappend_975_
                                                                                                 (build_ex
                                                                                                 _stringappend_977_) in
                                                                                             if ((match (reg_name_matches_prefix
                                                                                                           _stringappend_978_) with
                                                                                                  | Some
                                                                                                    (_stringappend_979_,(existT _ _stringappend_980_ _)) =>
                                                                                                     match (string_drop
                                                                                                              _stringappend_978_
                                                                                                              (build_ex
                                                                                                              _stringappend_980_)) with
                                                                                                     | "" =>
                                                                                                        true
                                                                                                     | _ =>
                                                                                                        false
                                                                                                     end
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false
                                                                                          | None =>
                                                                                             false
                                                                                          end)) then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__483 : bool =>
                                                                        returnm ((if (w__483) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)
                                                                     | None =>
                                                                        returnm (false  : bool)
                                                                     end >>= fun w__484 : bool =>
                                                                     returnm ((if (w__484) then true
                                                                               else false)
                                                                      : bool)) >>= fun w__485 : bool =>
                                                                   (if (w__485) then
                                                                      let _stringappend_969_ :=
                                                                        string_drop
                                                                          _stringappend_559_
                                                                          (string_length
                                                                             "sfence.vma") in
                                                                      match (spc_matches_prefix
                                                                               _stringappend_969_) with
                                                                      | Some
                                                                        (_stringappend_970_,(existT _ _stringappend_971_ _)) =>
                                                                         returnm ((_stringappend_970_,
                                                                                   build_ex
                                                                                   _stringappend_971_)
                                                                          : (unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__487 : (unit * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(tt, existT _ _stringappend_971_ _) :=
                                                                        w__487
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_972_ :=
                                                                        string_drop
                                                                          _stringappend_969_
                                                                          (build_ex
                                                                          _stringappend_971_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_972_) with
                                                                      | Some
                                                                        (_stringappend_973_,(existT _ _stringappend_974_ _)) =>
                                                                         returnm ((_stringappend_973_,
                                                                                   build_ex
                                                                                   _stringappend_974_)
                                                                          : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__489 : (mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(rs1, existT _ _stringappend_974_ _) :=
                                                                        w__489
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_975_ :=
                                                                        string_drop
                                                                          _stringappend_972_
                                                                          (build_ex
                                                                          _stringappend_974_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_975_ >>= fun w__490 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__490 with
                                                                      | Some
                                                                        (_stringappend_976_,(existT _ _stringappend_977_ _)) =>
                                                                         returnm ((_stringappend_976_,
                                                                                   build_ex
                                                                                   _stringappend_977_)
                                                                          : (unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((unit * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__492 : (unit * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(tt, existT _ _stringappend_977_ _) :=
                                                                        w__492
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      let _stringappend_978_ :=
                                                                        string_drop
                                                                          _stringappend_975_
                                                                          (build_ex
                                                                          _stringappend_977_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_978_) with
                                                                      | Some
                                                                        (_stringappend_979_,(existT _ _stringappend_980_ _)) =>
                                                                         returnm ((_stringappend_979_,
                                                                                   build_ex
                                                                                   _stringappend_980_)
                                                                          : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      | _ =>
                                                                         exit tt
                                                                          : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}))
                                                                      end >>= fun w__494 : (mword 5 * {n : Z & ArithFact (n >=
                                                                        0)}) =>
                                                                      let '(rs2, existT _ _stringappend_980_ _) :=
                                                                        w__494
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) in
                                                                      (match (string_drop
                                                                                _stringappend_978_
                                                                                (build_ex
                                                                                _stringappend_980_)) with
                                                                       | "" =>
                                                                          returnm (true  : bool)
                                                                       | _ => exit tt  : M (bool)
                                                                       end)
                                                                       : M (bool)
                                                                    else
                                                                      and_boolM
                                                                        (returnm ((string_startswith
                                                                                     _stringappend_559_
                                                                                     "lr.")
                                                                          : bool))
                                                                        (let _stringappend_982_ :=
                                                                          string_drop
                                                                            _stringappend_559_
                                                                            (string_length "lr.") in
                                                                        match (maybe_aq_matches_prefix
                                                                                 _stringappend_982_) with
                                                                        | Some
                                                                          (_stringappend_983_,(existT _ _stringappend_984_ _)) =>
                                                                           let _stringappend_985_ :=
                                                                             string_drop
                                                                               _stringappend_982_
                                                                               (build_ex
                                                                               _stringappend_984_) in
                                                                           match (maybe_rl_matches_prefix
                                                                                    _stringappend_985_) with
                                                                           | Some
                                                                             (_stringappend_986_,(existT _ _stringappend_987_ _)) =>
                                                                              let _stringappend_988_ :=
                                                                                string_drop
                                                                                  _stringappend_985_
                                                                                  (build_ex
                                                                                  _stringappend_987_) in
                                                                              match (size_mnemonic_matches_prefix
                                                                                       _stringappend_988_) with
                                                                              | Some
                                                                                (_stringappend_989_,(existT _ _stringappend_990_ _)) =>
                                                                                 let _stringappend_991_ :=
                                                                                   string_drop
                                                                                     _stringappend_988_
                                                                                     (build_ex
                                                                                     _stringappend_990_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_991_) with
                                                                                 | Some
                                                                                   (_stringappend_992_,(existT _ _stringappend_993_ _)) =>
                                                                                    let _stringappend_994_ :=
                                                                                      string_drop
                                                                                        _stringappend_991_
                                                                                        (build_ex
                                                                                        _stringappend_993_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_994_) with
                                                                                    | Some
                                                                                      (_stringappend_995_,(existT _ _stringappend_996_ _)) =>
                                                                                       let _stringappend_997_ :=
                                                                                         string_drop
                                                                                           _stringappend_994_
                                                                                           (build_ex
                                                                                           _stringappend_996_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_997_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       returnm ((if ((match w__497 with
                                                                                                      | Some
                                                                                                        (_stringappend_998_,(existT _ _stringappend_999_ _)) =>
                                                                                                         let _stringappend_1000_ :=
                                                                                                           string_drop
                                                                                                             _stringappend_997_
                                                                                                             (build_ex
                                                                                                             _stringappend_999_) in
                                                                                                         if
                                                                                                           ((match (reg_name_matches_prefix
                                                                                                                      _stringappend_1000_) with
                                                                                                             | Some
                                                                                                               (_stringappend_1001_,(existT _ _stringappend_1002_ _)) =>
                                                                                                                match (string_drop
                                                                                                                         _stringappend_1000_
                                                                                                                         (build_ex
                                                                                                                         _stringappend_1002_)) with
                                                                                                                | "" =>
                                                                                                                   true
                                                                                                                | _ =>
                                                                                                                   false
                                                                                                                end
                                                                                                             | None =>
                                                                                                                false
                                                                                                             end))
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false
                                                                                                      | None =>
                                                                                                         false
                                                                                                      end))
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__498 : bool =>
                                                                                    returnm ((if (w__498)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__499 : bool =>
                                                                                 returnm ((if (w__499)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__500 : bool =>
                                                                              returnm ((if (w__500)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__501 : bool =>
                                                                           returnm ((if (w__501)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__502 : bool =>
                                                                        returnm ((if (w__502) then
                                                                                    true
                                                                                  else false)
                                                                         : bool)) >>= fun w__503 : bool =>
                                                                      (if (w__503) then
                                                                         let _stringappend_982_ :=
                                                                           string_drop
                                                                             _stringappend_559_
                                                                             (string_length "lr.") in
                                                                         match (maybe_aq_matches_prefix
                                                                                  _stringappend_982_) with
                                                                         | Some
                                                                           (_stringappend_983_,(existT _ _stringappend_984_ _)) =>
                                                                            returnm ((_stringappend_983_,
                                                                                      build_ex
                                                                                      _stringappend_984_)
                                                                             : (bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__505 : (bool * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(aq, existT _ _stringappend_984_ _) :=
                                                                           w__505
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_985_ :=
                                                                           string_drop
                                                                             _stringappend_982_
                                                                             (build_ex
                                                                             _stringappend_984_) in
                                                                         match (maybe_rl_matches_prefix
                                                                                  _stringappend_985_) with
                                                                         | Some
                                                                           (_stringappend_986_,(existT _ _stringappend_987_ _)) =>
                                                                            returnm ((_stringappend_986_,
                                                                                      build_ex
                                                                                      _stringappend_987_)
                                                                             : (bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((bool * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__507 : (bool * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rl, existT _ _stringappend_987_ _) :=
                                                                           w__507
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_988_ :=
                                                                           string_drop
                                                                             _stringappend_985_
                                                                             (build_ex
                                                                             _stringappend_987_) in
                                                                         match (size_mnemonic_matches_prefix
                                                                                  _stringappend_988_) with
                                                                         | Some
                                                                           (_stringappend_989_,(existT _ _stringappend_990_ _)) =>
                                                                            returnm ((_stringappend_989_,
                                                                                      build_ex
                                                                                      _stringappend_990_)
                                                                             : (word_width * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((word_width * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__509 : (word_width * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(size, existT _ _stringappend_990_ _) :=
                                                                           w__509
                                                                            : (word_width * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_991_ :=
                                                                           string_drop
                                                                             _stringappend_988_
                                                                             (build_ex
                                                                             _stringappend_990_) in
                                                                         match (spc_matches_prefix
                                                                                  _stringappend_991_) with
                                                                         | Some
                                                                           (_stringappend_992_,(existT _ _stringappend_993_ _)) =>
                                                                            returnm ((_stringappend_992_,
                                                                                      build_ex
                                                                                      _stringappend_993_)
                                                                             : (unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__511 : (unit * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(tt, existT _ _stringappend_993_ _) :=
                                                                           w__511
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_994_ :=
                                                                           string_drop
                                                                             _stringappend_991_
                                                                             (build_ex
                                                                             _stringappend_993_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_994_) with
                                                                         | Some
                                                                           (_stringappend_995_,(existT _ _stringappend_996_ _)) =>
                                                                            returnm ((_stringappend_995_,
                                                                                      build_ex
                                                                                      _stringappend_996_)
                                                                             : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__513 : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rd, existT _ _stringappend_996_ _) :=
                                                                           w__513
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_997_ :=
                                                                           string_drop
                                                                             _stringappend_994_
                                                                             (build_ex
                                                                             _stringappend_996_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_997_ >>= fun w__514 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         match w__514 with
                                                                         | Some
                                                                           (_stringappend_998_,(existT _ _stringappend_999_ _)) =>
                                                                            returnm ((_stringappend_998_,
                                                                                      build_ex
                                                                                      _stringappend_999_)
                                                                             : (unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((unit * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__516 : (unit * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(tt, existT _ _stringappend_999_ _) :=
                                                                           w__516
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         let _stringappend_1000_ :=
                                                                           string_drop
                                                                             _stringappend_997_
                                                                             (build_ex
                                                                             _stringappend_999_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_1000_) with
                                                                         | Some
                                                                           (_stringappend_1001_,(existT _ _stringappend_1002_ _)) =>
                                                                            returnm ((_stringappend_1001_,
                                                                                      build_ex
                                                                                      _stringappend_1002_)
                                                                             : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         | _ =>
                                                                            exit tt
                                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}))
                                                                         end >>= fun w__518 : (mword 5 * {n : Z & ArithFact (n >=
                                                                           0)}) =>
                                                                         let '(rs1, existT _ _stringappend_1002_ _) :=
                                                                           w__518
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) in
                                                                         (match (string_drop
                                                                                   _stringappend_1000_
                                                                                   (build_ex
                                                                                   _stringappend_1002_)) with
                                                                          | "" =>
                                                                             returnm (true  : bool)
                                                                          | _ => exit tt  : M (bool)
                                                                          end)
                                                                          : M (bool)
                                                                       else
                                                                         and_boolM
                                                                           (returnm ((string_startswith
                                                                                        _stringappend_559_
                                                                                        "sc.")
                                                                             : bool))
                                                                           (let _stringappend_1004_ :=
                                                                             string_drop
                                                                               _stringappend_559_
                                                                               (string_length "sc.") in
                                                                           match (maybe_aq_matches_prefix
                                                                                    _stringappend_1004_) with
                                                                           | Some
                                                                             (_stringappend_1005_,(existT _ _stringappend_1006_ _)) =>
                                                                              let _stringappend_1007_ :=
                                                                                string_drop
                                                                                  _stringappend_1004_
                                                                                  (build_ex
                                                                                  _stringappend_1006_) in
                                                                              match (maybe_rl_matches_prefix
                                                                                       _stringappend_1007_) with
                                                                              | Some
                                                                                (_stringappend_1008_,(existT _ _stringappend_1009_ _)) =>
                                                                                 let _stringappend_1010_ :=
                                                                                   string_drop
                                                                                     _stringappend_1007_
                                                                                     (build_ex
                                                                                     _stringappend_1009_) in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1010_) with
                                                                                 | Some
                                                                                   (_stringappend_1011_,(existT _ _stringappend_1012_ _)) =>
                                                                                    let _stringappend_1013_ :=
                                                                                      string_drop
                                                                                        _stringappend_1010_
                                                                                        (build_ex
                                                                                        _stringappend_1012_) in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1013_) with
                                                                                    | Some
                                                                                      (_stringappend_1014_,(existT _ _stringappend_1015_ _)) =>
                                                                                       let _stringappend_1016_ :=
                                                                                         string_drop
                                                                                           _stringappend_1013_
                                                                                           (build_ex
                                                                                           _stringappend_1015_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1016_) with
                                                                                       | Some
                                                                                         (_stringappend_1017_,(existT _ _stringappend_1018_ _)) =>
                                                                                          let _stringappend_1019_ :=
                                                                                            string_drop
                                                                                              _stringappend_1016_
                                                                                              (build_ex
                                                                                              _stringappend_1018_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1019_ >>= fun w__521 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__521 with
                                                                                          | Some
                                                                                            (_stringappend_1020_,(existT _ _stringappend_1021_ _)) =>
                                                                                             let _stringappend_1022_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1019_
                                                                                                 (build_ex
                                                                                                 _stringappend_1021_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1022_) with
                                                                                             | Some
                                                                                               (_stringappend_1023_,(existT _ _stringappend_1024_ _)) =>
                                                                                                let _stringappend_1025_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1022_
                                                                                                    (build_ex
                                                                                                    _stringappend_1024_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1025_ >>= fun w__522 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__522 with
                                                                                                              | Some
                                                                                                                (_stringappend_1026_,(existT _ _stringappend_1027_ _)) =>
                                                                                                                 let _stringappend_1028_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1025_
                                                                                                                     (build_ex
                                                                                                                     _stringappend_1027_) in
                                                                                                                 if
                                                                                                                   ((match (reg_name_matches_prefix
                                                                                                                              _stringappend_1028_) with
                                                                                                                     | Some
                                                                                                                       (_stringappend_1029_,(existT _ _stringappend_1030_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1028_
                                                                                                                                 (build_ex
                                                                                                                                 _stringappend_1030_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__523 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__523)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__524 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__524)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__525 : bool =>
                                                                                       returnm ((if (w__525)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__526 : bool =>
                                                                                    returnm ((if (w__526)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__527 : bool =>
                                                                                 returnm ((if (w__527)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__528 : bool =>
                                                                              returnm ((if (w__528)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__529 : bool =>
                                                                           returnm ((if (w__529)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)) >>= fun w__530 : bool =>
                                                                         (if (w__530) then
                                                                            let _stringappend_1004_ :=
                                                                              string_drop
                                                                                _stringappend_559_
                                                                                (string_length "sc.") in
                                                                            match (maybe_aq_matches_prefix
                                                                                     _stringappend_1004_) with
                                                                            | Some
                                                                              (_stringappend_1005_,(existT _ _stringappend_1006_ _)) =>
                                                                               returnm ((_stringappend_1005_,
                                                                                         build_ex
                                                                                         _stringappend_1006_)
                                                                                : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__532 : (bool * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(aq, existT _ _stringappend_1006_ _) :=
                                                                              w__532
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1007_ :=
                                                                              string_drop
                                                                                _stringappend_1004_
                                                                                (build_ex
                                                                                _stringappend_1006_) in
                                                                            match (maybe_rl_matches_prefix
                                                                                     _stringappend_1007_) with
                                                                            | Some
                                                                              (_stringappend_1008_,(existT _ _stringappend_1009_ _)) =>
                                                                               returnm ((_stringappend_1008_,
                                                                                         build_ex
                                                                                         _stringappend_1009_)
                                                                                : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__534 : (bool * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rl, existT _ _stringappend_1009_ _) :=
                                                                              w__534
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1010_ :=
                                                                              string_drop
                                                                                _stringappend_1007_
                                                                                (build_ex
                                                                                _stringappend_1009_) in
                                                                            match (size_mnemonic_matches_prefix
                                                                                     _stringappend_1010_) with
                                                                            | Some
                                                                              (_stringappend_1011_,(existT _ _stringappend_1012_ _)) =>
                                                                               returnm ((_stringappend_1011_,
                                                                                         build_ex
                                                                                         _stringappend_1012_)
                                                                                : (word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((word_width * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__536 : (word_width * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(size, existT _ _stringappend_1012_ _) :=
                                                                              w__536
                                                                               : (word_width * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1013_ :=
                                                                              string_drop
                                                                                _stringappend_1010_
                                                                                (build_ex
                                                                                _stringappend_1012_) in
                                                                            match (spc_matches_prefix
                                                                                     _stringappend_1013_) with
                                                                            | Some
                                                                              (_stringappend_1014_,(existT _ _stringappend_1015_ _)) =>
                                                                               returnm ((_stringappend_1014_,
                                                                                         build_ex
                                                                                         _stringappend_1015_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__538 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1015_ _) :=
                                                                              w__538
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1016_ :=
                                                                              string_drop
                                                                                _stringappend_1013_
                                                                                (build_ex
                                                                                _stringappend_1015_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1016_) with
                                                                            | Some
                                                                              (_stringappend_1017_,(existT _ _stringappend_1018_ _)) =>
                                                                               returnm ((_stringappend_1017_,
                                                                                         build_ex
                                                                                         _stringappend_1018_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__540 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rd, existT _ _stringappend_1018_ _) :=
                                                                              w__540
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1019_ :=
                                                                              string_drop
                                                                                _stringappend_1016_
                                                                                (build_ex
                                                                                _stringappend_1018_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1019_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            match w__541 with
                                                                            | Some
                                                                              (_stringappend_1020_,(existT _ _stringappend_1021_ _)) =>
                                                                               returnm ((_stringappend_1020_,
                                                                                         build_ex
                                                                                         _stringappend_1021_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__543 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1021_ _) :=
                                                                              w__543
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1022_ :=
                                                                              string_drop
                                                                                _stringappend_1019_
                                                                                (build_ex
                                                                                _stringappend_1021_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1022_) with
                                                                            | Some
                                                                              (_stringappend_1023_,(existT _ _stringappend_1024_ _)) =>
                                                                               returnm ((_stringappend_1023_,
                                                                                         build_ex
                                                                                         _stringappend_1024_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__545 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rs1, existT _ _stringappend_1024_ _) :=
                                                                              w__545
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1025_ :=
                                                                              string_drop
                                                                                _stringappend_1022_
                                                                                (build_ex
                                                                                _stringappend_1024_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_1025_ >>= fun w__546 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            match w__546 with
                                                                            | Some
                                                                              (_stringappend_1026_,(existT _ _stringappend_1027_ _)) =>
                                                                               returnm ((_stringappend_1026_,
                                                                                         build_ex
                                                                                         _stringappend_1027_)
                                                                                : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__548 : (unit * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(tt, existT _ _stringappend_1027_ _) :=
                                                                              w__548
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            let _stringappend_1028_ :=
                                                                              string_drop
                                                                                _stringappend_1025_
                                                                                (build_ex
                                                                                _stringappend_1027_) in
                                                                            match (reg_name_matches_prefix
                                                                                     _stringappend_1028_) with
                                                                            | Some
                                                                              (_stringappend_1029_,(existT _ _stringappend_1030_ _)) =>
                                                                               returnm ((_stringappend_1029_,
                                                                                         build_ex
                                                                                         _stringappend_1030_)
                                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            | _ =>
                                                                               exit tt
                                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}))
                                                                            end >>= fun w__550 : (mword 5 * {n : Z & ArithFact (n >=
                                                                              0)}) =>
                                                                            let '(rs2, existT _ _stringappend_1030_ _) :=
                                                                              w__550
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) in
                                                                            (match (string_drop
                                                                                      _stringappend_1028_
                                                                                      (build_ex
                                                                                      _stringappend_1030_)) with
                                                                             | "" =>
                                                                                returnm (true
                                                                                 : bool)
                                                                             | _ =>
                                                                                exit tt  : M (bool)
                                                                             end)
                                                                             : M (bool)
                                                                          else
                                                                            match (amo_mnemonic_matches_prefix
                                                                                     _stringappend_559_) with
                                                                            | Some
                                                                              (_stringappend_1032_,(existT _ _stringappend_1033_ _)) =>
                                                                               let _stringappend_1034_ :=
                                                                                 string_drop
                                                                                   _stringappend_559_
                                                                                   (build_ex
                                                                                   _stringappend_1033_) in
                                                                               and_boolM
                                                                                 (returnm ((string_startswith
                                                                                              _stringappend_1034_
                                                                                              ".")
                                                                                   : bool))
                                                                                 (let _stringappend_1035_ :=
                                                                                   string_drop
                                                                                     _stringappend_1034_
                                                                                     (string_length
                                                                                        ".") in
                                                                                 match (size_mnemonic_matches_prefix
                                                                                          _stringappend_1035_) with
                                                                                 | Some
                                                                                   (_stringappend_1036_,(existT _ _stringappend_1037_ _)) =>
                                                                                    let _stringappend_1038_ :=
                                                                                      string_drop
                                                                                        _stringappend_1035_
                                                                                        (build_ex
                                                                                        _stringappend_1037_) in
                                                                                    match (maybe_aq_matches_prefix
                                                                                             _stringappend_1038_) with
                                                                                    | Some
                                                                                      (_stringappend_1039_,(existT _ _stringappend_1040_ _)) =>
                                                                                       let _stringappend_1041_ :=
                                                                                         string_drop
                                                                                           _stringappend_1038_
                                                                                           (build_ex
                                                                                           _stringappend_1040_) in
                                                                                       match (maybe_rl_matches_prefix
                                                                                                _stringappend_1041_) with
                                                                                       | Some
                                                                                         (_stringappend_1042_,(existT _ _stringappend_1043_ _)) =>
                                                                                          let _stringappend_1044_ :=
                                                                                            string_drop
                                                                                              _stringappend_1041_
                                                                                              (build_ex
                                                                                              _stringappend_1043_) in
                                                                                          match (spc_matches_prefix
                                                                                                   _stringappend_1044_) with
                                                                                          | Some
                                                                                            (_stringappend_1045_,(existT _ _stringappend_1046_ _)) =>
                                                                                             let _stringappend_1047_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1044_
                                                                                                 (build_ex
                                                                                                 _stringappend_1046_) in
                                                                                             match (reg_name_matches_prefix
                                                                                                      _stringappend_1047_) with
                                                                                             | Some
                                                                                               (_stringappend_1048_,(existT _ _stringappend_1049_ _)) =>
                                                                                                let _stringappend_1050_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1047_
                                                                                                    (build_ex
                                                                                                    _stringappend_1049_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1050_ >>= fun w__553 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                match w__553 with
                                                                                                | Some
                                                                                                  (_stringappend_1051_,(existT _ _stringappend_1052_ _)) =>
                                                                                                   let _stringappend_1053_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_1050_
                                                                                                       (build_ex
                                                                                                       _stringappend_1052_) in
                                                                                                   match (reg_name_matches_prefix
                                                                                                            _stringappend_1053_) with
                                                                                                   | Some
                                                                                                     (_stringappend_1054_,(existT _ _stringappend_1055_ _)) =>
                                                                                                      let _stringappend_1056_ :=
                                                                                                        string_drop
                                                                                                          _stringappend_1053_
                                                                                                          (build_ex
                                                                                                          _stringappend_1055_) in
                                                                                                      sep_matches_prefix
                                                                                                        _stringappend_1056_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                        0)})) =>
                                                                                                      returnm ((if
                                                                                                                  ((match w__554 with
                                                                                                                    | Some
                                                                                                                      (_stringappend_1057_,(existT _ _stringappend_1058_ _)) =>
                                                                                                                       let _stringappend_1059_ :=
                                                                                                                         string_drop
                                                                                                                           _stringappend_1056_
                                                                                                                           (build_ex
                                                                                                                           _stringappend_1058_) in
                                                                                                                       if
                                                                                                                         ((match (reg_name_matches_prefix
                                                                                                                                    _stringappend_1059_) with
                                                                                                                           | Some
                                                                                                                             (_stringappend_1060_,(existT _ _stringappend_1061_ _)) =>
                                                                                                                              match (string_drop
                                                                                                                                       _stringappend_1059_
                                                                                                                                       (build_ex
                                                                                                                                       _stringappend_1061_)) with
                                                                                                                              | "" =>
                                                                                                                                 true
                                                                                                                              | _ =>
                                                                                                                                 false
                                                                                                                              end
                                                                                                                           | None =>
                                                                                                                              false
                                                                                                                           end))
                                                                                                                       then
                                                                                                                         true
                                                                                                                       else
                                                                                                                         false
                                                                                                                    | None =>
                                                                                                                       false
                                                                                                                    end))
                                                                                                                then
                                                                                                                  true
                                                                                                                else
                                                                                                                  false)
                                                                                                       : bool)
                                                                                                   | None =>
                                                                                                      returnm (false
                                                                                                       : bool)
                                                                                                   end >>= fun w__555 : bool =>
                                                                                                   returnm ((if
                                                                                                               (w__555)
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false)
                                                                                                    : bool)
                                                                                                | None =>
                                                                                                   returnm (false
                                                                                                    : bool)
                                                                                                end >>= fun w__556 : bool =>
                                                                                                returnm ((if
                                                                                                            (w__556)
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__557 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__557)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__558 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__558)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__559 : bool =>
                                                                                       returnm ((if (w__559)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__560 : bool =>
                                                                                    returnm ((if (w__560)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__561 : bool =>
                                                                                 returnm ((if (w__561)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)) >>= fun w__562 : bool =>
                                                                               returnm ((if (w__562)
                                                                                         then
                                                                                           true
                                                                                         else false)
                                                                                : bool)
                                                                            | None =>
                                                                               returnm (false
                                                                                : bool)
                                                                            end >>= fun w__563 : bool =>
                                                                            (if (w__563) then
                                                                               match (amo_mnemonic_matches_prefix
                                                                                        _stringappend_559_) with
                                                                               | Some
                                                                                 (_stringappend_1032_,(existT _ _stringappend_1033_ _)) =>
                                                                                  returnm ((_stringappend_1032_,
                                                                                            build_ex
                                                                                            _stringappend_1033_)
                                                                                   : (amoop * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((amoop * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__565 : (amoop * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(op, existT _ _stringappend_1033_ _) :=
                                                                                 w__565
                                                                                  : (amoop * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1034_ :=
                                                                                 string_drop
                                                                                   _stringappend_559_
                                                                                   (build_ex
                                                                                   _stringappend_1033_) in
                                                                               let _stringappend_1035_ :=
                                                                                 string_drop
                                                                                   _stringappend_1034_
                                                                                   (string_length
                                                                                      ".") in
                                                                               match (size_mnemonic_matches_prefix
                                                                                        _stringappend_1035_) with
                                                                               | Some
                                                                                 (_stringappend_1036_,(existT _ _stringappend_1037_ _)) =>
                                                                                  returnm ((_stringappend_1036_,
                                                                                            build_ex
                                                                                            _stringappend_1037_)
                                                                                   : (word_width * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((word_width * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__567 : (word_width * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(width, existT _ _stringappend_1037_ _) :=
                                                                                 w__567
                                                                                  : (word_width * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1038_ :=
                                                                                 string_drop
                                                                                   _stringappend_1035_
                                                                                   (build_ex
                                                                                   _stringappend_1037_) in
                                                                               match (maybe_aq_matches_prefix
                                                                                        _stringappend_1038_) with
                                                                               | Some
                                                                                 (_stringappend_1039_,(existT _ _stringappend_1040_ _)) =>
                                                                                  returnm ((_stringappend_1039_,
                                                                                            build_ex
                                                                                            _stringappend_1040_)
                                                                                   : (bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__569 : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(aq, existT _ _stringappend_1040_ _) :=
                                                                                 w__569
                                                                                  : (bool * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1041_ :=
                                                                                 string_drop
                                                                                   _stringappend_1038_
                                                                                   (build_ex
                                                                                   _stringappend_1040_) in
                                                                               match (maybe_rl_matches_prefix
                                                                                        _stringappend_1041_) with
                                                                               | Some
                                                                                 (_stringappend_1042_,(existT _ _stringappend_1043_ _)) =>
                                                                                  returnm ((_stringappend_1042_,
                                                                                            build_ex
                                                                                            _stringappend_1043_)
                                                                                   : (bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((bool * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__571 : (bool * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rl, existT _ _stringappend_1043_ _) :=
                                                                                 w__571
                                                                                  : (bool * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1044_ :=
                                                                                 string_drop
                                                                                   _stringappend_1041_
                                                                                   (build_ex
                                                                                   _stringappend_1043_) in
                                                                               match (spc_matches_prefix
                                                                                        _stringappend_1044_) with
                                                                               | Some
                                                                                 (_stringappend_1045_,(existT _ _stringappend_1046_ _)) =>
                                                                                  returnm ((_stringappend_1045_,
                                                                                            build_ex
                                                                                            _stringappend_1046_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__573 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1046_ _) :=
                                                                                 w__573
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1047_ :=
                                                                                 string_drop
                                                                                   _stringappend_1044_
                                                                                   (build_ex
                                                                                   _stringappend_1046_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1047_) with
                                                                               | Some
                                                                                 (_stringappend_1048_,(existT _ _stringappend_1049_ _)) =>
                                                                                  returnm ((_stringappend_1048_,
                                                                                            build_ex
                                                                                            _stringappend_1049_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__575 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rd, existT _ _stringappend_1049_ _) :=
                                                                                 w__575
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1050_ :=
                                                                                 string_drop
                                                                                   _stringappend_1047_
                                                                                   (build_ex
                                                                                   _stringappend_1049_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1050_ >>= fun w__576 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               match w__576 with
                                                                               | Some
                                                                                 (_stringappend_1051_,(existT _ _stringappend_1052_ _)) =>
                                                                                  returnm ((_stringappend_1051_,
                                                                                            build_ex
                                                                                            _stringappend_1052_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__578 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1052_ _) :=
                                                                                 w__578
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1053_ :=
                                                                                 string_drop
                                                                                   _stringappend_1050_
                                                                                   (build_ex
                                                                                   _stringappend_1052_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1053_) with
                                                                               | Some
                                                                                 (_stringappend_1054_,(existT _ _stringappend_1055_ _)) =>
                                                                                  returnm ((_stringappend_1054_,
                                                                                            build_ex
                                                                                            _stringappend_1055_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__580 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rs1, existT _ _stringappend_1055_ _) :=
                                                                                 w__580
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1056_ :=
                                                                                 string_drop
                                                                                   _stringappend_1053_
                                                                                   (build_ex
                                                                                   _stringappend_1055_) in
                                                                               sep_matches_prefix
                                                                                 _stringappend_1056_ >>= fun w__581 : option ((unit * {n : Z & ArithFact (n >=
                                                                                 0)})) =>
                                                                               match w__581 with
                                                                               | Some
                                                                                 (_stringappend_1057_,(existT _ _stringappend_1058_ _)) =>
                                                                                  returnm ((_stringappend_1057_,
                                                                                            build_ex
                                                                                            _stringappend_1058_)
                                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__583 : (unit * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(tt, existT _ _stringappend_1058_ _) :=
                                                                                 w__583
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               let _stringappend_1059_ :=
                                                                                 string_drop
                                                                                   _stringappend_1056_
                                                                                   (build_ex
                                                                                   _stringappend_1058_) in
                                                                               match (reg_name_matches_prefix
                                                                                        _stringappend_1059_) with
                                                                               | Some
                                                                                 (_stringappend_1060_,(existT _ _stringappend_1061_ _)) =>
                                                                                  returnm ((_stringappend_1060_,
                                                                                            build_ex
                                                                                            _stringappend_1061_)
                                                                                   : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               | _ =>
                                                                                  exit tt
                                                                                   : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}))
                                                                               end >>= fun w__585 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                 0)}) =>
                                                                               let '(rs2, existT _ _stringappend_1061_ _) :=
                                                                                 w__585
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) in
                                                                               (match (string_drop
                                                                                         _stringappend_1059_
                                                                                         (build_ex
                                                                                         _stringappend_1061_)) with
                                                                                | "" =>
                                                                                   returnm (true
                                                                                    : bool)
                                                                                | _ =>
                                                                                   exit tt
                                                                                    : M (bool)
                                                                                end)
                                                                                : M (bool)
                                                                             else
                                                                               match (csr_mnemonic_matches_prefix
                                                                                        _stringappend_559_) with
                                                                               | Some
                                                                                 (_stringappend_1063_,(existT _ _stringappend_1064_ _)) =>
                                                                                  let _stringappend_1065_ :=
                                                                                    string_drop
                                                                                      _stringappend_559_
                                                                                      (build_ex
                                                                                      _stringappend_1064_) in
                                                                                  and_boolM
                                                                                    (returnm ((string_startswith
                                                                                                 _stringappend_1065_
                                                                                                 "i")
                                                                                      : bool))
                                                                                    (let _stringappend_1066_ :=
                                                                                      string_drop
                                                                                        _stringappend_1065_
                                                                                        (string_length
                                                                                           "i") in
                                                                                    match (spc_matches_prefix
                                                                                             _stringappend_1066_) with
                                                                                    | Some
                                                                                      (_stringappend_1067_,(existT _ _stringappend_1068_ _)) =>
                                                                                       let _stringappend_1069_ :=
                                                                                         string_drop
                                                                                           _stringappend_1066_
                                                                                           (build_ex
                                                                                           _stringappend_1068_) in
                                                                                       match (reg_name_matches_prefix
                                                                                                _stringappend_1069_) with
                                                                                       | Some
                                                                                         (_stringappend_1070_,(existT _ _stringappend_1071_ _)) =>
                                                                                          let _stringappend_1072_ :=
                                                                                            string_drop
                                                                                              _stringappend_1069_
                                                                                              (build_ex
                                                                                              _stringappend_1071_) in
                                                                                          sep_matches_prefix
                                                                                            _stringappend_1072_ >>= fun w__588 : option ((unit * {n : Z & ArithFact (n >=
                                                                                            0)})) =>
                                                                                          match w__588 with
                                                                                          | Some
                                                                                            (_stringappend_1073_,(existT _ _stringappend_1074_ _)) =>
                                                                                             let _stringappend_1075_ :=
                                                                                               string_drop
                                                                                                 _stringappend_1072_
                                                                                                 (build_ex
                                                                                                 _stringappend_1074_) in
                                                                                             match (hex_bits_5_matches_prefix
                                                                                                      _stringappend_1075_) with
                                                                                             | Some
                                                                                               (_stringappend_1076_,(existT _ _stringappend_1077_ _)) =>
                                                                                                let _stringappend_1078_ :=
                                                                                                  string_drop
                                                                                                    _stringappend_1075_
                                                                                                    (build_ex
                                                                                                    _stringappend_1077_) in
                                                                                                sep_matches_prefix
                                                                                                  _stringappend_1078_ >>= fun w__589 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                  0)})) =>
                                                                                                returnm ((if
                                                                                                            ((match w__589 with
                                                                                                              | Some
                                                                                                                (_stringappend_1079_,(existT _ _stringappend_1080_ _)) =>
                                                                                                                 let _stringappend_1081_ :=
                                                                                                                   string_drop
                                                                                                                     _stringappend_1078_
                                                                                                                     (build_ex
                                                                                                                     _stringappend_1080_) in
                                                                                                                 if
                                                                                                                   ((match (csr_name_map_matches_prefix
                                                                                                                              _stringappend_1081_) with
                                                                                                                     | Some
                                                                                                                       (_stringappend_1082_,(existT _ _stringappend_1083_ _)) =>
                                                                                                                        match (string_drop
                                                                                                                                 _stringappend_1081_
                                                                                                                                 (build_ex
                                                                                                                                 _stringappend_1083_)) with
                                                                                                                        | "" =>
                                                                                                                           true
                                                                                                                        | _ =>
                                                                                                                           false
                                                                                                                        end
                                                                                                                     | None =>
                                                                                                                        false
                                                                                                                     end))
                                                                                                                 then
                                                                                                                   true
                                                                                                                 else
                                                                                                                   false
                                                                                                              | None =>
                                                                                                                 false
                                                                                                              end))
                                                                                                          then
                                                                                                            true
                                                                                                          else
                                                                                                            false)
                                                                                                 : bool)
                                                                                             | None =>
                                                                                                returnm (false
                                                                                                 : bool)
                                                                                             end >>= fun w__590 : bool =>
                                                                                             returnm ((if
                                                                                                         (w__590)
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__591 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__591)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__592 : bool =>
                                                                                       returnm ((if (w__592)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__593 : bool =>
                                                                                    returnm ((if (w__593)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)) >>= fun w__594 : bool =>
                                                                                  returnm ((if (w__594)
                                                                                            then
                                                                                              true
                                                                                            else
                                                                                              false)
                                                                                   : bool)
                                                                               | None =>
                                                                                  returnm (false
                                                                                   : bool)
                                                                               end >>= fun w__595 : bool =>
                                                                               (if (w__595) then
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_559_) with
                                                                                  | Some
                                                                                    (_stringappend_1063_,(existT _ _stringappend_1064_ _)) =>
                                                                                     returnm ((_stringappend_1063_,
                                                                                               build_ex
                                                                                               _stringappend_1064_)
                                                                                      : (csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((csrop * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__597 : (csrop * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(op, existT _ _stringappend_1064_ _) :=
                                                                                    w__597
                                                                                     : (csrop * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1065_ :=
                                                                                    string_drop
                                                                                      _stringappend_559_
                                                                                      (build_ex
                                                                                      _stringappend_1064_) in
                                                                                  let _stringappend_1066_ :=
                                                                                    string_drop
                                                                                      _stringappend_1065_
                                                                                      (string_length
                                                                                         "i") in
                                                                                  match (spc_matches_prefix
                                                                                           _stringappend_1066_) with
                                                                                  | Some
                                                                                    (_stringappend_1067_,(existT _ _stringappend_1068_ _)) =>
                                                                                     returnm ((_stringappend_1067_,
                                                                                               build_ex
                                                                                               _stringappend_1068_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__599 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1068_ _) :=
                                                                                    w__599
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1069_ :=
                                                                                    string_drop
                                                                                      _stringappend_1066_
                                                                                      (build_ex
                                                                                      _stringappend_1068_) in
                                                                                  match (reg_name_matches_prefix
                                                                                           _stringappend_1069_) with
                                                                                  | Some
                                                                                    (_stringappend_1070_,(existT _ _stringappend_1071_ _)) =>
                                                                                     returnm ((_stringappend_1070_,
                                                                                               build_ex
                                                                                               _stringappend_1071_)
                                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__601 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(rd, existT _ _stringappend_1071_ _) :=
                                                                                    w__601
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1072_ :=
                                                                                    string_drop
                                                                                      _stringappend_1069_
                                                                                      (build_ex
                                                                                      _stringappend_1071_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1072_ >>= fun w__602 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  match w__602 with
                                                                                  | Some
                                                                                    (_stringappend_1073_,(existT _ _stringappend_1074_ _)) =>
                                                                                     returnm ((_stringappend_1073_,
                                                                                               build_ex
                                                                                               _stringappend_1074_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__604 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1074_ _) :=
                                                                                    w__604
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1075_ :=
                                                                                    string_drop
                                                                                      _stringappend_1072_
                                                                                      (build_ex
                                                                                      _stringappend_1074_) in
                                                                                  match (hex_bits_5_matches_prefix
                                                                                           _stringappend_1075_) with
                                                                                  | Some
                                                                                    (_stringappend_1076_,(existT _ _stringappend_1077_ _)) =>
                                                                                     returnm ((_stringappend_1076_,
                                                                                               build_ex
                                                                                               _stringappend_1077_)
                                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__606 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(rs1, existT _ _stringappend_1077_ _) :=
                                                                                    w__606
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1078_ :=
                                                                                    string_drop
                                                                                      _stringappend_1075_
                                                                                      (build_ex
                                                                                      _stringappend_1077_) in
                                                                                  sep_matches_prefix
                                                                                    _stringappend_1078_ >>= fun w__607 : option ((unit * {n : Z & ArithFact (n >=
                                                                                    0)})) =>
                                                                                  match w__607 with
                                                                                  | Some
                                                                                    (_stringappend_1079_,(existT _ _stringappend_1080_ _)) =>
                                                                                     returnm ((_stringappend_1079_,
                                                                                               build_ex
                                                                                               _stringappend_1080_)
                                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__609 : (unit * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(tt, existT _ _stringappend_1080_ _) :=
                                                                                    w__609
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  let _stringappend_1081_ :=
                                                                                    string_drop
                                                                                      _stringappend_1078_
                                                                                      (build_ex
                                                                                      _stringappend_1080_) in
                                                                                  match (csr_name_map_matches_prefix
                                                                                           _stringappend_1081_) with
                                                                                  | Some
                                                                                    (_stringappend_1082_,(existT _ _stringappend_1083_ _)) =>
                                                                                     returnm ((_stringappend_1082_,
                                                                                               build_ex
                                                                                               _stringappend_1083_)
                                                                                      : (mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  | _ =>
                                                                                     exit tt
                                                                                      : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}))
                                                                                  end >>= fun w__611 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                    0)}) =>
                                                                                  let '(csr, existT _ _stringappend_1083_ _) :=
                                                                                    w__611
                                                                                     : (mword 12 * {n : Z & ArithFact (n >=
                                                                                      0)}) in
                                                                                  (match (string_drop
                                                                                            _stringappend_1081_
                                                                                            (build_ex
                                                                                            _stringappend_1083_)) with
                                                                                   | "" =>
                                                                                      returnm (true
                                                                                       : bool)
                                                                                   | _ =>
                                                                                      exit tt
                                                                                       : M (bool)
                                                                                   end)
                                                                                   : M (bool)
                                                                                else
                                                                                  match (csr_mnemonic_matches_prefix
                                                                                           _stringappend_559_) with
                                                                                  | Some
                                                                                    (_stringappend_1085_,(existT _ _stringappend_1086_ _)) =>
                                                                                     let _stringappend_1087_ :=
                                                                                       string_drop
                                                                                         _stringappend_559_
                                                                                         (build_ex
                                                                                         _stringappend_1086_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1087_) with
                                                                                     | Some
                                                                                       (_stringappend_1088_,(existT _ _stringappend_1089_ _)) =>
                                                                                        let _stringappend_1090_ :=
                                                                                          string_drop
                                                                                            _stringappend_1087_
                                                                                            (build_ex
                                                                                            _stringappend_1089_) in
                                                                                        match (reg_name_matches_prefix
                                                                                                 _stringappend_1090_) with
                                                                                        | Some
                                                                                          (_stringappend_1091_,(existT _ _stringappend_1092_ _)) =>
                                                                                           let _stringappend_1093_ :=
                                                                                             string_drop
                                                                                               _stringappend_1090_
                                                                                               (build_ex
                                                                                               _stringappend_1092_) in
                                                                                           sep_matches_prefix
                                                                                             _stringappend_1093_ >>= fun w__614 : option ((unit * {n : Z & ArithFact (n >=
                                                                                             0)})) =>
                                                                                           match w__614 with
                                                                                           | Some
                                                                                             (_stringappend_1094_,(existT _ _stringappend_1095_ _)) =>
                                                                                              let _stringappend_1096_ :=
                                                                                                string_drop
                                                                                                  _stringappend_1093_
                                                                                                  (build_ex
                                                                                                  _stringappend_1095_) in
                                                                                              match (reg_name_matches_prefix
                                                                                                       _stringappend_1096_) with
                                                                                              | Some
                                                                                                (_stringappend_1097_,(existT _ _stringappend_1098_ _)) =>
                                                                                                 let _stringappend_1099_ :=
                                                                                                   string_drop
                                                                                                     _stringappend_1096_
                                                                                                     (build_ex
                                                                                                     _stringappend_1098_) in
                                                                                                 sep_matches_prefix
                                                                                                   _stringappend_1099_ >>= fun w__615 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                   0)})) =>
                                                                                                 returnm ((if
                                                                                                             ((match w__615 with
                                                                                                               | Some
                                                                                                                 (_stringappend_1100_,(existT _ _stringappend_1101_ _)) =>
                                                                                                                  let _stringappend_1102_ :=
                                                                                                                    string_drop
                                                                                                                      _stringappend_1099_
                                                                                                                      (build_ex
                                                                                                                      _stringappend_1101_) in
                                                                                                                  if
                                                                                                                    ((match (csr_name_map_matches_prefix
                                                                                                                               _stringappend_1102_) with
                                                                                                                      | Some
                                                                                                                        (_stringappend_1103_,(existT _ _stringappend_1104_ _)) =>
                                                                                                                         match (string_drop
                                                                                                                                  _stringappend_1102_
                                                                                                                                  (build_ex
                                                                                                                                  _stringappend_1104_)) with
                                                                                                                         | "" =>
                                                                                                                            true
                                                                                                                         | _ =>
                                                                                                                            false
                                                                                                                         end
                                                                                                                      | None =>
                                                                                                                         false
                                                                                                                      end))
                                                                                                                  then
                                                                                                                    true
                                                                                                                  else
                                                                                                                    false
                                                                                                               | None =>
                                                                                                                  false
                                                                                                               end))
                                                                                                           then
                                                                                                             true
                                                                                                           else
                                                                                                             false)
                                                                                                  : bool)
                                                                                              | None =>
                                                                                                 returnm (false
                                                                                                  : bool)
                                                                                              end >>= fun w__616 : bool =>
                                                                                              returnm ((if
                                                                                                          (w__616)
                                                                                                        then
                                                                                                          true
                                                                                                        else
                                                                                                          false)
                                                                                               : bool)
                                                                                           | None =>
                                                                                              returnm (false
                                                                                               : bool)
                                                                                           end >>= fun w__617 : bool =>
                                                                                           returnm ((if
                                                                                                       (w__617)
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false)
                                                                                            : bool)
                                                                                        | None =>
                                                                                           returnm (false
                                                                                            : bool)
                                                                                        end >>= fun w__618 : bool =>
                                                                                        returnm ((if
                                                                                                    (w__618)
                                                                                                  then
                                                                                                    true
                                                                                                  else
                                                                                                    false)
                                                                                         : bool)
                                                                                     | None =>
                                                                                        returnm (false
                                                                                         : bool)
                                                                                     end >>= fun w__619 : bool =>
                                                                                     returnm ((if (w__619)
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)
                                                                                      : bool)
                                                                                  | None =>
                                                                                     returnm (false
                                                                                      : bool)
                                                                                  end >>= fun w__620 : bool =>
                                                                                  (if (w__620) then
                                                                                     match (csr_mnemonic_matches_prefix
                                                                                              _stringappend_559_) with
                                                                                     | Some
                                                                                       (_stringappend_1085_,(existT _ _stringappend_1086_ _)) =>
                                                                                        returnm ((_stringappend_1085_,
                                                                                                  build_ex
                                                                                                  _stringappend_1086_)
                                                                                         : (csrop * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((csrop * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__622 : (csrop * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(op, existT _ _stringappend_1086_ _) :=
                                                                                       w__622
                                                                                        : (csrop * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1087_ :=
                                                                                       string_drop
                                                                                         _stringappend_559_
                                                                                         (build_ex
                                                                                         _stringappend_1086_) in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1087_) with
                                                                                     | Some
                                                                                       (_stringappend_1088_,(existT _ _stringappend_1089_ _)) =>
                                                                                        returnm ((_stringappend_1088_,
                                                                                                  build_ex
                                                                                                  _stringappend_1089_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__624 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1089_ _) :=
                                                                                       w__624
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1090_ :=
                                                                                       string_drop
                                                                                         _stringappend_1087_
                                                                                         (build_ex
                                                                                         _stringappend_1089_) in
                                                                                     match (reg_name_matches_prefix
                                                                                              _stringappend_1090_) with
                                                                                     | Some
                                                                                       (_stringappend_1091_,(existT _ _stringappend_1092_ _)) =>
                                                                                        returnm ((_stringappend_1091_,
                                                                                                  build_ex
                                                                                                  _stringappend_1092_)
                                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__626 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(rd, existT _ _stringappend_1092_ _) :=
                                                                                       w__626
                                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1093_ :=
                                                                                       string_drop
                                                                                         _stringappend_1090_
                                                                                         (build_ex
                                                                                         _stringappend_1092_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1093_ >>= fun w__627 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     match w__627 with
                                                                                     | Some
                                                                                       (_stringappend_1094_,(existT _ _stringappend_1095_ _)) =>
                                                                                        returnm ((_stringappend_1094_,
                                                                                                  build_ex
                                                                                                  _stringappend_1095_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__629 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1095_ _) :=
                                                                                       w__629
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1096_ :=
                                                                                       string_drop
                                                                                         _stringappend_1093_
                                                                                         (build_ex
                                                                                         _stringappend_1095_) in
                                                                                     match (reg_name_matches_prefix
                                                                                              _stringappend_1096_) with
                                                                                     | Some
                                                                                       (_stringappend_1097_,(existT _ _stringappend_1098_ _)) =>
                                                                                        returnm ((_stringappend_1097_,
                                                                                                  build_ex
                                                                                                  _stringappend_1098_)
                                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__631 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(rs1, existT _ _stringappend_1098_ _) :=
                                                                                       w__631
                                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1099_ :=
                                                                                       string_drop
                                                                                         _stringappend_1096_
                                                                                         (build_ex
                                                                                         _stringappend_1098_) in
                                                                                     sep_matches_prefix
                                                                                       _stringappend_1099_ >>= fun w__632 : option ((unit * {n : Z & ArithFact (n >=
                                                                                       0)})) =>
                                                                                     match w__632 with
                                                                                     | Some
                                                                                       (_stringappend_1100_,(existT _ _stringappend_1101_ _)) =>
                                                                                        returnm ((_stringappend_1100_,
                                                                                                  build_ex
                                                                                                  _stringappend_1101_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__634 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1101_ _) :=
                                                                                       w__634
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1102_ :=
                                                                                       string_drop
                                                                                         _stringappend_1099_
                                                                                         (build_ex
                                                                                         _stringappend_1101_) in
                                                                                     match (csr_name_map_matches_prefix
                                                                                              _stringappend_1102_) with
                                                                                     | Some
                                                                                       (_stringappend_1103_,(existT _ _stringappend_1104_ _)) =>
                                                                                        returnm ((_stringappend_1103_,
                                                                                                  build_ex
                                                                                                  _stringappend_1104_)
                                                                                         : (mword 12 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__636 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(csr, existT _ _stringappend_1104_ _) :=
                                                                                       w__636
                                                                                        : (mword 12 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     (match (string_drop
                                                                                               _stringappend_1102_
                                                                                               (build_ex
                                                                                               _stringappend_1104_)) with
                                                                                      | "" =>
                                                                                         returnm (true
                                                                                          : bool)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (bool)
                                                                                      end)
                                                                                      : M (bool)
                                                                                   else if ((andb
                                                                                               (string_startswith
                                                                                                  _stringappend_559_
                                                                                                  "illegal")
                                                                                               (let _stringappend_1106_ :=
                                                                                                 string_drop
                                                                                                   _stringappend_559_
                                                                                                   (string_length
                                                                                                      "illegal") in
                                                                                               if ((match (spc_matches_prefix
                                                                                                             _stringappend_1106_) with
                                                                                                    | Some
                                                                                                      (_stringappend_1107_,(existT _ _stringappend_1108_ _)) =>
                                                                                                       let _stringappend_1109_ :=
                                                                                                         string_drop
                                                                                                           _stringappend_1106_
                                                                                                           (build_ex
                                                                                                           _stringappend_1108_) in
                                                                                                       if
                                                                                                         ((match (hex_bits_32_matches_prefix
                                                                                                                    _stringappend_1109_) with
                                                                                                           | Some
                                                                                                             (_stringappend_1110_,(existT _ _stringappend_1111_ _)) =>
                                                                                                              match (string_drop
                                                                                                                       _stringappend_1109_
                                                                                                                       (build_ex
                                                                                                                       _stringappend_1111_)) with
                                                                                                              | "" =>
                                                                                                                 true
                                                                                                              | _ =>
                                                                                                                 false
                                                                                                              end
                                                                                                           | None =>
                                                                                                              false
                                                                                                           end))
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false
                                                                                                    | None =>
                                                                                                       false
                                                                                                    end))
                                                                                               then
                                                                                                 true
                                                                                               else
                                                                                                 false)))
                                                                                   then
                                                                                     let _stringappend_1106_ :=
                                                                                       string_drop
                                                                                         _stringappend_559_
                                                                                         (string_length
                                                                                            "illegal") in
                                                                                     match (spc_matches_prefix
                                                                                              _stringappend_1106_) with
                                                                                     | Some
                                                                                       (_stringappend_1107_,(existT _ _stringappend_1108_ _)) =>
                                                                                        returnm ((_stringappend_1107_,
                                                                                                  build_ex
                                                                                                  _stringappend_1108_)
                                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__640 : (unit * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(tt, existT _ _stringappend_1108_ _) :=
                                                                                       w__640
                                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     let _stringappend_1109_ :=
                                                                                       string_drop
                                                                                         _stringappend_1106_
                                                                                         (build_ex
                                                                                         _stringappend_1108_) in
                                                                                     match (hex_bits_32_matches_prefix
                                                                                              _stringappend_1109_) with
                                                                                     | Some
                                                                                       (_stringappend_1110_,(existT _ _stringappend_1111_ _)) =>
                                                                                        returnm ((_stringappend_1110_,
                                                                                                  build_ex
                                                                                                  _stringappend_1111_)
                                                                                         : (mword 32 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     | _ =>
                                                                                        exit tt
                                                                                         : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                          0)}))
                                                                                     end >>= fun w__642 : (mword 32 * {n : Z & ArithFact (n >=
                                                                                       0)}) =>
                                                                                     let '(s, existT _ _stringappend_1111_ _) :=
                                                                                       w__642
                                                                                        : (mword 32 * {n : Z & ArithFact (n >=
                                                                                         0)}) in
                                                                                     (match (string_drop
                                                                                               _stringappend_1109_
                                                                                               (build_ex
                                                                                               _stringappend_1111_)) with
                                                                                      | "" =>
                                                                                         returnm (true
                                                                                          : bool)
                                                                                      | _ =>
                                                                                         exit tt
                                                                                          : M (bool)
                                                                                      end)
                                                                                      : M (bool)
                                                                                   else
                                                                                     returnm (false
                                                                                      : bool))
                                                                                   : M (bool))
                                                                                : M (bool))
                                                                             : M (bool))
                                                                          : M (bool))
                                                                       : M (bool))
                                                                    : M (bool)
                                                                end)
                                                                : M (bool))
                                                             : M (bool))
                                                          : M (bool))
                                                       : M (bool))
                                                    : M (bool))
                                                 : M (bool))
                                              : M (bool))
                                           : M (bool))
                                        : M (bool))
                                     : M (bool))
                                  : M (bool))
                               : M (bool))
                            : M (bool))
                         : M (bool))
                      : M (bool))
                   : M (bool))
                : M (bool))
             : M (bool))
          : M (bool))
       : M (bool))
    : M (bool).

Definition assembly_matches_prefix (arg_ : string) 
: M (option ((ast * {n : Z & ArithFact (n >= 0)}))) :=
   let _stringappend_0_ := arg_ in
   match (utype_mnemonic_matches_prefix _stringappend_0_) with
   | Some (_stringappend_1_,(existT _ _stringappend_2_ _)) =>
      let _stringappend_3_ := string_drop _stringappend_0_ (build_ex _stringappend_2_) in
      match (spc_matches_prefix _stringappend_3_) with
      | Some (_stringappend_4_,(existT _ _stringappend_5_ _)) =>
         let _stringappend_6_ := string_drop _stringappend_3_ (build_ex _stringappend_5_) in
         match (reg_name_matches_prefix _stringappend_6_) with
         | Some (_stringappend_7_,(existT _ _stringappend_8_ _)) =>
            let _stringappend_9_ := string_drop _stringappend_6_ (build_ex _stringappend_8_) in
            sep_matches_prefix _stringappend_9_ >>= fun w__0 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            returnm ((if ((match w__0 with
                           | Some (_stringappend_10_,(existT _ _stringappend_11_ _)) =>
                              let _stringappend_12_ :=
                                string_drop _stringappend_9_ (build_ex _stringappend_11_) in
                              if ((match (hex_bits_20_matches_prefix _stringappend_12_) with
                                   | Some (_stringappend_13_,(existT _ _stringappend_14_ _)) =>
                                      match (string_drop _stringappend_12_
                                               (build_ex
                                               _stringappend_14_)) with
                                      | s_ => true
                                      end
                                   | None => false
                                   end)) then
                                true
                              else false
                           | None => false
                           end)) then
                        true
                      else false)
             : bool)
         | None => returnm (false  : bool)
         end >>= fun w__1 : bool =>
         returnm ((if (w__1) then true
                   else false)
          : bool)
      | None => returnm (false  : bool)
      end >>= fun w__2 : bool =>
      returnm ((if (w__2) then true
                else false)
       : bool)
   | None => returnm (false  : bool)
   end >>= fun w__3 : bool =>
   (if (w__3) then
      match (utype_mnemonic_matches_prefix _stringappend_0_) with
      | Some (_stringappend_1_,(existT _ _stringappend_2_ _)) =>
         returnm ((_stringappend_1_, build_ex _stringappend_2_)
          : (uop * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((uop * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__5 : (uop * {n : Z & ArithFact (n >= 0)}) =>
      let '(op, existT _ _stringappend_2_ _) := w__5  : (uop * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_3_ := string_drop _stringappend_0_ (build_ex _stringappend_2_) in
      match (spc_matches_prefix _stringappend_3_) with
      | Some (_stringappend_4_,(existT _ _stringappend_5_ _)) =>
         returnm ((_stringappend_4_, build_ex _stringappend_5_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__7 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_5_ _) := w__7  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_6_ := string_drop _stringappend_3_ (build_ex _stringappend_5_) in
      match (reg_name_matches_prefix _stringappend_6_) with
      | Some (_stringappend_7_,(existT _ _stringappend_8_ _)) =>
         returnm ((_stringappend_7_, build_ex _stringappend_8_)
          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__9 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
      let '(rd, existT _ _stringappend_8_ _) := w__9  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_9_ := string_drop _stringappend_6_ (build_ex _stringappend_8_) in
      sep_matches_prefix _stringappend_9_ >>= fun w__10 : option ((unit * {n : Z & ArithFact (n >= 0)})) =>
      match w__10 with
      | Some (_stringappend_10_,(existT _ _stringappend_11_ _)) =>
         returnm ((_stringappend_10_, build_ex _stringappend_11_)
          : (unit * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__12 : (unit * {n : Z & ArithFact (n >= 0)}) =>
      let '(tt, existT _ _stringappend_11_ _) := w__12  : (unit * {n : Z & ArithFact (n >= 0)}) in
      let _stringappend_12_ := string_drop _stringappend_9_ (build_ex _stringappend_11_) in
      match (hex_bits_20_matches_prefix _stringappend_12_) with
      | Some (_stringappend_13_,(existT _ _stringappend_14_ _)) =>
         returnm ((_stringappend_13_, build_ex _stringappend_14_)
          : (mword 20 * {n : Z & ArithFact (n >= 0)}))
      | _ => exit tt  : M ((mword 20 * {n : Z & ArithFact (n >= 0)}))
      end >>= fun w__14 : (mword 20 * {n : Z & ArithFact (n >= 0)}) =>
      let '(imm, existT _ _stringappend_14_ _) := w__14  : (mword 20 * {n : Z & ArithFact (n >= 0)}) in
      returnm ((match (string_drop _stringappend_12_ (build_ex _stringappend_14_)) with
                | s_ => Some (UTYPE (imm,rd,op), sub_nat (string_length arg_) (string_length s_))
                end)
       : option ((ast * {n : Z & ArithFact (n >= 0)})))
    else
      and_boolM (returnm ((string_startswith _stringappend_0_ "jal")  : bool))
        (let _stringappend_16_ := string_drop _stringappend_0_ (string_length "jal") in
        match (spc_matches_prefix _stringappend_16_) with
        | Some (_stringappend_17_,(existT _ _stringappend_18_ _)) =>
           let _stringappend_19_ := string_drop _stringappend_16_ (build_ex _stringappend_18_) in
           match (reg_name_matches_prefix _stringappend_19_) with
           | Some (_stringappend_20_,(existT _ _stringappend_21_ _)) =>
              let _stringappend_22_ := string_drop _stringappend_19_ (build_ex _stringappend_21_) in
              sep_matches_prefix _stringappend_22_ >>= fun w__15 : option ((unit * {n : Z & ArithFact (n >=
                0)})) =>
              returnm ((if ((match w__15 with
                             | Some (_stringappend_23_,(existT _ _stringappend_24_ _)) =>
                                let _stringappend_25_ :=
                                  string_drop _stringappend_22_ (build_ex _stringappend_24_) in
                                if ((match (hex_bits_21_matches_prefix _stringappend_25_) with
                                     | Some (_stringappend_26_,(existT _ _stringappend_27_ _)) =>
                                        match (string_drop _stringappend_25_
                                                 (build_ex
                                                 _stringappend_27_)) with
                                        | s_ => true
                                        end
                                     | None => false
                                     end)) then
                                  true
                                else false
                             | None => false
                             end)) then
                          true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__16 : bool =>
           returnm ((if (w__16) then true
                     else false)
            : bool)
        | None => returnm (false  : bool)
        end >>= fun w__17 : bool =>
        returnm ((if (w__17) then true
                  else false)
         : bool)) >>= fun w__18 : bool =>
      (if (w__18) then
         let _stringappend_16_ := string_drop _stringappend_0_ (string_length "jal") in
         match (spc_matches_prefix _stringappend_16_) with
         | Some (_stringappend_17_,(existT _ _stringappend_18_ _)) =>
            returnm ((_stringappend_17_, build_ex _stringappend_18_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__20 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_18_ _) := w__20  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_19_ := string_drop _stringappend_16_ (build_ex _stringappend_18_) in
         match (reg_name_matches_prefix _stringappend_19_) with
         | Some (_stringappend_20_,(existT _ _stringappend_21_ _)) =>
            returnm ((_stringappend_20_, build_ex _stringappend_21_)
             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__22 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
         let '(rd, existT _ _stringappend_21_ _) :=
           w__22
            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_22_ := string_drop _stringappend_19_ (build_ex _stringappend_21_) in
         sep_matches_prefix _stringappend_22_ >>= fun w__23 : option ((unit * {n : Z & ArithFact (n >=
           0)})) =>
         match w__23 with
         | Some (_stringappend_23_,(existT _ _stringappend_24_ _)) =>
            returnm ((_stringappend_23_, build_ex _stringappend_24_)
             : (unit * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__25 : (unit * {n : Z & ArithFact (n >= 0)}) =>
         let '(tt, existT _ _stringappend_24_ _) := w__25  : (unit * {n : Z & ArithFact (n >= 0)}) in
         let _stringappend_25_ := string_drop _stringappend_22_ (build_ex _stringappend_24_) in
         match (hex_bits_21_matches_prefix _stringappend_25_) with
         | Some (_stringappend_26_,(existT _ _stringappend_27_ _)) =>
            returnm ((_stringappend_26_, build_ex _stringappend_27_)
             : (mword 21 * {n : Z & ArithFact (n >= 0)}))
         | _ => exit tt  : M ((mword 21 * {n : Z & ArithFact (n >= 0)}))
         end >>= fun w__27 : (mword 21 * {n : Z & ArithFact (n >= 0)}) =>
         let '(imm, existT _ _stringappend_27_ _) :=
           w__27
            : (mword 21 * {n : Z & ArithFact (n >= 0)}) in
         returnm ((match (string_drop _stringappend_25_ (build_ex _stringappend_27_)) with
                   | s_ =>
                      Some (RISCV_JAL (imm,rd), sub_nat (string_length arg_) (string_length s_))
                   end)
          : option ((ast * {n : Z & ArithFact (n >= 0)})))
       else
         and_boolM (returnm ((string_startswith _stringappend_0_ "jalr")  : bool))
           (let _stringappend_29_ := string_drop _stringappend_0_ (string_length "jalr") in
           match (spc_matches_prefix _stringappend_29_) with
           | Some (_stringappend_30_,(existT _ _stringappend_31_ _)) =>
              let _stringappend_32_ := string_drop _stringappend_29_ (build_ex _stringappend_31_) in
              match (reg_name_matches_prefix _stringappend_32_) with
              | Some (_stringappend_33_,(existT _ _stringappend_34_ _)) =>
                 let _stringappend_35_ := string_drop _stringappend_32_ (build_ex _stringappend_34_) in
                 sep_matches_prefix _stringappend_35_ >>= fun w__28 : option ((unit * {n : Z & ArithFact (n >=
                   0)})) =>
                 match w__28 with
                 | Some (_stringappend_36_,(existT _ _stringappend_37_ _)) =>
                    let _stringappend_38_ :=
                      string_drop _stringappend_35_ (build_ex _stringappend_37_) in
                    match (reg_name_matches_prefix _stringappend_38_) with
                    | Some (_stringappend_39_,(existT _ _stringappend_40_ _)) =>
                       let _stringappend_41_ :=
                         string_drop _stringappend_38_ (build_ex _stringappend_40_) in
                       sep_matches_prefix _stringappend_41_ >>= fun w__29 : option ((unit * {n : Z & ArithFact (n >=
                         0)})) =>
                       returnm ((if ((match w__29 with
                                      | Some (_stringappend_42_,(existT _ _stringappend_43_ _)) =>
                                         let _stringappend_44_ :=
                                           string_drop _stringappend_41_
                                             (build_ex
                                             _stringappend_43_) in
                                         if ((match (hex_bits_12_matches_prefix _stringappend_44_) with
                                              | Some
                                                (_stringappend_45_,(existT _ _stringappend_46_ _)) =>
                                                 match (string_drop _stringappend_44_
                                                          (build_ex
                                                          _stringappend_46_)) with
                                                 | s_ => true
                                                 end
                                              | None => false
                                              end)) then
                                           true
                                         else false
                                      | None => false
                                      end)) then
                                   true
                                 else false)
                        : bool)
                    | None => returnm (false  : bool)
                    end >>= fun w__30 : bool =>
                    returnm ((if (w__30) then true
                              else false)
                     : bool)
                 | None => returnm (false  : bool)
                 end >>= fun w__31 : bool =>
                 returnm ((if (w__31) then true
                           else false)
                  : bool)
              | None => returnm (false  : bool)
              end >>= fun w__32 : bool =>
              returnm ((if (w__32) then true
                        else false)
               : bool)
           | None => returnm (false  : bool)
           end >>= fun w__33 : bool =>
           returnm ((if (w__33) then true
                     else false)
            : bool)) >>= fun w__34 : bool =>
         (if (w__34) then
            let _stringappend_29_ := string_drop _stringappend_0_ (string_length "jalr") in
            match (spc_matches_prefix _stringappend_29_) with
            | Some (_stringappend_30_,(existT _ _stringappend_31_ _)) =>
               returnm ((_stringappend_30_, build_ex _stringappend_31_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__36 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_31_ _) :=
              w__36
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_32_ := string_drop _stringappend_29_ (build_ex _stringappend_31_) in
            match (reg_name_matches_prefix _stringappend_32_) with
            | Some (_stringappend_33_,(existT _ _stringappend_34_ _)) =>
               returnm ((_stringappend_33_, build_ex _stringappend_34_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__38 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rd, existT _ _stringappend_34_ _) :=
              w__38
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_35_ := string_drop _stringappend_32_ (build_ex _stringappend_34_) in
            sep_matches_prefix _stringappend_35_ >>= fun w__39 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__39 with
            | Some (_stringappend_36_,(existT _ _stringappend_37_ _)) =>
               returnm ((_stringappend_36_, build_ex _stringappend_37_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__41 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_37_ _) :=
              w__41
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_38_ := string_drop _stringappend_35_ (build_ex _stringappend_37_) in
            match (reg_name_matches_prefix _stringappend_38_) with
            | Some (_stringappend_39_,(existT _ _stringappend_40_ _)) =>
               returnm ((_stringappend_39_, build_ex _stringappend_40_)
                : (mword 5 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__43 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
            let '(rs1, existT _ _stringappend_40_ _) :=
              w__43
               : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_41_ := string_drop _stringappend_38_ (build_ex _stringappend_40_) in
            sep_matches_prefix _stringappend_41_ >>= fun w__44 : option ((unit * {n : Z & ArithFact (n >=
              0)})) =>
            match w__44 with
            | Some (_stringappend_42_,(existT _ _stringappend_43_ _)) =>
               returnm ((_stringappend_42_, build_ex _stringappend_43_)
                : (unit * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__46 : (unit * {n : Z & ArithFact (n >= 0)}) =>
            let '(tt, existT _ _stringappend_43_ _) :=
              w__46
               : (unit * {n : Z & ArithFact (n >= 0)}) in
            let _stringappend_44_ := string_drop _stringappend_41_ (build_ex _stringappend_43_) in
            match (hex_bits_12_matches_prefix _stringappend_44_) with
            | Some (_stringappend_45_,(existT _ _stringappend_46_ _)) =>
               returnm ((_stringappend_45_, build_ex _stringappend_46_)
                : (mword 12 * {n : Z & ArithFact (n >= 0)}))
            | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
            end >>= fun w__48 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
            let '(imm, existT _ _stringappend_46_ _) :=
              w__48
               : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
            returnm ((match (string_drop _stringappend_44_ (build_ex _stringappend_46_)) with
                      | s_ =>
                         Some (RISCV_JALR (imm,rs1,rd),
                               sub_nat (string_length arg_) (string_length s_))
                      end)
             : option ((ast * {n : Z & ArithFact (n >= 0)})))
          else
            match (btype_mnemonic_matches_prefix _stringappend_0_) with
            | Some (_stringappend_48_,(existT _ _stringappend_49_ _)) =>
               let _stringappend_50_ := string_drop _stringappend_0_ (build_ex _stringappend_49_) in
               match (spc_matches_prefix _stringappend_50_) with
               | Some (_stringappend_51_,(existT _ _stringappend_52_ _)) =>
                  let _stringappend_53_ :=
                    string_drop _stringappend_50_ (build_ex _stringappend_52_) in
                  match (reg_name_matches_prefix _stringappend_53_) with
                  | Some (_stringappend_54_,(existT _ _stringappend_55_ _)) =>
                     let _stringappend_56_ :=
                       string_drop _stringappend_53_ (build_ex _stringappend_55_) in
                     sep_matches_prefix _stringappend_56_ >>= fun w__49 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__49 with
                     | Some (_stringappend_57_,(existT _ _stringappend_58_ _)) =>
                        let _stringappend_59_ :=
                          string_drop _stringappend_56_ (build_ex _stringappend_58_) in
                        match (reg_name_matches_prefix _stringappend_59_) with
                        | Some (_stringappend_60_,(existT _ _stringappend_61_ _)) =>
                           let _stringappend_62_ :=
                             string_drop _stringappend_59_ (build_ex _stringappend_61_) in
                           sep_matches_prefix _stringappend_62_ >>= fun w__50 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__50 with
                                          | Some (_stringappend_63_,(existT _ _stringappend_64_ _)) =>
                                             let _stringappend_65_ :=
                                               string_drop _stringappend_62_
                                                 (build_ex
                                                 _stringappend_64_) in
                                             if ((match (hex_bits_13_matches_prefix
                                                           _stringappend_65_) with
                                                  | Some
                                                    (_stringappend_66_,(existT _ _stringappend_67_ _)) =>
                                                     match (string_drop _stringappend_65_
                                                              (build_ex
                                                              _stringappend_67_)) with
                                                     | s_ => true
                                                     end
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__51 : bool =>
                        returnm ((if (w__51) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__52 : bool =>
                     returnm ((if (w__52) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__53 : bool =>
                  returnm ((if (w__53) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__54 : bool =>
               returnm ((if (w__54) then true
                         else false)
                : bool)
            | None => returnm (false  : bool)
            end >>= fun w__55 : bool =>
            (if (w__55) then
               match (btype_mnemonic_matches_prefix _stringappend_0_) with
               | Some (_stringappend_48_,(existT _ _stringappend_49_ _)) =>
                  returnm ((_stringappend_48_, build_ex _stringappend_49_)
                   : (bop * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((bop * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__57 : (bop * {n : Z & ArithFact (n >= 0)}) =>
               let '(op, existT _ _stringappend_49_ _) :=
                 w__57
                  : (bop * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_50_ := string_drop _stringappend_0_ (build_ex _stringappend_49_) in
               match (spc_matches_prefix _stringappend_50_) with
               | Some (_stringappend_51_,(existT _ _stringappend_52_ _)) =>
                  returnm ((_stringappend_51_, build_ex _stringappend_52_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__59 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_52_ _) :=
                 w__59
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_53_ := string_drop _stringappend_50_ (build_ex _stringappend_52_) in
               match (reg_name_matches_prefix _stringappend_53_) with
               | Some (_stringappend_54_,(existT _ _stringappend_55_ _)) =>
                  returnm ((_stringappend_54_, build_ex _stringappend_55_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__61 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs1, existT _ _stringappend_55_ _) :=
                 w__61
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_56_ := string_drop _stringappend_53_ (build_ex _stringappend_55_) in
               sep_matches_prefix _stringappend_56_ >>= fun w__62 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__62 with
               | Some (_stringappend_57_,(existT _ _stringappend_58_ _)) =>
                  returnm ((_stringappend_57_, build_ex _stringappend_58_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__64 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_58_ _) :=
                 w__64
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_59_ := string_drop _stringappend_56_ (build_ex _stringappend_58_) in
               match (reg_name_matches_prefix _stringappend_59_) with
               | Some (_stringappend_60_,(existT _ _stringappend_61_ _)) =>
                  returnm ((_stringappend_60_, build_ex _stringappend_61_)
                   : (mword 5 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__66 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
               let '(rs2, existT _ _stringappend_61_ _) :=
                 w__66
                  : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_62_ := string_drop _stringappend_59_ (build_ex _stringappend_61_) in
               sep_matches_prefix _stringappend_62_ >>= fun w__67 : option ((unit * {n : Z & ArithFact (n >=
                 0)})) =>
               match w__67 with
               | Some (_stringappend_63_,(existT _ _stringappend_64_ _)) =>
                  returnm ((_stringappend_63_, build_ex _stringappend_64_)
                   : (unit * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__69 : (unit * {n : Z & ArithFact (n >= 0)}) =>
               let '(tt, existT _ _stringappend_64_ _) :=
                 w__69
                  : (unit * {n : Z & ArithFact (n >= 0)}) in
               let _stringappend_65_ := string_drop _stringappend_62_ (build_ex _stringappend_64_) in
               match (hex_bits_13_matches_prefix _stringappend_65_) with
               | Some (_stringappend_66_,(existT _ _stringappend_67_ _)) =>
                  returnm ((_stringappend_66_, build_ex _stringappend_67_)
                   : (mword 13 * {n : Z & ArithFact (n >= 0)}))
               | _ => exit tt  : M ((mword 13 * {n : Z & ArithFact (n >= 0)}))
               end >>= fun w__71 : (mword 13 * {n : Z & ArithFact (n >= 0)}) =>
               let '(imm, existT _ _stringappend_67_ _) :=
                 w__71
                  : (mword 13 * {n : Z & ArithFact (n >= 0)}) in
               returnm ((match (string_drop _stringappend_65_ (build_ex _stringappend_67_)) with
                         | s_ =>
                            Some (BTYPE (imm,rs2,rs1,op),
                                  sub_nat (string_length arg_) (string_length s_))
                         end)
                : option ((ast * {n : Z & ArithFact (n >= 0)})))
             else
               match (itype_mnemonic_matches_prefix _stringappend_0_) with
               | Some (_stringappend_69_,(existT _ _stringappend_70_ _)) =>
                  let _stringappend_71_ := string_drop _stringappend_0_ (build_ex _stringappend_70_) in
                  match (spc_matches_prefix _stringappend_71_) with
                  | Some (_stringappend_72_,(existT _ _stringappend_73_ _)) =>
                     let _stringappend_74_ :=
                       string_drop _stringappend_71_ (build_ex _stringappend_73_) in
                     match (reg_name_matches_prefix _stringappend_74_) with
                     | Some (_stringappend_75_,(existT _ _stringappend_76_ _)) =>
                        let _stringappend_77_ :=
                          string_drop _stringappend_74_ (build_ex _stringappend_76_) in
                        sep_matches_prefix _stringappend_77_ >>= fun w__72 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__72 with
                        | Some (_stringappend_78_,(existT _ _stringappend_79_ _)) =>
                           let _stringappend_80_ :=
                             string_drop _stringappend_77_ (build_ex _stringappend_79_) in
                           match (reg_name_matches_prefix _stringappend_80_) with
                           | Some (_stringappend_81_,(existT _ _stringappend_82_ _)) =>
                              let _stringappend_83_ :=
                                string_drop _stringappend_80_ (build_ex _stringappend_82_) in
                              sep_matches_prefix _stringappend_83_ >>= fun w__73 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              returnm ((if ((match w__73 with
                                             | Some
                                               (_stringappend_84_,(existT _ _stringappend_85_ _)) =>
                                                let _stringappend_86_ :=
                                                  string_drop _stringappend_83_
                                                    (build_ex
                                                    _stringappend_85_) in
                                                if ((match (hex_bits_12_matches_prefix
                                                              _stringappend_86_) with
                                                     | Some
                                                       (_stringappend_87_,(existT _ _stringappend_88_ _)) =>
                                                        match (string_drop _stringappend_86_
                                                                 (build_ex
                                                                 _stringappend_88_)) with
                                                        | s_ => true
                                                        end
                                                     | None => false
                                                     end)) then
                                                  true
                                                else false
                                             | None => false
                                             end)) then
                                          true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__74 : bool =>
                           returnm ((if (w__74) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__75 : bool =>
                        returnm ((if (w__75) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__76 : bool =>
                     returnm ((if (w__76) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__77 : bool =>
                  returnm ((if (w__77) then true
                            else false)
                   : bool)
               | None => returnm (false  : bool)
               end >>= fun w__78 : bool =>
               (if (w__78) then
                  match (itype_mnemonic_matches_prefix _stringappend_0_) with
                  | Some (_stringappend_69_,(existT _ _stringappend_70_ _)) =>
                     returnm ((_stringappend_69_, build_ex _stringappend_70_)
                      : (iop * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((iop * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__80 : (iop * {n : Z & ArithFact (n >= 0)}) =>
                  let '(op, existT _ _stringappend_70_ _) :=
                    w__80
                     : (iop * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_71_ := string_drop _stringappend_0_ (build_ex _stringappend_70_) in
                  match (spc_matches_prefix _stringappend_71_) with
                  | Some (_stringappend_72_,(existT _ _stringappend_73_ _)) =>
                     returnm ((_stringappend_72_, build_ex _stringappend_73_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__82 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_73_ _) :=
                    w__82
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_74_ :=
                    string_drop _stringappend_71_ (build_ex _stringappend_73_) in
                  match (reg_name_matches_prefix _stringappend_74_) with
                  | Some (_stringappend_75_,(existT _ _stringappend_76_ _)) =>
                     returnm ((_stringappend_75_, build_ex _stringappend_76_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__84 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rd, existT _ _stringappend_76_ _) :=
                    w__84
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_77_ :=
                    string_drop _stringappend_74_ (build_ex _stringappend_76_) in
                  sep_matches_prefix _stringappend_77_ >>= fun w__85 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__85 with
                  | Some (_stringappend_78_,(existT _ _stringappend_79_ _)) =>
                     returnm ((_stringappend_78_, build_ex _stringappend_79_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__87 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_79_ _) :=
                    w__87
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_80_ :=
                    string_drop _stringappend_77_ (build_ex _stringappend_79_) in
                  match (reg_name_matches_prefix _stringappend_80_) with
                  | Some (_stringappend_81_,(existT _ _stringappend_82_ _)) =>
                     returnm ((_stringappend_81_, build_ex _stringappend_82_)
                      : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__89 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(rs1, existT _ _stringappend_82_ _) :=
                    w__89
                     : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_83_ :=
                    string_drop _stringappend_80_ (build_ex _stringappend_82_) in
                  sep_matches_prefix _stringappend_83_ >>= fun w__90 : option ((unit * {n : Z & ArithFact (n >=
                    0)})) =>
                  match w__90 with
                  | Some (_stringappend_84_,(existT _ _stringappend_85_ _)) =>
                     returnm ((_stringappend_84_, build_ex _stringappend_85_)
                      : (unit * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__92 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                  let '(tt, existT _ _stringappend_85_ _) :=
                    w__92
                     : (unit * {n : Z & ArithFact (n >= 0)}) in
                  let _stringappend_86_ :=
                    string_drop _stringappend_83_ (build_ex _stringappend_85_) in
                  match (hex_bits_12_matches_prefix _stringappend_86_) with
                  | Some (_stringappend_87_,(existT _ _stringappend_88_ _)) =>
                     returnm ((_stringappend_87_, build_ex _stringappend_88_)
                      : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                  | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                  end >>= fun w__94 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                  let '(imm, existT _ _stringappend_88_ _) :=
                    w__94
                     : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                  returnm ((match (string_drop _stringappend_86_ (build_ex _stringappend_88_)) with
                            | s_ =>
                               Some (ITYPE (imm,rs1,rd,op),
                                     sub_nat (string_length arg_) (string_length s_))
                            end)
                   : option ((ast * {n : Z & ArithFact (n >= 0)})))
                else
                  match (shiftiop_mnemonic_matches_prefix _stringappend_0_) with
                  | Some (_stringappend_90_,(existT _ _stringappend_91_ _)) =>
                     let _stringappend_92_ :=
                       string_drop _stringappend_0_ (build_ex _stringappend_91_) in
                     match (spc_matches_prefix _stringappend_92_) with
                     | Some (_stringappend_93_,(existT _ _stringappend_94_ _)) =>
                        let _stringappend_95_ :=
                          string_drop _stringappend_92_ (build_ex _stringappend_94_) in
                        match (reg_name_matches_prefix _stringappend_95_) with
                        | Some (_stringappend_96_,(existT _ _stringappend_97_ _)) =>
                           let _stringappend_98_ :=
                             string_drop _stringappend_95_ (build_ex _stringappend_97_) in
                           sep_matches_prefix _stringappend_98_ >>= fun w__95 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           returnm ((if ((match w__95 with
                                          | Some (_stringappend_99_,(existT _ _stringappend_100_ _)) =>
                                             let _stringappend_101_ :=
                                               string_drop _stringappend_98_
                                                 (build_ex
                                                 _stringappend_100_) in
                                             if ((match (reg_name_matches_prefix _stringappend_101_) with
                                                  | Some
                                                    (_stringappend_102_,(existT _ _stringappend_103_ _)) =>
                                                     let _stringappend_104_ :=
                                                       string_drop _stringappend_101_
                                                         (build_ex
                                                         _stringappend_103_) in
                                                     if ((match (hex_bits_6_matches_prefix
                                                                   _stringappend_104_) with
                                                          | Some
                                                            (_stringappend_105_,(existT _ _stringappend_106_ _)) =>
                                                             match (string_drop _stringappend_104_
                                                                      (build_ex
                                                                      _stringappend_106_)) with
                                                             | s_ => true
                                                             end
                                                          | None => false
                                                          end)) then
                                                       true
                                                     else false
                                                  | None => false
                                                  end)) then
                                               true
                                             else false
                                          | None => false
                                          end)) then
                                       true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__96 : bool =>
                        returnm ((if (w__96) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__97 : bool =>
                     returnm ((if (w__97) then true
                               else false)
                      : bool)
                  | None => returnm (false  : bool)
                  end >>= fun w__98 : bool =>
                  (if (w__98) then
                     match (shiftiop_mnemonic_matches_prefix _stringappend_0_) with
                     | Some (_stringappend_90_,(existT _ _stringappend_91_ _)) =>
                        returnm ((_stringappend_90_, build_ex _stringappend_91_)
                         : (sop * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__100 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                     let '(op, existT _ _stringappend_91_ _) :=
                       w__100
                        : (sop * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_92_ :=
                       string_drop _stringappend_0_ (build_ex _stringappend_91_) in
                     match (spc_matches_prefix _stringappend_92_) with
                     | Some (_stringappend_93_,(existT _ _stringappend_94_ _)) =>
                        returnm ((_stringappend_93_, build_ex _stringappend_94_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__102 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_94_ _) :=
                       w__102
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_95_ :=
                       string_drop _stringappend_92_ (build_ex _stringappend_94_) in
                     match (reg_name_matches_prefix _stringappend_95_) with
                     | Some (_stringappend_96_,(existT _ _stringappend_97_ _)) =>
                        returnm ((_stringappend_96_, build_ex _stringappend_97_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__104 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rd, existT _ _stringappend_97_ _) :=
                       w__104
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_98_ :=
                       string_drop _stringappend_95_ (build_ex _stringappend_97_) in
                     sep_matches_prefix _stringappend_98_ >>= fun w__105 : option ((unit * {n : Z & ArithFact (n >=
                       0)})) =>
                     match w__105 with
                     | Some (_stringappend_99_,(existT _ _stringappend_100_ _)) =>
                        returnm ((_stringappend_99_, build_ex _stringappend_100_)
                         : (unit * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__107 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                     let '(tt, existT _ _stringappend_100_ _) :=
                       w__107
                        : (unit * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_101_ :=
                       string_drop _stringappend_98_ (build_ex _stringappend_100_) in
                     match (reg_name_matches_prefix _stringappend_101_) with
                     | Some (_stringappend_102_,(existT _ _stringappend_103_ _)) =>
                        returnm ((_stringappend_102_, build_ex _stringappend_103_)
                         : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__109 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(rs1, existT _ _stringappend_103_ _) :=
                       w__109
                        : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                     let _stringappend_104_ :=
                       string_drop _stringappend_101_ (build_ex _stringappend_103_) in
                     match (hex_bits_6_matches_prefix _stringappend_104_) with
                     | Some (_stringappend_105_,(existT _ _stringappend_106_ _)) =>
                        returnm ((_stringappend_105_, build_ex _stringappend_106_)
                         : (mword 6 * {n : Z & ArithFact (n >= 0)}))
                     | _ => exit tt  : M ((mword 6 * {n : Z & ArithFact (n >= 0)}))
                     end >>= fun w__111 : (mword 6 * {n : Z & ArithFact (n >= 0)}) =>
                     let '(shamt, existT _ _stringappend_106_ _) :=
                       w__111
                        : (mword 6 * {n : Z & ArithFact (n >= 0)}) in
                     returnm ((match (string_drop _stringappend_104_ (build_ex _stringappend_106_)) with
                               | s_ =>
                                  Some (SHIFTIOP (shamt,rs1,rd,op),
                                        sub_nat (string_length arg_) (string_length s_))
                               end)
                      : option ((ast * {n : Z & ArithFact (n >= 0)})))
                   else
                     match (rtype_mnemonic_matches_prefix _stringappend_0_) with
                     | Some (_stringappend_108_,(existT _ _stringappend_109_ _)) =>
                        let _stringappend_110_ :=
                          string_drop _stringappend_0_ (build_ex _stringappend_109_) in
                        match (spc_matches_prefix _stringappend_110_) with
                        | Some (_stringappend_111_,(existT _ _stringappend_112_ _)) =>
                           let _stringappend_113_ :=
                             string_drop _stringappend_110_ (build_ex _stringappend_112_) in
                           match (reg_name_matches_prefix _stringappend_113_) with
                           | Some (_stringappend_114_,(existT _ _stringappend_115_ _)) =>
                              let _stringappend_116_ :=
                                string_drop _stringappend_113_ (build_ex _stringappend_115_) in
                              sep_matches_prefix _stringappend_116_ >>= fun w__112 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__112 with
                              | Some (_stringappend_117_,(existT _ _stringappend_118_ _)) =>
                                 let _stringappend_119_ :=
                                   string_drop _stringappend_116_ (build_ex _stringappend_118_) in
                                 match (reg_name_matches_prefix _stringappend_119_) with
                                 | Some (_stringappend_120_,(existT _ _stringappend_121_ _)) =>
                                    let _stringappend_122_ :=
                                      string_drop _stringappend_119_ (build_ex _stringappend_121_) in
                                    sep_matches_prefix _stringappend_122_ >>= fun w__113 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    returnm ((if ((match w__113 with
                                                   | Some
                                                     (_stringappend_123_,(existT _ _stringappend_124_ _)) =>
                                                      let _stringappend_125_ :=
                                                        string_drop _stringappend_122_
                                                          (build_ex
                                                          _stringappend_124_) in
                                                      if ((match (reg_name_matches_prefix
                                                                    _stringappend_125_) with
                                                           | Some
                                                             (_stringappend_126_,(existT _ _stringappend_127_ _)) =>
                                                              match (string_drop _stringappend_125_
                                                                       (build_ex
                                                                       _stringappend_127_)) with
                                                              | s_ => true
                                                              end
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false
                                                   | None => false
                                                   end)) then
                                                true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__114 : bool =>
                                 returnm ((if (w__114) then true
                                           else false)
                                  : bool)
                              | None => returnm (false  : bool)
                              end >>= fun w__115 : bool =>
                              returnm ((if (w__115) then true
                                        else false)
                               : bool)
                           | None => returnm (false  : bool)
                           end >>= fun w__116 : bool =>
                           returnm ((if (w__116) then true
                                     else false)
                            : bool)
                        | None => returnm (false  : bool)
                        end >>= fun w__117 : bool =>
                        returnm ((if (w__117) then true
                                  else false)
                         : bool)
                     | None => returnm (false  : bool)
                     end >>= fun w__118 : bool =>
                     (if (w__118) then
                        match (rtype_mnemonic_matches_prefix _stringappend_0_) with
                        | Some (_stringappend_108_,(existT _ _stringappend_109_ _)) =>
                           returnm ((_stringappend_108_, build_ex _stringappend_109_)
                            : (rop * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((rop * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__120 : (rop * {n : Z & ArithFact (n >= 0)}) =>
                        let '(op, existT _ _stringappend_109_ _) :=
                          w__120
                           : (rop * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_110_ :=
                          string_drop _stringappend_0_ (build_ex _stringappend_109_) in
                        match (spc_matches_prefix _stringappend_110_) with
                        | Some (_stringappend_111_,(existT _ _stringappend_112_ _)) =>
                           returnm ((_stringappend_111_, build_ex _stringappend_112_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__122 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_112_ _) :=
                          w__122
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_113_ :=
                          string_drop _stringappend_110_ (build_ex _stringappend_112_) in
                        match (reg_name_matches_prefix _stringappend_113_) with
                        | Some (_stringappend_114_,(existT _ _stringappend_115_ _)) =>
                           returnm ((_stringappend_114_, build_ex _stringappend_115_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__124 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rd, existT _ _stringappend_115_ _) :=
                          w__124
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_116_ :=
                          string_drop _stringappend_113_ (build_ex _stringappend_115_) in
                        sep_matches_prefix _stringappend_116_ >>= fun w__125 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__125 with
                        | Some (_stringappend_117_,(existT _ _stringappend_118_ _)) =>
                           returnm ((_stringappend_117_, build_ex _stringappend_118_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__127 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_118_ _) :=
                          w__127
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_119_ :=
                          string_drop _stringappend_116_ (build_ex _stringappend_118_) in
                        match (reg_name_matches_prefix _stringappend_119_) with
                        | Some (_stringappend_120_,(existT _ _stringappend_121_ _)) =>
                           returnm ((_stringappend_120_, build_ex _stringappend_121_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__129 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs1, existT _ _stringappend_121_ _) :=
                          w__129
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_122_ :=
                          string_drop _stringappend_119_ (build_ex _stringappend_121_) in
                        sep_matches_prefix _stringappend_122_ >>= fun w__130 : option ((unit * {n : Z & ArithFact (n >=
                          0)})) =>
                        match w__130 with
                        | Some (_stringappend_123_,(existT _ _stringappend_124_ _)) =>
                           returnm ((_stringappend_123_, build_ex _stringappend_124_)
                            : (unit * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__132 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                        let '(tt, existT _ _stringappend_124_ _) :=
                          w__132
                           : (unit * {n : Z & ArithFact (n >= 0)}) in
                        let _stringappend_125_ :=
                          string_drop _stringappend_122_ (build_ex _stringappend_124_) in
                        match (reg_name_matches_prefix _stringappend_125_) with
                        | Some (_stringappend_126_,(existT _ _stringappend_127_ _)) =>
                           returnm ((_stringappend_126_, build_ex _stringappend_127_)
                            : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                        | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                        end >>= fun w__134 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                        let '(rs2, existT _ _stringappend_127_ _) :=
                          w__134
                           : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                        returnm ((match (string_drop _stringappend_125_
                                           (build_ex
                                           _stringappend_127_)) with
                                  | s_ =>
                                     Some (RTYPE (rs2,rs1,rd,op),
                                           sub_nat (string_length arg_) (string_length s_))
                                  end)
                         : option ((ast * {n : Z & ArithFact (n >= 0)})))
                      else
                        and_boolM (returnm ((string_startswith _stringappend_0_ "l")  : bool))
                          (let _stringappend_129_ :=
                            string_drop _stringappend_0_ (string_length "l") in
                          match (size_mnemonic_matches_prefix _stringappend_129_) with
                          | Some (_stringappend_130_,(existT _ _stringappend_131_ _)) =>
                             let _stringappend_132_ :=
                               string_drop _stringappend_129_ (build_ex _stringappend_131_) in
                             match (maybe_u_matches_prefix _stringappend_132_) with
                             | Some (_stringappend_133_,(existT _ _stringappend_134_ _)) =>
                                let _stringappend_135_ :=
                                  string_drop _stringappend_132_ (build_ex _stringappend_134_) in
                                match (maybe_aq_matches_prefix _stringappend_135_) with
                                | Some (_stringappend_136_,(existT _ _stringappend_137_ _)) =>
                                   let _stringappend_138_ :=
                                     string_drop _stringappend_135_ (build_ex _stringappend_137_) in
                                   match (maybe_rl_matches_prefix _stringappend_138_) with
                                   | Some (_stringappend_139_,(existT _ _stringappend_140_ _)) =>
                                      let _stringappend_141_ :=
                                        string_drop _stringappend_138_ (build_ex _stringappend_140_) in
                                      match (spc_matches_prefix _stringappend_141_) with
                                      | Some (_stringappend_142_,(existT _ _stringappend_143_ _)) =>
                                         let _stringappend_144_ :=
                                           string_drop _stringappend_141_
                                             (build_ex
                                             _stringappend_143_) in
                                         match (reg_name_matches_prefix _stringappend_144_) with
                                         | Some (_stringappend_145_,(existT _ _stringappend_146_ _)) =>
                                            let _stringappend_147_ :=
                                              string_drop _stringappend_144_
                                                (build_ex
                                                _stringappend_146_) in
                                            sep_matches_prefix _stringappend_147_ >>= fun w__135 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__135 with
                                            | Some
                                              (_stringappend_148_,(existT _ _stringappend_149_ _)) =>
                                               let _stringappend_150_ :=
                                                 string_drop _stringappend_147_
                                                   (build_ex
                                                   _stringappend_149_) in
                                               match (reg_name_matches_prefix _stringappend_150_) with
                                               | Some
                                                 (_stringappend_151_,(existT _ _stringappend_152_ _)) =>
                                                  let _stringappend_153_ :=
                                                    string_drop _stringappend_150_
                                                      (build_ex
                                                      _stringappend_152_) in
                                                  sep_matches_prefix _stringappend_153_ >>= fun w__136 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__136 with
                                                                 | Some
                                                                   (_stringappend_154_,(existT _ _stringappend_155_ _)) =>
                                                                    let _stringappend_156_ :=
                                                                      string_drop _stringappend_153_
                                                                        (build_ex
                                                                        _stringappend_155_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_156_) with
                                                                         | Some
                                                                           (_stringappend_157_,(existT _ _stringappend_158_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_156_
                                                                                     (build_ex
                                                                                     _stringappend_158_)) with
                                                                            | s_ => true
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__137 : bool =>
                                               returnm ((if (w__137) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__138 : bool =>
                                            returnm ((if (w__138) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__139 : bool =>
                                         returnm ((if (w__139) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__140 : bool =>
                                      returnm ((if (w__140) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__141 : bool =>
                                   returnm ((if (w__141) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__142 : bool =>
                                returnm ((if (w__142) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__143 : bool =>
                             returnm ((if (w__143) then true
                                       else false)
                              : bool)
                          | None => returnm (false  : bool)
                          end >>= fun w__144 : bool =>
                          returnm ((if (w__144) then true
                                    else false)
                           : bool)) >>= fun w__145 : bool =>
                        (if (w__145) then
                           let _stringappend_129_ :=
                             string_drop _stringappend_0_ (string_length "l") in
                           match (size_mnemonic_matches_prefix _stringappend_129_) with
                           | Some (_stringappend_130_,(existT _ _stringappend_131_ _)) =>
                              returnm ((_stringappend_130_, build_ex _stringappend_131_)
                               : (word_width * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__147 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                           let '(size, existT _ _stringappend_131_ _) :=
                             w__147
                              : (word_width * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_132_ :=
                             string_drop _stringappend_129_ (build_ex _stringappend_131_) in
                           match (maybe_u_matches_prefix _stringappend_132_) with
                           | Some (_stringappend_133_,(existT _ _stringappend_134_ _)) =>
                              returnm ((_stringappend_133_, build_ex _stringappend_134_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__149 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(is_unsigned, existT _ _stringappend_134_ _) :=
                             w__149
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_135_ :=
                             string_drop _stringappend_132_ (build_ex _stringappend_134_) in
                           match (maybe_aq_matches_prefix _stringappend_135_) with
                           | Some (_stringappend_136_,(existT _ _stringappend_137_ _)) =>
                              returnm ((_stringappend_136_, build_ex _stringappend_137_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__151 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(aq, existT _ _stringappend_137_ _) :=
                             w__151
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_138_ :=
                             string_drop _stringappend_135_ (build_ex _stringappend_137_) in
                           match (maybe_rl_matches_prefix _stringappend_138_) with
                           | Some (_stringappend_139_,(existT _ _stringappend_140_ _)) =>
                              returnm ((_stringappend_139_, build_ex _stringappend_140_)
                               : (bool * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__153 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rl, existT _ _stringappend_140_ _) :=
                             w__153
                              : (bool * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_141_ :=
                             string_drop _stringappend_138_ (build_ex _stringappend_140_) in
                           match (spc_matches_prefix _stringappend_141_) with
                           | Some (_stringappend_142_,(existT _ _stringappend_143_ _)) =>
                              returnm ((_stringappend_142_, build_ex _stringappend_143_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__155 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_143_ _) :=
                             w__155
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_144_ :=
                             string_drop _stringappend_141_ (build_ex _stringappend_143_) in
                           match (reg_name_matches_prefix _stringappend_144_) with
                           | Some (_stringappend_145_,(existT _ _stringappend_146_ _)) =>
                              returnm ((_stringappend_145_, build_ex _stringappend_146_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__157 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rd, existT _ _stringappend_146_ _) :=
                             w__157
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_147_ :=
                             string_drop _stringappend_144_ (build_ex _stringappend_146_) in
                           sep_matches_prefix _stringappend_147_ >>= fun w__158 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__158 with
                           | Some (_stringappend_148_,(existT _ _stringappend_149_ _)) =>
                              returnm ((_stringappend_148_, build_ex _stringappend_149_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__160 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_149_ _) :=
                             w__160
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_150_ :=
                             string_drop _stringappend_147_ (build_ex _stringappend_149_) in
                           match (reg_name_matches_prefix _stringappend_150_) with
                           | Some (_stringappend_151_,(existT _ _stringappend_152_ _)) =>
                              returnm ((_stringappend_151_, build_ex _stringappend_152_)
                               : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__162 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(rs1, existT _ _stringappend_152_ _) :=
                             w__162
                              : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_153_ :=
                             string_drop _stringappend_150_ (build_ex _stringappend_152_) in
                           sep_matches_prefix _stringappend_153_ >>= fun w__163 : option ((unit * {n : Z & ArithFact (n >=
                             0)})) =>
                           match w__163 with
                           | Some (_stringappend_154_,(existT _ _stringappend_155_ _)) =>
                              returnm ((_stringappend_154_, build_ex _stringappend_155_)
                               : (unit * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__165 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                           let '(tt, existT _ _stringappend_155_ _) :=
                             w__165
                              : (unit * {n : Z & ArithFact (n >= 0)}) in
                           let _stringappend_156_ :=
                             string_drop _stringappend_153_ (build_ex _stringappend_155_) in
                           match (hex_bits_12_matches_prefix _stringappend_156_) with
                           | Some (_stringappend_157_,(existT _ _stringappend_158_ _)) =>
                              returnm ((_stringappend_157_, build_ex _stringappend_158_)
                               : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                           | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                           end >>= fun w__167 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                           let '(imm, existT _ _stringappend_158_ _) :=
                             w__167
                              : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                           returnm ((match (string_drop _stringappend_156_
                                              (build_ex
                                              _stringappend_158_)) with
                                     | s_ =>
                                        Some (LOAD (imm,rs1,rd,is_unsigned,size,aq,rl),
                                              sub_nat (string_length arg_) (string_length s_))
                                     end)
                            : option ((ast * {n : Z & ArithFact (n >= 0)})))
                         else
                           and_boolM (returnm ((string_startswith _stringappend_0_ "s")  : bool))
                             (let _stringappend_160_ :=
                               string_drop _stringappend_0_ (string_length "s") in
                             match (size_mnemonic_matches_prefix _stringappend_160_) with
                             | Some (_stringappend_161_,(existT _ _stringappend_162_ _)) =>
                                let _stringappend_163_ :=
                                  string_drop _stringappend_160_ (build_ex _stringappend_162_) in
                                match (maybe_aq_matches_prefix _stringappend_163_) with
                                | Some (_stringappend_164_,(existT _ _stringappend_165_ _)) =>
                                   let _stringappend_166_ :=
                                     string_drop _stringappend_163_ (build_ex _stringappend_165_) in
                                   match (maybe_rl_matches_prefix _stringappend_166_) with
                                   | Some (_stringappend_167_,(existT _ _stringappend_168_ _)) =>
                                      let _stringappend_169_ :=
                                        string_drop _stringappend_166_ (build_ex _stringappend_168_) in
                                      match (spc_matches_prefix _stringappend_169_) with
                                      | Some (_stringappend_170_,(existT _ _stringappend_171_ _)) =>
                                         let _stringappend_172_ :=
                                           string_drop _stringappend_169_
                                             (build_ex
                                             _stringappend_171_) in
                                         match (reg_name_matches_prefix _stringappend_172_) with
                                         | Some (_stringappend_173_,(existT _ _stringappend_174_ _)) =>
                                            let _stringappend_175_ :=
                                              string_drop _stringappend_172_
                                                (build_ex
                                                _stringappend_174_) in
                                            sep_matches_prefix _stringappend_175_ >>= fun w__168 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            match w__168 with
                                            | Some
                                              (_stringappend_176_,(existT _ _stringappend_177_ _)) =>
                                               let _stringappend_178_ :=
                                                 string_drop _stringappend_175_
                                                   (build_ex
                                                   _stringappend_177_) in
                                               match (reg_name_matches_prefix _stringappend_178_) with
                                               | Some
                                                 (_stringappend_179_,(existT _ _stringappend_180_ _)) =>
                                                  let _stringappend_181_ :=
                                                    string_drop _stringappend_178_
                                                      (build_ex
                                                      _stringappend_180_) in
                                                  sep_matches_prefix _stringappend_181_ >>= fun w__169 : option ((unit * {n : Z & ArithFact (n >=
                                                    0)})) =>
                                                  returnm ((if ((match w__169 with
                                                                 | Some
                                                                   (_stringappend_182_,(existT _ _stringappend_183_ _)) =>
                                                                    let _stringappend_184_ :=
                                                                      string_drop _stringappend_181_
                                                                        (build_ex
                                                                        _stringappend_183_) in
                                                                    if ((match (hex_bits_12_matches_prefix
                                                                                  _stringappend_184_) with
                                                                         | Some
                                                                           (_stringappend_185_,(existT _ _stringappend_186_ _)) =>
                                                                            match (string_drop
                                                                                     _stringappend_184_
                                                                                     (build_ex
                                                                                     _stringappend_186_)) with
                                                                            | s_ => true
                                                                            end
                                                                         | None => false
                                                                         end)) then
                                                                      true
                                                                    else false
                                                                 | None => false
                                                                 end)) then
                                                              true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__170 : bool =>
                                               returnm ((if (w__170) then true
                                                         else false)
                                                : bool)
                                            | None => returnm (false  : bool)
                                            end >>= fun w__171 : bool =>
                                            returnm ((if (w__171) then true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__172 : bool =>
                                         returnm ((if (w__172) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__173 : bool =>
                                      returnm ((if (w__173) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__174 : bool =>
                                   returnm ((if (w__174) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__175 : bool =>
                                returnm ((if (w__175) then true
                                          else false)
                                 : bool)
                             | None => returnm (false  : bool)
                             end >>= fun w__176 : bool =>
                             returnm ((if (w__176) then true
                                       else false)
                              : bool)) >>= fun w__177 : bool =>
                           (if (w__177) then
                              let _stringappend_160_ :=
                                string_drop _stringappend_0_ (string_length "s") in
                              match (size_mnemonic_matches_prefix _stringappend_160_) with
                              | Some (_stringappend_161_,(existT _ _stringappend_162_ _)) =>
                                 returnm ((_stringappend_161_, build_ex _stringappend_162_)
                                  : (word_width * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((word_width * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__179 : (word_width * {n : Z & ArithFact (n >= 0)}) =>
                              let '(size, existT _ _stringappend_162_ _) :=
                                w__179
                                 : (word_width * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_163_ :=
                                string_drop _stringappend_160_ (build_ex _stringappend_162_) in
                              match (maybe_aq_matches_prefix _stringappend_163_) with
                              | Some (_stringappend_164_,(existT _ _stringappend_165_ _)) =>
                                 returnm ((_stringappend_164_, build_ex _stringappend_165_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__181 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(aq, existT _ _stringappend_165_ _) :=
                                w__181
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_166_ :=
                                string_drop _stringappend_163_ (build_ex _stringappend_165_) in
                              match (maybe_rl_matches_prefix _stringappend_166_) with
                              | Some (_stringappend_167_,(existT _ _stringappend_168_ _)) =>
                                 returnm ((_stringappend_167_, build_ex _stringappend_168_)
                                  : (bool * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((bool * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__183 : (bool * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rl, existT _ _stringappend_168_ _) :=
                                w__183
                                 : (bool * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_169_ :=
                                string_drop _stringappend_166_ (build_ex _stringappend_168_) in
                              match (spc_matches_prefix _stringappend_169_) with
                              | Some (_stringappend_170_,(existT _ _stringappend_171_ _)) =>
                                 returnm ((_stringappend_170_, build_ex _stringappend_171_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__185 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_171_ _) :=
                                w__185
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_172_ :=
                                string_drop _stringappend_169_ (build_ex _stringappend_171_) in
                              match (reg_name_matches_prefix _stringappend_172_) with
                              | Some (_stringappend_173_,(existT _ _stringappend_174_ _)) =>
                                 returnm ((_stringappend_173_, build_ex _stringappend_174_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__187 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rd, existT _ _stringappend_174_ _) :=
                                w__187
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_175_ :=
                                string_drop _stringappend_172_ (build_ex _stringappend_174_) in
                              sep_matches_prefix _stringappend_175_ >>= fun w__188 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__188 with
                              | Some (_stringappend_176_,(existT _ _stringappend_177_ _)) =>
                                 returnm ((_stringappend_176_, build_ex _stringappend_177_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__190 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_177_ _) :=
                                w__190
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_178_ :=
                                string_drop _stringappend_175_ (build_ex _stringappend_177_) in
                              match (reg_name_matches_prefix _stringappend_178_) with
                              | Some (_stringappend_179_,(existT _ _stringappend_180_ _)) =>
                                 returnm ((_stringappend_179_, build_ex _stringappend_180_)
                                  : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__192 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(rs1, existT _ _stringappend_180_ _) :=
                                w__192
                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_181_ :=
                                string_drop _stringappend_178_ (build_ex _stringappend_180_) in
                              sep_matches_prefix _stringappend_181_ >>= fun w__193 : option ((unit * {n : Z & ArithFact (n >=
                                0)})) =>
                              match w__193 with
                              | Some (_stringappend_182_,(existT _ _stringappend_183_ _)) =>
                                 returnm ((_stringappend_182_, build_ex _stringappend_183_)
                                  : (unit * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__195 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                              let '(tt, existT _ _stringappend_183_ _) :=
                                w__195
                                 : (unit * {n : Z & ArithFact (n >= 0)}) in
                              let _stringappend_184_ :=
                                string_drop _stringappend_181_ (build_ex _stringappend_183_) in
                              match (hex_bits_12_matches_prefix _stringappend_184_) with
                              | Some (_stringappend_185_,(existT _ _stringappend_186_ _)) =>
                                 returnm ((_stringappend_185_, build_ex _stringappend_186_)
                                  : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                              | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                              end >>= fun w__197 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                              let '(imm, existT _ _stringappend_186_ _) :=
                                w__197
                                 : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                              returnm ((match (string_drop _stringappend_184_
                                                 (build_ex
                                                 _stringappend_186_)) with
                                        | s_ =>
                                           Some (STORE (imm,rs1,rd,size,aq,rl),
                                                 sub_nat (string_length arg_) (string_length s_))
                                        end)
                               : option ((ast * {n : Z & ArithFact (n >= 0)})))
                            else
                              and_boolM
                                (returnm ((string_startswith _stringappend_0_ "addiw")
                                  : bool))
                                (let _stringappend_188_ :=
                                  string_drop _stringappend_0_ (string_length "addiw") in
                                match (spc_matches_prefix _stringappend_188_) with
                                | Some (_stringappend_189_,(existT _ _stringappend_190_ _)) =>
                                   let _stringappend_191_ :=
                                     string_drop _stringappend_188_ (build_ex _stringappend_190_) in
                                   match (reg_name_matches_prefix _stringappend_191_) with
                                   | Some (_stringappend_192_,(existT _ _stringappend_193_ _)) =>
                                      let _stringappend_194_ :=
                                        string_drop _stringappend_191_ (build_ex _stringappend_193_) in
                                      sep_matches_prefix _stringappend_194_ >>= fun w__198 : option ((unit * {n : Z & ArithFact (n >=
                                        0)})) =>
                                      match w__198 with
                                      | Some (_stringappend_195_,(existT _ _stringappend_196_ _)) =>
                                         let _stringappend_197_ :=
                                           string_drop _stringappend_194_
                                             (build_ex
                                             _stringappend_196_) in
                                         match (reg_name_matches_prefix _stringappend_197_) with
                                         | Some (_stringappend_198_,(existT _ _stringappend_199_ _)) =>
                                            let _stringappend_200_ :=
                                              string_drop _stringappend_197_
                                                (build_ex
                                                _stringappend_199_) in
                                            sep_matches_prefix _stringappend_200_ >>= fun w__199 : option ((unit * {n : Z & ArithFact (n >=
                                              0)})) =>
                                            returnm ((if ((match w__199 with
                                                           | Some
                                                             (_stringappend_201_,(existT _ _stringappend_202_ _)) =>
                                                              let _stringappend_203_ :=
                                                                string_drop _stringappend_200_
                                                                  (build_ex
                                                                  _stringappend_202_) in
                                                              if ((match (hex_bits_12_matches_prefix
                                                                            _stringappend_203_) with
                                                                   | Some
                                                                     (_stringappend_204_,(existT _ _stringappend_205_ _)) =>
                                                                      match (string_drop
                                                                               _stringappend_203_
                                                                               (build_ex
                                                                               _stringappend_205_)) with
                                                                      | s_ => true
                                                                      end
                                                                   | None => false
                                                                   end)) then
                                                                true
                                                              else false
                                                           | None => false
                                                           end)) then
                                                        true
                                                      else false)
                                             : bool)
                                         | None => returnm (false  : bool)
                                         end >>= fun w__200 : bool =>
                                         returnm ((if (w__200) then true
                                                   else false)
                                          : bool)
                                      | None => returnm (false  : bool)
                                      end >>= fun w__201 : bool =>
                                      returnm ((if (w__201) then true
                                                else false)
                                       : bool)
                                   | None => returnm (false  : bool)
                                   end >>= fun w__202 : bool =>
                                   returnm ((if (w__202) then true
                                             else false)
                                    : bool)
                                | None => returnm (false  : bool)
                                end >>= fun w__203 : bool =>
                                returnm ((if (w__203) then true
                                          else false)
                                 : bool)) >>= fun w__204 : bool =>
                              (if (w__204) then
                                 let _stringappend_188_ :=
                                   string_drop _stringappend_0_ (string_length "addiw") in
                                 match (spc_matches_prefix _stringappend_188_) with
                                 | Some (_stringappend_189_,(existT _ _stringappend_190_ _)) =>
                                    returnm ((_stringappend_189_, build_ex _stringappend_190_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__206 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_190_ _) :=
                                   w__206
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_191_ :=
                                   string_drop _stringappend_188_ (build_ex _stringappend_190_) in
                                 match (reg_name_matches_prefix _stringappend_191_) with
                                 | Some (_stringappend_192_,(existT _ _stringappend_193_ _)) =>
                                    returnm ((_stringappend_192_, build_ex _stringappend_193_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__208 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rd, existT _ _stringappend_193_ _) :=
                                   w__208
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_194_ :=
                                   string_drop _stringappend_191_ (build_ex _stringappend_193_) in
                                 sep_matches_prefix _stringappend_194_ >>= fun w__209 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__209 with
                                 | Some (_stringappend_195_,(existT _ _stringappend_196_ _)) =>
                                    returnm ((_stringappend_195_, build_ex _stringappend_196_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__211 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_196_ _) :=
                                   w__211
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_197_ :=
                                   string_drop _stringappend_194_ (build_ex _stringappend_196_) in
                                 match (reg_name_matches_prefix _stringappend_197_) with
                                 | Some (_stringappend_198_,(existT _ _stringappend_199_ _)) =>
                                    returnm ((_stringappend_198_, build_ex _stringappend_199_)
                                     : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__213 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(rs1, existT _ _stringappend_199_ _) :=
                                   w__213
                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_200_ :=
                                   string_drop _stringappend_197_ (build_ex _stringappend_199_) in
                                 sep_matches_prefix _stringappend_200_ >>= fun w__214 : option ((unit * {n : Z & ArithFact (n >=
                                   0)})) =>
                                 match w__214 with
                                 | Some (_stringappend_201_,(existT _ _stringappend_202_ _)) =>
                                    returnm ((_stringappend_201_, build_ex _stringappend_202_)
                                     : (unit * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__216 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(tt, existT _ _stringappend_202_ _) :=
                                   w__216
                                    : (unit * {n : Z & ArithFact (n >= 0)}) in
                                 let _stringappend_203_ :=
                                   string_drop _stringappend_200_ (build_ex _stringappend_202_) in
                                 match (hex_bits_12_matches_prefix _stringappend_203_) with
                                 | Some (_stringappend_204_,(existT _ _stringappend_205_ _)) =>
                                    returnm ((_stringappend_204_, build_ex _stringappend_205_)
                                     : (mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 | _ => exit tt  : M ((mword 12 * {n : Z & ArithFact (n >= 0)}))
                                 end >>= fun w__218 : (mword 12 * {n : Z & ArithFact (n >= 0)}) =>
                                 let '(imm, existT _ _stringappend_205_ _) :=
                                   w__218
                                    : (mword 12 * {n : Z & ArithFact (n >= 0)}) in
                                 returnm ((match (string_drop _stringappend_203_
                                                    (build_ex
                                                    _stringappend_205_)) with
                                           | s_ =>
                                              Some (ADDIW (imm,rs1,rd),
                                                    sub_nat (string_length arg_) (string_length s_))
                                           end)
                                  : option ((ast * {n : Z & ArithFact (n >= 0)})))
                               else
                                 match (shiftw_mnemonic_matches_prefix _stringappend_0_) with
                                 | Some (_stringappend_207_,(existT _ _stringappend_208_ _)) =>
                                    let _stringappend_209_ :=
                                      string_drop _stringappend_0_ (build_ex _stringappend_208_) in
                                    match (spc_matches_prefix _stringappend_209_) with
                                    | Some (_stringappend_210_,(existT _ _stringappend_211_ _)) =>
                                       let _stringappend_212_ :=
                                         string_drop _stringappend_209_
                                           (build_ex
                                           _stringappend_211_) in
                                       match (reg_name_matches_prefix _stringappend_212_) with
                                       | Some (_stringappend_213_,(existT _ _stringappend_214_ _)) =>
                                          let _stringappend_215_ :=
                                            string_drop _stringappend_212_
                                              (build_ex
                                              _stringappend_214_) in
                                          sep_matches_prefix _stringappend_215_ >>= fun w__219 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__219 with
                                          | Some
                                            (_stringappend_216_,(existT _ _stringappend_217_ _)) =>
                                             let _stringappend_218_ :=
                                               string_drop _stringappend_215_
                                                 (build_ex
                                                 _stringappend_217_) in
                                             match (reg_name_matches_prefix _stringappend_218_) with
                                             | Some
                                               (_stringappend_219_,(existT _ _stringappend_220_ _)) =>
                                                let _stringappend_221_ :=
                                                  string_drop _stringappend_218_
                                                    (build_ex
                                                    _stringappend_220_) in
                                                sep_matches_prefix _stringappend_221_ >>= fun w__220 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__220 with
                                                               | Some
                                                                 (_stringappend_222_,(existT _ _stringappend_223_ _)) =>
                                                                  let _stringappend_224_ :=
                                                                    string_drop _stringappend_221_
                                                                      (build_ex
                                                                      _stringappend_223_) in
                                                                  if ((match (hex_bits_5_matches_prefix
                                                                                _stringappend_224_) with
                                                                       | Some
                                                                         (_stringappend_225_,(existT _ _stringappend_226_ _)) =>
                                                                          match (string_drop
                                                                                   _stringappend_224_
                                                                                   (build_ex
                                                                                   _stringappend_226_)) with
                                                                          | s_ => true
                                                                          end
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__221 : bool =>
                                             returnm ((if (w__221) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__222 : bool =>
                                          returnm ((if (w__222) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__223 : bool =>
                                       returnm ((if (w__223) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__224 : bool =>
                                    returnm ((if (w__224) then true
                                              else false)
                                     : bool)
                                 | None => returnm (false  : bool)
                                 end >>= fun w__225 : bool =>
                                 (if (w__225) then
                                    match (shiftw_mnemonic_matches_prefix _stringappend_0_) with
                                    | Some (_stringappend_207_,(existT _ _stringappend_208_ _)) =>
                                       returnm ((_stringappend_207_, build_ex _stringappend_208_)
                                        : (sop * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((sop * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__227 : (sop * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(op, existT _ _stringappend_208_ _) :=
                                      w__227
                                       : (sop * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_209_ :=
                                      string_drop _stringappend_0_ (build_ex _stringappend_208_) in
                                    match (spc_matches_prefix _stringappend_209_) with
                                    | Some (_stringappend_210_,(existT _ _stringappend_211_ _)) =>
                                       returnm ((_stringappend_210_, build_ex _stringappend_211_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__229 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_211_ _) :=
                                      w__229
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_212_ :=
                                      string_drop _stringappend_209_ (build_ex _stringappend_211_) in
                                    match (reg_name_matches_prefix _stringappend_212_) with
                                    | Some (_stringappend_213_,(existT _ _stringappend_214_ _)) =>
                                       returnm ((_stringappend_213_, build_ex _stringappend_214_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__231 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rd, existT _ _stringappend_214_ _) :=
                                      w__231
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_215_ :=
                                      string_drop _stringappend_212_ (build_ex _stringappend_214_) in
                                    sep_matches_prefix _stringappend_215_ >>= fun w__232 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__232 with
                                    | Some (_stringappend_216_,(existT _ _stringappend_217_ _)) =>
                                       returnm ((_stringappend_216_, build_ex _stringappend_217_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__234 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_217_ _) :=
                                      w__234
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_218_ :=
                                      string_drop _stringappend_215_ (build_ex _stringappend_217_) in
                                    match (reg_name_matches_prefix _stringappend_218_) with
                                    | Some (_stringappend_219_,(existT _ _stringappend_220_ _)) =>
                                       returnm ((_stringappend_219_, build_ex _stringappend_220_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__236 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(rs1, existT _ _stringappend_220_ _) :=
                                      w__236
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_221_ :=
                                      string_drop _stringappend_218_ (build_ex _stringappend_220_) in
                                    sep_matches_prefix _stringappend_221_ >>= fun w__237 : option ((unit * {n : Z & ArithFact (n >=
                                      0)})) =>
                                    match w__237 with
                                    | Some (_stringappend_222_,(existT _ _stringappend_223_ _)) =>
                                       returnm ((_stringappend_222_, build_ex _stringappend_223_)
                                        : (unit * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__239 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(tt, existT _ _stringappend_223_ _) :=
                                      w__239
                                       : (unit * {n : Z & ArithFact (n >= 0)}) in
                                    let _stringappend_224_ :=
                                      string_drop _stringappend_221_ (build_ex _stringappend_223_) in
                                    match (hex_bits_5_matches_prefix _stringappend_224_) with
                                    | Some (_stringappend_225_,(existT _ _stringappend_226_ _)) =>
                                       returnm ((_stringappend_225_, build_ex _stringappend_226_)
                                        : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    | _ => exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                    end >>= fun w__241 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                    let '(shamt, existT _ _stringappend_226_ _) :=
                                      w__241
                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                    returnm ((match (string_drop _stringappend_224_
                                                       (build_ex
                                                       _stringappend_226_)) with
                                              | s_ =>
                                                 Some (SHIFTW (shamt,rs1,rd,op),
                                                       sub_nat (string_length arg_)
                                                         (string_length s_))
                                              end)
                                     : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                  else
                                    match (rtypew_mnemonic_matches_prefix _stringappend_0_) with
                                    | Some (_stringappend_228_,(existT _ _stringappend_229_ _)) =>
                                       let _stringappend_230_ :=
                                         string_drop _stringappend_0_ (build_ex _stringappend_229_) in
                                       match (spc_matches_prefix _stringappend_230_) with
                                       | Some (_stringappend_231_,(existT _ _stringappend_232_ _)) =>
                                          let _stringappend_233_ :=
                                            string_drop _stringappend_230_
                                              (build_ex
                                              _stringappend_232_) in
                                          match (reg_name_matches_prefix _stringappend_233_) with
                                          | Some
                                            (_stringappend_234_,(existT _ _stringappend_235_ _)) =>
                                             let _stringappend_236_ :=
                                               string_drop _stringappend_233_
                                                 (build_ex
                                                 _stringappend_235_) in
                                             sep_matches_prefix _stringappend_236_ >>= fun w__242 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__242 with
                                             | Some
                                               (_stringappend_237_,(existT _ _stringappend_238_ _)) =>
                                                let _stringappend_239_ :=
                                                  string_drop _stringappend_236_
                                                    (build_ex
                                                    _stringappend_238_) in
                                                match (reg_name_matches_prefix _stringappend_239_) with
                                                | Some
                                                  (_stringappend_240_,(existT _ _stringappend_241_ _)) =>
                                                   let _stringappend_242_ :=
                                                     string_drop _stringappend_239_
                                                       (build_ex
                                                       _stringappend_241_) in
                                                   sep_matches_prefix _stringappend_242_ >>= fun w__243 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   returnm ((if ((match w__243 with
                                                                  | Some
                                                                    (_stringappend_243_,(existT _ _stringappend_244_ _)) =>
                                                                     let _stringappend_245_ :=
                                                                       string_drop
                                                                         _stringappend_242_
                                                                         (build_ex
                                                                         _stringappend_244_) in
                                                                     if ((match (reg_name_matches_prefix
                                                                                   _stringappend_245_) with
                                                                          | Some
                                                                            (_stringappend_246_,(existT _ _stringappend_247_ _)) =>
                                                                             match (string_drop
                                                                                      _stringappend_245_
                                                                                      (build_ex
                                                                                      _stringappend_247_)) with
                                                                             | s_ => true
                                                                             end
                                                                          | None => false
                                                                          end)) then
                                                                       true
                                                                     else false
                                                                  | None => false
                                                                  end)) then
                                                               true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__244 : bool =>
                                                returnm ((if (w__244) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__245 : bool =>
                                             returnm ((if (w__245) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__246 : bool =>
                                          returnm ((if (w__246) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__247 : bool =>
                                       returnm ((if (w__247) then true
                                                 else false)
                                        : bool)
                                    | None => returnm (false  : bool)
                                    end >>= fun w__248 : bool =>
                                    (if (w__248) then
                                       match (rtypew_mnemonic_matches_prefix _stringappend_0_) with
                                       | Some (_stringappend_228_,(existT _ _stringappend_229_ _)) =>
                                          returnm ((_stringappend_228_, build_ex _stringappend_229_)
                                           : (ropw * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((ropw * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__250 : (ropw * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(op, existT _ _stringappend_229_ _) :=
                                         w__250
                                          : (ropw * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_230_ :=
                                         string_drop _stringappend_0_ (build_ex _stringappend_229_) in
                                       match (spc_matches_prefix _stringappend_230_) with
                                       | Some (_stringappend_231_,(existT _ _stringappend_232_ _)) =>
                                          returnm ((_stringappend_231_, build_ex _stringappend_232_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__252 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_232_ _) :=
                                         w__252
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_233_ :=
                                         string_drop _stringappend_230_
                                           (build_ex
                                           _stringappend_232_) in
                                       match (reg_name_matches_prefix _stringappend_233_) with
                                       | Some (_stringappend_234_,(existT _ _stringappend_235_ _)) =>
                                          returnm ((_stringappend_234_, build_ex _stringappend_235_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__254 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rd, existT _ _stringappend_235_ _) :=
                                         w__254
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_236_ :=
                                         string_drop _stringappend_233_
                                           (build_ex
                                           _stringappend_235_) in
                                       sep_matches_prefix _stringappend_236_ >>= fun w__255 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__255 with
                                       | Some (_stringappend_237_,(existT _ _stringappend_238_ _)) =>
                                          returnm ((_stringappend_237_, build_ex _stringappend_238_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__257 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_238_ _) :=
                                         w__257
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_239_ :=
                                         string_drop _stringappend_236_
                                           (build_ex
                                           _stringappend_238_) in
                                       match (reg_name_matches_prefix _stringappend_239_) with
                                       | Some (_stringappend_240_,(existT _ _stringappend_241_ _)) =>
                                          returnm ((_stringappend_240_, build_ex _stringappend_241_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__259 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs1, existT _ _stringappend_241_ _) :=
                                         w__259
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_242_ :=
                                         string_drop _stringappend_239_
                                           (build_ex
                                           _stringappend_241_) in
                                       sep_matches_prefix _stringappend_242_ >>= fun w__260 : option ((unit * {n : Z & ArithFact (n >=
                                         0)})) =>
                                       match w__260 with
                                       | Some (_stringappend_243_,(existT _ _stringappend_244_ _)) =>
                                          returnm ((_stringappend_243_, build_ex _stringappend_244_)
                                           : (unit * {n : Z & ArithFact (n >= 0)}))
                                       | _ => exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__262 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(tt, existT _ _stringappend_244_ _) :=
                                         w__262
                                          : (unit * {n : Z & ArithFact (n >= 0)}) in
                                       let _stringappend_245_ :=
                                         string_drop _stringappend_242_
                                           (build_ex
                                           _stringappend_244_) in
                                       match (reg_name_matches_prefix _stringappend_245_) with
                                       | Some (_stringappend_246_,(existT _ _stringappend_247_ _)) =>
                                          returnm ((_stringappend_246_, build_ex _stringappend_247_)
                                           : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       | _ =>
                                          exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                       end >>= fun w__264 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                       let '(rs2, existT _ _stringappend_247_ _) :=
                                         w__264
                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                       returnm ((match (string_drop _stringappend_245_
                                                          (build_ex
                                                          _stringappend_247_)) with
                                                 | s_ =>
                                                    Some (RTYPEW (rs2,rs1,rd,op),
                                                          sub_nat (string_length arg_)
                                                            (string_length s_))
                                                 end)
                                        : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                     else
                                       match (shiftiwop_mnemonic_matches_prefix _stringappend_0_) with
                                       | Some (_stringappend_249_,(existT _ _stringappend_250_ _)) =>
                                          let _stringappend_251_ :=
                                            string_drop _stringappend_0_
                                              (build_ex
                                              _stringappend_250_) in
                                          match (spc_matches_prefix _stringappend_251_) with
                                          | Some
                                            (_stringappend_252_,(existT _ _stringappend_253_ _)) =>
                                             let _stringappend_254_ :=
                                               string_drop _stringappend_251_
                                                 (build_ex
                                                 _stringappend_253_) in
                                             match (reg_name_matches_prefix _stringappend_254_) with
                                             | Some
                                               (_stringappend_255_,(existT _ _stringappend_256_ _)) =>
                                                let _stringappend_257_ :=
                                                  string_drop _stringappend_254_
                                                    (build_ex
                                                    _stringappend_256_) in
                                                sep_matches_prefix _stringappend_257_ >>= fun w__265 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                returnm ((if ((match w__265 with
                                                               | Some
                                                                 (_stringappend_258_,(existT _ _stringappend_259_ _)) =>
                                                                  let _stringappend_260_ :=
                                                                    string_drop _stringappend_257_
                                                                      (build_ex
                                                                      _stringappend_259_) in
                                                                  if ((match (reg_name_matches_prefix
                                                                                _stringappend_260_) with
                                                                       | Some
                                                                         (_stringappend_261_,(existT _ _stringappend_262_ _)) =>
                                                                          let _stringappend_263_ :=
                                                                            string_drop
                                                                              _stringappend_260_
                                                                              (build_ex
                                                                              _stringappend_262_) in
                                                                          if ((match (hex_bits_5_matches_prefix
                                                                                        _stringappend_263_) with
                                                                               | Some
                                                                                 (_stringappend_264_,(existT _ _stringappend_265_ _)) =>
                                                                                  match (string_drop
                                                                                           _stringappend_263_
                                                                                           (build_ex
                                                                                           _stringappend_265_)) with
                                                                                  | s_ => true
                                                                                  end
                                                                               | None => false
                                                                               end)) then
                                                                            true
                                                                          else false
                                                                       | None => false
                                                                       end)) then
                                                                    true
                                                                  else false
                                                               | None => false
                                                               end)) then
                                                            true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__266 : bool =>
                                             returnm ((if (w__266) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__267 : bool =>
                                          returnm ((if (w__267) then true
                                                    else false)
                                           : bool)
                                       | None => returnm (false  : bool)
                                       end >>= fun w__268 : bool =>
                                       (if (w__268) then
                                          match (shiftiwop_mnemonic_matches_prefix _stringappend_0_) with
                                          | Some
                                            (_stringappend_249_,(existT _ _stringappend_250_ _)) =>
                                             returnm ((_stringappend_249_,
                                                       build_ex
                                                       _stringappend_250_)
                                              : (sopw * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((sopw * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__270 : (sopw * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(op, existT _ _stringappend_250_ _) :=
                                            w__270
                                             : (sopw * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_251_ :=
                                            string_drop _stringappend_0_
                                              (build_ex
                                              _stringappend_250_) in
                                          match (spc_matches_prefix _stringappend_251_) with
                                          | Some
                                            (_stringappend_252_,(existT _ _stringappend_253_ _)) =>
                                             returnm ((_stringappend_252_,
                                                       build_ex
                                                       _stringappend_253_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__272 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_253_ _) :=
                                            w__272
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_254_ :=
                                            string_drop _stringappend_251_
                                              (build_ex
                                              _stringappend_253_) in
                                          match (reg_name_matches_prefix _stringappend_254_) with
                                          | Some
                                            (_stringappend_255_,(existT _ _stringappend_256_ _)) =>
                                             returnm ((_stringappend_255_,
                                                       build_ex
                                                       _stringappend_256_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__274 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rd, existT _ _stringappend_256_ _) :=
                                            w__274
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_257_ :=
                                            string_drop _stringappend_254_
                                              (build_ex
                                              _stringappend_256_) in
                                          sep_matches_prefix _stringappend_257_ >>= fun w__275 : option ((unit * {n : Z & ArithFact (n >=
                                            0)})) =>
                                          match w__275 with
                                          | Some
                                            (_stringappend_258_,(existT _ _stringappend_259_ _)) =>
                                             returnm ((_stringappend_258_,
                                                       build_ex
                                                       _stringappend_259_)
                                              : (unit * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__277 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(tt, existT _ _stringappend_259_ _) :=
                                            w__277
                                             : (unit * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_260_ :=
                                            string_drop _stringappend_257_
                                              (build_ex
                                              _stringappend_259_) in
                                          match (reg_name_matches_prefix _stringappend_260_) with
                                          | Some
                                            (_stringappend_261_,(existT _ _stringappend_262_ _)) =>
                                             returnm ((_stringappend_261_,
                                                       build_ex
                                                       _stringappend_262_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__279 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(rs1, existT _ _stringappend_262_ _) :=
                                            w__279
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          let _stringappend_263_ :=
                                            string_drop _stringappend_260_
                                              (build_ex
                                              _stringappend_262_) in
                                          match (hex_bits_5_matches_prefix _stringappend_263_) with
                                          | Some
                                            (_stringappend_264_,(existT _ _stringappend_265_ _)) =>
                                             returnm ((_stringappend_264_,
                                                       build_ex
                                                       _stringappend_265_)
                                              : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          | _ =>
                                             exit tt  : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                          end >>= fun w__281 : (mword 5 * {n : Z & ArithFact (n >= 0)}) =>
                                          let '(shamt, existT _ _stringappend_265_ _) :=
                                            w__281
                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                          returnm ((match (string_drop _stringappend_263_
                                                             (build_ex
                                                             _stringappend_265_)) with
                                                    | s_ =>
                                                       Some (SHIFTIWOP (shamt,rs1,rd,op),
                                                             sub_nat (string_length arg_)
                                                               (string_length s_))
                                                    end)
                                           : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                        else
                                          match (mul_mnemonic_matches_prefix _stringappend_0_) with
                                          | Some
                                            (_stringappend_267_,(existT _ _stringappend_268_ _)) =>
                                             let _stringappend_269_ :=
                                               string_drop _stringappend_0_
                                                 (build_ex
                                                 _stringappend_268_) in
                                             match (spc_matches_prefix _stringappend_269_) with
                                             | Some
                                               (_stringappend_270_,(existT _ _stringappend_271_ _)) =>
                                                let _stringappend_272_ :=
                                                  string_drop _stringappend_269_
                                                    (build_ex
                                                    _stringappend_271_) in
                                                match (reg_name_matches_prefix _stringappend_272_) with
                                                | Some
                                                  (_stringappend_273_,(existT _ _stringappend_274_ _)) =>
                                                   let _stringappend_275_ :=
                                                     string_drop _stringappend_272_
                                                       (build_ex
                                                       _stringappend_274_) in
                                                   sep_matches_prefix _stringappend_275_ >>= fun w__282 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__282 with
                                                   | Some
                                                     (_stringappend_276_,(existT _ _stringappend_277_ _)) =>
                                                      let _stringappend_278_ :=
                                                        string_drop _stringappend_275_
                                                          (build_ex
                                                          _stringappend_277_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_278_) with
                                                      | Some
                                                        (_stringappend_279_,(existT _ _stringappend_280_ _)) =>
                                                         let _stringappend_281_ :=
                                                           string_drop _stringappend_278_
                                                             (build_ex
                                                             _stringappend_280_) in
                                                         sep_matches_prefix _stringappend_281_ >>= fun w__283 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         returnm ((if ((match w__283 with
                                                                        | Some
                                                                          (_stringappend_282_,(existT _ _stringappend_283_ _)) =>
                                                                           let _stringappend_284_ :=
                                                                             string_drop
                                                                               _stringappend_281_
                                                                               (build_ex
                                                                               _stringappend_283_) in
                                                                           if ((match (reg_name_matches_prefix
                                                                                         _stringappend_284_) with
                                                                                | Some
                                                                                  (_stringappend_285_,(existT _ _stringappend_286_ _)) =>
                                                                                   match (string_drop
                                                                                            _stringappend_284_
                                                                                            (build_ex
                                                                                            _stringappend_286_)) with
                                                                                   | s_ => true
                                                                                   end
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false
                                                                        | None => false
                                                                        end)) then
                                                                     true
                                                                   else false)
                                                          : bool)
                                                      | None => returnm (false  : bool)
                                                      end >>= fun w__284 : bool =>
                                                      returnm ((if (w__284) then true
                                                                else false)
                                                       : bool)
                                                   | None => returnm (false  : bool)
                                                   end >>= fun w__285 : bool =>
                                                   returnm ((if (w__285) then true
                                                             else false)
                                                    : bool)
                                                | None => returnm (false  : bool)
                                                end >>= fun w__286 : bool =>
                                                returnm ((if (w__286) then true
                                                          else false)
                                                 : bool)
                                             | None => returnm (false  : bool)
                                             end >>= fun w__287 : bool =>
                                             returnm ((if (w__287) then true
                                                       else false)
                                              : bool)
                                          | None => returnm (false  : bool)
                                          end >>= fun w__288 : bool =>
                                          (if (w__288) then
                                             match (mul_mnemonic_matches_prefix _stringappend_0_) with
                                             | Some
                                               (_stringappend_267_,(existT _ _stringappend_268_ _)) =>
                                                returnm ((_stringappend_267_,
                                                          build_ex
                                                          _stringappend_268_)
                                                 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             | _ =>
                                                exit tt
                                                 : M (((bool * bool * bool) * {n : Z & ArithFact (n >=
                                                  0)}))
                                             end >>= fun w__290 : ((bool * bool * bool) * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '((high, signed1, signed2), existT _ _stringappend_268_ _) :=
                                               w__290
                                                : ((bool * bool * bool) * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_269_ :=
                                               string_drop _stringappend_0_
                                                 (build_ex
                                                 _stringappend_268_) in
                                             match (spc_matches_prefix _stringappend_269_) with
                                             | Some
                                               (_stringappend_270_,(existT _ _stringappend_271_ _)) =>
                                                returnm ((_stringappend_270_,
                                                          build_ex
                                                          _stringappend_271_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__292 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_271_ _) :=
                                               w__292
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_272_ :=
                                               string_drop _stringappend_269_
                                                 (build_ex
                                                 _stringappend_271_) in
                                             match (reg_name_matches_prefix _stringappend_272_) with
                                             | Some
                                               (_stringappend_273_,(existT _ _stringappend_274_ _)) =>
                                                returnm ((_stringappend_273_,
                                                          build_ex
                                                          _stringappend_274_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__294 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rd, existT _ _stringappend_274_ _) :=
                                               w__294
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_275_ :=
                                               string_drop _stringappend_272_
                                                 (build_ex
                                                 _stringappend_274_) in
                                             sep_matches_prefix _stringappend_275_ >>= fun w__295 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__295 with
                                             | Some
                                               (_stringappend_276_,(existT _ _stringappend_277_ _)) =>
                                                returnm ((_stringappend_276_,
                                                          build_ex
                                                          _stringappend_277_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__297 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_277_ _) :=
                                               w__297
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_278_ :=
                                               string_drop _stringappend_275_
                                                 (build_ex
                                                 _stringappend_277_) in
                                             match (reg_name_matches_prefix _stringappend_278_) with
                                             | Some
                                               (_stringappend_279_,(existT _ _stringappend_280_ _)) =>
                                                returnm ((_stringappend_279_,
                                                          build_ex
                                                          _stringappend_280_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__299 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs1, existT _ _stringappend_280_ _) :=
                                               w__299
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_281_ :=
                                               string_drop _stringappend_278_
                                                 (build_ex
                                                 _stringappend_280_) in
                                             sep_matches_prefix _stringappend_281_ >>= fun w__300 : option ((unit * {n : Z & ArithFact (n >=
                                               0)})) =>
                                             match w__300 with
                                             | Some
                                               (_stringappend_282_,(existT _ _stringappend_283_ _)) =>
                                                returnm ((_stringappend_282_,
                                                          build_ex
                                                          _stringappend_283_)
                                                 : (unit * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt  : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__302 : (unit * {n : Z & ArithFact (n >= 0)}) =>
                                             let '(tt, existT _ _stringappend_283_ _) :=
                                               w__302
                                                : (unit * {n : Z & ArithFact (n >= 0)}) in
                                             let _stringappend_284_ :=
                                               string_drop _stringappend_281_
                                                 (build_ex
                                                 _stringappend_283_) in
                                             match (reg_name_matches_prefix _stringappend_284_) with
                                             | Some
                                               (_stringappend_285_,(existT _ _stringappend_286_ _)) =>
                                                returnm ((_stringappend_285_,
                                                          build_ex
                                                          _stringappend_286_)
                                                 : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             | _ =>
                                                exit tt
                                                 : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                             end >>= fun w__304 : (mword 5 * {n : Z & ArithFact (n >=
                                               0)}) =>
                                             let '(rs2, existT _ _stringappend_286_ _) :=
                                               w__304
                                                : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                             returnm ((match (string_drop _stringappend_284_
                                                                (build_ex
                                                                _stringappend_286_)) with
                                                       | s_ =>
                                                          Some (MUL (rs2,rs1,rd,high,signed1,signed2),
                                                                sub_nat (string_length arg_)
                                                                  (string_length s_))
                                                       end)
                                              : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                           else
                                             and_boolM
                                               (returnm ((string_startswith _stringappend_0_ "div")
                                                 : bool))
                                               (let _stringappend_288_ :=
                                                 string_drop _stringappend_0_ (string_length "div") in
                                               match (maybe_not_u_matches_prefix _stringappend_288_) with
                                               | Some
                                                 (_stringappend_289_,(existT _ _stringappend_290_ _)) =>
                                                  let _stringappend_291_ :=
                                                    string_drop _stringappend_288_
                                                      (build_ex
                                                      _stringappend_290_) in
                                                  match (spc_matches_prefix _stringappend_291_) with
                                                  | Some
                                                    (_stringappend_292_,(existT _ _stringappend_293_ _)) =>
                                                     let _stringappend_294_ :=
                                                       string_drop _stringappend_291_
                                                         (build_ex
                                                         _stringappend_293_) in
                                                     match (reg_name_matches_prefix
                                                              _stringappend_294_) with
                                                     | Some
                                                       (_stringappend_295_,(existT _ _stringappend_296_ _)) =>
                                                        let _stringappend_297_ :=
                                                          string_drop _stringappend_294_
                                                            (build_ex
                                                            _stringappend_296_) in
                                                        sep_matches_prefix _stringappend_297_ >>= fun w__305 : option ((unit * {n : Z & ArithFact (n >=
                                                          0)})) =>
                                                        match w__305 with
                                                        | Some
                                                          (_stringappend_298_,(existT _ _stringappend_299_ _)) =>
                                                           let _stringappend_300_ :=
                                                             string_drop _stringappend_297_
                                                               (build_ex
                                                               _stringappend_299_) in
                                                           match (reg_name_matches_prefix
                                                                    _stringappend_300_) with
                                                           | Some
                                                             (_stringappend_301_,(existT _ _stringappend_302_ _)) =>
                                                              let _stringappend_303_ :=
                                                                string_drop _stringappend_300_
                                                                  (build_ex
                                                                  _stringappend_302_) in
                                                              sep_matches_prefix _stringappend_303_ >>= fun w__306 : option ((unit * {n : Z & ArithFact (n >=
                                                                0)})) =>
                                                              returnm ((if ((match w__306 with
                                                                             | Some
                                                                               (_stringappend_304_,(existT _ _stringappend_305_ _)) =>
                                                                                let _stringappend_306_ :=
                                                                                  string_drop
                                                                                    _stringappend_303_
                                                                                    (build_ex
                                                                                    _stringappend_305_) in
                                                                                if ((match (reg_name_matches_prefix
                                                                                              _stringappend_306_) with
                                                                                     | Some
                                                                                       (_stringappend_307_,(existT _ _stringappend_308_ _)) =>
                                                                                        match (string_drop
                                                                                                 _stringappend_306_
                                                                                                 (build_ex
                                                                                                 _stringappend_308_)) with
                                                                                        | s_ => true
                                                                                        end
                                                                                     | None => false
                                                                                     end)) then
                                                                                  true
                                                                                else false
                                                                             | None => false
                                                                             end)) then
                                                                          true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__307 : bool =>
                                                           returnm ((if (w__307) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__308 : bool =>
                                                        returnm ((if (w__308) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__309 : bool =>
                                                     returnm ((if (w__309) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__310 : bool =>
                                                  returnm ((if (w__310) then true
                                                            else false)
                                                   : bool)
                                               | None => returnm (false  : bool)
                                               end >>= fun w__311 : bool =>
                                               returnm ((if (w__311) then true
                                                         else false)
                                                : bool)) >>= fun w__312 : bool =>
                                             (if (w__312) then
                                                let _stringappend_288_ :=
                                                  string_drop _stringappend_0_ (string_length "div") in
                                                match (maybe_not_u_matches_prefix _stringappend_288_) with
                                                | Some
                                                  (_stringappend_289_,(existT _ _stringappend_290_ _)) =>
                                                   returnm ((_stringappend_289_,
                                                             build_ex
                                                             _stringappend_290_)
                                                    : (bool * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__314 : (bool * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(s, existT _ _stringappend_290_ _) :=
                                                  w__314
                                                   : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_291_ :=
                                                  string_drop _stringappend_288_
                                                    (build_ex
                                                    _stringappend_290_) in
                                                match (spc_matches_prefix _stringappend_291_) with
                                                | Some
                                                  (_stringappend_292_,(existT _ _stringappend_293_ _)) =>
                                                   returnm ((_stringappend_292_,
                                                             build_ex
                                                             _stringappend_293_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__316 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_293_ _) :=
                                                  w__316
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_294_ :=
                                                  string_drop _stringappend_291_
                                                    (build_ex
                                                    _stringappend_293_) in
                                                match (reg_name_matches_prefix _stringappend_294_) with
                                                | Some
                                                  (_stringappend_295_,(existT _ _stringappend_296_ _)) =>
                                                   returnm ((_stringappend_295_,
                                                             build_ex
                                                             _stringappend_296_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__318 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rd, existT _ _stringappend_296_ _) :=
                                                  w__318
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_297_ :=
                                                  string_drop _stringappend_294_
                                                    (build_ex
                                                    _stringappend_296_) in
                                                sep_matches_prefix _stringappend_297_ >>= fun w__319 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__319 with
                                                | Some
                                                  (_stringappend_298_,(existT _ _stringappend_299_ _)) =>
                                                   returnm ((_stringappend_298_,
                                                             build_ex
                                                             _stringappend_299_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__321 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_299_ _) :=
                                                  w__321
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_300_ :=
                                                  string_drop _stringappend_297_
                                                    (build_ex
                                                    _stringappend_299_) in
                                                match (reg_name_matches_prefix _stringappend_300_) with
                                                | Some
                                                  (_stringappend_301_,(existT _ _stringappend_302_ _)) =>
                                                   returnm ((_stringappend_301_,
                                                             build_ex
                                                             _stringappend_302_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__323 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs1, existT _ _stringappend_302_ _) :=
                                                  w__323
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_303_ :=
                                                  string_drop _stringappend_300_
                                                    (build_ex
                                                    _stringappend_302_) in
                                                sep_matches_prefix _stringappend_303_ >>= fun w__324 : option ((unit * {n : Z & ArithFact (n >=
                                                  0)})) =>
                                                match w__324 with
                                                | Some
                                                  (_stringappend_304_,(existT _ _stringappend_305_ _)) =>
                                                   returnm ((_stringappend_304_,
                                                             build_ex
                                                             _stringappend_305_)
                                                    : (unit * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__326 : (unit * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(tt, existT _ _stringappend_305_ _) :=
                                                  w__326
                                                   : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                let _stringappend_306_ :=
                                                  string_drop _stringappend_303_
                                                    (build_ex
                                                    _stringappend_305_) in
                                                match (reg_name_matches_prefix _stringappend_306_) with
                                                | Some
                                                  (_stringappend_307_,(existT _ _stringappend_308_ _)) =>
                                                   returnm ((_stringappend_307_,
                                                             build_ex
                                                             _stringappend_308_)
                                                    : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                | _ =>
                                                   exit tt
                                                    : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                end >>= fun w__328 : (mword 5 * {n : Z & ArithFact (n >=
                                                  0)}) =>
                                                let '(rs2, existT _ _stringappend_308_ _) :=
                                                  w__328
                                                   : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                returnm ((match (string_drop _stringappend_306_
                                                                   (build_ex
                                                                   _stringappend_308_)) with
                                                          | s_ =>
                                                             Some (DIV (rs2,rs1,rd,s),
                                                                   sub_nat (string_length arg_)
                                                                     (string_length s_))
                                                          end)
                                                 : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                              else
                                                and_boolM
                                                  (returnm ((string_startswith _stringappend_0_
                                                               "rem")
                                                    : bool))
                                                  (let _stringappend_310_ :=
                                                    string_drop _stringappend_0_
                                                      (string_length "rem") in
                                                  match (maybe_not_u_matches_prefix
                                                           _stringappend_310_) with
                                                  | Some
                                                    (_stringappend_311_,(existT _ _stringappend_312_ _)) =>
                                                     let _stringappend_313_ :=
                                                       string_drop _stringappend_310_
                                                         (build_ex
                                                         _stringappend_312_) in
                                                     match (spc_matches_prefix _stringappend_313_) with
                                                     | Some
                                                       (_stringappend_314_,(existT _ _stringappend_315_ _)) =>
                                                        let _stringappend_316_ :=
                                                          string_drop _stringappend_313_
                                                            (build_ex
                                                            _stringappend_315_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_316_) with
                                                        | Some
                                                          (_stringappend_317_,(existT _ _stringappend_318_ _)) =>
                                                           let _stringappend_319_ :=
                                                             string_drop _stringappend_316_
                                                               (build_ex
                                                               _stringappend_318_) in
                                                           sep_matches_prefix _stringappend_319_ >>= fun w__329 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__329 with
                                                           | Some
                                                             (_stringappend_320_,(existT _ _stringappend_321_ _)) =>
                                                              let _stringappend_322_ :=
                                                                string_drop _stringappend_319_
                                                                  (build_ex
                                                                  _stringappend_321_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_322_) with
                                                              | Some
                                                                (_stringappend_323_,(existT _ _stringappend_324_ _)) =>
                                                                 let _stringappend_325_ :=
                                                                   string_drop _stringappend_322_
                                                                     (build_ex
                                                                     _stringappend_324_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_325_ >>= fun w__330 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__330 with
                                                                                | Some
                                                                                  (_stringappend_326_,(existT _ _stringappend_327_ _)) =>
                                                                                   let _stringappend_328_ :=
                                                                                     string_drop
                                                                                       _stringappend_325_
                                                                                       (build_ex
                                                                                       _stringappend_327_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_328_) with
                                                                                        | Some
                                                                                          (_stringappend_329_,(existT _ _stringappend_330_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_328_
                                                                                                    (build_ex
                                                                                                    _stringappend_330_)) with
                                                                                           | s_ =>
                                                                                              true
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__331 : bool =>
                                                              returnm ((if (w__331) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__332 : bool =>
                                                           returnm ((if (w__332) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__333 : bool =>
                                                        returnm ((if (w__333) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__334 : bool =>
                                                     returnm ((if (w__334) then true
                                                               else false)
                                                      : bool)
                                                  | None => returnm (false  : bool)
                                                  end >>= fun w__335 : bool =>
                                                  returnm ((if (w__335) then true
                                                            else false)
                                                   : bool)) >>= fun w__336 : bool =>
                                                (if (w__336) then
                                                   let _stringappend_310_ :=
                                                     string_drop _stringappend_0_
                                                       (string_length "rem") in
                                                   match (maybe_not_u_matches_prefix
                                                            _stringappend_310_) with
                                                   | Some
                                                     (_stringappend_311_,(existT _ _stringappend_312_ _)) =>
                                                      returnm ((_stringappend_311_,
                                                                build_ex
                                                                _stringappend_312_)
                                                       : (bool * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__338 : (bool * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(s, existT _ _stringappend_312_ _) :=
                                                     w__338
                                                      : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_313_ :=
                                                     string_drop _stringappend_310_
                                                       (build_ex
                                                       _stringappend_312_) in
                                                   match (spc_matches_prefix _stringappend_313_) with
                                                   | Some
                                                     (_stringappend_314_,(existT _ _stringappend_315_ _)) =>
                                                      returnm ((_stringappend_314_,
                                                                build_ex
                                                                _stringappend_315_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__340 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_315_ _) :=
                                                     w__340
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_316_ :=
                                                     string_drop _stringappend_313_
                                                       (build_ex
                                                       _stringappend_315_) in
                                                   match (reg_name_matches_prefix _stringappend_316_) with
                                                   | Some
                                                     (_stringappend_317_,(existT _ _stringappend_318_ _)) =>
                                                      returnm ((_stringappend_317_,
                                                                build_ex
                                                                _stringappend_318_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__342 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rd, existT _ _stringappend_318_ _) :=
                                                     w__342
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_319_ :=
                                                     string_drop _stringappend_316_
                                                       (build_ex
                                                       _stringappend_318_) in
                                                   sep_matches_prefix _stringappend_319_ >>= fun w__343 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__343 with
                                                   | Some
                                                     (_stringappend_320_,(existT _ _stringappend_321_ _)) =>
                                                      returnm ((_stringappend_320_,
                                                                build_ex
                                                                _stringappend_321_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__345 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_321_ _) :=
                                                     w__345
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_322_ :=
                                                     string_drop _stringappend_319_
                                                       (build_ex
                                                       _stringappend_321_) in
                                                   match (reg_name_matches_prefix _stringappend_322_) with
                                                   | Some
                                                     (_stringappend_323_,(existT _ _stringappend_324_ _)) =>
                                                      returnm ((_stringappend_323_,
                                                                build_ex
                                                                _stringappend_324_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__347 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs1, existT _ _stringappend_324_ _) :=
                                                     w__347
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_325_ :=
                                                     string_drop _stringappend_322_
                                                       (build_ex
                                                       _stringappend_324_) in
                                                   sep_matches_prefix _stringappend_325_ >>= fun w__348 : option ((unit * {n : Z & ArithFact (n >=
                                                     0)})) =>
                                                   match w__348 with
                                                   | Some
                                                     (_stringappend_326_,(existT _ _stringappend_327_ _)) =>
                                                      returnm ((_stringappend_326_,
                                                                build_ex
                                                                _stringappend_327_)
                                                       : (unit * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__350 : (unit * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(tt, existT _ _stringappend_327_ _) :=
                                                     w__350
                                                      : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                   let _stringappend_328_ :=
                                                     string_drop _stringappend_325_
                                                       (build_ex
                                                       _stringappend_327_) in
                                                   match (reg_name_matches_prefix _stringappend_328_) with
                                                   | Some
                                                     (_stringappend_329_,(existT _ _stringappend_330_ _)) =>
                                                      returnm ((_stringappend_329_,
                                                                build_ex
                                                                _stringappend_330_)
                                                       : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   | _ =>
                                                      exit tt
                                                       : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                   end >>= fun w__352 : (mword 5 * {n : Z & ArithFact (n >=
                                                     0)}) =>
                                                   let '(rs2, existT _ _stringappend_330_ _) :=
                                                     w__352
                                                      : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                   returnm ((match (string_drop _stringappend_328_
                                                                      (build_ex
                                                                      _stringappend_330_)) with
                                                             | s_ =>
                                                                Some (REM (rs2,rs1,rd,s),
                                                                      sub_nat (string_length arg_)
                                                                        (string_length s_))
                                                             end)
                                                    : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                                 else
                                                   and_boolM
                                                     (returnm ((string_startswith _stringappend_0_
                                                                  "mulw")
                                                       : bool))
                                                     (let _stringappend_332_ :=
                                                       string_drop _stringappend_0_
                                                         (string_length "mulw") in
                                                     match (spc_matches_prefix _stringappend_332_) with
                                                     | Some
                                                       (_stringappend_333_,(existT _ _stringappend_334_ _)) =>
                                                        let _stringappend_335_ :=
                                                          string_drop _stringappend_332_
                                                            (build_ex
                                                            _stringappend_334_) in
                                                        match (reg_name_matches_prefix
                                                                 _stringappend_335_) with
                                                        | Some
                                                          (_stringappend_336_,(existT _ _stringappend_337_ _)) =>
                                                           let _stringappend_338_ :=
                                                             string_drop _stringappend_335_
                                                               (build_ex
                                                               _stringappend_337_) in
                                                           sep_matches_prefix _stringappend_338_ >>= fun w__353 : option ((unit * {n : Z & ArithFact (n >=
                                                             0)})) =>
                                                           match w__353 with
                                                           | Some
                                                             (_stringappend_339_,(existT _ _stringappend_340_ _)) =>
                                                              let _stringappend_341_ :=
                                                                string_drop _stringappend_338_
                                                                  (build_ex
                                                                  _stringappend_340_) in
                                                              match (reg_name_matches_prefix
                                                                       _stringappend_341_) with
                                                              | Some
                                                                (_stringappend_342_,(existT _ _stringappend_343_ _)) =>
                                                                 let _stringappend_344_ :=
                                                                   string_drop _stringappend_341_
                                                                     (build_ex
                                                                     _stringappend_343_) in
                                                                 sep_matches_prefix
                                                                   _stringappend_344_ >>= fun w__354 : option ((unit * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 returnm ((if ((match w__354 with
                                                                                | Some
                                                                                  (_stringappend_345_,(existT _ _stringappend_346_ _)) =>
                                                                                   let _stringappend_347_ :=
                                                                                     string_drop
                                                                                       _stringappend_344_
                                                                                       (build_ex
                                                                                       _stringappend_346_) in
                                                                                   if ((match (reg_name_matches_prefix
                                                                                                 _stringappend_347_) with
                                                                                        | Some
                                                                                          (_stringappend_348_,(existT _ _stringappend_349_ _)) =>
                                                                                           match (string_drop
                                                                                                    _stringappend_347_
                                                                                                    (build_ex
                                                                                                    _stringappend_349_)) with
                                                                                           | s_ =>
                                                                                              true
                                                                                           end
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false
                                                                                | None => false
                                                                                end)) then
                                                                             true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__355 : bool =>
                                                              returnm ((if (w__355) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__356 : bool =>
                                                           returnm ((if (w__356) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__357 : bool =>
                                                        returnm ((if (w__357) then true
                                                                  else false)
                                                         : bool)
                                                     | None => returnm (false  : bool)
                                                     end >>= fun w__358 : bool =>
                                                     returnm ((if (w__358) then true
                                                               else false)
                                                      : bool)) >>= fun w__359 : bool =>
                                                   (if (w__359) then
                                                      let _stringappend_332_ :=
                                                        string_drop _stringappend_0_
                                                          (string_length "mulw") in
                                                      match (spc_matches_prefix _stringappend_332_) with
                                                      | Some
                                                        (_stringappend_333_,(existT _ _stringappend_334_ _)) =>
                                                         returnm ((_stringappend_333_,
                                                                   build_ex
                                                                   _stringappend_334_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__361 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_334_ _) :=
                                                        w__361
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_335_ :=
                                                        string_drop _stringappend_332_
                                                          (build_ex
                                                          _stringappend_334_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_335_) with
                                                      | Some
                                                        (_stringappend_336_,(existT _ _stringappend_337_ _)) =>
                                                         returnm ((_stringappend_336_,
                                                                   build_ex
                                                                   _stringappend_337_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__363 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rd, existT _ _stringappend_337_ _) :=
                                                        w__363
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_338_ :=
                                                        string_drop _stringappend_335_
                                                          (build_ex
                                                          _stringappend_337_) in
                                                      sep_matches_prefix _stringappend_338_ >>= fun w__364 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__364 with
                                                      | Some
                                                        (_stringappend_339_,(existT _ _stringappend_340_ _)) =>
                                                         returnm ((_stringappend_339_,
                                                                   build_ex
                                                                   _stringappend_340_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__366 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_340_ _) :=
                                                        w__366
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_341_ :=
                                                        string_drop _stringappend_338_
                                                          (build_ex
                                                          _stringappend_340_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_341_) with
                                                      | Some
                                                        (_stringappend_342_,(existT _ _stringappend_343_ _)) =>
                                                         returnm ((_stringappend_342_,
                                                                   build_ex
                                                                   _stringappend_343_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__368 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs1, existT _ _stringappend_343_ _) :=
                                                        w__368
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_344_ :=
                                                        string_drop _stringappend_341_
                                                          (build_ex
                                                          _stringappend_343_) in
                                                      sep_matches_prefix _stringappend_344_ >>= fun w__369 : option ((unit * {n : Z & ArithFact (n >=
                                                        0)})) =>
                                                      match w__369 with
                                                      | Some
                                                        (_stringappend_345_,(existT _ _stringappend_346_ _)) =>
                                                         returnm ((_stringappend_345_,
                                                                   build_ex
                                                                   _stringappend_346_)
                                                          : (unit * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__371 : (unit * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(tt, existT _ _stringappend_346_ _) :=
                                                        w__371
                                                         : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                      let _stringappend_347_ :=
                                                        string_drop _stringappend_344_
                                                          (build_ex
                                                          _stringappend_346_) in
                                                      match (reg_name_matches_prefix
                                                               _stringappend_347_) with
                                                      | Some
                                                        (_stringappend_348_,(existT _ _stringappend_349_ _)) =>
                                                         returnm ((_stringappend_348_,
                                                                   build_ex
                                                                   _stringappend_349_)
                                                          : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      | _ =>
                                                         exit tt
                                                          : M ((mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                      end >>= fun w__373 : (mword 5 * {n : Z & ArithFact (n >=
                                                        0)}) =>
                                                      let '(rs2, existT _ _stringappend_349_ _) :=
                                                        w__373
                                                         : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                      returnm ((match (string_drop
                                                                         _stringappend_347_
                                                                         (build_ex
                                                                         _stringappend_349_)) with
                                                                | s_ =>
                                                                   Some (MULW (rs2,rs1,rd),
                                                                         sub_nat
                                                                           (string_length arg_)
                                                                           (string_length s_))
                                                                end)
                                                       : option ((ast * {n : Z & ArithFact (n >= 0)})))
                                                    else
                                                      and_boolM
                                                        (returnm ((string_startswith
                                                                     _stringappend_0_ "div")
                                                          : bool))
                                                        (let _stringappend_351_ :=
                                                          string_drop _stringappend_0_
                                                            (string_length "div") in
                                                        match (maybe_not_u_matches_prefix
                                                                 _stringappend_351_) with
                                                        | Some
                                                          (_stringappend_352_,(existT _ _stringappend_353_ _)) =>
                                                           let _stringappend_354_ :=
                                                             string_drop _stringappend_351_
                                                               (build_ex
                                                               _stringappend_353_) in
                                                           and_boolM
                                                             (returnm ((string_startswith
                                                                          _stringappend_354_ "w")
                                                               : bool))
                                                             (let _stringappend_355_ :=
                                                               string_drop _stringappend_354_
                                                                 (string_length "w") in
                                                             match (spc_matches_prefix
                                                                      _stringappend_355_) with
                                                             | Some
                                                               (_stringappend_356_,(existT _ _stringappend_357_ _)) =>
                                                                let _stringappend_358_ :=
                                                                  string_drop _stringappend_355_
                                                                    (build_ex
                                                                    _stringappend_357_) in
                                                                match (reg_name_matches_prefix
                                                                         _stringappend_358_) with
                                                                | Some
                                                                  (_stringappend_359_,(existT _ _stringappend_360_ _)) =>
                                                                   let _stringappend_361_ :=
                                                                     string_drop _stringappend_358_
                                                                       (build_ex
                                                                       _stringappend_360_) in
                                                                   sep_matches_prefix
                                                                     _stringappend_361_ >>= fun w__374 : option ((unit * {n : Z & ArithFact (n >=
                                                                     0)})) =>
                                                                   match w__374 with
                                                                   | Some
                                                                     (_stringappend_362_,(existT _ _stringappend_363_ _)) =>
                                                                      let _stringappend_364_ :=
                                                                        string_drop
                                                                          _stringappend_361_
                                                                          (build_ex
                                                                          _stringappend_363_) in
                                                                      match (reg_name_matches_prefix
                                                                               _stringappend_364_) with
                                                                      | Some
                                                                        (_stringappend_365_,(existT _ _stringappend_366_ _)) =>
                                                                         let _stringappend_367_ :=
                                                                           string_drop
                                                                             _stringappend_364_
                                                                             (build_ex
                                                                             _stringappend_366_) in
                                                                         sep_matches_prefix
                                                                           _stringappend_367_ >>= fun w__375 : option ((unit * {n : Z & ArithFact (n >=
                                                                           0)})) =>
                                                                         returnm ((if ((match w__375 with
                                                                                        | Some
                                                                                          (_stringappend_368_,(existT _ _stringappend_369_ _)) =>
                                                                                           let _stringappend_370_ :=
                                                                                             string_drop
                                                                                               _stringappend_367_
                                                                                               (build_ex
                                                                                               _stringappend_369_) in
                                                                                           if ((match (reg_name_matches_prefix
                                                                                                         _stringappend_370_) with
                                                                                                | Some
                                                                                                  (_stringappend_371_,(existT _ _stringappend_372_ _)) =>
                                                                                                   match (string_drop
                                                                                                            _stringappend_370_
                                                                                                            (build_ex
                                                                                                            _stringappend_372_)) with
                                                                                                   | s_ =>
                                                                                                      true
                                                                                                   end
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false
                                                                                        | None =>
                                                                                           false
                                                                                        end)) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__376 : bool =>
                                                                      returnm ((if (w__376) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__377 : bool =>
                                                                   returnm ((if (w__377) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__378 : bool =>
                                                                returnm ((if (w__378) then true
                                                                          else false)
                                                                 : bool)
                                                             | None => returnm (false  : bool)
                                                             end >>= fun w__379 : bool =>
                                                             returnm ((if (w__379) then true
                                                                       else false)
                                                              : bool)) >>= fun w__380 : bool =>
                                                           returnm ((if (w__380) then true
                                                                     else false)
                                                            : bool)
                                                        | None => returnm (false  : bool)
                                                        end >>= fun w__381 : bool =>
                                                        returnm ((if (w__381) then true
                                                                  else false)
                                                         : bool)) >>= fun w__382 : bool =>
                                                      (if (w__382) then
                                                         let _stringappend_351_ :=
                                                           string_drop _stringappend_0_
                                                             (string_length "div") in
                                                         match (maybe_not_u_matches_prefix
                                                                  _stringappend_351_) with
                                                         | Some
                                                           (_stringappend_352_,(existT _ _stringappend_353_ _)) =>
                                                            returnm ((_stringappend_352_,
                                                                      build_ex
                                                                      _stringappend_353_)
                                                             : (bool * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((bool * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__384 : (bool * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(s, existT _ _stringappend_353_ _) :=
                                                           w__384
                                                            : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_354_ :=
                                                           string_drop _stringappend_351_
                                                             (build_ex
                                                             _stringappend_353_) in
                                                         let _stringappend_355_ :=
                                                           string_drop _stringappend_354_
                                                             (string_length "w") in
                                                         match (spc_matches_prefix
                                                                  _stringappend_355_) with
                                                         | Some
                                                           (_stringappend_356_,(existT _ _stringappend_357_ _)) =>
                                                            returnm ((_stringappend_356_,
                                                                      build_ex
                                                                      _stringappend_357_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__386 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_357_ _) :=
                                                           w__386
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_358_ :=
                                                           string_drop _stringappend_355_
                                                             (build_ex
                                                             _stringappend_357_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_358_) with
                                                         | Some
                                                           (_stringappend_359_,(existT _ _stringappend_360_ _)) =>
                                                            returnm ((_stringappend_359_,
                                                                      build_ex
                                                                      _stringappend_360_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__388 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rd, existT _ _stringappend_360_ _) :=
                                                           w__388
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_361_ :=
                                                           string_drop _stringappend_358_
                                                             (build_ex
                                                             _stringappend_360_) in
                                                         sep_matches_prefix _stringappend_361_ >>= fun w__389 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__389 with
                                                         | Some
                                                           (_stringappend_362_,(existT _ _stringappend_363_ _)) =>
                                                            returnm ((_stringappend_362_,
                                                                      build_ex
                                                                      _stringappend_363_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__391 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_363_ _) :=
                                                           w__391
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_364_ :=
                                                           string_drop _stringappend_361_
                                                             (build_ex
                                                             _stringappend_363_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_364_) with
                                                         | Some
                                                           (_stringappend_365_,(existT _ _stringappend_366_ _)) =>
                                                            returnm ((_stringappend_365_,
                                                                      build_ex
                                                                      _stringappend_366_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__393 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs1, existT _ _stringappend_366_ _) :=
                                                           w__393
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_367_ :=
                                                           string_drop _stringappend_364_
                                                             (build_ex
                                                             _stringappend_366_) in
                                                         sep_matches_prefix _stringappend_367_ >>= fun w__394 : option ((unit * {n : Z & ArithFact (n >=
                                                           0)})) =>
                                                         match w__394 with
                                                         | Some
                                                           (_stringappend_368_,(existT _ _stringappend_369_ _)) =>
                                                            returnm ((_stringappend_368_,
                                                                      build_ex
                                                                      _stringappend_369_)
                                                             : (unit * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((unit * {n : Z & ArithFact (n >= 0)}))
                                                         end >>= fun w__396 : (unit * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(tt, existT _ _stringappend_369_ _) :=
                                                           w__396
                                                            : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                         let _stringappend_370_ :=
                                                           string_drop _stringappend_367_
                                                             (build_ex
                                                             _stringappend_369_) in
                                                         match (reg_name_matches_prefix
                                                                  _stringappend_370_) with
                                                         | Some
                                                           (_stringappend_371_,(existT _ _stringappend_372_ _)) =>
                                                            returnm ((_stringappend_371_,
                                                                      build_ex
                                                                      _stringappend_372_)
                                                             : (mword 5 * {n : Z & ArithFact (n >= 0)}))
                                                         | _ =>
                                                            exit tt
                                                             : M ((mword 5 * {n : Z & ArithFact (n >=
                                                              0)}))
                                                         end >>= fun w__398 : (mword 5 * {n : Z & ArithFact (n >=
                                                           0)}) =>
                                                         let '(rs2, existT _ _stringappend_372_ _) :=
                                                           w__398
                                                            : (mword 5 * {n : Z & ArithFact (n >= 0)}) in
                                                         returnm ((match (string_drop
                                                                            _stringappend_370_
                                                                            (build_ex
                                                                            _stringappend_372_)) with
                                                                   | s_ =>
                                                                      Some (DIVW (rs2,rs1,rd,s),
                                                                            sub_nat
                                                                              (string_length arg_)
                                                                              (string_length s_))
                                                                   end)
                                                          : option ((ast * {n : Z & ArithFact (n >=
                                                           0)})))
                                                       else
                                                         and_boolM
                                                           (returnm ((string_startswith
                                                                        _stringappend_0_ "rem")
                                                             : bool))
                                                           (let _stringappend_374_ :=
                                                             string_drop _stringappend_0_
                                                               (string_length "rem") in
                                                           match (maybe_not_u_matches_prefix
                                                                    _stringappend_374_) with
                                                           | Some
                                                             (_stringappend_375_,(existT _ _stringappend_376_ _)) =>
                                                              let _stringappend_377_ :=
                                                                string_drop _stringappend_374_
                                                                  (build_ex
                                                                  _stringappend_376_) in
                                                              and_boolM
                                                                (returnm ((string_startswith
                                                                             _stringappend_377_ "w")
                                                                  : bool))
                                                                (let _stringappend_378_ :=
                                                                  string_drop _stringappend_377_
                                                                    (string_length "w") in
                                                                match (spc_matches_prefix
                                                                         _stringappend_378_) with
                                                                | Some
                                                                  (_stringappend_379_,(existT _ _stringappend_380_ _)) =>
                                                                   let _stringappend_381_ :=
                                                                     string_drop _stringappend_378_
                                                                       (build_ex
                                                                       _stringappend_380_) in
                                                                   match (reg_name_matches_prefix
                                                                            _stringappend_381_) with
                                                                   | Some
                                                                     (_stringappend_382_,(existT _ _stringappend_383_ _)) =>
                                                                      let _stringappend_384_ :=
                                                                        string_drop
                                                                          _stringappend_381_
                                                                          (build_ex
                                                                          _stringappend_383_) in
                                                                      sep_matches_prefix
                                                                        _stringappend_384_ >>= fun w__399 : option ((unit * {n : Z & ArithFact (n >=
                                                                        0)})) =>
                                                                      match w__399 with
                                                                      | Some
                                                                        (_stringappend_385_,(existT _ _stringappend_386_ _)) =>
                                                                         let _stringappend_387_ :=
                                                                           string_drop
                                                                             _stringappend_384_
                                                                             (build_ex
                                                                             _stringappend_386_) in
                                                                         match (reg_name_matches_prefix
                                                                                  _stringappend_387_) with
                                                                         | Some
                                                                           (_stringappend_388_,(existT _ _stringappend_389_ _)) =>
                                                                            let _stringappend_390_ :=
                                                                              string_drop
                                                                                _stringappend_387_
                                                                                (build_ex
                                                                                _stringappend_389_) in
                                                                            sep_matches_prefix
                                                                              _stringappend_390_ >>= fun w__400 : option ((unit * {n : Z & ArithFact (n >=
                                                                              0)})) =>
                                                                            returnm ((if ((match w__400 with
                                                                                           | Some
                                                                                             (_stringappend_391_,(existT _ _stringappend_392_ _)) =>
                                                                                              let _stringappend_393_ :=
                                                                                                string_drop
                                                                                                  _stringappend_390_
                                                                                                  (build_ex
                                                                                                  _stringappend_392_) in
                                                                                              if ((match (reg_name_matches_prefix
                                                                                                            _stringappend_393_) with
                                                                                                   | Some
                                                                                                     (_stringappend_394_,(existT _ _stringappend_395_ _)) =>
                                                                                                      match (string_drop
                                                                                                               _stringappend_393_
                                                                                                               (build_ex
                                                                                                               _stringappend_395_)) with
                                                                                                      | s_ =>
                                                                                                         true
                                                                                                      end
                                                                                                   | None =>
                                                                                                      false
                                                                                                   end))
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false
                                                                                           | None =>
                                                                                              false
                                                                                           end))
                                                                                      then
                                                                                        true
                                                                                      else false)
                                                                             : bool)
                                                                         | None =>
                                                                            returnm (false  : bool)
                                                                         end >>= fun w__401 : bool =>
                                                                         returnm ((if (w__401) then
                                                                                     true
                                                                                   else false)
                                                                          : bool)
                                                                      | None =>
                                                                         returnm (false  : bool)
                                                                      end >>= fun w__402 : bool =>
                                                                      returnm ((if (w__402) then
                                                                                  true
                                                                                else false)
                                                                       : bool)
                                                                   | None => returnm (false  : bool)
                                                                   end >>= fun w__403 : bool =>
                                                                   returnm ((if (w__403) then true
                                                                             else false)
                                                                    : bool)
                                                                | None => returnm (false  : bool)
                                                                end >>= fun w__404 : bool =>
                                                                returnm ((if (w__404) then true
                                                                          else false)
                                                                 : bool)) >>= fun w__405 : bool =>
                                                              returnm ((if (w__405) then true
                                                                        else false)
                                                               : bool)
                                                           | None => returnm (false  : bool)
                                                           end >>= fun w__406 : bool =>
                                                           returnm ((if (w__406) then true
                                                                     else false)
                                                            : bool)) >>= fun w__407 : bool =>
                                                         (if (w__407) then
                                                            let _stringappend_374_ :=
                                                              string_drop _stringappend_0_
                                                                (string_length "rem") in
                                                            match (maybe_not_u_matches_prefix
                                                                     _stringappend_374_) with
                                                            | Some
                                                              (_stringappend_375_,(existT _ _stringappend_376_ _)) =>
                                                               returnm ((_stringappend_375_,
                                                                         build_ex
                                                                         _stringappend_376_)
                                                                : (bool * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((bool * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__409 : (bool * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(s, existT _ _stringappend_376_ _) :=
                                                              w__409
                                                               : (bool * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_377_ :=
                                                              string_drop _stringappend_374_
                                                                (build_ex
                                                                _stringappend_376_) in
                                                            let _stringappend_378_ :=
                                                              string_drop _stringappend_377_
                                                                (string_length "w") in
                                                            match (spc_matches_prefix
                                                                     _stringappend_378_) with
                                                            | Some
                                                              (_stringappend_379_,(existT _ _stringappend_380_ _)) =>
                                                               returnm ((_stringappend_379_,
                                                                         build_ex
                                                                         _stringappend_380_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__411 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_380_ _) :=
                                                              w__411
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_381_ :=
                                                              string_drop _stringappend_378_
                                                                (build_ex
                                                                _stringappend_380_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_381_) with
                                                            | Some
                                                              (_stringappend_382_,(existT _ _stringappend_383_ _)) =>
                                                               returnm ((_stringappend_382_,
                                                                         build_ex
                                                                         _stringappend_383_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__413 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rd, existT _ _stringappend_383_ _) :=
                                                              w__413
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_384_ :=
                                                              string_drop _stringappend_381_
                                                                (build_ex
                                                                _stringappend_383_) in
                                                            sep_matches_prefix _stringappend_384_ >>= fun w__414 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__414 with
                                                            | Some
                                                              (_stringappend_385_,(existT _ _stringappend_386_ _)) =>
                                                               returnm ((_stringappend_385_,
                                                                         build_ex
                                                                         _stringappend_386_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__416 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_386_ _) :=
                                                              w__416
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_387_ :=
                                                              string_drop _stringappend_384_
                                                                (build_ex
                                                                _stringappend_386_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_387_) with
                                                            | Some
                                                              (_stringappend_388_,(existT _ _stringappend_389_ _)) =>
                                                               returnm ((_stringappend_388_,
                                                                         build_ex
                                                                         _stringappend_389_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__418 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs1, existT _ _stringappend_389_ _) :=
                                                              w__418
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            let _stringappend_390_ :=
                                                              string_drop _stringappend_387_
                                                                (build_ex
                                                                _stringappend_389_) in
                                                            sep_matches_prefix _stringappend_390_ >>= fun w__419 : option ((unit * {n : Z & ArithFact (n >=
                                                              0)})) =>
                                                            match w__419 with
                                                            | Some
                                                              (_stringappend_391_,(existT _ _stringappend_392_ _)) =>
                                                               returnm ((_stringappend_391_,
                                                                         build_ex
                                                                         _stringappend_392_)
                                                                : (unit * {n : Z & ArithFact (n >= 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((unit * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__421 : (unit * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(tt, existT _ _stringappend_392_ _) :=
                                                              w__421
                                                               : (unit * {n : Z & ArithFact (n >= 0)}) in
                                                            let _stringappend_393_ :=
                                                              string_drop _stringappend_390_
                                                                (build_ex
                                                                _stringappend_392_) in
                                                            match (reg_name_matches_prefix
                                                                     _stringappend_393_) with
                                                            | Some
                                                              (_stringappend_394_,(existT _ _stringappend_395_ _)) =>
                                                               returnm ((_stringappend_394_,
                                                                         build_ex
                                                                         _stringappend_395_)
                                                                : (mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            | _ =>
                                                               exit tt
                                                                : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                 0)}))
                                                            end >>= fun w__423 : (mword 5 * {n : Z & ArithFact (n >=
                                                              0)}) =>
                                                            let '(rs2, existT _ _stringappend_395_ _) :=
                                                              w__423
                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                0)}) in
                                                            returnm ((match (string_drop
                                                                               _stringappend_393_
                                                                               (build_ex
                                                                               _stringappend_395_)) with
                                                                      | s_ =>
                                                                         Some (REMW (rs2,rs1,rd,s),
                                                                               sub_nat
                                                                                 (string_length arg_)
                                                                                 (string_length s_))
                                                                      end)
                                                             : option ((ast * {n : Z & ArithFact (n >=
                                                              0)})))
                                                          else
                                                            and_boolM
                                                              (returnm ((string_startswith
                                                                           _stringappend_0_ "fence")
                                                                : bool))
                                                              (let _stringappend_397_ :=
                                                                string_drop _stringappend_0_
                                                                  (string_length "fence") in
                                                              match (spc_matches_prefix
                                                                       _stringappend_397_) with
                                                              | Some
                                                                (_stringappend_398_,(existT _ _stringappend_399_ _)) =>
                                                                 let _stringappend_400_ :=
                                                                   string_drop _stringappend_397_
                                                                     (build_ex
                                                                     _stringappend_399_) in
                                                                 fence_bits_matches_prefix
                                                                   _stringappend_400_ >>= fun w__424 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                   0)})) =>
                                                                 match w__424 with
                                                                 | Some
                                                                   (_stringappend_401_,(existT _ _stringappend_402_ _)) =>
                                                                    let _stringappend_403_ :=
                                                                      string_drop _stringappend_400_
                                                                        (build_ex
                                                                        _stringappend_402_) in
                                                                    sep_matches_prefix
                                                                      _stringappend_403_ >>= fun w__425 : option ((unit * {n : Z & ArithFact (n >=
                                                                      0)})) =>
                                                                    match w__425 with
                                                                    | Some
                                                                      (_stringappend_404_,(existT _ _stringappend_405_ _)) =>
                                                                       let _stringappend_406_ :=
                                                                         string_drop
                                                                           _stringappend_403_
                                                                           (build_ex
                                                                           _stringappend_405_) in
                                                                       fence_bits_matches_prefix
                                                                         _stringappend_406_ >>= fun w__426 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__426 with
                                                                                      | Some
                                                                                        (_stringappend_407_,(existT _ _stringappend_408_ _)) =>
                                                                                         match (string_drop
                                                                                                  _stringappend_406_
                                                                                                  (build_ex
                                                                                                  _stringappend_408_)) with
                                                                                         | s_ =>
                                                                                            true
                                                                                         end
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__427 : bool =>
                                                                    returnm ((if (w__427) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__428 : bool =>
                                                                 returnm ((if (w__428) then true
                                                                           else false)
                                                                  : bool)
                                                              | None => returnm (false  : bool)
                                                              end >>= fun w__429 : bool =>
                                                              returnm ((if (w__429) then true
                                                                        else false)
                                                               : bool)) >>= fun w__430 : bool =>
                                                            (if (w__430) then
                                                               let _stringappend_397_ :=
                                                                 string_drop _stringappend_0_
                                                                   (string_length "fence") in
                                                               match (spc_matches_prefix
                                                                        _stringappend_397_) with
                                                               | Some
                                                                 (_stringappend_398_,(existT _ _stringappend_399_ _)) =>
                                                                  returnm ((_stringappend_398_,
                                                                            build_ex
                                                                            _stringappend_399_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__432 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_399_ _) :=
                                                                 w__432
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_400_ :=
                                                                 string_drop _stringappend_397_
                                                                   (build_ex
                                                                   _stringappend_399_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_400_ >>= fun w__433 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__433 with
                                                               | Some
                                                                 (_stringappend_401_,(existT _ _stringappend_402_ _)) =>
                                                                  returnm ((_stringappend_401_,
                                                                            build_ex
                                                                            _stringappend_402_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__435 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(pred, existT _ _stringappend_402_ _) :=
                                                                 w__435
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_403_ :=
                                                                 string_drop _stringappend_400_
                                                                   (build_ex
                                                                   _stringappend_402_) in
                                                               sep_matches_prefix _stringappend_403_ >>= fun w__436 : option ((unit * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__436 with
                                                               | Some
                                                                 (_stringappend_404_,(existT _ _stringappend_405_ _)) =>
                                                                  returnm ((_stringappend_404_,
                                                                            build_ex
                                                                            _stringappend_405_)
                                                                   : (unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((unit * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__438 : (unit * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(tt, existT _ _stringappend_405_ _) :=
                                                                 w__438
                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               let _stringappend_406_ :=
                                                                 string_drop _stringappend_403_
                                                                   (build_ex
                                                                   _stringappend_405_) in
                                                               fence_bits_matches_prefix
                                                                 _stringappend_406_ >>= fun w__439 : option ((mword 4 * {n : Z & ArithFact (n >=
                                                                 0)})) =>
                                                               match w__439 with
                                                               | Some
                                                                 (_stringappend_407_,(existT _ _stringappend_408_ _)) =>
                                                                  returnm ((_stringappend_407_,
                                                                            build_ex
                                                                            _stringappend_408_)
                                                                   : (mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               | _ =>
                                                                  exit tt
                                                                   : M ((mword 4 * {n : Z & ArithFact (n >=
                                                                    0)}))
                                                               end >>= fun w__441 : (mword 4 * {n : Z & ArithFact (n >=
                                                                 0)}) =>
                                                               let '(succ, existT _ _stringappend_408_ _) :=
                                                                 w__441
                                                                  : (mword 4 * {n : Z & ArithFact (n >=
                                                                   0)}) in
                                                               returnm ((match (string_drop
                                                                                  _stringappend_406_
                                                                                  (build_ex
                                                                                  _stringappend_408_)) with
                                                                         | s_ =>
                                                                            Some (FENCE (pred,succ),
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_
                                                                            "fence.i")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "fence.i")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "fence.i")) with
                                                                         | s_ =>
                                                                            Some (FENCEI tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "ecall")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "ecall")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "ecall")) with
                                                                         | s_ =>
                                                                            Some (ECALL tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "mret")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "mret")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "mret")) with
                                                                         | s_ =>
                                                                            Some (MRET tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "sret")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "sret")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "sret")) with
                                                                         | s_ =>
                                                                            Some (SRET tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_
                                                                            "ebreak")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "ebreak")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "ebreak")) with
                                                                         | s_ =>
                                                                            Some (EBREAK tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else if ((andb
                                                                         (string_startswith
                                                                            _stringappend_0_ "wfi")
                                                                         (match (string_drop
                                                                                   _stringappend_0_
                                                                                   (string_length
                                                                                      "wfi")) with
                                                                          | s_ => true
                                                                          end))) then
                                                               returnm ((match (string_drop
                                                                                  _stringappend_0_
                                                                                  (string_length
                                                                                     "wfi")) with
                                                                         | s_ =>
                                                                            Some (WFI tt,
                                                                                  sub_nat
                                                                                    (string_length
                                                                                       arg_)
                                                                                    (string_length
                                                                                       s_))
                                                                         end)
                                                                : option ((ast * {n : Z & ArithFact (n >=
                                                                 0)})))
                                                             else
                                                               and_boolM
                                                                 (returnm ((string_startswith
                                                                              _stringappend_0_
                                                                              "sfence.vma")
                                                                   : bool))
                                                                 (let _stringappend_416_ :=
                                                                   string_drop _stringappend_0_
                                                                     (string_length "sfence.vma") in
                                                                 match (spc_matches_prefix
                                                                          _stringappend_416_) with
                                                                 | Some
                                                                   (_stringappend_417_,(existT _ _stringappend_418_ _)) =>
                                                                    let _stringappend_419_ :=
                                                                      string_drop _stringappend_416_
                                                                        (build_ex
                                                                        _stringappend_418_) in
                                                                    match (reg_name_matches_prefix
                                                                             _stringappend_419_) with
                                                                    | Some
                                                                      (_stringappend_420_,(existT _ _stringappend_421_ _)) =>
                                                                       let _stringappend_422_ :=
                                                                         string_drop
                                                                           _stringappend_419_
                                                                           (build_ex
                                                                           _stringappend_421_) in
                                                                       sep_matches_prefix
                                                                         _stringappend_422_ >>= fun w__442 : option ((unit * {n : Z & ArithFact (n >=
                                                                         0)})) =>
                                                                       returnm ((if ((match w__442 with
                                                                                      | Some
                                                                                        (_stringappend_423_,(existT _ _stringappend_424_ _)) =>
                                                                                         let _stringappend_425_ :=
                                                                                           string_drop
                                                                                             _stringappend_422_
                                                                                             (build_ex
                                                                                             _stringappend_424_) in
                                                                                         if ((match (reg_name_matches_prefix
                                                                                                       _stringappend_425_) with
                                                                                              | Some
                                                                                                (_stringappend_426_,(existT _ _stringappend_427_ _)) =>
                                                                                                 match (string_drop
                                                                                                          _stringappend_425_
                                                                                                          (build_ex
                                                                                                          _stringappend_427_)) with
                                                                                                 | s_ =>
                                                                                                    true
                                                                                                 end
                                                                                              | None =>
                                                                                                 false
                                                                                              end))
                                                                                         then
                                                                                           true
                                                                                         else false
                                                                                      | None =>
                                                                                         false
                                                                                      end)) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__443 : bool =>
                                                                    returnm ((if (w__443) then true
                                                                              else false)
                                                                     : bool)
                                                                 | None => returnm (false  : bool)
                                                                 end >>= fun w__444 : bool =>
                                                                 returnm ((if (w__444) then true
                                                                           else false)
                                                                  : bool)) >>= fun w__445 : bool =>
                                                               (if (w__445) then
                                                                  let _stringappend_416_ :=
                                                                    string_drop _stringappend_0_
                                                                      (string_length "sfence.vma") in
                                                                  match (spc_matches_prefix
                                                                           _stringappend_416_) with
                                                                  | Some
                                                                    (_stringappend_417_,(existT _ _stringappend_418_ _)) =>
                                                                     returnm ((_stringappend_417_,
                                                                               build_ex
                                                                               _stringappend_418_)
                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  | _ =>
                                                                     exit tt
                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  end >>= fun w__447 : (unit * {n : Z & ArithFact (n >=
                                                                    0)}) =>
                                                                  let '(tt, existT _ _stringappend_418_ _) :=
                                                                    w__447
                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                      0)}) in
                                                                  let _stringappend_419_ :=
                                                                    string_drop _stringappend_416_
                                                                      (build_ex
                                                                      _stringappend_418_) in
                                                                  match (reg_name_matches_prefix
                                                                           _stringappend_419_) with
                                                                  | Some
                                                                    (_stringappend_420_,(existT _ _stringappend_421_ _)) =>
                                                                     returnm ((_stringappend_420_,
                                                                               build_ex
                                                                               _stringappend_421_)
                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  | _ =>
                                                                     exit tt
                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  end >>= fun w__449 : (mword 5 * {n : Z & ArithFact (n >=
                                                                    0)}) =>
                                                                  let '(rs1, existT _ _stringappend_421_ _) :=
                                                                    w__449
                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                      0)}) in
                                                                  let _stringappend_422_ :=
                                                                    string_drop _stringappend_419_
                                                                      (build_ex
                                                                      _stringappend_421_) in
                                                                  sep_matches_prefix
                                                                    _stringappend_422_ >>= fun w__450 : option ((unit * {n : Z & ArithFact (n >=
                                                                    0)})) =>
                                                                  match w__450 with
                                                                  | Some
                                                                    (_stringappend_423_,(existT _ _stringappend_424_ _)) =>
                                                                     returnm ((_stringappend_423_,
                                                                               build_ex
                                                                               _stringappend_424_)
                                                                      : (unit * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  | _ =>
                                                                     exit tt
                                                                      : M ((unit * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  end >>= fun w__452 : (unit * {n : Z & ArithFact (n >=
                                                                    0)}) =>
                                                                  let '(tt, existT _ _stringappend_424_ _) :=
                                                                    w__452
                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                      0)}) in
                                                                  let _stringappend_425_ :=
                                                                    string_drop _stringappend_422_
                                                                      (build_ex
                                                                      _stringappend_424_) in
                                                                  match (reg_name_matches_prefix
                                                                           _stringappend_425_) with
                                                                  | Some
                                                                    (_stringappend_426_,(existT _ _stringappend_427_ _)) =>
                                                                     returnm ((_stringappend_426_,
                                                                               build_ex
                                                                               _stringappend_427_)
                                                                      : (mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  | _ =>
                                                                     exit tt
                                                                      : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}))
                                                                  end >>= fun w__454 : (mword 5 * {n : Z & ArithFact (n >=
                                                                    0)}) =>
                                                                  let '(rs2, existT _ _stringappend_427_ _) :=
                                                                    w__454
                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                      0)}) in
                                                                  returnm ((match (string_drop
                                                                                     _stringappend_425_
                                                                                     (build_ex
                                                                                     _stringappend_427_)) with
                                                                            | s_ =>
                                                                               Some (SFENCE_VMA (rs1,rs2),
                                                                                     sub_nat
                                                                                       (string_length
                                                                                          arg_)
                                                                                       (string_length
                                                                                          s_))
                                                                            end)
                                                                   : option ((ast * {n : Z & ArithFact (n >=
                                                                    0)})))
                                                                else
                                                                  and_boolM
                                                                    (returnm ((string_startswith
                                                                                 _stringappend_0_
                                                                                 "lr.")
                                                                      : bool))
                                                                    (let _stringappend_429_ :=
                                                                      string_drop _stringappend_0_
                                                                        (string_length "lr.") in
                                                                    match (maybe_aq_matches_prefix
                                                                             _stringappend_429_) with
                                                                    | Some
                                                                      (_stringappend_430_,(existT _ _stringappend_431_ _)) =>
                                                                       let _stringappend_432_ :=
                                                                         string_drop
                                                                           _stringappend_429_
                                                                           (build_ex
                                                                           _stringappend_431_) in
                                                                       match (maybe_rl_matches_prefix
                                                                                _stringappend_432_) with
                                                                       | Some
                                                                         (_stringappend_433_,(existT _ _stringappend_434_ _)) =>
                                                                          let _stringappend_435_ :=
                                                                            string_drop
                                                                              _stringappend_432_
                                                                              (build_ex
                                                                              _stringappend_434_) in
                                                                          match (size_mnemonic_matches_prefix
                                                                                   _stringappend_435_) with
                                                                          | Some
                                                                            (_stringappend_436_,(existT _ _stringappend_437_ _)) =>
                                                                             let _stringappend_438_ :=
                                                                               string_drop
                                                                                 _stringappend_435_
                                                                                 (build_ex
                                                                                 _stringappend_437_) in
                                                                             match (spc_matches_prefix
                                                                                      _stringappend_438_) with
                                                                             | Some
                                                                               (_stringappend_439_,(existT _ _stringappend_440_ _)) =>
                                                                                let _stringappend_441_ :=
                                                                                  string_drop
                                                                                    _stringappend_438_
                                                                                    (build_ex
                                                                                    _stringappend_440_) in
                                                                                match (reg_name_matches_prefix
                                                                                         _stringappend_441_) with
                                                                                | Some
                                                                                  (_stringappend_442_,(existT _ _stringappend_443_ _)) =>
                                                                                   let _stringappend_444_ :=
                                                                                     string_drop
                                                                                       _stringappend_441_
                                                                                       (build_ex
                                                                                       _stringappend_443_) in
                                                                                   sep_matches_prefix
                                                                                     _stringappend_444_ >>= fun w__455 : option ((unit * {n : Z & ArithFact (n >=
                                                                                     0)})) =>
                                                                                   returnm ((if ((match w__455 with
                                                                                                  | Some
                                                                                                    (_stringappend_445_,(existT _ _stringappend_446_ _)) =>
                                                                                                     let _stringappend_447_ :=
                                                                                                       string_drop
                                                                                                         _stringappend_444_
                                                                                                         (build_ex
                                                                                                         _stringappend_446_) in
                                                                                                     if
                                                                                                       ((match (reg_name_matches_prefix
                                                                                                                  _stringappend_447_) with
                                                                                                         | Some
                                                                                                           (_stringappend_448_,(existT _ _stringappend_449_ _)) =>
                                                                                                            match (string_drop
                                                                                                                     _stringappend_447_
                                                                                                                     (build_ex
                                                                                                                     _stringappend_449_)) with
                                                                                                            | s_ =>
                                                                                                               true
                                                                                                            end
                                                                                                         | None =>
                                                                                                            false
                                                                                                         end))
                                                                                                     then
                                                                                                       true
                                                                                                     else
                                                                                                       false
                                                                                                  | None =>
                                                                                                     false
                                                                                                  end))
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__456 : bool =>
                                                                                returnm ((if (w__456)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__457 : bool =>
                                                                             returnm ((if (w__457)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)
                                                                          | None =>
                                                                             returnm (false  : bool)
                                                                          end >>= fun w__458 : bool =>
                                                                          returnm ((if (w__458) then
                                                                                      true
                                                                                    else false)
                                                                           : bool)
                                                                       | None =>
                                                                          returnm (false  : bool)
                                                                       end >>= fun w__459 : bool =>
                                                                       returnm ((if (w__459) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)
                                                                    | None =>
                                                                       returnm (false  : bool)
                                                                    end >>= fun w__460 : bool =>
                                                                    returnm ((if (w__460) then true
                                                                              else false)
                                                                     : bool)) >>= fun w__461 : bool =>
                                                                  (if (w__461) then
                                                                     let _stringappend_429_ :=
                                                                       string_drop _stringappend_0_
                                                                         (string_length "lr.") in
                                                                     match (maybe_aq_matches_prefix
                                                                              _stringappend_429_) with
                                                                     | Some
                                                                       (_stringappend_430_,(existT _ _stringappend_431_ _)) =>
                                                                        returnm ((_stringappend_430_,
                                                                                  build_ex
                                                                                  _stringappend_431_)
                                                                         : (bool * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((bool * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__463 : (bool * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(aq, existT _ _stringappend_431_ _) :=
                                                                       w__463
                                                                        : (bool * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_432_ :=
                                                                       string_drop
                                                                         _stringappend_429_
                                                                         (build_ex
                                                                         _stringappend_431_) in
                                                                     match (maybe_rl_matches_prefix
                                                                              _stringappend_432_) with
                                                                     | Some
                                                                       (_stringappend_433_,(existT _ _stringappend_434_ _)) =>
                                                                        returnm ((_stringappend_433_,
                                                                                  build_ex
                                                                                  _stringappend_434_)
                                                                         : (bool * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((bool * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__465 : (bool * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(rl, existT _ _stringappend_434_ _) :=
                                                                       w__465
                                                                        : (bool * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_435_ :=
                                                                       string_drop
                                                                         _stringappend_432_
                                                                         (build_ex
                                                                         _stringappend_434_) in
                                                                     match (size_mnemonic_matches_prefix
                                                                              _stringappend_435_) with
                                                                     | Some
                                                                       (_stringappend_436_,(existT _ _stringappend_437_ _)) =>
                                                                        returnm ((_stringappend_436_,
                                                                                  build_ex
                                                                                  _stringappend_437_)
                                                                         : (word_width * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((word_width * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__467 : (word_width * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(size, existT _ _stringappend_437_ _) :=
                                                                       w__467
                                                                        : (word_width * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_438_ :=
                                                                       string_drop
                                                                         _stringappend_435_
                                                                         (build_ex
                                                                         _stringappend_437_) in
                                                                     match (spc_matches_prefix
                                                                              _stringappend_438_) with
                                                                     | Some
                                                                       (_stringappend_439_,(existT _ _stringappend_440_ _)) =>
                                                                        returnm ((_stringappend_439_,
                                                                                  build_ex
                                                                                  _stringappend_440_)
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__469 : (unit * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(tt, existT _ _stringappend_440_ _) :=
                                                                       w__469
                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_441_ :=
                                                                       string_drop
                                                                         _stringappend_438_
                                                                         (build_ex
                                                                         _stringappend_440_) in
                                                                     match (reg_name_matches_prefix
                                                                              _stringappend_441_) with
                                                                     | Some
                                                                       (_stringappend_442_,(existT _ _stringappend_443_ _)) =>
                                                                        returnm ((_stringappend_442_,
                                                                                  build_ex
                                                                                  _stringappend_443_)
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__471 : (mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(rd, existT _ _stringappend_443_ _) :=
                                                                       w__471
                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_444_ :=
                                                                       string_drop
                                                                         _stringappend_441_
                                                                         (build_ex
                                                                         _stringappend_443_) in
                                                                     sep_matches_prefix
                                                                       _stringappend_444_ >>= fun w__472 : option ((unit * {n : Z & ArithFact (n >=
                                                                       0)})) =>
                                                                     match w__472 with
                                                                     | Some
                                                                       (_stringappend_445_,(existT _ _stringappend_446_ _)) =>
                                                                        returnm ((_stringappend_445_,
                                                                                  build_ex
                                                                                  _stringappend_446_)
                                                                         : (unit * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((unit * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__474 : (unit * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(tt, existT _ _stringappend_446_ _) :=
                                                                       w__474
                                                                        : (unit * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     let _stringappend_447_ :=
                                                                       string_drop
                                                                         _stringappend_444_
                                                                         (build_ex
                                                                         _stringappend_446_) in
                                                                     match (reg_name_matches_prefix
                                                                              _stringappend_447_) with
                                                                     | Some
                                                                       (_stringappend_448_,(existT _ _stringappend_449_ _)) =>
                                                                        returnm ((_stringappend_448_,
                                                                                  build_ex
                                                                                  _stringappend_449_)
                                                                         : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     | _ =>
                                                                        exit tt
                                                                         : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}))
                                                                     end >>= fun w__476 : (mword 5 * {n : Z & ArithFact (n >=
                                                                       0)}) =>
                                                                     let '(rs1, existT _ _stringappend_449_ _) :=
                                                                       w__476
                                                                        : (mword 5 * {n : Z & ArithFact (n >=
                                                                         0)}) in
                                                                     returnm ((match (string_drop
                                                                                        _stringappend_447_
                                                                                        (build_ex
                                                                                        _stringappend_449_)) with
                                                                               | s_ =>
                                                                                  Some (LOADRES (aq,rl,rs1,size,rd),
                                                                                        sub_nat
                                                                                          (string_length
                                                                                             arg_)
                                                                                          (string_length
                                                                                             s_))
                                                                               end)
                                                                      : option ((ast * {n : Z & ArithFact (n >=
                                                                       0)})))
                                                                   else
                                                                     and_boolM
                                                                       (returnm ((string_startswith
                                                                                    _stringappend_0_
                                                                                    "sc.")
                                                                         : bool))
                                                                       (let _stringappend_451_ :=
                                                                         string_drop
                                                                           _stringappend_0_
                                                                           (string_length "sc.") in
                                                                       match (maybe_aq_matches_prefix
                                                                                _stringappend_451_) with
                                                                       | Some
                                                                         (_stringappend_452_,(existT _ _stringappend_453_ _)) =>
                                                                          let _stringappend_454_ :=
                                                                            string_drop
                                                                              _stringappend_451_
                                                                              (build_ex
                                                                              _stringappend_453_) in
                                                                          match (maybe_rl_matches_prefix
                                                                                   _stringappend_454_) with
                                                                          | Some
                                                                            (_stringappend_455_,(existT _ _stringappend_456_ _)) =>
                                                                             let _stringappend_457_ :=
                                                                               string_drop
                                                                                 _stringappend_454_
                                                                                 (build_ex
                                                                                 _stringappend_456_) in
                                                                             match (size_mnemonic_matches_prefix
                                                                                      _stringappend_457_) with
                                                                             | Some
                                                                               (_stringappend_458_,(existT _ _stringappend_459_ _)) =>
                                                                                let _stringappend_460_ :=
                                                                                  string_drop
                                                                                    _stringappend_457_
                                                                                    (build_ex
                                                                                    _stringappend_459_) in
                                                                                match (spc_matches_prefix
                                                                                         _stringappend_460_) with
                                                                                | Some
                                                                                  (_stringappend_461_,(existT _ _stringappend_462_ _)) =>
                                                                                   let _stringappend_463_ :=
                                                                                     string_drop
                                                                                       _stringappend_460_
                                                                                       (build_ex
                                                                                       _stringappend_462_) in
                                                                                   match (reg_name_matches_prefix
                                                                                            _stringappend_463_) with
                                                                                   | Some
                                                                                     (_stringappend_464_,(existT _ _stringappend_465_ _)) =>
                                                                                      let _stringappend_466_ :=
                                                                                        string_drop
                                                                                          _stringappend_463_
                                                                                          (build_ex
                                                                                          _stringappend_465_) in
                                                                                      sep_matches_prefix
                                                                                        _stringappend_466_ >>= fun w__477 : option ((unit * {n : Z & ArithFact (n >=
                                                                                        0)})) =>
                                                                                      match w__477 with
                                                                                      | Some
                                                                                        (_stringappend_467_,(existT _ _stringappend_468_ _)) =>
                                                                                         let _stringappend_469_ :=
                                                                                           string_drop
                                                                                             _stringappend_466_
                                                                                             (build_ex
                                                                                             _stringappend_468_) in
                                                                                         match (reg_name_matches_prefix
                                                                                                  _stringappend_469_) with
                                                                                         | Some
                                                                                           (_stringappend_470_,(existT _ _stringappend_471_ _)) =>
                                                                                            let _stringappend_472_ :=
                                                                                              string_drop
                                                                                                _stringappend_469_
                                                                                                (build_ex
                                                                                                _stringappend_471_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_472_ >>= fun w__478 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            returnm ((if
                                                                                                        ((match w__478 with
                                                                                                          | Some
                                                                                                            (_stringappend_473_,(existT _ _stringappend_474_ _)) =>
                                                                                                             let _stringappend_475_ :=
                                                                                                               string_drop
                                                                                                                 _stringappend_472_
                                                                                                                 (build_ex
                                                                                                                 _stringappend_474_) in
                                                                                                             if
                                                                                                               ((match (reg_name_matches_prefix
                                                                                                                          _stringappend_475_) with
                                                                                                                 | Some
                                                                                                                   (_stringappend_476_,(existT _ _stringappend_477_ _)) =>
                                                                                                                    match (string_drop
                                                                                                                             _stringappend_475_
                                                                                                                             (build_ex
                                                                                                                             _stringappend_477_)) with
                                                                                                                    | s_ =>
                                                                                                                       true
                                                                                                                    end
                                                                                                                 | None =>
                                                                                                                    false
                                                                                                                 end))
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false
                                                                                                          | None =>
                                                                                                             false
                                                                                                          end))
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__479 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__479)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__480 : bool =>
                                                                                      returnm ((if (w__480)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__481 : bool =>
                                                                                   returnm ((if (w__481)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__482 : bool =>
                                                                                returnm ((if (w__482)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__483 : bool =>
                                                                             returnm ((if (w__483)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)
                                                                          | None =>
                                                                             returnm (false  : bool)
                                                                          end >>= fun w__484 : bool =>
                                                                          returnm ((if (w__484) then
                                                                                      true
                                                                                    else false)
                                                                           : bool)
                                                                       | None =>
                                                                          returnm (false  : bool)
                                                                       end >>= fun w__485 : bool =>
                                                                       returnm ((if (w__485) then
                                                                                   true
                                                                                 else false)
                                                                        : bool)) >>= fun w__486 : bool =>
                                                                     (if (w__486) then
                                                                        let _stringappend_451_ :=
                                                                          string_drop
                                                                            _stringappend_0_
                                                                            (string_length "sc.") in
                                                                        match (maybe_aq_matches_prefix
                                                                                 _stringappend_451_) with
                                                                        | Some
                                                                          (_stringappend_452_,(existT _ _stringappend_453_ _)) =>
                                                                           returnm ((_stringappend_452_,
                                                                                     build_ex
                                                                                     _stringappend_453_)
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((bool * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__488 : (bool * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(aq, existT _ _stringappend_453_ _) :=
                                                                          w__488
                                                                           : (bool * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_454_ :=
                                                                          string_drop
                                                                            _stringappend_451_
                                                                            (build_ex
                                                                            _stringappend_453_) in
                                                                        match (maybe_rl_matches_prefix
                                                                                 _stringappend_454_) with
                                                                        | Some
                                                                          (_stringappend_455_,(existT _ _stringappend_456_ _)) =>
                                                                           returnm ((_stringappend_455_,
                                                                                     build_ex
                                                                                     _stringappend_456_)
                                                                            : (bool * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((bool * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__490 : (bool * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(rl, existT _ _stringappend_456_ _) :=
                                                                          w__490
                                                                           : (bool * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_457_ :=
                                                                          string_drop
                                                                            _stringappend_454_
                                                                            (build_ex
                                                                            _stringappend_456_) in
                                                                        match (size_mnemonic_matches_prefix
                                                                                 _stringappend_457_) with
                                                                        | Some
                                                                          (_stringappend_458_,(existT _ _stringappend_459_ _)) =>
                                                                           returnm ((_stringappend_458_,
                                                                                     build_ex
                                                                                     _stringappend_459_)
                                                                            : (word_width * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((word_width * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__492 : (word_width * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(size, existT _ _stringappend_459_ _) :=
                                                                          w__492
                                                                           : (word_width * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_460_ :=
                                                                          string_drop
                                                                            _stringappend_457_
                                                                            (build_ex
                                                                            _stringappend_459_) in
                                                                        match (spc_matches_prefix
                                                                                 _stringappend_460_) with
                                                                        | Some
                                                                          (_stringappend_461_,(existT _ _stringappend_462_ _)) =>
                                                                           returnm ((_stringappend_461_,
                                                                                     build_ex
                                                                                     _stringappend_462_)
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__494 : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(tt, existT _ _stringappend_462_ _) :=
                                                                          w__494
                                                                           : (unit * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_463_ :=
                                                                          string_drop
                                                                            _stringappend_460_
                                                                            (build_ex
                                                                            _stringappend_462_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_463_) with
                                                                        | Some
                                                                          (_stringappend_464_,(existT _ _stringappend_465_ _)) =>
                                                                           returnm ((_stringappend_464_,
                                                                                     build_ex
                                                                                     _stringappend_465_)
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__496 : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(rd, existT _ _stringappend_465_ _) :=
                                                                          w__496
                                                                           : (mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_466_ :=
                                                                          string_drop
                                                                            _stringappend_463_
                                                                            (build_ex
                                                                            _stringappend_465_) in
                                                                        sep_matches_prefix
                                                                          _stringappend_466_ >>= fun w__497 : option ((unit * {n : Z & ArithFact (n >=
                                                                          0)})) =>
                                                                        match w__497 with
                                                                        | Some
                                                                          (_stringappend_467_,(existT _ _stringappend_468_ _)) =>
                                                                           returnm ((_stringappend_467_,
                                                                                     build_ex
                                                                                     _stringappend_468_)
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__499 : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(tt, existT _ _stringappend_468_ _) :=
                                                                          w__499
                                                                           : (unit * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_469_ :=
                                                                          string_drop
                                                                            _stringappend_466_
                                                                            (build_ex
                                                                            _stringappend_468_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_469_) with
                                                                        | Some
                                                                          (_stringappend_470_,(existT _ _stringappend_471_ _)) =>
                                                                           returnm ((_stringappend_470_,
                                                                                     build_ex
                                                                                     _stringappend_471_)
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__501 : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(rs1, existT _ _stringappend_471_ _) :=
                                                                          w__501
                                                                           : (mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_472_ :=
                                                                          string_drop
                                                                            _stringappend_469_
                                                                            (build_ex
                                                                            _stringappend_471_) in
                                                                        sep_matches_prefix
                                                                          _stringappend_472_ >>= fun w__502 : option ((unit * {n : Z & ArithFact (n >=
                                                                          0)})) =>
                                                                        match w__502 with
                                                                        | Some
                                                                          (_stringappend_473_,(existT _ _stringappend_474_ _)) =>
                                                                           returnm ((_stringappend_473_,
                                                                                     build_ex
                                                                                     _stringappend_474_)
                                                                            : (unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((unit * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__504 : (unit * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(tt, existT _ _stringappend_474_ _) :=
                                                                          w__504
                                                                           : (unit * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        let _stringappend_475_ :=
                                                                          string_drop
                                                                            _stringappend_472_
                                                                            (build_ex
                                                                            _stringappend_474_) in
                                                                        match (reg_name_matches_prefix
                                                                                 _stringappend_475_) with
                                                                        | Some
                                                                          (_stringappend_476_,(existT _ _stringappend_477_ _)) =>
                                                                           returnm ((_stringappend_476_,
                                                                                     build_ex
                                                                                     _stringappend_477_)
                                                                            : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        | _ =>
                                                                           exit tt
                                                                            : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}))
                                                                        end >>= fun w__506 : (mword 5 * {n : Z & ArithFact (n >=
                                                                          0)}) =>
                                                                        let '(rs2, existT _ _stringappend_477_ _) :=
                                                                          w__506
                                                                           : (mword 5 * {n : Z & ArithFact (n >=
                                                                            0)}) in
                                                                        returnm ((match (string_drop
                                                                                           _stringappend_475_
                                                                                           (build_ex
                                                                                           _stringappend_477_)) with
                                                                                  | s_ =>
                                                                                     Some (STORECON (aq,rl,rs2,rs1,size,rd),
                                                                                           sub_nat
                                                                                             (string_length
                                                                                                arg_)
                                                                                             (string_length
                                                                                                s_))
                                                                                  end)
                                                                         : option ((ast * {n : Z & ArithFact (n >=
                                                                          0)})))
                                                                      else
                                                                        match (amo_mnemonic_matches_prefix
                                                                                 _stringappend_0_) with
                                                                        | Some
                                                                          (_stringappend_479_,(existT _ _stringappend_480_ _)) =>
                                                                           let _stringappend_481_ :=
                                                                             string_drop
                                                                               _stringappend_0_
                                                                               (build_ex
                                                                               _stringappend_480_) in
                                                                           and_boolM
                                                                             (returnm ((string_startswith
                                                                                          _stringappend_481_
                                                                                          ".")
                                                                               : bool))
                                                                             (let _stringappend_482_ :=
                                                                               string_drop
                                                                                 _stringappend_481_
                                                                                 (string_length ".") in
                                                                             match (size_mnemonic_matches_prefix
                                                                                      _stringappend_482_) with
                                                                             | Some
                                                                               (_stringappend_483_,(existT _ _stringappend_484_ _)) =>
                                                                                let _stringappend_485_ :=
                                                                                  string_drop
                                                                                    _stringappend_482_
                                                                                    (build_ex
                                                                                    _stringappend_484_) in
                                                                                match (maybe_aq_matches_prefix
                                                                                         _stringappend_485_) with
                                                                                | Some
                                                                                  (_stringappend_486_,(existT _ _stringappend_487_ _)) =>
                                                                                   let _stringappend_488_ :=
                                                                                     string_drop
                                                                                       _stringappend_485_
                                                                                       (build_ex
                                                                                       _stringappend_487_) in
                                                                                   match (maybe_rl_matches_prefix
                                                                                            _stringappend_488_) with
                                                                                   | Some
                                                                                     (_stringappend_489_,(existT _ _stringappend_490_ _)) =>
                                                                                      let _stringappend_491_ :=
                                                                                        string_drop
                                                                                          _stringappend_488_
                                                                                          (build_ex
                                                                                          _stringappend_490_) in
                                                                                      match (spc_matches_prefix
                                                                                               _stringappend_491_) with
                                                                                      | Some
                                                                                        (_stringappend_492_,(existT _ _stringappend_493_ _)) =>
                                                                                         let _stringappend_494_ :=
                                                                                           string_drop
                                                                                             _stringappend_491_
                                                                                             (build_ex
                                                                                             _stringappend_493_) in
                                                                                         match (reg_name_matches_prefix
                                                                                                  _stringappend_494_) with
                                                                                         | Some
                                                                                           (_stringappend_495_,(existT _ _stringappend_496_ _)) =>
                                                                                            let _stringappend_497_ :=
                                                                                              string_drop
                                                                                                _stringappend_494_
                                                                                                (build_ex
                                                                                                _stringappend_496_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_497_ >>= fun w__507 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            match w__507 with
                                                                                            | Some
                                                                                              (_stringappend_498_,(existT _ _stringappend_499_ _)) =>
                                                                                               let _stringappend_500_ :=
                                                                                                 string_drop
                                                                                                   _stringappend_497_
                                                                                                   (build_ex
                                                                                                   _stringappend_499_) in
                                                                                               match (reg_name_matches_prefix
                                                                                                        _stringappend_500_) with
                                                                                               | Some
                                                                                                 (_stringappend_501_,(existT _ _stringappend_502_ _)) =>
                                                                                                  let _stringappend_503_ :=
                                                                                                    string_drop
                                                                                                      _stringappend_500_
                                                                                                      (build_ex
                                                                                                      _stringappend_502_) in
                                                                                                  sep_matches_prefix
                                                                                                    _stringappend_503_ >>= fun w__508 : option ((unit * {n : Z & ArithFact (n >=
                                                                                                    0)})) =>
                                                                                                  returnm ((if
                                                                                                              ((match w__508 with
                                                                                                                | Some
                                                                                                                  (_stringappend_504_,(existT _ _stringappend_505_ _)) =>
                                                                                                                   let _stringappend_506_ :=
                                                                                                                     string_drop
                                                                                                                       _stringappend_503_
                                                                                                                       (build_ex
                                                                                                                       _stringappend_505_) in
                                                                                                                   if
                                                                                                                     ((match (reg_name_matches_prefix
                                                                                                                                _stringappend_506_) with
                                                                                                                       | Some
                                                                                                                         (_stringappend_507_,(existT _ _stringappend_508_ _)) =>
                                                                                                                          match (string_drop
                                                                                                                                   _stringappend_506_
                                                                                                                                   (build_ex
                                                                                                                                   _stringappend_508_)) with
                                                                                                                          | s_ =>
                                                                                                                             true
                                                                                                                          end
                                                                                                                       | None =>
                                                                                                                          false
                                                                                                                       end))
                                                                                                                   then
                                                                                                                     true
                                                                                                                   else
                                                                                                                     false
                                                                                                                | None =>
                                                                                                                   false
                                                                                                                end))
                                                                                                            then
                                                                                                              true
                                                                                                            else
                                                                                                              false)
                                                                                                   : bool)
                                                                                               | None =>
                                                                                                  returnm (false
                                                                                                   : bool)
                                                                                               end >>= fun w__509 : bool =>
                                                                                               returnm ((if
                                                                                                           (w__509)
                                                                                                         then
                                                                                                           true
                                                                                                         else
                                                                                                           false)
                                                                                                : bool)
                                                                                            | None =>
                                                                                               returnm (false
                                                                                                : bool)
                                                                                            end >>= fun w__510 : bool =>
                                                                                            returnm ((if
                                                                                                        (w__510)
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__511 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__511)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__512 : bool =>
                                                                                      returnm ((if (w__512)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__513 : bool =>
                                                                                   returnm ((if (w__513)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__514 : bool =>
                                                                                returnm ((if (w__514)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)
                                                                             | None =>
                                                                                returnm (false
                                                                                 : bool)
                                                                             end >>= fun w__515 : bool =>
                                                                             returnm ((if (w__515)
                                                                                       then
                                                                                         true
                                                                                       else false)
                                                                              : bool)) >>= fun w__516 : bool =>
                                                                           returnm ((if (w__516)
                                                                                     then
                                                                                       true
                                                                                     else false)
                                                                            : bool)
                                                                        | None =>
                                                                           returnm (false  : bool)
                                                                        end >>= fun w__517 : bool =>
                                                                        (if (w__517) then
                                                                           match (amo_mnemonic_matches_prefix
                                                                                    _stringappend_0_) with
                                                                           | Some
                                                                             (_stringappend_479_,(existT _ _stringappend_480_ _)) =>
                                                                              returnm ((_stringappend_479_,
                                                                                        build_ex
                                                                                        _stringappend_480_)
                                                                               : (amoop * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((amoop * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__519 : (amoop * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(op, existT _ _stringappend_480_ _) :=
                                                                             w__519
                                                                              : (amoop * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_481_ :=
                                                                             string_drop
                                                                               _stringappend_0_
                                                                               (build_ex
                                                                               _stringappend_480_) in
                                                                           let _stringappend_482_ :=
                                                                             string_drop
                                                                               _stringappend_481_
                                                                               (string_length ".") in
                                                                           match (size_mnemonic_matches_prefix
                                                                                    _stringappend_482_) with
                                                                           | Some
                                                                             (_stringappend_483_,(existT _ _stringappend_484_ _)) =>
                                                                              returnm ((_stringappend_483_,
                                                                                        build_ex
                                                                                        _stringappend_484_)
                                                                               : (word_width * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((word_width * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__521 : (word_width * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(width, existT _ _stringappend_484_ _) :=
                                                                             w__521
                                                                              : (word_width * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_485_ :=
                                                                             string_drop
                                                                               _stringappend_482_
                                                                               (build_ex
                                                                               _stringappend_484_) in
                                                                           match (maybe_aq_matches_prefix
                                                                                    _stringappend_485_) with
                                                                           | Some
                                                                             (_stringappend_486_,(existT _ _stringappend_487_ _)) =>
                                                                              returnm ((_stringappend_486_,
                                                                                        build_ex
                                                                                        _stringappend_487_)
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((bool * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__523 : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(aq, existT _ _stringappend_487_ _) :=
                                                                             w__523
                                                                              : (bool * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_488_ :=
                                                                             string_drop
                                                                               _stringappend_485_
                                                                               (build_ex
                                                                               _stringappend_487_) in
                                                                           match (maybe_rl_matches_prefix
                                                                                    _stringappend_488_) with
                                                                           | Some
                                                                             (_stringappend_489_,(existT _ _stringappend_490_ _)) =>
                                                                              returnm ((_stringappend_489_,
                                                                                        build_ex
                                                                                        _stringappend_490_)
                                                                               : (bool * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((bool * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__525 : (bool * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(rl, existT _ _stringappend_490_ _) :=
                                                                             w__525
                                                                              : (bool * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_491_ :=
                                                                             string_drop
                                                                               _stringappend_488_
                                                                               (build_ex
                                                                               _stringappend_490_) in
                                                                           match (spc_matches_prefix
                                                                                    _stringappend_491_) with
                                                                           | Some
                                                                             (_stringappend_492_,(existT _ _stringappend_493_ _)) =>
                                                                              returnm ((_stringappend_492_,
                                                                                        build_ex
                                                                                        _stringappend_493_)
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__527 : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(tt, existT _ _stringappend_493_ _) :=
                                                                             w__527
                                                                              : (unit * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_494_ :=
                                                                             string_drop
                                                                               _stringappend_491_
                                                                               (build_ex
                                                                               _stringappend_493_) in
                                                                           match (reg_name_matches_prefix
                                                                                    _stringappend_494_) with
                                                                           | Some
                                                                             (_stringappend_495_,(existT _ _stringappend_496_ _)) =>
                                                                              returnm ((_stringappend_495_,
                                                                                        build_ex
                                                                                        _stringappend_496_)
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__529 : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(rd, existT _ _stringappend_496_ _) :=
                                                                             w__529
                                                                              : (mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_497_ :=
                                                                             string_drop
                                                                               _stringappend_494_
                                                                               (build_ex
                                                                               _stringappend_496_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_497_ >>= fun w__530 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           match w__530 with
                                                                           | Some
                                                                             (_stringappend_498_,(existT _ _stringappend_499_ _)) =>
                                                                              returnm ((_stringappend_498_,
                                                                                        build_ex
                                                                                        _stringappend_499_)
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__532 : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(tt, existT _ _stringappend_499_ _) :=
                                                                             w__532
                                                                              : (unit * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_500_ :=
                                                                             string_drop
                                                                               _stringappend_497_
                                                                               (build_ex
                                                                               _stringappend_499_) in
                                                                           match (reg_name_matches_prefix
                                                                                    _stringappend_500_) with
                                                                           | Some
                                                                             (_stringappend_501_,(existT _ _stringappend_502_ _)) =>
                                                                              returnm ((_stringappend_501_,
                                                                                        build_ex
                                                                                        _stringappend_502_)
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__534 : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(rs1, existT _ _stringappend_502_ _) :=
                                                                             w__534
                                                                              : (mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_503_ :=
                                                                             string_drop
                                                                               _stringappend_500_
                                                                               (build_ex
                                                                               _stringappend_502_) in
                                                                           sep_matches_prefix
                                                                             _stringappend_503_ >>= fun w__535 : option ((unit * {n : Z & ArithFact (n >=
                                                                             0)})) =>
                                                                           match w__535 with
                                                                           | Some
                                                                             (_stringappend_504_,(existT _ _stringappend_505_ _)) =>
                                                                              returnm ((_stringappend_504_,
                                                                                        build_ex
                                                                                        _stringappend_505_)
                                                                               : (unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((unit * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__537 : (unit * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(tt, existT _ _stringappend_505_ _) :=
                                                                             w__537
                                                                              : (unit * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           let _stringappend_506_ :=
                                                                             string_drop
                                                                               _stringappend_503_
                                                                               (build_ex
                                                                               _stringappend_505_) in
                                                                           match (reg_name_matches_prefix
                                                                                    _stringappend_506_) with
                                                                           | Some
                                                                             (_stringappend_507_,(existT _ _stringappend_508_ _)) =>
                                                                              returnm ((_stringappend_507_,
                                                                                        build_ex
                                                                                        _stringappend_508_)
                                                                               : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           | _ =>
                                                                              exit tt
                                                                               : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}))
                                                                           end >>= fun w__539 : (mword 5 * {n : Z & ArithFact (n >=
                                                                             0)}) =>
                                                                           let '(rs2, existT _ _stringappend_508_ _) :=
                                                                             w__539
                                                                              : (mword 5 * {n : Z & ArithFact (n >=
                                                                               0)}) in
                                                                           returnm ((match (string_drop
                                                                                              _stringappend_506_
                                                                                              (build_ex
                                                                                              _stringappend_508_)) with
                                                                                     | s_ =>
                                                                                        Some (AMO (op,aq,rl,rs2,rs1,width,rd),
                                                                                              sub_nat
                                                                                                (string_length
                                                                                                   arg_)
                                                                                                (string_length
                                                                                                   s_))
                                                                                     end)
                                                                            : option ((ast * {n : Z & ArithFact (n >=
                                                                             0)})))
                                                                         else
                                                                           match (csr_mnemonic_matches_prefix
                                                                                    _stringappend_0_) with
                                                                           | Some
                                                                             (_stringappend_510_,(existT _ _stringappend_511_ _)) =>
                                                                              let _stringappend_512_ :=
                                                                                string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex
                                                                                  _stringappend_511_) in
                                                                              and_boolM
                                                                                (returnm ((string_startswith
                                                                                             _stringappend_512_
                                                                                             "i")
                                                                                  : bool))
                                                                                (let _stringappend_513_ :=
                                                                                  string_drop
                                                                                    _stringappend_512_
                                                                                    (string_length
                                                                                       "i") in
                                                                                match (spc_matches_prefix
                                                                                         _stringappend_513_) with
                                                                                | Some
                                                                                  (_stringappend_514_,(existT _ _stringappend_515_ _)) =>
                                                                                   let _stringappend_516_ :=
                                                                                     string_drop
                                                                                       _stringappend_513_
                                                                                       (build_ex
                                                                                       _stringappend_515_) in
                                                                                   match (reg_name_matches_prefix
                                                                                            _stringappend_516_) with
                                                                                   | Some
                                                                                     (_stringappend_517_,(existT _ _stringappend_518_ _)) =>
                                                                                      let _stringappend_519_ :=
                                                                                        string_drop
                                                                                          _stringappend_516_
                                                                                          (build_ex
                                                                                          _stringappend_518_) in
                                                                                      sep_matches_prefix
                                                                                        _stringappend_519_ >>= fun w__540 : option ((unit * {n : Z & ArithFact (n >=
                                                                                        0)})) =>
                                                                                      match w__540 with
                                                                                      | Some
                                                                                        (_stringappend_520_,(existT _ _stringappend_521_ _)) =>
                                                                                         let _stringappend_522_ :=
                                                                                           string_drop
                                                                                             _stringappend_519_
                                                                                             (build_ex
                                                                                             _stringappend_521_) in
                                                                                         match (hex_bits_5_matches_prefix
                                                                                                  _stringappend_522_) with
                                                                                         | Some
                                                                                           (_stringappend_523_,(existT _ _stringappend_524_ _)) =>
                                                                                            let _stringappend_525_ :=
                                                                                              string_drop
                                                                                                _stringappend_522_
                                                                                                (build_ex
                                                                                                _stringappend_524_) in
                                                                                            sep_matches_prefix
                                                                                              _stringappend_525_ >>= fun w__541 : option ((unit * {n : Z & ArithFact (n >=
                                                                                              0)})) =>
                                                                                            returnm ((if
                                                                                                        ((match w__541 with
                                                                                                          | Some
                                                                                                            (_stringappend_526_,(existT _ _stringappend_527_ _)) =>
                                                                                                             let _stringappend_528_ :=
                                                                                                               string_drop
                                                                                                                 _stringappend_525_
                                                                                                                 (build_ex
                                                                                                                 _stringappend_527_) in
                                                                                                             if
                                                                                                               ((match (csr_name_map_matches_prefix
                                                                                                                          _stringappend_528_) with
                                                                                                                 | Some
                                                                                                                   (_stringappend_529_,(existT _ _stringappend_530_ _)) =>
                                                                                                                    match (string_drop
                                                                                                                             _stringappend_528_
                                                                                                                             (build_ex
                                                                                                                             _stringappend_530_)) with
                                                                                                                    | s_ =>
                                                                                                                       true
                                                                                                                    end
                                                                                                                 | None =>
                                                                                                                    false
                                                                                                                 end))
                                                                                                             then
                                                                                                               true
                                                                                                             else
                                                                                                               false
                                                                                                          | None =>
                                                                                                             false
                                                                                                          end))
                                                                                                      then
                                                                                                        true
                                                                                                      else
                                                                                                        false)
                                                                                             : bool)
                                                                                         | None =>
                                                                                            returnm (false
                                                                                             : bool)
                                                                                         end >>= fun w__542 : bool =>
                                                                                         returnm ((if
                                                                                                     (w__542)
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false)
                                                                                          : bool)
                                                                                      | None =>
                                                                                         returnm (false
                                                                                          : bool)
                                                                                      end >>= fun w__543 : bool =>
                                                                                      returnm ((if (w__543)
                                                                                                then
                                                                                                  true
                                                                                                else
                                                                                                  false)
                                                                                       : bool)
                                                                                   | None =>
                                                                                      returnm (false
                                                                                       : bool)
                                                                                   end >>= fun w__544 : bool =>
                                                                                   returnm ((if (w__544)
                                                                                             then
                                                                                               true
                                                                                             else
                                                                                               false)
                                                                                    : bool)
                                                                                | None =>
                                                                                   returnm (false
                                                                                    : bool)
                                                                                end >>= fun w__545 : bool =>
                                                                                returnm ((if (w__545)
                                                                                          then
                                                                                            true
                                                                                          else false)
                                                                                 : bool)) >>= fun w__546 : bool =>
                                                                              returnm ((if (w__546)
                                                                                        then
                                                                                          true
                                                                                        else false)
                                                                               : bool)
                                                                           | None =>
                                                                              returnm (false
                                                                               : bool)
                                                                           end >>= fun w__547 : bool =>
                                                                           (if (w__547) then
                                                                              match (csr_mnemonic_matches_prefix
                                                                                       _stringappend_0_) with
                                                                              | Some
                                                                                (_stringappend_510_,(existT _ _stringappend_511_ _)) =>
                                                                                 returnm ((_stringappend_510_,
                                                                                           build_ex
                                                                                           _stringappend_511_)
                                                                                  : (csrop * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((csrop * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__549 : (csrop * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(op, existT _ _stringappend_511_ _) :=
                                                                                w__549
                                                                                 : (csrop * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_512_ :=
                                                                                string_drop
                                                                                  _stringappend_0_
                                                                                  (build_ex
                                                                                  _stringappend_511_) in
                                                                              let _stringappend_513_ :=
                                                                                string_drop
                                                                                  _stringappend_512_
                                                                                  (string_length "i") in
                                                                              match (spc_matches_prefix
                                                                                       _stringappend_513_) with
                                                                              | Some
                                                                                (_stringappend_514_,(existT _ _stringappend_515_ _)) =>
                                                                                 returnm ((_stringappend_514_,
                                                                                           build_ex
                                                                                           _stringappend_515_)
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__551 : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(tt, existT _ _stringappend_515_ _) :=
                                                                                w__551
                                                                                 : (unit * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_516_ :=
                                                                                string_drop
                                                                                  _stringappend_513_
                                                                                  (build_ex
                                                                                  _stringappend_515_) in
                                                                              match (reg_name_matches_prefix
                                                                                       _stringappend_516_) with
                                                                              | Some
                                                                                (_stringappend_517_,(existT _ _stringappend_518_ _)) =>
                                                                                 returnm ((_stringappend_517_,
                                                                                           build_ex
                                                                                           _stringappend_518_)
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__553 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(rd, existT _ _stringappend_518_ _) :=
                                                                                w__553
                                                                                 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_519_ :=
                                                                                string_drop
                                                                                  _stringappend_516_
                                                                                  (build_ex
                                                                                  _stringappend_518_) in
                                                                              sep_matches_prefix
                                                                                _stringappend_519_ >>= fun w__554 : option ((unit * {n : Z & ArithFact (n >=
                                                                                0)})) =>
                                                                              match w__554 with
                                                                              | Some
                                                                                (_stringappend_520_,(existT _ _stringappend_521_ _)) =>
                                                                                 returnm ((_stringappend_520_,
                                                                                           build_ex
                                                                                           _stringappend_521_)
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__556 : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(tt, existT _ _stringappend_521_ _) :=
                                                                                w__556
                                                                                 : (unit * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_522_ :=
                                                                                string_drop
                                                                                  _stringappend_519_
                                                                                  (build_ex
                                                                                  _stringappend_521_) in
                                                                              match (hex_bits_5_matches_prefix
                                                                                       _stringappend_522_) with
                                                                              | Some
                                                                                (_stringappend_523_,(existT _ _stringappend_524_ _)) =>
                                                                                 returnm ((_stringappend_523_,
                                                                                           build_ex
                                                                                           _stringappend_524_)
                                                                                  : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__558 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(rs1, existT _ _stringappend_524_ _) :=
                                                                                w__558
                                                                                 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_525_ :=
                                                                                string_drop
                                                                                  _stringappend_522_
                                                                                  (build_ex
                                                                                  _stringappend_524_) in
                                                                              sep_matches_prefix
                                                                                _stringappend_525_ >>= fun w__559 : option ((unit * {n : Z & ArithFact (n >=
                                                                                0)})) =>
                                                                              match w__559 with
                                                                              | Some
                                                                                (_stringappend_526_,(existT _ _stringappend_527_ _)) =>
                                                                                 returnm ((_stringappend_526_,
                                                                                           build_ex
                                                                                           _stringappend_527_)
                                                                                  : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((unit * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__561 : (unit * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(tt, existT _ _stringappend_527_ _) :=
                                                                                w__561
                                                                                 : (unit * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              let _stringappend_528_ :=
                                                                                string_drop
                                                                                  _stringappend_525_
                                                                                  (build_ex
                                                                                  _stringappend_527_) in
                                                                              match (csr_name_map_matches_prefix
                                                                                       _stringappend_528_) with
                                                                              | Some
                                                                                (_stringappend_529_,(existT _ _stringappend_530_ _)) =>
                                                                                 returnm ((_stringappend_529_,
                                                                                           build_ex
                                                                                           _stringappend_530_)
                                                                                  : (mword 12 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              | _ =>
                                                                                 exit tt
                                                                                  : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                   0)}))
                                                                              end >>= fun w__563 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                0)}) =>
                                                                              let '(csr, existT _ _stringappend_530_ _) :=
                                                                                w__563
                                                                                 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                  0)}) in
                                                                              returnm ((match (string_drop
                                                                                                 _stringappend_528_
                                                                                                 (build_ex
                                                                                                 _stringappend_530_)) with
                                                                                        | s_ =>
                                                                                           Some (CSR (csr,rs1,rd,true,op),
                                                                                                 sub_nat
                                                                                                   (string_length
                                                                                                      arg_)
                                                                                                   (string_length
                                                                                                      s_))
                                                                                        end)
                                                                               : option ((ast * {n : Z & ArithFact (n >=
                                                                                0)})))
                                                                            else
                                                                              match (csr_mnemonic_matches_prefix
                                                                                       _stringappend_0_) with
                                                                              | Some
                                                                                (_stringappend_532_,(existT _ _stringappend_533_ _)) =>
                                                                                 let _stringappend_534_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (build_ex
                                                                                     _stringappend_533_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_534_) with
                                                                                 | Some
                                                                                   (_stringappend_535_,(existT _ _stringappend_536_ _)) =>
                                                                                    let _stringappend_537_ :=
                                                                                      string_drop
                                                                                        _stringappend_534_
                                                                                        (build_ex
                                                                                        _stringappend_536_) in
                                                                                    match (reg_name_matches_prefix
                                                                                             _stringappend_537_) with
                                                                                    | Some
                                                                                      (_stringappend_538_,(existT _ _stringappend_539_ _)) =>
                                                                                       let _stringappend_540_ :=
                                                                                         string_drop
                                                                                           _stringappend_537_
                                                                                           (build_ex
                                                                                           _stringappend_539_) in
                                                                                       sep_matches_prefix
                                                                                         _stringappend_540_ >>= fun w__564 : option ((unit * {n : Z & ArithFact (n >=
                                                                                         0)})) =>
                                                                                       match w__564 with
                                                                                       | Some
                                                                                         (_stringappend_541_,(existT _ _stringappend_542_ _)) =>
                                                                                          let _stringappend_543_ :=
                                                                                            string_drop
                                                                                              _stringappend_540_
                                                                                              (build_ex
                                                                                              _stringappend_542_) in
                                                                                          match (reg_name_matches_prefix
                                                                                                   _stringappend_543_) with
                                                                                          | Some
                                                                                            (_stringappend_544_,(existT _ _stringappend_545_ _)) =>
                                                                                             let _stringappend_546_ :=
                                                                                               string_drop
                                                                                                 _stringappend_543_
                                                                                                 (build_ex
                                                                                                 _stringappend_545_) in
                                                                                             sep_matches_prefix
                                                                                               _stringappend_546_ >>= fun w__565 : option ((unit * {n : Z & ArithFact (n >=
                                                                                               0)})) =>
                                                                                             returnm ((if
                                                                                                         ((match w__565 with
                                                                                                           | Some
                                                                                                             (_stringappend_547_,(existT _ _stringappend_548_ _)) =>
                                                                                                              let _stringappend_549_ :=
                                                                                                                string_drop
                                                                                                                  _stringappend_546_
                                                                                                                  (build_ex
                                                                                                                  _stringappend_548_) in
                                                                                                              if
                                                                                                                ((match (csr_name_map_matches_prefix
                                                                                                                           _stringappend_549_) with
                                                                                                                  | Some
                                                                                                                    (_stringappend_550_,(existT _ _stringappend_551_ _)) =>
                                                                                                                     match (string_drop
                                                                                                                              _stringappend_549_
                                                                                                                              (build_ex
                                                                                                                              _stringappend_551_)) with
                                                                                                                     | s_ =>
                                                                                                                        true
                                                                                                                     end
                                                                                                                  | None =>
                                                                                                                     false
                                                                                                                  end))
                                                                                                              then
                                                                                                                true
                                                                                                              else
                                                                                                                false
                                                                                                           | None =>
                                                                                                              false
                                                                                                           end))
                                                                                                       then
                                                                                                         true
                                                                                                       else
                                                                                                         false)
                                                                                              : bool)
                                                                                          | None =>
                                                                                             returnm (false
                                                                                              : bool)
                                                                                          end >>= fun w__566 : bool =>
                                                                                          returnm ((if
                                                                                                      (w__566)
                                                                                                    then
                                                                                                      true
                                                                                                    else
                                                                                                      false)
                                                                                           : bool)
                                                                                       | None =>
                                                                                          returnm (false
                                                                                           : bool)
                                                                                       end >>= fun w__567 : bool =>
                                                                                       returnm ((if (w__567)
                                                                                                 then
                                                                                                   true
                                                                                                 else
                                                                                                   false)
                                                                                        : bool)
                                                                                    | None =>
                                                                                       returnm (false
                                                                                        : bool)
                                                                                    end >>= fun w__568 : bool =>
                                                                                    returnm ((if (w__568)
                                                                                              then
                                                                                                true
                                                                                              else
                                                                                                false)
                                                                                     : bool)
                                                                                 | None =>
                                                                                    returnm (false
                                                                                     : bool)
                                                                                 end >>= fun w__569 : bool =>
                                                                                 returnm ((if (w__569)
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)
                                                                                  : bool)
                                                                              | None =>
                                                                                 returnm (false
                                                                                  : bool)
                                                                              end >>= fun w__570 : bool =>
                                                                              (if (w__570) then
                                                                                 match (csr_mnemonic_matches_prefix
                                                                                          _stringappend_0_) with
                                                                                 | Some
                                                                                   (_stringappend_532_,(existT _ _stringappend_533_ _)) =>
                                                                                    returnm ((_stringappend_532_,
                                                                                              build_ex
                                                                                              _stringappend_533_)
                                                                                     : (csrop * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((csrop * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__572 : (csrop * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(op, existT _ _stringappend_533_ _) :=
                                                                                   w__572
                                                                                    : (csrop * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_534_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (build_ex
                                                                                     _stringappend_533_) in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_534_) with
                                                                                 | Some
                                                                                   (_stringappend_535_,(existT _ _stringappend_536_ _)) =>
                                                                                    returnm ((_stringappend_535_,
                                                                                              build_ex
                                                                                              _stringappend_536_)
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__574 : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(tt, existT _ _stringappend_536_ _) :=
                                                                                   w__574
                                                                                    : (unit * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_537_ :=
                                                                                   string_drop
                                                                                     _stringappend_534_
                                                                                     (build_ex
                                                                                     _stringappend_536_) in
                                                                                 match (reg_name_matches_prefix
                                                                                          _stringappend_537_) with
                                                                                 | Some
                                                                                   (_stringappend_538_,(existT _ _stringappend_539_ _)) =>
                                                                                    returnm ((_stringappend_538_,
                                                                                              build_ex
                                                                                              _stringappend_539_)
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__576 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(rd, existT _ _stringappend_539_ _) :=
                                                                                   w__576
                                                                                    : (mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_540_ :=
                                                                                   string_drop
                                                                                     _stringappend_537_
                                                                                     (build_ex
                                                                                     _stringappend_539_) in
                                                                                 sep_matches_prefix
                                                                                   _stringappend_540_ >>= fun w__577 : option ((unit * {n : Z & ArithFact (n >=
                                                                                   0)})) =>
                                                                                 match w__577 with
                                                                                 | Some
                                                                                   (_stringappend_541_,(existT _ _stringappend_542_ _)) =>
                                                                                    returnm ((_stringappend_541_,
                                                                                              build_ex
                                                                                              _stringappend_542_)
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__579 : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(tt, existT _ _stringappend_542_ _) :=
                                                                                   w__579
                                                                                    : (unit * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_543_ :=
                                                                                   string_drop
                                                                                     _stringappend_540_
                                                                                     (build_ex
                                                                                     _stringappend_542_) in
                                                                                 match (reg_name_matches_prefix
                                                                                          _stringappend_543_) with
                                                                                 | Some
                                                                                   (_stringappend_544_,(existT _ _stringappend_545_ _)) =>
                                                                                    returnm ((_stringappend_544_,
                                                                                              build_ex
                                                                                              _stringappend_545_)
                                                                                     : (mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((mword 5 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__581 : (mword 5 * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(rs1, existT _ _stringappend_545_ _) :=
                                                                                   w__581
                                                                                    : (mword 5 * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_546_ :=
                                                                                   string_drop
                                                                                     _stringappend_543_
                                                                                     (build_ex
                                                                                     _stringappend_545_) in
                                                                                 sep_matches_prefix
                                                                                   _stringappend_546_ >>= fun w__582 : option ((unit * {n : Z & ArithFact (n >=
                                                                                   0)})) =>
                                                                                 match w__582 with
                                                                                 | Some
                                                                                   (_stringappend_547_,(existT _ _stringappend_548_ _)) =>
                                                                                    returnm ((_stringappend_547_,
                                                                                              build_ex
                                                                                              _stringappend_548_)
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__584 : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(tt, existT _ _stringappend_548_ _) :=
                                                                                   w__584
                                                                                    : (unit * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_549_ :=
                                                                                   string_drop
                                                                                     _stringappend_546_
                                                                                     (build_ex
                                                                                     _stringappend_548_) in
                                                                                 match (csr_name_map_matches_prefix
                                                                                          _stringappend_549_) with
                                                                                 | Some
                                                                                   (_stringappend_550_,(existT _ _stringappend_551_ _)) =>
                                                                                    returnm ((_stringappend_550_,
                                                                                              build_ex
                                                                                              _stringappend_551_)
                                                                                     : (mword 12 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((mword 12 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__586 : (mword 12 * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(csr, existT _ _stringappend_551_ _) :=
                                                                                   w__586
                                                                                    : (mword 12 * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 returnm ((match (string_drop
                                                                                                    _stringappend_549_
                                                                                                    (build_ex
                                                                                                    _stringappend_551_)) with
                                                                                           | s_ =>
                                                                                              Some (CSR (csr,rs1,rd,false,op),
                                                                                                    sub_nat
                                                                                                      (string_length
                                                                                                         arg_)
                                                                                                      (string_length
                                                                                                         s_))
                                                                                           end)
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)})))
                                                                               else if ((andb
                                                                                           (string_startswith
                                                                                              _stringappend_0_
                                                                                              "illegal")
                                                                                           (let _stringappend_553_ :=
                                                                                             string_drop
                                                                                               _stringappend_0_
                                                                                               (string_length
                                                                                                  "illegal") in
                                                                                           if ((match (spc_matches_prefix
                                                                                                         _stringappend_553_) with
                                                                                                | Some
                                                                                                  (_stringappend_554_,(existT _ _stringappend_555_ _)) =>
                                                                                                   let _stringappend_556_ :=
                                                                                                     string_drop
                                                                                                       _stringappend_553_
                                                                                                       (build_ex
                                                                                                       _stringappend_555_) in
                                                                                                   if
                                                                                                     ((match (hex_bits_32_matches_prefix
                                                                                                                _stringappend_556_) with
                                                                                                       | Some
                                                                                                         (_stringappend_557_,(existT _ _stringappend_558_ _)) =>
                                                                                                          match (string_drop
                                                                                                                   _stringappend_556_
                                                                                                                   (build_ex
                                                                                                                   _stringappend_558_)) with
                                                                                                          | s_ =>
                                                                                                             true
                                                                                                          end
                                                                                                       | None =>
                                                                                                          false
                                                                                                       end))
                                                                                                   then
                                                                                                     true
                                                                                                   else
                                                                                                     false
                                                                                                | None =>
                                                                                                   false
                                                                                                end))
                                                                                           then
                                                                                             true
                                                                                           else
                                                                                             false)))
                                                                               then
                                                                                 let _stringappend_553_ :=
                                                                                   string_drop
                                                                                     _stringappend_0_
                                                                                     (string_length
                                                                                        "illegal") in
                                                                                 match (spc_matches_prefix
                                                                                          _stringappend_553_) with
                                                                                 | Some
                                                                                   (_stringappend_554_,(existT _ _stringappend_555_ _)) =>
                                                                                    returnm ((_stringappend_554_,
                                                                                              build_ex
                                                                                              _stringappend_555_)
                                                                                     : (unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((unit * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__588 : (unit * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(tt, existT _ _stringappend_555_ _) :=
                                                                                   w__588
                                                                                    : (unit * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 let _stringappend_556_ :=
                                                                                   string_drop
                                                                                     _stringappend_553_
                                                                                     (build_ex
                                                                                     _stringappend_555_) in
                                                                                 match (hex_bits_32_matches_prefix
                                                                                          _stringappend_556_) with
                                                                                 | Some
                                                                                   (_stringappend_557_,(existT _ _stringappend_558_ _)) =>
                                                                                    returnm ((_stringappend_557_,
                                                                                              build_ex
                                                                                              _stringappend_558_)
                                                                                     : (mword 32 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 | _ =>
                                                                                    exit tt
                                                                                     : M ((mword 32 * {n : Z & ArithFact (n >=
                                                                                      0)}))
                                                                                 end >>= fun w__590 : (mword 32 * {n : Z & ArithFact (n >=
                                                                                   0)}) =>
                                                                                 let '(s, existT _ _stringappend_558_ _) :=
                                                                                   w__590
                                                                                    : (mword 32 * {n : Z & ArithFact (n >=
                                                                                     0)}) in
                                                                                 returnm ((match (string_drop
                                                                                                    _stringappend_556_
                                                                                                    (build_ex
                                                                                                    _stringappend_558_)) with
                                                                                           | s_ =>
                                                                                              Some (ILLEGAL s,
                                                                                                    sub_nat
                                                                                                      (string_length
                                                                                                         arg_)
                                                                                                      (string_length
                                                                                                         s_))
                                                                                           end)
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)})))
                                                                               else
                                                                                 returnm (None
                                                                                  : option ((ast * {n : Z & ArithFact (n >=
                                                                                   0)}))))
                                                                               : M (option ((ast * {n : Z & ArithFact (n >=
                                                                                0)}))))
                                                                            : M (option ((ast * {n : Z & ArithFact (n >=
                                                                             0)}))))
                                                                         : M (option ((ast * {n : Z & ArithFact (n >=
                                                                          0)}))))
                                                                      : M (option ((ast * {n : Z & ArithFact (n >=
                                                                       0)}))))
                                                                   : M (option ((ast * {n : Z & ArithFact (n >=
                                                                    0)}))))
                                                                : M (option ((ast * {n : Z & ArithFact (n >=
                                                                 0)}))))
                                                             : M (option ((ast * {n : Z & ArithFact (n >=
                                                              0)}))))
                                                          : M (option ((ast * {n : Z & ArithFact (n >=
                                                           0)}))))
                                                       : M (option ((ast * {n : Z & ArithFact (n >=
                                                        0)}))))
                                                    : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                                 : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                              : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                           : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                        : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                     : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                                  : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                               : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                            : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                         : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                      : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                   : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
                : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
             : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
          : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
       : M (option ((ast * {n : Z & ArithFact (n >= 0)}))))
    : M (option ((ast * {n : Z & ArithFact (n >= 0)}))).
*)
Definition encdec_forwards (arg_ : ast) 
: M (mword 32) :=
   (match arg_ with
    | UTYPE (imm,rd,op) =>
       returnm ((concat_vec (imm  : mword 20) (concat_vec (rd  : mword 5) (encdec_uop_forwards op)))
        : mword 32)
    | RISCV_JAL (v__172,rd) =>
       let imm_19 : bits 1 := subrange_vec_dec v__172 20 20 in
       let imm_7_0 : bits 8 := subrange_vec_dec v__172 19 12 in
       let imm_8 : bits 1 := subrange_vec_dec v__172 11 11 in
       let imm_18_13 : bits 6 := subrange_vec_dec v__172 10 5 in
       let imm_12_9 : bits 4 := subrange_vec_dec v__172 4 1 in
       returnm ((concat_vec (imm_19  : bits 1)
                   (concat_vec (imm_18_13  : bits 6)
                      (concat_vec (imm_12_9  : bits 4)
                         (concat_vec (imm_8  : bits 1)
                            (concat_vec (imm_7_0  : bits 8)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7)))))))
        : mword 32)
    | RISCV_JALR (imm,rs1,rd) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7)))))
        : mword 32)
    | BTYPE (v__173,rs2,rs1,op) =>
       let imm7_6 : bits 1 := subrange_vec_dec v__173 12 12 in
       let imm5_0 : bits 1 := subrange_vec_dec v__173 11 11 in
       let imm7_5_0 : bits 6 := subrange_vec_dec v__173 10 5 in
       let imm5_4_1 : bits 4 := subrange_vec_dec v__173 4 1 in
       returnm ((concat_vec (imm7_6  : bits 1)
                   (concat_vec (imm7_5_0  : bits 6)
                      (concat_vec (rs2  : mword 5)
                         (concat_vec (rs1  : mword 5)
                            (concat_vec (encdec_bop_forwards op)
                               (concat_vec (imm5_4_1  : bits 4)
                                  (concat_vec (imm5_0  : bits 1)
                                     (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7))))))))
        : mword 32)
    | ITYPE (imm,rs1,rd,op) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (encdec_iop_forwards op)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword 32)
    | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6)
                   (concat_vec (shamt  : mword 6)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_ADD) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SUB) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SLL) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SLT) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SLTU) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B1;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_XOR) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SRL) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_SRA) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_OR) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPE (rs2,rs1,rd,RISCV_AND) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | LOAD (imm,rs1,rd,is_unsigned,size,false,false) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (bool_bits_forwards is_unsigned)
                         (concat_vec (size_bits_forwards size)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | STORE (v__174,rs2,rs1,size,false,false) =>
       let imm7 : bits 7 := subrange_vec_dec v__174 11 5 in
       let imm5 : bits 5 := subrange_vec_dec v__174 4 0 in
       returnm ((concat_vec (imm7  : bits 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0]  : mword 1)
                            (concat_vec (size_bits_forwards size)
                               (concat_vec (imm5  : bits 5)
                                  (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | ADDIW (imm,rs1,rd) =>
       returnm ((concat_vec (imm  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (rd  : mword 5) (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7)))))
        : mword 32)
    | SHIFTW (shamt,rs1,rd,RISCV_SLLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTW (shamt,rs1,rd,RISCV_SRLI) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTW (shamt,rs1,rd,RISCV_SRAI) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPEW (rs2,rs1,rd,RISCV_ADDW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPEW (rs2,rs1,rd,RISCV_SUBW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPEW (rs2,rs1,rd,RISCV_SLLW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPEW (rs2,rs1,rd,RISCV_SRLW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | RTYPEW (rs2,rs1,rd,RISCV_SRAW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SLLIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SRLIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SHIFTIWOP (shamt,rs1,rd,RISCV_SRAIW) =>
       returnm ((concat_vec (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)
                   (concat_vec (shamt  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0;B1]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | MUL (rs2,rs1,rd,high,signed1,signed2) =>
       encdec_mul_op_forwards high signed1 signed2 >>= fun w__0 : bits 3 =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (w__0  : bits 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | DIV (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | REM (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | MULW (rs2,rs1,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | DIVW (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B0]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | REMW (rs2,rs1,rd,s) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B1;B1]  : mword 2)
                            (concat_vec (bool_not_bits_forwards s)
                               (concat_vec (rd  : mword 5)
                                  (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))))))
        : mword 32)
    | FENCE (pred,succ) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0]  : mword 4)
                   (concat_vec (pred  : mword 4)
                      (concat_vec (succ  : mword 4)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                               (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                                  (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7)))))))
        : mword 32)
    | FENCEI (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B1]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7)))))
        : mword 32)
    | ECALL (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword 32)
    | MRET (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  : mword 7)
                   (concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | SRET (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  : mword 7)
                   (concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | EBREAK (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword 32)
    | WFI (tt) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                      (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))))
        : mword 32)
    | SFENCE_VMA (rs1,rs2) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7)
                   (concat_vec (rs2  : mword 5)
                      (concat_vec (rs1  : mword 5)
                         (concat_vec (vec_of_bits [B0;B0;B0]  : mword 3)
                            (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | LOADRES (aq,rl,rs1,size,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword 32)
    | STORECON (aq,rl,rs2,rs1,size,rd) =>
       returnm ((concat_vec (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (rs2  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword 32)
    | AMO (op,aq,rl,rs2,rs1,size,rd) =>
       returnm ((concat_vec (encdec_amoop_forwards op)
                   (concat_vec (bool_bits_forwards aq)
                      (concat_vec (bool_bits_forwards rl)
                         (concat_vec (rs2  : mword 5)
                            (concat_vec (rs1  : mword 5)
                               (concat_vec (vec_of_bits [B0]  : mword 1)
                                  (concat_vec (size_bits_forwards size)
                                     (concat_vec (rd  : mword 5)
                                        (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))))))))
        : mword 32)
    | CSR (csr,rs1,rd,is_imm,op) =>
       returnm ((concat_vec (csr  : mword 12)
                   (concat_vec (rs1  : mword 5)
                      (concat_vec (bool_bits_forwards is_imm)
                         (concat_vec (encdec_csrop_forwards op)
                            (concat_vec (rd  : mword 5)
                               (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))))))
        : mword 32)
    | STOP_FETCHING (tt) =>
       returnm ((concat_vec
                   (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)
                      (concat_vec (vec_of_bits [B0]  : mword 1)
                         (concat_vec (vec_of_bits [B0;B0]  : mword 2)
                            (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                               (vec_of_bits [B1;B1]  : mword 2))))))
        : mword 32)
    | THREAD_START (tt) =>
       returnm ((concat_vec
                   (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16)
                   (concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)
                      (concat_vec (vec_of_bits [B0]  : mword 1)
                         (concat_vec (vec_of_bits [B0;B0]  : mword 2)
                            (concat_vec (vec_of_bits [B0;B1;B0]  : mword 3)
                               (vec_of_bits [B1;B1]  : mword 2))))))
        : mword 32)
    | ILLEGAL (s) => returnm (s  : mword 32)
    | _ => exit tt  : M (mword 32)
    end)
    : M (mword 32).

Definition encdec_backwards (arg_ : mword 32) 
: ast :=
   let v__175 := arg_ in
   if ((let _mappingpatterns_23_ := subrange_vec_dec v__175 6 0 in
     encdec_uop_backwards_matches _mappingpatterns_23_)) then
     let imm : mword 20 := subrange_vec_dec v__175 31 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let _mappingpatterns_23_ := subrange_vec_dec v__175 6 0 in
     let op := encdec_uop_backwards _mappingpatterns_23_ in
     UTYPE (imm,rd,op)
   else if ((let p0_ := subrange_vec_dec v__175 6 0 in
     eq_vec p0_ (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7))) then
     let imm_19 : bits 1 := subrange_vec_dec v__175 31 31 in
     let imm_18_13 : bits 6 := subrange_vec_dec v__175 30 25 in
     let imm_12_9 : bits 4 := subrange_vec_dec v__175 24 21 in
     let imm_8 : bits 1 := subrange_vec_dec v__175 20 20 in
     let imm_7_0 : bits 8 := subrange_vec_dec v__175 19 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RISCV_JAL (concat_vec (imm_19  : bits 1)
                  (concat_vec (imm_7_0  : bits 8)
                     (concat_vec (imm_8  : bits 1)
                        (concat_vec (imm_18_13  : bits 6)
                           (concat_vec (imm_12_9  : bits 4) (vec_of_bits [B0]  : mword 1))))),rd)
   else if ((let p0_ := subrange_vec_dec v__175 14 12 in
     let p1_ := subrange_vec_dec v__175 6 0 in
     andb (eq_vec p1_ (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3)))) then
     let imm : mword 12 := subrange_vec_dec v__175 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RISCV_JALR (imm,rs1,rd)
   else if ((let _mappingpatterns_24_ := subrange_vec_dec v__175 14 12 in
     let p0_ := subrange_vec_dec v__175 6 0 in
     andb (encdec_bop_backwards_matches _mappingpatterns_24_)
       (eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7)))) then
     let imm7_6 : bits 1 := subrange_vec_dec v__175 31 31 in
     let imm7_5_0 : bits 6 := subrange_vec_dec v__175 30 25 in
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_24_ := subrange_vec_dec v__175 14 12 in
     let imm5_4_1 : bits 4 := subrange_vec_dec v__175 11 8 in
     let imm5_0 : bits 1 := subrange_vec_dec v__175 7 7 in
     let op := encdec_bop_backwards _mappingpatterns_24_ in
     BTYPE (concat_vec (imm7_6  : bits 1)
              (concat_vec (imm5_0  : bits 1)
                 (concat_vec (imm7_5_0  : bits 6)
                    (concat_vec (imm5_4_1  : bits 4) (vec_of_bits [B0]  : mword 1)))),rs2,rs1,op)
   else if ((let _mappingpatterns_25_ := subrange_vec_dec v__175 14 12 in
     let p0_ := subrange_vec_dec v__175 6 0 in
     andb (encdec_iop_backwards_matches _mappingpatterns_25_)
       (eq_vec p0_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7)))) then
     let imm : mword 12 := subrange_vec_dec v__175 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_25_ := subrange_vec_dec v__175 14 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let op := encdec_iop_backwards _mappingpatterns_25_ in
     ITYPE (imm,rs1,rd,op)
   else if ((let p0_ := subrange_vec_dec v__175 31 26 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)))) then
     let shamt : mword 6 := subrange_vec_dec v__175 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIOP (shamt,rs1,rd,RISCV_SLLI)
   else if ((let p0_ := subrange_vec_dec v__175 31 26 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)))) then
     let shamt : mword 6 := subrange_vec_dec v__175 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRLI)
   else if ((let p0_ := subrange_vec_dec v__175 31 26 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6)))) then
     let shamt : mword 6 := subrange_vec_dec v__175 25 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRAI)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_ADD)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SUB)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SLL)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B1;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SLT)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B1;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SLTU)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_XOR)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SRL)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_SRA)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B1;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_OR)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B1;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPE (rs2,rs1,rd,RISCV_AND)
   else if ((let _mappingpatterns_26_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_27_ := subrange_vec_dec v__175 13 12 in
     let p0_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (size_bits_backwards_matches _mappingpatterns_27_)
          (bool_bits_backwards_matches _mappingpatterns_26_))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7)))) then
     let imm : mword 12 := subrange_vec_dec v__175 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_26_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_27_ := subrange_vec_dec v__175 13 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let size := size_bits_backwards _mappingpatterns_27_ in
     let is_unsigned := bool_bits_backwards _mappingpatterns_26_ in
     LOAD (imm,rs1,rd,is_unsigned,size,false,false)
   else if ((let p0_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_28_ := subrange_vec_dec v__175 13 12 in
     let p1_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (size_bits_backwards_matches _mappingpatterns_28_)
          (eq_vec p1_ (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0]  : mword 1)))) then
     let imm7 : bits 7 := subrange_vec_dec v__175 31 25 in
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_28_ := subrange_vec_dec v__175 13 12 in
     let imm5 : bits 5 := subrange_vec_dec v__175 11 7 in
     let size := size_bits_backwards _mappingpatterns_28_ in
     STORE (concat_vec (imm7  : bits 7) (imm5  : bits 5),rs2,rs1,size,false,false)
   else if ((let p0_ := subrange_vec_dec v__175 14 12 in
     let p1_ := subrange_vec_dec v__175 6 0 in
     andb (eq_vec p1_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3)))) then
     let imm : mword 12 := subrange_vec_dec v__175 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     ADDIW (imm,rs1,rd)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTW (shamt,rs1,rd,RISCV_SLLI)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTW (shamt,rs1,rd,RISCV_SRLI)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTW (shamt,rs1,rd,RISCV_SRAI)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPEW (rs2,rs1,rd,RISCV_ADDW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPEW (rs2,rs1,rd,RISCV_SUBW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPEW (rs2,rs1,rd,RISCV_SLLW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPEW (rs2,rs1,rd,RISCV_SRLW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     RTYPEW (rs2,rs1,rd,RISCV_SRAW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIWOP (shamt,rs1,rd,RISCV_SLLIW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIWOP (shamt,rs1,rd,RISCV_SRLIW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     let shamt : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     SHIFTIWOP (shamt,rs1,rd,RISCV_SRAIW)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let _mappingpatterns_29_ : bits 3 := subrange_vec_dec v__175 14 12 in
     let p1_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (encdec_mul_op_backwards_matches _mappingpatterns_29_)
          (eq_vec p1_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_29_ : bits 3 := subrange_vec_dec v__175 14 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_29_ in
     MUL (rs2,rs1,rd,high,signed1,signed2)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 13 in
     let _mappingpatterns_30_ := subrange_vec_dec v__175 12 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_30_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B0]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_30_ := subrange_vec_dec v__175 12 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let s := bool_not_bits_backwards _mappingpatterns_30_ in
     DIV (rs2,rs1,rd,s)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 13 in
     let _mappingpatterns_31_ := subrange_vec_dec v__175 12 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_31_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B1]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_31_ := subrange_vec_dec v__175 12 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let s := bool_not_bits_backwards _mappingpatterns_31_ in
     REM (rs2,rs1,rd,s)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     MULW (rs2,rs1,rd)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 13 in
     let _mappingpatterns_32_ := subrange_vec_dec v__175 12 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_32_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B0]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_32_ := subrange_vec_dec v__175 12 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let s := bool_not_bits_backwards _mappingpatterns_32_ in
     DIVW (rs2,rs1,rd,s)
   else if ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 13 in
     let _mappingpatterns_33_ := subrange_vec_dec v__175 12 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_33_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B1]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_33_ := subrange_vec_dec v__175 12 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let s := bool_not_bits_backwards _mappingpatterns_33_ in
     REMW (rs2,rs1,rd,s)
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 28 in
     let p1_ := subrange_vec_dec v__175 19 15 in
     let p2_ := subrange_vec_dec v__175 14 12 in
     let p3_ := subrange_vec_dec v__175 11 7 in
     let p4_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0]  : mword 4)))) then
     let pred : mword 4 := subrange_vec_dec v__175 27 24 in
     let succ : mword 4 := subrange_vec_dec v__175 23 20 in
     FENCE (pred,succ)
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 20 in
     let p1_ := subrange_vec_dec v__175 19 15 in
     let p2_ := subrange_vec_dec v__175 14 12 in
     let p3_ := subrange_vec_dec v__175 11 7 in
     let p4_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B1]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)))) then
     FENCEI tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 20 in
     let p1_ := subrange_vec_dec v__175 19 15 in
     let p2_ := subrange_vec_dec v__175 14 12 in
     let p3_ := subrange_vec_dec v__175 11 7 in
     let p4_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)))) then
     ECALL tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 24 20 in
     let p2_ := subrange_vec_dec v__175 19 15 in
     let p3_ := subrange_vec_dec v__175 14 12 in
     let p4_ := subrange_vec_dec v__175 11 7 in
     let p5_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                   (Z.eqb
                      (projT1 ((regbits_to_regno p4_)
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                      (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
                (eq_vec p3_ (vec_of_bits [B0;B0;B0]  : mword 3)))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  : mword 7)))) then
     MRET tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 24 20 in
     let p2_ := subrange_vec_dec v__175 19 15 in
     let p3_ := subrange_vec_dec v__175 14 12 in
     let p4_ := subrange_vec_dec v__175 11 7 in
     let p5_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                   (Z.eqb
                      (projT1 ((regbits_to_regno p4_)
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                      (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
                (eq_vec p3_ (vec_of_bits [B0;B0;B0]  : mword 3)))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  : mword 7)))) then
     SRET tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 20 in
     let p1_ := subrange_vec_dec v__175 19 15 in
     let p2_ := subrange_vec_dec v__175 14 12 in
     let p3_ := subrange_vec_dec v__175 11 7 in
     let p4_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)))) then
     EBREAK tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 20 in
     let p1_ := subrange_vec_dec v__175 19 15 in
     let p2_ := subrange_vec_dec v__175 14 12 in
     let p3_ := subrange_vec_dec v__175 11 7 in
     let p4_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)))) then
     WFI tt
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 25 in
     let p1_ := subrange_vec_dec v__175 14 12 in
     let p2_ := subrange_vec_dec v__175 11 7 in
     let p3_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb (eq_vec p3_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7)))) then
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     SFENCE_VMA (rs1,rs2)
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 27 in
     let _mappingpatterns_34_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_35_ := subrange_vec_dec v__175 25 25 in
     let p1_ := subrange_vec_dec v__175 24 20 in
     let p2_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_36_ := subrange_vec_dec v__175 13 12 in
     let p3_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb
                   (andb (size_bits_backwards_matches _mappingpatterns_36_)
                      (bool_bits_backwards_matches _mappingpatterns_35_))
                   (bool_bits_backwards_matches _mappingpatterns_34_))
                (eq_vec p3_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (Z.eqb (projT1 ((regbits_to_regno p0_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
     let _mappingpatterns_34_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_35_ := subrange_vec_dec v__175 25 25 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_36_ := subrange_vec_dec v__175 13 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let size := size_bits_backwards _mappingpatterns_36_ in
     let rl := bool_bits_backwards _mappingpatterns_35_ in
     let aq := bool_bits_backwards _mappingpatterns_34_ in
     LOADRES (aq,rl,rs1,size,rd)
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__175 31 27 in
     let _mappingpatterns_37_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_38_ := subrange_vec_dec v__175 25 25 in
     let p1_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_39_ := subrange_vec_dec v__175 13 12 in
     let p2_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (size_bits_backwards_matches _mappingpatterns_39_)
                   (bool_bits_backwards_matches _mappingpatterns_38_))
                (bool_bits_backwards_matches _mappingpatterns_37_))
             (eq_vec p2_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B0]  : mword 1)))
       (Z.eqb (projT1 ((regbits_to_regno p0_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5))
           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
     let _mappingpatterns_37_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_38_ := subrange_vec_dec v__175 25 25 in
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_39_ := subrange_vec_dec v__175 13 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let size := size_bits_backwards _mappingpatterns_39_ in
     let rl := bool_bits_backwards _mappingpatterns_38_ in
     let aq := bool_bits_backwards _mappingpatterns_37_ in
     STORECON (aq,rl,rs2,rs1,size,rd)
   else if ((let _mappingpatterns_40_ := subrange_vec_dec v__175 31 27 in
     let _mappingpatterns_41_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_42_ := subrange_vec_dec v__175 25 25 in
     let p0_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_43_ := subrange_vec_dec v__175 13 12 in
     let p1_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (size_bits_backwards_matches _mappingpatterns_43_)
                   (bool_bits_backwards_matches _mappingpatterns_42_))
                (bool_bits_backwards_matches _mappingpatterns_41_))
             (encdec_amoop_backwards_matches _mappingpatterns_40_))
          (eq_vec p1_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0]  : mword 1)))) then
     let _mappingpatterns_40_ := subrange_vec_dec v__175 31 27 in
     let _mappingpatterns_41_ := subrange_vec_dec v__175 26 26 in
     let _mappingpatterns_42_ := subrange_vec_dec v__175 25 25 in
     let rs2 : mword 5 := subrange_vec_dec v__175 24 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_43_ := subrange_vec_dec v__175 13 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let size := size_bits_backwards _mappingpatterns_43_ in
     let rl := bool_bits_backwards _mappingpatterns_42_ in
     let aq := bool_bits_backwards _mappingpatterns_41_ in
     let op := encdec_amoop_backwards _mappingpatterns_40_ in
     AMO (op,aq,rl,rs2,rs1,size,rd)
   else if ((let _mappingpatterns_44_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_45_ := subrange_vec_dec v__175 13 12 in
     let p0_ := subrange_vec_dec v__175 6 0 in
     andb
       (andb (encdec_csrop_backwards_matches _mappingpatterns_45_)
          (bool_bits_backwards_matches _mappingpatterns_44_))
       (eq_vec p0_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))) then
     let csr : mword 12 := subrange_vec_dec v__175 31 20 in
     let rs1 : mword 5 := subrange_vec_dec v__175 19 15 in
     let _mappingpatterns_44_ := subrange_vec_dec v__175 14 14 in
     let _mappingpatterns_45_ := subrange_vec_dec v__175 13 12 in
     let rd : mword 5 := subrange_vec_dec v__175 11 7 in
     let op := encdec_csrop_backwards _mappingpatterns_45_ in
     let is_imm := bool_bits_backwards _mappingpatterns_44_ in
     CSR (csr,rs1,rd,is_imm,op)
   else if ((let p0_ := subrange_vec_dec v__175 31 16 in
     let p1_ := subrange_vec_dec v__175 15 8 in
     let p2_ := subrange_vec_dec v__175 7 7 in
     let p3_ := subrange_vec_dec v__175 6 5 in
     let p4_ := subrange_vec_dec v__175 4 2 in
     let p5_ := subrange_vec_dec v__175 1 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec p4_ (vec_of_bits [B0;B1;B0]  : mword 3)))
                (eq_vec p3_ (vec_of_bits [B0;B0]  : mword 2)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)))
       (eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16))))
   then
     STOP_FETCHING tt
   else if ((let p0_ := subrange_vec_dec v__175 31 16 in
     let p1_ := subrange_vec_dec v__175 15 8 in
     let p2_ := subrange_vec_dec v__175 7 7 in
     let p3_ := subrange_vec_dec v__175 6 5 in
     let p4_ := subrange_vec_dec v__175 4 2 in
     let p5_ := subrange_vec_dec v__175 1 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec p4_ (vec_of_bits [B0;B1;B0]  : mword 3)))
                (eq_vec p3_ (vec_of_bits [B0;B0]  : mword 2)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)))
       (eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16))))
   then
     THREAD_START tt
   else ILLEGAL v__175.

Definition encdec_forwards_matches (arg_ : ast) 
: bool :=
   match arg_ with
   | UTYPE (imm,rd,op) => true
   | RISCV_JAL (v__227,rd) =>
      if ((let p0_ := subrange_vec_dec v__227 0 0 in
        eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then
        true
      else
        let g__17 := RISCV_JAL (v__227,rd) in
        false
   | RISCV_JALR (imm,rs1,rd) => true
   | BTYPE (v__228,rs2,rs1,op) =>
      if ((let p0_ := subrange_vec_dec v__228 0 0 in
        eq_vec p0_ (vec_of_bits [B0]  : mword 1))) then
        true
      else
        let g__17 := BTYPE (v__228,rs2,rs1,op) in
        false
   | ITYPE (imm,rs1,rd,op) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SLLI) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRLI) => true
   | SHIFTIOP (shamt,rs1,rd,RISCV_SRAI) => true
   | RTYPE (rs2,rs1,rd,RISCV_ADD) => true
   | RTYPE (rs2,rs1,rd,RISCV_SUB) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLL) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLT) => true
   | RTYPE (rs2,rs1,rd,RISCV_SLTU) => true
   | RTYPE (rs2,rs1,rd,RISCV_XOR) => true
   | RTYPE (rs2,rs1,rd,RISCV_SRL) => true
   | RTYPE (rs2,rs1,rd,RISCV_SRA) => true
   | RTYPE (rs2,rs1,rd,RISCV_OR) => true
   | RTYPE (rs2,rs1,rd,RISCV_AND) => true
   | LOAD (imm,rs1,rd,is_unsigned,size,false,false) => true
   | STORE (v__229,rs2,rs1,size,false,false) => true
   | ADDIW (imm,rs1,rd) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SLLI) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SRLI) => true
   | SHIFTW (shamt,rs1,rd,RISCV_SRAI) => true
   | RTYPEW (rs2,rs1,rd,RISCV_ADDW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SUBW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SLLW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SRLW) => true
   | RTYPEW (rs2,rs1,rd,RISCV_SRAW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SLLIW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SRLIW) => true
   | SHIFTIWOP (shamt,rs1,rd,RISCV_SRAIW) => true
   | MUL (rs2,rs1,rd,high,signed1,signed2) => true
   | DIV (rs2,rs1,rd,s) => true
   | REM (rs2,rs1,rd,s) => true
   | MULW (rs2,rs1,rd) => true
   | DIVW (rs2,rs1,rd,s) => true
   | REMW (rs2,rs1,rd,s) => true
   | FENCE (pred,succ) => true
   | FENCEI (tt) => true
   | ECALL (tt) => true
   | MRET (tt) => true
   | SRET (tt) => true
   | EBREAK (tt) => true
   | WFI (tt) => true
   | SFENCE_VMA (rs1,rs2) => true
   | LOADRES (aq,rl,rs1,size,rd) => true
   | STORECON (aq,rl,rs2,rs1,size,rd) => true
   | AMO (op,aq,rl,rs2,rs1,size,rd) => true
   | CSR (csr,rs1,rd,is_imm,op) => true
   | STOP_FETCHING (tt) => true
   | THREAD_START (tt) => true
   | ILLEGAL (s) => true
   | g__17 => false
   end.

Definition encdec_backwards_matches (arg_ : mword 32) 
: bool :=
   let v__230 := arg_ in
   if ((let _mappingpatterns_0_ := subrange_vec_dec v__230 6 0 in
     encdec_uop_backwards_matches _mappingpatterns_0_)) then
     let _mappingpatterns_0_ := subrange_vec_dec v__230 6 0 in
     let op := encdec_uop_backwards _mappingpatterns_0_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 6 0 in
     eq_vec p0_ (vec_of_bits [B1;B1;B0;B1;B1;B1;B1]  : mword 7))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 14 12 in
     let p1_ := subrange_vec_dec v__230 6 0 in
     andb (eq_vec p1_ (vec_of_bits [B1;B1;B0;B0;B1;B1;B1]  : mword 7))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3)))) then
     true
   else if ((let _mappingpatterns_1_ := subrange_vec_dec v__230 14 12 in
     let p0_ := subrange_vec_dec v__230 6 0 in
     andb (encdec_bop_backwards_matches _mappingpatterns_1_)
       (eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B1;B1]  : mword 7)))) then
     let _mappingpatterns_1_ := subrange_vec_dec v__230 14 12 in
     let op := encdec_bop_backwards _mappingpatterns_1_ in
     true
   else if ((let _mappingpatterns_2_ := subrange_vec_dec v__230 14 12 in
     let p0_ := subrange_vec_dec v__230 6 0 in
     andb (encdec_iop_backwards_matches _mappingpatterns_2_)
       (eq_vec p0_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7)))) then
     let _mappingpatterns_2_ := subrange_vec_dec v__230 14 12 in
     let op := encdec_iop_backwards _mappingpatterns_2_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 26 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 26 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0]  : mword 6)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 26 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0]  : mword 6)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B1;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B1;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B1;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B1;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let _mappingpatterns_3_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_4_ := subrange_vec_dec v__230 13 12 in
     let p0_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (size_bits_backwards_matches _mappingpatterns_4_)
          (bool_bits_backwards_matches _mappingpatterns_3_))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B1;B1]  : mword 7)))) then
     let _mappingpatterns_3_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_4_ := subrange_vec_dec v__230 13 12 in
     let size := size_bits_backwards _mappingpatterns_4_ in
     let is_unsigned := bool_bits_backwards _mappingpatterns_3_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_5_ := subrange_vec_dec v__230 13 12 in
     let p1_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (size_bits_backwards_matches _mappingpatterns_5_)
          (eq_vec p1_ (vec_of_bits [B0;B1;B0;B0;B0;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0]  : mword 1)))) then
     let _mappingpatterns_5_ := subrange_vec_dec v__230 13 12 in
     let size := size_bits_backwards _mappingpatterns_5_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 14 12 in
     let p1_ := subrange_vec_dec v__230 6 0 in
     andb (eq_vec p1_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0]  : mword 3)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B0;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B1;B0;B1]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B1;B0;B0;B0;B0;B0]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let _mappingpatterns_6_ : bits 3 := subrange_vec_dec v__230 14 12 in
     let p1_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (encdec_mul_op_backwards_matches _mappingpatterns_6_)
          (eq_vec p1_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let _mappingpatterns_6_ : bits 3 := subrange_vec_dec v__230 14 12 in
     let '(high, signed1, signed2) := encdec_mul_op_backwards _mappingpatterns_6_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 13 in
     let _mappingpatterns_7_ := subrange_vec_dec v__230 12 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_7_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B0]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let _mappingpatterns_7_ := subrange_vec_dec v__230 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_7_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 13 in
     let _mappingpatterns_8_ := subrange_vec_dec v__230 12 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_8_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B0;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B1]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let _mappingpatterns_8_ := subrange_vec_dec v__230 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_8_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 13 in
     let _mappingpatterns_9_ := subrange_vec_dec v__230 12 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_9_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B0]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let _mappingpatterns_9_ := subrange_vec_dec v__230 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_9_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 13 in
     let _mappingpatterns_10_ := subrange_vec_dec v__230 12 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb (bool_not_bits_backwards_matches _mappingpatterns_10_)
             (eq_vec p2_ (vec_of_bits [B0;B1;B1;B1;B0;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B1;B1]  : mword 2)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B1]  : mword 7)))) then
     let _mappingpatterns_10_ := subrange_vec_dec v__230 12 12 in
     let s := bool_not_bits_backwards _mappingpatterns_10_ in
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 28 in
     let p1_ := subrange_vec_dec v__230 19 15 in
     let p2_ := subrange_vec_dec v__230 14 12 in
     let p3_ := subrange_vec_dec v__230 11 7 in
     let p4_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0]  : mword 4)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 20 in
     let p1_ := subrange_vec_dec v__230 19 15 in
     let p2_ := subrange_vec_dec v__230 14 12 in
     let p3_ := subrange_vec_dec v__230 11 7 in
     let p4_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B0;B0;B0;B1;B1;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B1]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 20 in
     let p1_ := subrange_vec_dec v__230 19 15 in
     let p2_ := subrange_vec_dec v__230 14 12 in
     let p3_ := subrange_vec_dec v__230 11 7 in
     let p4_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  : mword 12)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 24 20 in
     let p2_ := subrange_vec_dec v__230 19 15 in
     let p3_ := subrange_vec_dec v__230 14 12 in
     let p4_ := subrange_vec_dec v__230 11 7 in
     let p5_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                   (Z.eqb
                      (projT1 ((regbits_to_regno p4_)
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                      (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
                (eq_vec p3_ (vec_of_bits [B0;B0;B0]  : mword 3)))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B1;B1;B0;B0;B0]  : mword 7)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 24 20 in
     let p2_ := subrange_vec_dec v__230 19 15 in
     let p3_ := subrange_vec_dec v__230 14 12 in
     let p4_ := subrange_vec_dec v__230 11 7 in
     let p5_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                   (Z.eqb
                      (projT1 ((regbits_to_regno p4_)
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                      (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                       : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
                (eq_vec p3_ (vec_of_bits [B0;B0;B0]  : mword 3)))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0]  : mword 7)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 20 in
     let p1_ := subrange_vec_dec v__230 19 15 in
     let p2_ := subrange_vec_dec v__230 14 12 in
     let p3_ := subrange_vec_dec v__230 11 7 in
     let p4_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  : mword 12)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 20 in
     let p1_ := subrange_vec_dec v__230 19 15 in
     let p2_ := subrange_vec_dec v__230 14 12 in
     let p3_ := subrange_vec_dec v__230 11 7 in
     let p4_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb (eq_vec p4_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
                (Z.eqb
                   (projT1 ((regbits_to_regno p3_)
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                   (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                    : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
             (eq_vec p2_ (vec_of_bits [B0;B0;B0]  : mword 3)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0;B0;B1;B0;B1]  : mword 12)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 25 in
     let p1_ := subrange_vec_dec v__230 14 12 in
     let p2_ := subrange_vec_dec v__230 11 7 in
     let p3_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb (eq_vec p3_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7))
             (Z.eqb
                (projT1 ((regbits_to_regno p2_)
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
                (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
                 : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0]  : mword 3)))
       (eq_vec p0_ (vec_of_bits [B0;B0;B0;B1;B0;B0;B1]  : mword 7)))) then
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 27 in
     let _mappingpatterns_11_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_12_ := subrange_vec_dec v__230 25 25 in
     let p1_ := subrange_vec_dec v__230 24 20 in
     let p2_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_13_ := subrange_vec_dec v__230 13 12 in
     let p3_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb
                   (andb (size_bits_backwards_matches _mappingpatterns_13_)
                      (bool_bits_backwards_matches _mappingpatterns_12_))
                   (bool_bits_backwards_matches _mappingpatterns_11_))
                (eq_vec p3_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (Z.eqb (projT1 ((regbits_to_regno p1_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
             (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B0;B0]  : mword 5))
              : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))
       (Z.eqb (projT1 ((regbits_to_regno p0_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B0]  : mword 5))
           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
     let _mappingpatterns_11_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_12_ := subrange_vec_dec v__230 25 25 in
     let _mappingpatterns_13_ := subrange_vec_dec v__230 13 12 in
     let size := size_bits_backwards _mappingpatterns_13_ in
     let rl := bool_bits_backwards _mappingpatterns_12_ in
     let aq := bool_bits_backwards _mappingpatterns_11_ in
     true
   else if sumbool_of_bool ((let p0_ := subrange_vec_dec v__230 31 27 in
     let _mappingpatterns_14_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_15_ := subrange_vec_dec v__230 25 25 in
     let p1_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_16_ := subrange_vec_dec v__230 13 12 in
     let p2_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (size_bits_backwards_matches _mappingpatterns_16_)
                   (bool_bits_backwards_matches _mappingpatterns_15_))
                (bool_bits_backwards_matches _mappingpatterns_14_))
             (eq_vec p2_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
          (eq_vec p1_ (vec_of_bits [B0]  : mword 1)))
       (Z.eqb (projT1 ((regbits_to_regno p0_)  : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))
          (projT1 ((regbits_to_regno (vec_of_bits [B0;B0;B0;B1;B1]  : mword 5))
           : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)}))))) then
     let _mappingpatterns_14_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_15_ := subrange_vec_dec v__230 25 25 in
     let _mappingpatterns_16_ := subrange_vec_dec v__230 13 12 in
     let size := size_bits_backwards _mappingpatterns_16_ in
     let rl := bool_bits_backwards _mappingpatterns_15_ in
     let aq := bool_bits_backwards _mappingpatterns_14_ in
     true
   else if ((let _mappingpatterns_17_ := subrange_vec_dec v__230 31 27 in
     let _mappingpatterns_18_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_19_ := subrange_vec_dec v__230 25 25 in
     let p0_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_20_ := subrange_vec_dec v__230 13 12 in
     let p1_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb
          (andb
             (andb
                (andb (size_bits_backwards_matches _mappingpatterns_20_)
                   (bool_bits_backwards_matches _mappingpatterns_19_))
                (bool_bits_backwards_matches _mappingpatterns_18_))
             (encdec_amoop_backwards_matches _mappingpatterns_17_))
          (eq_vec p1_ (vec_of_bits [B0;B1;B0;B1;B1;B1;B1]  : mword 7)))
       (eq_vec p0_ (vec_of_bits [B0]  : mword 1)))) then
     let _mappingpatterns_17_ := subrange_vec_dec v__230 31 27 in
     let _mappingpatterns_18_ := subrange_vec_dec v__230 26 26 in
     let _mappingpatterns_19_ := subrange_vec_dec v__230 25 25 in
     let _mappingpatterns_20_ := subrange_vec_dec v__230 13 12 in
     let size := size_bits_backwards _mappingpatterns_20_ in
     let rl := bool_bits_backwards _mappingpatterns_19_ in
     let aq := bool_bits_backwards _mappingpatterns_18_ in
     let op := encdec_amoop_backwards _mappingpatterns_17_ in
     true
   else if ((let _mappingpatterns_21_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_22_ := subrange_vec_dec v__230 13 12 in
     let p0_ := subrange_vec_dec v__230 6 0 in
     andb
       (andb (encdec_csrop_backwards_matches _mappingpatterns_22_)
          (bool_bits_backwards_matches _mappingpatterns_21_))
       (eq_vec p0_ (vec_of_bits [B1;B1;B1;B0;B0;B1;B1]  : mword 7)))) then
     let _mappingpatterns_21_ := subrange_vec_dec v__230 14 14 in
     let _mappingpatterns_22_ := subrange_vec_dec v__230 13 12 in
     let op := encdec_csrop_backwards _mappingpatterns_22_ in
     let is_imm := bool_bits_backwards _mappingpatterns_21_ in
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 16 in
     let p1_ := subrange_vec_dec v__230 15 8 in
     let p2_ := subrange_vec_dec v__230 7 7 in
     let p3_ := subrange_vec_dec v__230 6 5 in
     let p4_ := subrange_vec_dec v__230 4 2 in
     let p5_ := subrange_vec_dec v__230 1 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec p4_ (vec_of_bits [B0;B1;B0]  : mword 3)))
                (eq_vec p3_ (vec_of_bits [B0;B0]  : mword 2)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)))
       (eq_vec p0_ (vec_of_bits [B1;B1;B1;B1;B1;B0;B1;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16))))
   then
     true
   else if ((let p0_ := subrange_vec_dec v__230 31 16 in
     let p1_ := subrange_vec_dec v__230 15 8 in
     let p2_ := subrange_vec_dec v__230 7 7 in
     let p3_ := subrange_vec_dec v__230 6 5 in
     let p4_ := subrange_vec_dec v__230 4 2 in
     let p5_ := subrange_vec_dec v__230 1 0 in
     andb
       (andb
          (andb
             (andb
                (andb (eq_vec p5_ (vec_of_bits [B1;B1]  : mword 2))
                   (eq_vec p4_ (vec_of_bits [B0;B1;B0]  : mword 3)))
                (eq_vec p3_ (vec_of_bits [B0;B0]  : mword 2)))
             (eq_vec p2_ (vec_of_bits [B0]  : mword 1)))
          (eq_vec p1_ (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  : mword 8)))
       (eq_vec p0_ (vec_of_bits [B1;B1;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1;B1;B1;B0]  : mword 16))))
   then
     true
   else true.

Definition print_insn (merge_var : ast) 
: M (string) :=
   match merge_var with
   | NOP (g__13) => returnm ("nop"  : string)
   | C_ADDI4SPN (rdc,nzimm) =>
      returnm ((String.append "c.addi4spn "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", " (string_of_bits nzimm))))
       : string)
   | C_LW (uimm,rsc,rdc) =>
      returnm ((String.append "c.lw   "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_LD (uimm,rsc,rdc) =>
      returnm ((String.append "c.ld   "
                  (String.append ((reg_name_abi (creg2reg_bits rdc))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_SW (uimm,rsc1,rsc2) =>
      returnm ((String.append "c.sw   "
                  (String.append ((reg_name_abi (creg2reg_bits rsc1))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc2))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_SD (uimm,rsc1,rsc2) =>
      returnm ((String.append "c.sd   "
                  (String.append ((reg_name_abi (creg2reg_bits rsc1))  : string)
                     (String.append ", "
                        (String.append ((reg_name_abi (creg2reg_bits rsc2))  : string)
                           (String.append ", " (string_of_bits uimm))))))
       : string)
   | C_ADDI (nzi,rsd) =>
      returnm ((String.append "c.addi   "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits nzi))))
       : string)
   | C_JAL (imm) => returnm ((String.append "c.jal   " (string_of_bits imm))  : string)
   | C_ADDIW (imm,rsd) =>
      returnm ((String.append "c.addiw "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_LI (imm,rd) =>
      returnm ((String.append "c.li  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_ADDI16SP (imm) => returnm ((String.append "c.addi16sp  " (string_of_bits imm))  : string)
   | C_LUI (imm,rd) =>
      returnm ((String.append "c.lui  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SRLI (shamt,rsd) =>
      returnm ((String.append "c.srli  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_SRAI (shamt,rsd) =>
      returnm ((String.append "c.srai  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_ANDI (imm,rsd) =>
      returnm ((String.append "c.andi  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SUB (rsd,rs2) =>
      returnm ((String.append "c.sub  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_XOR (rsd,rs2) =>
      returnm ((String.append "c.xor  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_OR (rsd,rs2) =>
      returnm ((String.append "c.or   "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_AND (rsd,rs2) =>
      returnm ((String.append "c.and  "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_SUBW (rsd,rs2) =>
      returnm ((String.append "c.subw "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_ADDW (rsd,rs2) =>
      returnm ((String.append "c.addw "
                  (String.append ((reg_name_abi (creg2reg_bits rsd))  : string)
                     (String.append ", " ((reg_name_abi (creg2reg_bits rs2))  : string))))
       : string)
   | C_J (imm) => returnm ((String.append "c.j    " (string_of_bits imm))  : string)
   | C_BEQZ (imm,rs) =>
      returnm ((String.append "c.beqz "
                  (String.append ((reg_name_abi (creg2reg_bits rs))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_BNEZ (imm,rs) =>
      returnm ((String.append "c.bnez "
                  (String.append ((reg_name_abi (creg2reg_bits rs))  : string)
                     (String.append ", " (string_of_bits imm))))
       : string)
   | C_SLLI (shamt,rsd) =>
      returnm ((String.append "c.slli "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " (string_of_bits shamt))))
       : string)
   | C_LWSP (uimm,rd) =>
      returnm ((String.append "c.lwsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_LDSP (uimm,rd) =>
      returnm ((String.append "c.ldsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_SWSP (uimm,rd) =>
      returnm ((String.append "c.swsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_SDSP (uimm,rd) =>
      returnm ((String.append "c.sdsp "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " (string_of_bits uimm))))
       : string)
   | C_JR (rs1) => returnm ((String.append "c.jr  " ((reg_name_abi rs1)  : string))  : string)
   | C_JALR (rs1) => returnm ((String.append "c.jalr  " ((reg_name_abi rs1)  : string))  : string)
   | C_MV (rd,rs2) =>
      returnm ((String.append "c.mv  "
                  (String.append ((reg_name_abi rd)  : string)
                     (String.append ", " ((reg_name_abi rs2)  : string))))
       : string)
   | C_ADD (rsd,rs2) =>
      returnm ((String.append "c.add  "
                  (String.append ((reg_name_abi rsd)  : string)
                     (String.append ", " ((reg_name_abi rs2)  : string))))
       : string)
   | STOP_FETCHING (g__14) => returnm ("stop_fetching"  : string)
   | THREAD_START (g__15) => returnm ("thread_start"  : string)
   | ILLEGAL (s) => returnm ((String.append "illegal " (string_of_bits s))  : string)
   | C_ILLEGAL (g__16) => returnm ("c.illegal"  : string)
   | insn => (assembly_forwards insn)  : M (string)
   end.

Definition decode (bv : mword 32)  : option ast := Some (encdec_backwards bv).

Definition isRVC (h : mword 16) 
: bool :=
   negb (eq_vec (subrange_vec_dec h 1 0) (vec_of_bits [B1;B1]  : mword 2)).

Definition fetch '(tt : unit) 
: M (FetchResult) :=
   or_boolM
     ((read_reg PC_ref  : M (mword 64)) >>= fun w__0 : xlenbits =>
      cast_unit_vec (access_vec_dec w__0 0) >>= fun w__1 : mword 1 =>
      returnm ((neq_vec (w__1  : mword 1) (vec_of_bits [B0]  : mword 1))
       : bool))
     ((and_boolM
         ((read_reg PC_ref  : M (mword 64)) >>= fun w__2 : xlenbits =>
          cast_unit_vec (access_vec_dec w__2 1) >>= fun w__3 : mword 1 =>
          returnm ((neq_vec (w__3  : mword 1) (vec_of_bits [B0]  : mword 1))
           : bool)) (haveRVC tt >>= fun w__4 : bool => returnm ((negb w__4)  : bool)))
      : M (bool)) >>= fun w__6 : bool =>
   (if (w__6) then
      (read_reg PC_ref  : M (mword 64)) >>= fun w__7 : mword 64 =>
      returnm ((F_Error (E_Fetch_Addr_Align,w__7))
       : FetchResult)
    else
      (read_reg PC_ref  : M (mword 64)) >>= fun w__8 : mword 64 =>
      translateAddr w__8 Execute Instruction >>= fun w__9 : TR_Result =>
      (match w__9 with
       | TR_Failure (e) =>
          (read_reg PC_ref  : M (mword 64)) >>= fun w__10 : mword 64 =>
          returnm ((F_Error (e,w__10))
           : FetchResult)
       | TR_Address (ppclo) =>
          checked_mem_read Instruction ppclo 2 >>= fun w__11 : MemoryOpResult (mword 16) =>
          (match w__11 with
           | MemException (e) =>
              (read_reg PC_ref  : M (mword 64)) >>= fun w__12 : mword 64 =>
              returnm ((F_Error (E_Fetch_Access_Fault,w__12))
               : FetchResult)
           | MemValue (ilo) =>
              (if ((isRVC ilo)) then returnm ((F_RVC ilo)  : FetchResult)
               else
                 (read_reg PC_ref  : M (mword 64)) >>= fun w__13 : mword 64 =>
                 let PChi : xlenbits := add_vec_int w__13 2 in
                 translateAddr PChi Execute Instruction >>= fun w__14 : TR_Result =>
                 (match w__14 with
                  | TR_Failure (e) => returnm ((F_Error (e,PChi))  : FetchResult)
                  | TR_Address (ppchi) =>
                     checked_mem_read Instruction ppchi 2 >>= fun w__15 : MemoryOpResult (mword 16) =>
                     returnm ((match w__15 with
                               | MemException (e) => F_Error (E_Fetch_Access_Fault,PChi)
                               | MemValue (ihi) => F_Base (concat_vec ihi ilo)
                               end)
                      : FetchResult)
                  end)
                  : M (FetchResult))
               : M (FetchResult)
           end)
           : M (FetchResult)
       end)
       : M (FetchResult))
    : M (FetchResult).

Definition step (step_no : Z) 
: M ((bool * bool)) :=
   read_reg cur_privilege_ref >>= fun w__0 : Privilege =>
   read_reg mip_ref >>= fun w__1 : Minterrupts =>
   read_reg mie_ref >>= fun w__2 : Minterrupts =>
   read_reg mideleg_ref >>= fun w__3 : Minterrupts =>
   curInterrupt w__0 w__1 w__2 w__3 >>= fun w__4 : option ((InterruptType * Privilege)) =>
   (match w__4 with
    | Some (intr,priv) =>
       let '_ :=
         (print_bits "Handling interrupt: " ((interruptType_to_bits intr)  : mword 4))
          : unit in
       handle_interrupt intr priv >> returnm ((false, false)  : (bool * bool))
    | None =>
       fetch tt >>= fun w__5 : FetchResult =>
       (match w__5 with
        | F_Error (e,addr) =>
           handle_mem_exception addr e >> returnm ((false, false)  : (bool * bool))
        | F_RVC (h) =>
           (match (decodeCompressed h) with
            | None =>
               read_reg cur_privilege_ref >>= fun w__6 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__7 : xlenbits =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__6)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__7)
                                      (String.append " ("
                                         (String.append (string_of_bits h) ") <no-decode>")))))))))
                  : unit in
               handle_decode_exception (EXTZ 64 h) >> returnm ((false, true)  : (bool * bool))
            | Some (ast) =>
               read_reg cur_privilege_ref >>= fun w__8 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__9 : xlenbits =>
               print_insn ast >>= fun w__10 : string =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__8)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__9)
                                      (String.append " ("
                                         (String.append (string_of_bits h)
                                            (String.append ") " (w__10  : string)))))))))))
                  : unit in
               (read_reg PC_ref  : M (mword 64)) >>= fun w__11 : mword 64 =>
               write_reg nextPC_ref (add_vec_int w__11 2) >>
               execute ast >>= fun w__12 : bool => returnm ((w__12, true)  : (bool * bool))
            end)
            : M ((bool * bool))
        | F_Base (w) =>
           (match (decode w) with
            | None =>
               read_reg cur_privilege_ref >>= fun w__14 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__15 : xlenbits =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__14)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__15)
                                      (String.append " ("
                                         (String.append (string_of_bits w) ") <no-decode>")))))))))
                  : unit in
               handle_decode_exception (EXTZ 64 w) >> returnm ((false, true)  : (bool * bool))
            | Some (ast) =>
               read_reg cur_privilege_ref >>= fun w__16 : Privilege =>
               (read_reg PC_ref  : M (mword 64)) >>= fun w__17 : xlenbits =>
               print_insn ast >>= fun w__18 : string =>
               let '_ :=
                 (print_endline
                    (String.append "["
                       (String.append (string_of_int step_no)
                          (String.append "] ["
                             (String.append ((privLevel_to_str w__16)  : string)
                                (String.append "]: "
                                   (String.append (string_of_bits w__17)
                                      (String.append " ("
                                         (String.append (string_of_bits w)
                                            (String.append ") " (w__18  : string)))))))))))
                  : unit in
               (read_reg PC_ref  : M (mword 64)) >>= fun w__19 : mword 64 =>
               write_reg nextPC_ref (add_vec_int w__19 4) >>
               execute ast >>= fun w__20 : bool => returnm ((w__20, true)  : (bool * bool))
            end)
            : M ((bool * bool))
        end)
        : M ((bool * bool))
    end)
    : M ((bool * bool)).
(*
Definition loop '(tt : unit) 
: M (unit) :=
   let insns_per_tick := plat_insns_per_tick tt in
   let i : Z := 0 in
   let step_no : Z := 0 in
   (whileM (i, step_no)
     (fun varstup => let '(i, step_no) := varstup in
       read_reg htif_done_ref >>= fun w__0 : bool => returnm ((negb w__0)  : bool))
     (fun varstup => let '(i, step_no) := varstup in
       write_reg minstret_written_ref false >>
       step step_no >>= fun '(retired, stepped) =>
       (read_reg nextPC_ref  : M (mword 64)) >>= fun w__1 : xlenbits =>
       write_reg PC_ref w__1 >>
       (if (retired) then (retire_instruction tt)  : M (unit)
        else returnm (tt  : unit)) >>
       let step_no : Z :=
         if (stepped) then
           projT1 (add_range ((ex_int step_no)  : {n : Z & ArithFact (True)}) (build_ex 1))
         else step_no in
       read_reg htif_done_ref >>= fun w__2 : bool =>
       (if (w__2) then
          (read_reg htif_exit_code_ref  : M (mword 64)) >>= fun w__3 : xlenbits =>
          let '(existT _ exit_val _) := uint w__3 in
          returnm (let '_ :=
            (if sumbool_of_bool ((Z.eqb exit_val 0)) then print_endline "SUCCESS"
             else print_int "FAILURE: " exit_val)
             : unit in
          i)
        else
          let i := (projT1 (add_range ((ex_int i)  : {n : Z & ArithFact (True)}) (build_ex 1)))  : Z in
          (if sumbool_of_bool ((Z.eqb (projT1 ((ex_int i)  : {n : Z & ArithFact (True)}))
                                  insns_per_tick)) then
             tick_clock tt >> tick_platform tt >> returnm 0
           else returnm i)
           : M (Z)) >>= fun i : Z =>
       returnm (i, step_no))) >>= fun '(i, step_no) =>
   returnm (tt
    : unit).
*)
Definition read_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 11)} 
: read_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Read_plain
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Read_reserve
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Read_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Read_exclusive
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Read_exclusive_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Read_stream
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Read_RISCV_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Read_RISCV_strong_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Read_RISCV_reserved
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Read_RISCV_reserved_acquire
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked.

Definition num_of_read_kind (arg_ : read_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 11)} :=
   match arg_ with
   | Read_plain => build_ex 0
   | Read_reserve => build_ex 1
   | Read_acquire => build_ex 2
   | Read_exclusive => build_ex 3
   | Read_exclusive_acquire => build_ex 4
   | Read_stream => build_ex 5
   | Read_RISCV_acquire => build_ex 6
   | Read_RISCV_strong_acquire => build_ex 7
   | Read_RISCV_reserved => build_ex 8
   | Read_RISCV_reserved_acquire => build_ex 9
   | Read_RISCV_reserved_strong_acquire => build_ex 10
   | Read_X86_locked => build_ex 11
   end.

Definition write_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 10)} 
: write_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Write_plain
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Write_conditional
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Write_release
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Write_exclusive
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Write_exclusive_release
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Write_RISCV_release
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Write_RISCV_strong_release
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Write_RISCV_conditional
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Write_RISCV_conditional_release
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Write_RISCV_conditional_strong_release
   else Write_X86_locked.

Definition num_of_write_kind (arg_ : write_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 10)} :=
   match arg_ with
   | Write_plain => build_ex 0
   | Write_conditional => build_ex 1
   | Write_release => build_ex 2
   | Write_exclusive => build_ex 3
   | Write_exclusive_release => build_ex 4
   | Write_RISCV_release => build_ex 5
   | Write_RISCV_strong_release => build_ex 6
   | Write_RISCV_conditional => build_ex 7
   | Write_RISCV_conditional_release => build_ex 8
   | Write_RISCV_conditional_strong_release => build_ex 9
   | Write_X86_locked => build_ex 10
   end.

Definition barrier_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 22)} 
: barrier_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Barrier_Sync
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Barrier_LwSync
   else if sumbool_of_bool ((Z.eqb p0_ 2)) then Barrier_Eieio
   else if sumbool_of_bool ((Z.eqb p0_ 3)) then Barrier_Isync
   else if sumbool_of_bool ((Z.eqb p0_ 4)) then Barrier_DMB
   else if sumbool_of_bool ((Z.eqb p0_ 5)) then Barrier_DMB_ST
   else if sumbool_of_bool ((Z.eqb p0_ 6)) then Barrier_DMB_LD
   else if sumbool_of_bool ((Z.eqb p0_ 7)) then Barrier_DSB
   else if sumbool_of_bool ((Z.eqb p0_ 8)) then Barrier_DSB_ST
   else if sumbool_of_bool ((Z.eqb p0_ 9)) then Barrier_DSB_LD
   else if sumbool_of_bool ((Z.eqb p0_ 10)) then Barrier_ISB
   else if sumbool_of_bool ((Z.eqb p0_ 11)) then Barrier_MIPS_SYNC
   else if sumbool_of_bool ((Z.eqb p0_ 12)) then Barrier_RISCV_rw_rw
   else if sumbool_of_bool ((Z.eqb p0_ 13)) then Barrier_RISCV_r_rw
   else if sumbool_of_bool ((Z.eqb p0_ 14)) then Barrier_RISCV_r_r
   else if sumbool_of_bool ((Z.eqb p0_ 15)) then Barrier_RISCV_rw_w
   else if sumbool_of_bool ((Z.eqb p0_ 16)) then Barrier_RISCV_w_w
   else if sumbool_of_bool ((Z.eqb p0_ 17)) then Barrier_RISCV_w_rw
   else if sumbool_of_bool ((Z.eqb p0_ 18)) then Barrier_RISCV_rw_r
   else if sumbool_of_bool ((Z.eqb p0_ 19)) then Barrier_RISCV_r_w
   else if sumbool_of_bool ((Z.eqb p0_ 20)) then Barrier_RISCV_w_r
   else if sumbool_of_bool ((Z.eqb p0_ 21)) then Barrier_RISCV_i
   else Barrier_x86_MFENCE.
(*
Definition num_of_barrier_kind (arg_ : barrier_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 22)} :=
   match arg_ with
   | Barrier_Sync => build_ex 0
   | Barrier_LwSync => build_ex 1
   | Barrier_Eieio => build_ex 2
   | Barrier_Isync => build_ex 3
   | Barrier_DMB => build_ex 4
   | Barrier_DMB_ST => build_ex 5
   | Barrier_DMB_LD => build_ex 6
   | Barrier_DSB => build_ex 7
   | Barrier_DSB_ST => build_ex 8
   | Barrier_DSB_LD => build_ex 9
   | Barrier_ISB => build_ex 10
   | Barrier_MIPS_SYNC => build_ex 11
   | Barrier_RISCV_rw_rw => build_ex 12
   | Barrier_RISCV_r_rw => build_ex 13
   | Barrier_RISCV_r_r => build_ex 14
   | Barrier_RISCV_rw_w => build_ex 15
   | Barrier_RISCV_w_w => build_ex 16
   | Barrier_RISCV_w_rw => build_ex 17
   | Barrier_RISCV_rw_r => build_ex 18
   | Barrier_RISCV_r_w => build_ex 19
   | Barrier_RISCV_w_r => build_ex 20
   | Barrier_RISCV_i => build_ex 21
   | Barrier_x86_MFENCE => build_ex 22
   end.
*)
Definition trans_kind_of_num (arg_ : Z) `{ArithFact (0 <= arg_ /\ arg_ <= 2)} 
: trans_kind :=
   let p0_ := arg_ in
   if sumbool_of_bool ((Z.eqb p0_ 0)) then Transaction_start
   else if sumbool_of_bool ((Z.eqb p0_ 1)) then Transaction_commit
   else Transaction_abort.

Definition num_of_trans_kind (arg_ : trans_kind) 
: {e : Z & ArithFact (0 <= e /\ e <= 2)} :=
   match arg_ with
   | Transaction_start => build_ex 0
   | Transaction_commit => build_ex 1
   | Transaction_abort => build_ex 2
   end.

Let GPRstr : vec string 32 :=
vec_of_list_len ["x31";"x30";"x29";"x28";"x27";"x26";"x25";"x24";"x23";"x22";"x21";"x20";"x19";"x18";"x17";"x16";"x15";"x14";"x13";"x12";"x11";
                 "x10";"x9";"x8";"x7";"x6";"x5";"x4";"x3";"x2";"x1";"x0"].
Let CIA_fp := RFull "CIA".
Let NIA_fp := RFull "NIA".
(*
Definition initial_analysis (instr : ast) 
: M ((list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind)) :=
   let iR := []  : regfps in
   let oR := []  : regfps in
   let aR := []  : regfps in
   let ik := (IK_simple tt)  : instruction_kind in
   let Nias := [NIAFP_successor tt]  : niafps in
   let Dia := (DIAFP_none tt)  : diafp in
   match instr with
   | EBREAK (_) => returnm (Nias, aR, iR, ik, oR)
   | UTYPE (imm,rd,op) =>
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RISCV_JAL (imm,rd) =>
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let offset : bits 64 := EXTS 64 imm in
      (read_reg PC_ref  : M (mword 64)) >>= fun w__0 : mword 64 =>
      let Nias : niafps := [NIAFP_concrete_address (add_vec w__0 offset)] in
      let ik : instruction_kind := IK_branch tt in
      returnm (Nias, aR, iR, ik, oR)
   | RISCV_JALR (imm,rs,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let offset : bits 64 := EXTS 64 imm in
      let Nias : niafps := [NIAFP_indirect_address tt] in
      let ik : instruction_kind := IK_branch tt in
      returnm (Nias, aR, iR, ik, oR)
   | BTYPE (imm,rs2,rs1,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let ik := (IK_branch tt)  : instruction_kind in
      let offset : bits 64 := EXTS 64 imm in
      (read_reg PC_ref  : M (mword 64)) >>= fun w__1 : mword 64 =>
      let Nias : niafps := [NIAFP_concrete_address (add_vec w__1 offset);NIAFP_successor tt] in
      returnm (Nias, aR, iR, ik, oR)
   | ITYPE (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | SHIFTIOP (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RTYPE (rs2,rs1,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | CSR (csr,rs1,rd,is_imm,op) =>
      let isWrite : bool :=
        match op with
        | CSRRW => true
        | _ => if (is_imm) then neq_int (projT1 (uint rs1)) 0 else neq_int (projT1 (uint rs1)) 0
        end in
      let iR : regfps := (RFull (csr_name csr)) :: iR in
      let iR : regfps :=
        if ((negb is_imm)) then
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR
        else iR in
      let oR : regfps := if (isWrite) then (RFull (csr_name csr)) :: oR else oR in
      let oR : regfps :=
        (RFull (vec_access_dec GPRstr
                  (projT1 ((regbits_to_regno rd)
                   : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
          oR in
      returnm (Nias, aR, iR, ik, oR)
   | LOAD (imm,rs,rd,unsign,width,aq,rl) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let aR := iR  : regfps in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_read Read_plain)  : instruction_kind)
      | (true, false) => returnm ((IK_mem_read Read_RISCV_acquire)  : instruction_kind)
      | (true, true) => returnm ((IK_mem_read Read_RISCV_strong_acquire)  : instruction_kind)
      | _ =>
         (internal_error "LOAD type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__3 : instruction_kind =>
      let ik : instruction_kind := w__3 in
      returnm (Nias, aR, iR, ik, oR)
   | STORE (imm,rs2,rs1,width,aq,rl) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_write Write_plain)  : instruction_kind)
      | (false, true) => returnm ((IK_mem_write Write_RISCV_release)  : instruction_kind)
      | (true, true) => returnm ((IK_mem_write Write_RISCV_strong_release)  : instruction_kind)
      | _ =>
         (internal_error "STORE type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__5 : instruction_kind =>
      let ik : instruction_kind := w__5 in
      returnm (Nias, aR, iR, ik, oR)
   | ADDIW (imm,rs,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | SHIFTW (imm,rs,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | RTYPEW (rs2,rs1,rd,op) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      returnm (Nias, aR, iR, ik, oR)
   | FENCE (pred,succ) =>
      match (pred, succ) with
      | (v__282, v__283) =>
         (if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B1]  : mword 2))
                 (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_rw_rw)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_r_rw)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_r_r)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_rw_w)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_w_w)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_w_rw)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_rw_r)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B1;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B0;B1]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_r_w)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B0;B1]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B1;B0]  : mword 2)))) then
            returnm ((IK_barrier Barrier_RISCV_w_r)
             : instruction_kind)
          else if ((andb (eq_vec (subrange_vec_dec v__282 1 0) (vec_of_bits [B0;B0]  : mword 2))
                      (eq_vec (subrange_vec_dec v__283 1 0) (vec_of_bits [B0;B0]  : mword 2)))) then
            returnm ((IK_simple tt)
             : instruction_kind)
          else
            (internal_error "barrier type not implemented in initial_analysis")
             : M (instruction_kind))
          : M (instruction_kind)
      end >>= fun w__17 : instruction_kind =>
      let ik : instruction_kind := w__17 in
      returnm (Nias, aR, iR, ik, oR)
   | FENCEI (_) =>
      let ik : instruction_kind := IK_simple tt in
      returnm (Nias, aR, iR, ik, oR)
   | LOADRES (aq,rl,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let aR := iR  : regfps in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_read Read_RISCV_reserved)  : instruction_kind)
      | (true, false) => returnm ((IK_mem_read Read_RISCV_reserved_acquire)  : instruction_kind)
      | (true, true) =>
         returnm ((IK_mem_read Read_RISCV_reserved_strong_acquire)  : instruction_kind)
      | (false, true) =>
         (internal_error "LOADRES type not implemented in initial_analysis")  : M (instruction_kind)
      end >>= fun w__19 : instruction_kind =>
      let ik : instruction_kind := w__19 in
      returnm (Nias, aR, iR, ik, oR)
   | STORECON (aq,rl,rs2,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      match (aq, rl) with
      | (false, false) => returnm ((IK_mem_write Write_RISCV_conditional)  : instruction_kind)
      | (false, true) =>
         returnm ((IK_mem_write Write_RISCV_conditional_release)  : instruction_kind)
      | (true, true) =>
         returnm ((IK_mem_write Write_RISCV_conditional_strong_release)  : instruction_kind)
      | (true, false) =>
         (internal_error "STORECON type not implemented in initial_analysis")
          : M (instruction_kind)
      end >>= fun w__21 : instruction_kind =>
      let ik : instruction_kind := w__21 in
      returnm (Nias, aR, iR, ik, oR)
   | AMO (op,aq,rl,rs2,rs1,width,rd) =>
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs2)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs2)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let iR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          iR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            iR in
      let aR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rs1)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          aR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rs1)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            aR in
      let oR : regfps :=
        if sumbool_of_bool ((Z.eqb
                               (projT1 ((regbits_to_regno rd)
                                : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})) 0)) then
          oR
        else
          (RFull (vec_access_dec GPRstr
                    (projT1 ((regbits_to_regno rd)
                     : {n : Z & ArithFact (0 <= n /\ (n + 1) <= 32)})))) ::
            oR in
      let ik : instruction_kind :=
        match (aq, rl) with
        | (false, false) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional)
        | (false, true) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional_release)
        | (true, false) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional)
        | (true, true) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional_release)
        end in
      returnm (Nias, aR, iR, ik, oR)
   | _ => returnm (Nias, aR, iR, ik, oR)
   end >>= fun '(Nias, aR, iR, ik, oR) =>
   returnm ((iR, oR, aR, Nias, Dia, ik)
    : (list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind)).
*)
Let initial_regstate : regstate :=
{| tlb39 := None; 
   htif_exit_code :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   htif_done := false; 
   htif_tohost :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtimecmp :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   tselect :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   stval :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   scause :=
     ({| Mcause_Mcause_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   sepc :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   sscratch :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   stvec :=
     ({| Mtvec_Mtvec_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   satp :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   sideleg :=
     ({| Sinterrupts_Sinterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   sedeleg :=
     ({| Sedeleg_Sedeleg_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   pmpcfg0 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   pmpaddr0 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mhartid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   marchid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mimpid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mvendorid :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   minstret_written := false; 
   minstret :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtime :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mcycle :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   scounteren :=
     ({| Counteren_Counteren_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
             : mword 32) |}); 
   mcounteren :=
     ({| Counteren_Counteren_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
             : mword 32) |}); 
   mscratch :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mtval :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mepc :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   mcause :=
     ({| Mcause_Mcause_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mtvec :=
     ({| Mtvec_Mtvec_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   medeleg :=
     ({| Medeleg_Medeleg_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mideleg :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mie :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mip :=
     ({| Minterrupts_Minterrupts_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   mstatus :=
     ({| Mstatus_Mstatus_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   misa :=
     ({| Misa_Misa_chunk_0 :=
           (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                         B0]
             : mword 64) |}); 
   cur_inst :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   cur_privilege := User; 
   x31 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x30 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x29 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x28 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x27 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x26 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x25 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x24 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x23 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x22 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x21 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x20 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x19 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x18 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x17 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x16 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x15 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x14 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x13 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x12 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x11 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x10 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x9 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x8 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x7 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x6 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x5 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x4 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x3 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x2 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   x1 :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   Xs :=
     (vec_of_list_len [(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0]
                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0]
                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0]
                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0]
                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0]
                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0]
                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0]
                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0]
                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0]
                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0]
                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0]
                                                                                                                                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                               B0]
                                                                                                                                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                             B0]
                                                                                                                                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                           B0]
                                                                                                                                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                         B0]
                                                                                                                                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                       B0]
                                                                                                                                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                     B0]
                                                                                                                                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                   B0]
                                                                                                                                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                 B0]
                                                                                                                                                                                                                                                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                               B0]
                                                                                                                                                                                                                                                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                                                                                                                                                             B0]
                                                                                                                                                                                                                                                                                                                 : mword 64);
                       (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0]
                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                   B0]
                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                 B0]
                                                     : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                               B0]
                                                                   : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                             B0]
                                                                                 : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                           B0]
                                                                                               : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                         B0]
                                                                                                             : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                       B0]
                                                                                                                           : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                     B0]
                                                                                                                                         : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                   B0]
                                                                                                                                                       : mword 64);(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                                                                                                                                                 B0]
                                                                                                                                                                     : mword 64)]); 
   nextPC :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64); 
   PC :=
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       : mword 64) |}.

End Content.
