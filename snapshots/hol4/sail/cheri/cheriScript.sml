(*Generated by Lem from cheri.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail_instr_kindsTheory sail_valuesTheory sail_operators_mwordsTheory prompt_monadTheory promptTheory cheri_typesTheory mips_extrasTheory;

val _ = numLib.prefer_num();



val _ = new_theory "cheri"

(*Generated by Sail from cheri.*)
(*open import Pervasives_extra*)
(*open import Sail_instr_kinds*)
(*open import Sail_values*)
(*open import Sail_operators_mwords*)
(*open import Prompt_monad*)
(*open import Prompt*)
(*open import Cheri_types*)
(*open import Mips_extras*)

val _ = Define `
 ((cap_size:int)=  ((( 32 : int):ii)))`;


(*val undefined_option : forall 'a. 'a -> M (maybe 'a)*)

val _ = Define `
 ((undefined_option:'a ->(regstate)state_monad$sequential_state ->((('a option),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) typ_a=  (state_monad$seqS (undefined_unit () ) (internal_pick [NONE;SOME typ_a])))`;








(*val neq_bool : bool -> bool -> bool*)

val _ = Define `
 ((neq_bool:bool -> bool -> bool) x y=  (~ (((x = y)))))`;






(*val builtin_and_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val builtin_or_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val cast_unit_vec : bitU -> mword ty1*)

val _ = Define `
 ((cast_unit_vec0:bitU ->(1)words$word) b=
    ((case b of   B0 => (vec_of_bits [B0]  :  1 words$word) | B1 => (vec_of_bits [B1]  :  1 words$word) )))`;


(*val DecStr : ii -> string*)

(*val HexStr : ii -> string*)

(*val __MIPS_write : forall  'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M unit*)

val _ = Define `
 ((MIPS_write:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr width data=
    (write_ram instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii) width
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
       :  64 words$word) addr data))`;


(*val __MIPS_read : forall  'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MIPS_read:(64)words$word -> int ->(regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr width=
    ((read_ram instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii) width
      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
        :  64 words$word) addr
     : ( 'p8_times_n_ words$word) M)))`;




(*val undefined_exception : unit -> M exception*)

val _ = Define `
 ((undefined_exception:unit ->(regstate)state_monad$sequential_state ->(((exception),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS (state_monad$seqS
   (undefined_unit () )
   (undefined_string () )) (\ (w__0 : string) .  state_monad$seqS (state_monad$seqS (state_monad$seqS
   (undefined_unit () )
   (undefined_unit () ))
   (undefined_unit () ))
   (internal_pick
     [ISAException () ;Error_not_implemented w__0;Error_misaligned_access () ;Error_EBREAK () ;Error_internal_error () ]))))`;


(*val sign_extend : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

(*val zero_extend : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((sign_extend1:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((sign_extend0 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict v m__tv  :  'm words$word)))`;


val _ = Define `
 ((zero_extend1:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((zero_extend0 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict v m__tv  :  'm words$word)))`;


(*val zeros : forall 'n . Size 'n => integer -> unit -> mword 'n*)

val _ = Define `
 ((zeros0:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B0]  :  1 words$word) n__tv  :  'n words$word)))`;


(*val ones : forall 'n . Size 'n => integer -> unit -> mword 'n*)

val _ = Define `
 ((ones:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B1]  :  1 words$word) n__tv  :  'n words$word)))`;


(*val zopz0zI_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zI_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

val _ = Define `
 ((zopz0zI_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) < ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zKzJ_s:'n words$word -> 'n words$word -> bool) x y=  (((integer_word$w2i x)) >= ((integer_word$w2i y))))`;


val _ = Define `
 ((zopz0zI_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) < ((lem$w2ui y))))`;


val _ = Define `
 ((zopz0zKzJ_u:'n words$word -> 'n words$word -> bool) x y=  (((lem$w2ui x)) >= ((lem$w2ui y))))`;


(*val bool_to_bits : bool -> mword ty1*)

val _ = Define `
 ((bool_to_bits:bool ->(1)words$word) x=  (if x then (vec_of_bits [B1]  :  1 words$word) else (vec_of_bits [B0]  :  1 words$word)))`;


(*val bit_to_bool : bitU -> bool*)

val _ = Define `
 ((bit_to_bool:bitU -> bool) b=  ((case b of   B1 => T | B0 => F )))`;


(*val bits_to_bool : mword ty1 -> bool*)

val _ = Define `
 ((bits_to_bool:(1)words$word -> bool) x=  (bit_to_bool ((access_vec_dec x (( 0 : int):ii)))))`;


(*
\function{to\_bits} converts an integer to a bit vector of given length. If the integer is negative a twos-complement representation is used. If the integer is too large (or too negative) to fit in the requested length then it is truncated to the least significant bits.
*)
(*val to_bits : forall 'l. Size 'l => itself 'l -> ii -> mword 'l*)

val _ = Define `
 ((to_bits:'l itself -> int -> 'l words$word) l n=
    (let l = (size_itself_int l) in
   (get_slice_int0 instance_Sail_values_Bitvector_Machine_word_mword_dict l n (( 0 : int):ii)  :  'l words$word)))`;


(*val mask : forall 'm 'n . Size 'm, Size 'n => integer -> mword 'm -> mword 'n*)

val _ = Define `
 ((mask:int -> 'm words$word -> 'n words$word) (n__tv : int) bs=
    ((subrange_vec_dec bs ((n__tv - (( 1 : int):ii))) (( 0 : int):ii)  :  'n words$word)))`;


(*val undefined_CauseReg : unit -> M CauseReg*)

val _ = Define `
 ((undefined_CauseReg:unit ->(regstate)state_monad$sequential_state ->(((CauseReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   internal_pick [Mk_CauseReg w__0])))`;


(*val _get_CauseReg : CauseReg -> mword ty32*)

val _ = Define `
 ((get_CauseReg:CauseReg ->(32)words$word) (Mk_CauseReg (v))=  v)`;


(*val _set_CauseReg : register_ref regstate register_value CauseReg -> mword ty32 -> M unit*)

val _ = Define `
 ((set_CauseReg:((regstate),(register_value),(CauseReg))register_ref ->(32)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_CauseReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_CapCauseReg : CapCauseReg -> mword ty16*)

(*val _set_CapCauseReg : register_ref regstate register_value CapCauseReg -> mword ty16 -> M unit*)

(*val _get_CauseReg_BD : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_BD:CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_BD : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_BD:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):ii) (( 31 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_BD : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_BD:CauseReg ->(1)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 31 : int):ii) (( 31 : int):ii) x  :  32 words$word))))`;


(*val _get_CauseReg_CE : CauseReg -> mword ty2*)

val _ = Define `
 ((get_CauseReg_CE:CauseReg ->(2)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 29 : int):ii) (( 28 : int):ii)  :  2 words$word)))`;


(*val _set_CauseReg_CE : register_ref regstate register_value CauseReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_CauseReg_CE:((regstate),(register_value),(CauseReg))register_ref ->(2)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):ii) (( 28 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_CE : CauseReg -> mword ty2 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_CE:CauseReg ->(2)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 29 : int):ii) (( 28 : int):ii) x  :  32 words$word))))`;


(*val _get_CauseReg_IV : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_IV:CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 23 : int):ii) (( 23 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_IV : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_IV:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 23 : int):ii) (( 23 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_IV : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_IV:CauseReg ->(1)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 23 : int):ii) (( 23 : int):ii) x  :  32 words$word))))`;


(*val _get_CauseReg_WP : CauseReg -> mword ty1*)

val _ = Define `
 ((get_CauseReg_WP:CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_CauseReg_WP : register_ref regstate register_value CauseReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_CauseReg_WP:((regstate),(register_value),(CauseReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):ii) (( 22 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_WP : CauseReg -> mword ty1 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_WP:CauseReg ->(1)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 22 : int):ii) (( 22 : int):ii) x  :  32 words$word))))`;


(*val _get_CauseReg_IP : CauseReg -> mword ty8*)

val _ = Define `
 ((get_CauseReg_IP:CauseReg ->(8)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))`;


(*val _set_CauseReg_IP : register_ref regstate register_value CauseReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_CauseReg_IP:((regstate),(register_value),(CauseReg))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):ii) (( 8 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_IP : CauseReg -> mword ty8 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_IP:CauseReg ->(8)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii) x  :  32 words$word))))`;


(*val _get_CauseReg_ExcCode : CauseReg -> mword ty5*)

val _ = Define `
 ((get_CauseReg_ExcCode:CauseReg ->(5)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 6 : int):ii) (( 2 : int):ii)  :  5 words$word)))`;


(*val _set_CauseReg_ExcCode : register_ref regstate register_value CauseReg -> mword ty5 -> M unit*)

val _ = Define `
 ((set_CauseReg_ExcCode:((regstate),(register_value),(CauseReg))register_ref ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 6 : int):ii) (( 2 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_ExcCode : CauseReg -> mword ty5 -> CauseReg*)

val _ = Define `
 ((update_CauseReg_ExcCode:CauseReg ->(5)words$word -> CauseReg) (Mk_CauseReg (v)) x=
    (Mk_CauseReg ((update_subrange_vec_dec v (( 6 : int):ii) (( 2 : int):ii) x  :  32 words$word))))`;


(*val _update_CapCauseReg_ExcCode : CapCauseReg -> mword ty8 -> CapCauseReg*)

(*val _get_CapCauseReg_ExcCode : CapCauseReg -> mword ty8*)

(*val _set_CapCauseReg_ExcCode : register_ref regstate register_value CapCauseReg -> mword ty8 -> M unit*)

(*val undefined_TLBEntryLoReg : unit -> M TLBEntryLoReg*)

val _ = Define `
 ((undefined_TLBEntryLoReg:unit ->(regstate)state_monad$sequential_state ->(((TLBEntryLoReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_TLBEntryLoReg w__0])))`;


(*val _get_TLBEntryLoReg : TLBEntryLoReg -> mword ty64*)

val _ = Define `
 ((get_TLBEntryLoReg:TLBEntryLoReg ->(64)words$word) (Mk_TLBEntryLoReg (v))=  v)`;


(*val _set_TLBEntryLoReg : register_ref regstate register_value TLBEntryLoReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntryLoReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_TLBEntryLoReg_CapS : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapS:TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=
    ((subrange_vec_dec v (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapS : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapS:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):ii) (( 63 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_CapS : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapS:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 63 : int):ii) (( 63 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_CapL : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapL:TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=
    ((subrange_vec_dec v (( 62 : int):ii) (( 62 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapL : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapL:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 62 : int):ii) (( 62 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_CapL : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapL:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 62 : int):ii) (( 62 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_PFN : TLBEntryLoReg -> mword ty24*)

val _ = Define `
 ((get_TLBEntryLoReg_PFN:TLBEntryLoReg ->(24)words$word) (Mk_TLBEntryLoReg (v))=
    ((subrange_vec_dec v (( 29 : int):ii) (( 6 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntryLoReg_PFN : register_ref regstate register_value TLBEntryLoReg -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_PFN:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(24)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):ii) (( 6 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_PFN : TLBEntryLoReg -> mword ty24 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_PFN:TLBEntryLoReg ->(24)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 29 : int):ii) (( 6 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_C : TLBEntryLoReg -> mword ty3*)

val _ = Define `
 ((get_TLBEntryLoReg_C:TLBEntryLoReg ->(3)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 5 : int):ii) (( 3 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntryLoReg_C : register_ref regstate register_value TLBEntryLoReg -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_C:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(3)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 5 : int):ii) (( 3 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_C : TLBEntryLoReg -> mword ty3 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_C:TLBEntryLoReg ->(3)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 5 : int):ii) (( 3 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_D : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_D:TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_D : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_D:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 2 : int):ii) (( 2 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_D : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_D:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 2 : int):ii) (( 2 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_V : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_V:TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_V : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_V:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):ii) (( 1 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_V : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_V:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_G : TLBEntryLoReg -> mword ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_G:TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_G : register_ref regstate register_value TLBEntryLoReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_G:((regstate),(register_value),(TLBEntryLoReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):ii) (( 0 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_G : TLBEntryLoReg -> mword ty1 -> TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_G:TLBEntryLoReg ->(1)words$word -> TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=
    (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii) x  :  64 words$word))))`;


(*val undefined_TLBEntryHiReg : unit -> M TLBEntryHiReg*)

val _ = Define `
 ((undefined_TLBEntryHiReg:unit ->(regstate)state_monad$sequential_state ->(((TLBEntryHiReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_TLBEntryHiReg w__0])))`;


(*val _get_TLBEntryHiReg : TLBEntryHiReg -> mword ty64*)

val _ = Define `
 ((get_TLBEntryHiReg:TLBEntryHiReg ->(64)words$word) (Mk_TLBEntryHiReg (v))=  v)`;


(*val _set_TLBEntryHiReg : register_ref regstate register_value TLBEntryHiReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntryHiReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_TLBEntryHiReg_R : TLBEntryHiReg -> mword ty2*)

val _ = Define `
 ((get_TLBEntryHiReg_R:TLBEntryHiReg ->(2)words$word) (Mk_TLBEntryHiReg (v))=  ((subrange_vec_dec v (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)))`;


(*val _set_TLBEntryHiReg_R : register_ref regstate register_value TLBEntryHiReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_R:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(2)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):ii) (( 62 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_R : TLBEntryHiReg -> mword ty2 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_R:TLBEntryHiReg ->(2)words$word -> TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=
    (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 63 : int):ii) (( 62 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryHiReg_VPN2 : TLBEntryHiReg -> mword ty27*)

val _ = Define `
 ((get_TLBEntryHiReg_VPN2:TLBEntryHiReg ->(27)words$word) (Mk_TLBEntryHiReg (v))=
    ((subrange_vec_dec v (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word)))`;


(*val _set_TLBEntryHiReg_VPN2 : register_ref regstate register_value TLBEntryHiReg -> mword ty27 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_VPN2:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(27)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 39 : int):ii) (( 13 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_VPN2 : TLBEntryHiReg -> mword ty27 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_VPN2:TLBEntryHiReg ->(27)words$word -> TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=
    (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 39 : int):ii) (( 13 : int):ii) x  :  64 words$word))))`;


(*val _get_TLBEntryHiReg_ASID : TLBEntryHiReg -> mword ty8*)

val _ = Define `
 ((get_TLBEntryHiReg_ASID:TLBEntryHiReg ->(8)words$word) (Mk_TLBEntryHiReg (v))=  ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_TLBEntryHiReg_ASID : register_ref regstate register_value TLBEntryHiReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_ASID:((regstate),(register_value),(TLBEntryHiReg))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):ii) (( 0 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_ASID : TLBEntryHiReg -> mword ty8 -> TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_ASID:TLBEntryHiReg ->(8)words$word -> TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=
    (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii) x  :  64 words$word))))`;


(*val undefined_ContextReg : unit -> M ContextReg*)

val _ = Define `
 ((undefined_ContextReg:unit ->(regstate)state_monad$sequential_state ->(((ContextReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_ContextReg w__0])))`;


(*val _get_ContextReg : ContextReg -> mword ty64*)

val _ = Define `
 ((get_ContextReg:ContextReg ->(64)words$word) (Mk_ContextReg (v))=  v)`;


(*val _set_ContextReg : register_ref regstate register_value ContextReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_ContextReg:((regstate),(register_value),(ContextReg))register_ref ->(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_ContextReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_ContextReg_PTEBase : ContextReg -> mword ty41*)

val _ = Define `
 ((get_ContextReg_PTEBase:ContextReg ->(41)words$word) (Mk_ContextReg (v))=  ((subrange_vec_dec v (( 63 : int):ii) (( 23 : int):ii)  :  41 words$word)))`;


(*val _set_ContextReg_PTEBase : register_ref regstate register_value ContextReg -> mword ty41 -> M unit*)

val _ = Define `
 ((set_ContextReg_PTEBase:((regstate),(register_value),(ContextReg))register_ref ->(41)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : ContextReg) . 
   let r = ((get_ContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):ii) (( 23 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_ContextReg r))))`;


(*val _update_ContextReg_PTEBase : ContextReg -> mword ty41 -> ContextReg*)

val _ = Define `
 ((update_ContextReg_PTEBase:ContextReg ->(41)words$word -> ContextReg) (Mk_ContextReg (v)) x=
    (Mk_ContextReg ((update_subrange_vec_dec v (( 63 : int):ii) (( 23 : int):ii) x  :  64 words$word))))`;


(*val _get_ContextReg_BadVPN2 : ContextReg -> mword ty19*)

val _ = Define `
 ((get_ContextReg_BadVPN2:ContextReg ->(19)words$word) (Mk_ContextReg (v))=  ((subrange_vec_dec v (( 22 : int):ii) (( 4 : int):ii)  :  19 words$word)))`;


(*val _set_ContextReg_BadVPN2 : register_ref regstate register_value ContextReg -> mword ty19 -> M unit*)

val _ = Define `
 ((set_ContextReg_BadVPN2:((regstate),(register_value),(ContextReg))register_ref ->(19)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : ContextReg) . 
   let r = ((get_ContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):ii) (( 4 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_ContextReg r))))`;


(*val _update_ContextReg_BadVPN2 : ContextReg -> mword ty19 -> ContextReg*)

val _ = Define `
 ((update_ContextReg_BadVPN2:ContextReg ->(19)words$word -> ContextReg) (Mk_ContextReg (v)) x=
    (Mk_ContextReg ((update_subrange_vec_dec v (( 22 : int):ii) (( 4 : int):ii) x  :  64 words$word))))`;


(*val undefined_XContextReg : unit -> M XContextReg*)

val _ = Define `
 ((undefined_XContextReg:unit ->(regstate)state_monad$sequential_state ->(((XContextReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_XContextReg w__0])))`;


(*val _get_XContextReg : XContextReg -> mword ty64*)

val _ = Define `
 ((get_XContextReg:XContextReg ->(64)words$word) (Mk_XContextReg (v))=  v)`;


(*val _set_XContextReg : register_ref regstate register_value XContextReg -> mword ty64 -> M unit*)

val _ = Define `
 ((set_XContextReg:((regstate),(register_value),(XContextReg))register_ref ->(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_XContextReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_XContextReg_XPTEBase : XContextReg -> mword ty31*)

val _ = Define `
 ((get_XContextReg_XPTEBase:XContextReg ->(31)words$word) (Mk_XContextReg (v))=
    ((subrange_vec_dec v (( 63 : int):ii) (( 33 : int):ii)  :  31 words$word)))`;


(*val _set_XContextReg_XPTEBase : register_ref regstate register_value XContextReg -> mword ty31 -> M unit*)

val _ = Define `
 ((set_XContextReg_XPTEBase:((regstate),(register_value),(XContextReg))register_ref ->(31)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):ii) (( 33 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XPTEBase : XContextReg -> mword ty31 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XPTEBase:XContextReg ->(31)words$word -> XContextReg) (Mk_XContextReg (v)) x=
    (Mk_XContextReg ((update_subrange_vec_dec v (( 63 : int):ii) (( 33 : int):ii) x  :  64 words$word))))`;


(*val _get_XContextReg_XR : XContextReg -> mword ty2*)

val _ = Define `
 ((get_XContextReg_XR:XContextReg ->(2)words$word) (Mk_XContextReg (v))=  ((subrange_vec_dec v (( 32 : int):ii) (( 31 : int):ii)  :  2 words$word)))`;


(*val _set_XContextReg_XR : register_ref regstate register_value XContextReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_XContextReg_XR:((regstate),(register_value),(XContextReg))register_ref ->(2)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 32 : int):ii) (( 31 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XR : XContextReg -> mword ty2 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XR:XContextReg ->(2)words$word -> XContextReg) (Mk_XContextReg (v)) x=
    (Mk_XContextReg ((update_subrange_vec_dec v (( 32 : int):ii) (( 31 : int):ii) x  :  64 words$word))))`;


(*val _get_XContextReg_XBadVPN2 : XContextReg -> mword ty27*)

val _ = Define `
 ((get_XContextReg_XBadVPN2:XContextReg ->(27)words$word) (Mk_XContextReg (v))=
    ((subrange_vec_dec v (( 30 : int):ii) (( 4 : int):ii)  :  27 words$word)))`;


(*val _set_XContextReg_XBadVPN2 : register_ref regstate register_value XContextReg -> mword ty27 -> M unit*)

val _ = Define `
 ((set_XContextReg_XBadVPN2:((regstate),(register_value),(XContextReg))register_ref ->(27)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 30 : int):ii) (( 4 : int):ii) v  :  64 words$word)) in
   state_monad$write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XBadVPN2 : XContextReg -> mword ty27 -> XContextReg*)

val _ = Define `
 ((update_XContextReg_XBadVPN2:XContextReg ->(27)words$word -> XContextReg) (Mk_XContextReg (v)) x=
    (Mk_XContextReg ((update_subrange_vec_dec v (( 30 : int):ii) (( 4 : int):ii) x  :  64 words$word))))`;


val _ = Define `
 ((TLBNumEntries:int)=  ((( 64 : int):ii)))`;


val _ = Define `
((TLBIndexMax:(6)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))`;


(*val MAX : integer -> integer*)

val _ = Define `
 ((MAX0:int -> int) n=  (((pow2 n)) - (( 1 : int):ii)))`;


val _ = Define `
 ((MAX_U64:int)=  (MAX0 (( 64 : int):ii)))`;


val _ = Define `
 ((MAX_VA:int)=  (MAX0 (( 40 : int):ii)))`;


val _ = Define `
 ((MAX_PA:int)=  (MAX0 (( 36 : int):ii)))`;


(*val undefined_TLBEntry : unit -> M TLBEntry*)

val _ = Define `
 ((undefined_TLBEntry:unit ->(regstate)state_monad$sequential_state ->(((TLBEntry),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 117 : int):ii)  : ( 117 words$word) M) (\ (w__0 :  117 words$word) . 
   internal_pick [Mk_TLBEntry w__0])))`;


(*val _get_TLBEntry : TLBEntry -> mword ty117*)

val _ = Define `
 ((get_TLBEntry:TLBEntry ->(117)words$word) (Mk_TLBEntry (v))=  v)`;


(*val _set_TLBEntry : register_ref regstate register_value TLBEntry -> mword ty117 -> M unit*)

val _ = Define `
 ((set_TLBEntry:((regstate),(register_value),(TLBEntry))register_ref ->(117)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntry v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_TLBEntry_pagemask : TLBEntry -> mword ty16*)

val _ = Define `
 ((get_TLBEntry_pagemask:TLBEntry ->(16)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 116 : int):ii) (( 101 : int):ii)  :  16 words$word)))`;


(*val _set_TLBEntry_pagemask : register_ref regstate register_value TLBEntry -> mword ty16 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pagemask:((regstate),(register_value),(TLBEntry))register_ref ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 116 : int):ii) (( 101 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pagemask : TLBEntry -> mword ty16 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pagemask:TLBEntry ->(16)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 116 : int):ii) (( 101 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_r : TLBEntry -> mword ty2*)

val _ = Define `
 ((get_TLBEntry_r:TLBEntry ->(2)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 100 : int):ii) (( 99 : int):ii)  :  2 words$word)))`;


(*val _set_TLBEntry_r : register_ref regstate register_value TLBEntry -> mword ty2 -> M unit*)

val _ = Define `
 ((set_TLBEntry_r:((regstate),(register_value),(TLBEntry))register_ref ->(2)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 100 : int):ii) (( 99 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_r : TLBEntry -> mword ty2 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_r:TLBEntry ->(2)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 100 : int):ii) (( 99 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_vpn2 : TLBEntry -> mword ty27*)

val _ = Define `
 ((get_TLBEntry_vpn2:TLBEntry ->(27)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 98 : int):ii) (( 72 : int):ii)  :  27 words$word)))`;


(*val _set_TLBEntry_vpn2 : register_ref regstate register_value TLBEntry -> mword ty27 -> M unit*)

val _ = Define `
 ((set_TLBEntry_vpn2:((regstate),(register_value),(TLBEntry))register_ref ->(27)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 98 : int):ii) (( 72 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_vpn2 : TLBEntry -> mword ty27 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_vpn2:TLBEntry ->(27)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 98 : int):ii) (( 72 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_asid : TLBEntry -> mword ty8*)

val _ = Define `
 ((get_TLBEntry_asid:TLBEntry ->(8)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 71 : int):ii) (( 64 : int):ii)  :  8 words$word)))`;


(*val _set_TLBEntry_asid : register_ref regstate register_value TLBEntry -> mword ty8 -> M unit*)

val _ = Define `
 ((set_TLBEntry_asid:((regstate),(register_value),(TLBEntry))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 71 : int):ii) (( 64 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_asid : TLBEntry -> mword ty8 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_asid:TLBEntry ->(8)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 71 : int):ii) (( 64 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_g : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_g:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 63 : int):ii) (( 63 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_g : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_g:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):ii) (( 63 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_g : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_g:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 63 : int):ii) (( 63 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_valid : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_valid:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 62 : int):ii) (( 62 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_valid : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_valid:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 62 : int):ii) (( 62 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_valid : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_valid:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 62 : int):ii) (( 62 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_caps1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_caps1:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 61 : int):ii) (( 61 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_caps1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 61 : int):ii) (( 61 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_caps1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps1:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 61 : int):ii) (( 61 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_capl1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_capl1:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 60 : int):ii) (( 60 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_capl1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 60 : int):ii) (( 60 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_capl1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl1:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 60 : int):ii) (( 60 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_pfn1 : TLBEntry -> mword ty24*)

val _ = Define `
 ((get_TLBEntry_pfn1:TLBEntry ->(24)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 59 : int):ii) (( 36 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn1 : register_ref regstate register_value TLBEntry -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pfn1:((regstate),(register_value),(TLBEntry))register_ref ->(24)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 59 : int):ii) (( 36 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pfn1 : TLBEntry -> mword ty24 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn1:TLBEntry ->(24)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 59 : int):ii) (( 36 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_c1 : TLBEntry -> mword ty3*)

val _ = Define `
 ((get_TLBEntry_c1:TLBEntry ->(3)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 35 : int):ii) (( 33 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c1 : register_ref regstate register_value TLBEntry -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntry_c1:((regstate),(register_value),(TLBEntry))register_ref ->(3)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 35 : int):ii) (( 33 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_c1 : TLBEntry -> mword ty3 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c1:TLBEntry ->(3)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 35 : int):ii) (( 33 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_d1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_d1:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 32 : int):ii) (( 32 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_d1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 32 : int):ii) (( 32 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_d1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d1:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 32 : int):ii) (( 32 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_v1 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_v1:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 31 : int):ii) (( 31 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v1 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_v1:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):ii) (( 31 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_v1 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v1:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 31 : int):ii) (( 31 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_caps0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_caps0:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 30 : int):ii) (( 30 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_caps0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 30 : int):ii) (( 30 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_caps0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps0:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 30 : int):ii) (( 30 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_capl0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_capl0:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 29 : int):ii) (( 29 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_capl0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):ii) (( 29 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_capl0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl0:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 29 : int):ii) (( 29 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_pfn0 : TLBEntry -> mword ty24*)

val _ = Define `
 ((get_TLBEntry_pfn0:TLBEntry ->(24)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 28 : int):ii) (( 5 : int):ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn0 : register_ref regstate register_value TLBEntry -> mword ty24 -> M unit*)

val _ = Define `
 ((set_TLBEntry_pfn0:((regstate),(register_value),(TLBEntry))register_ref ->(24)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 28 : int):ii) (( 5 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pfn0 : TLBEntry -> mword ty24 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn0:TLBEntry ->(24)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 28 : int):ii) (( 5 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_c0 : TLBEntry -> mword ty3*)

val _ = Define `
 ((get_TLBEntry_c0:TLBEntry ->(3)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 4 : int):ii) (( 2 : int):ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c0 : register_ref regstate register_value TLBEntry -> mword ty3 -> M unit*)

val _ = Define `
 ((set_TLBEntry_c0:((regstate),(register_value),(TLBEntry))register_ref ->(3)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 4 : int):ii) (( 2 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_c0 : TLBEntry -> mword ty3 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c0:TLBEntry ->(3)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 4 : int):ii) (( 2 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_d0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_d0:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_d0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):ii) (( 1 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_d0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d0:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_v0 : TLBEntry -> mword ty1*)

val _ = Define `
 ((get_TLBEntry_v0:TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v0 : register_ref regstate register_value TLBEntry -> mword ty1 -> M unit*)

val _ = Define `
 ((set_TLBEntry_v0:((regstate),(register_value),(TLBEntry))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):ii) (( 0 : int):ii) v  :  117 words$word)) in
   state_monad$write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_v0 : TLBEntry -> mword ty1 -> TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v0:TLBEntry ->(1)words$word -> TLBEntry) (Mk_TLBEntry (v)) x=
    (Mk_TLBEntry ((update_subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii) x  :  117 words$word))))`;


val _ = Define `
((TLBEntries:(((regstate),(register_value),(TLBEntry))register_ref)list)=
   ([TLBEntry63_ref;TLBEntry62_ref;TLBEntry61_ref;TLBEntry60_ref;TLBEntry59_ref;TLBEntry58_ref;
   TLBEntry57_ref;TLBEntry56_ref;TLBEntry55_ref;TLBEntry54_ref;TLBEntry53_ref;TLBEntry52_ref;
   TLBEntry51_ref;TLBEntry50_ref;TLBEntry49_ref;TLBEntry48_ref;TLBEntry47_ref;TLBEntry46_ref;
   TLBEntry45_ref;TLBEntry44_ref;TLBEntry43_ref;TLBEntry42_ref;TLBEntry41_ref;TLBEntry40_ref;
   TLBEntry39_ref;TLBEntry38_ref;TLBEntry37_ref;TLBEntry36_ref;TLBEntry35_ref;TLBEntry34_ref;
   TLBEntry33_ref;TLBEntry32_ref;TLBEntry31_ref;TLBEntry30_ref;TLBEntry29_ref;TLBEntry28_ref;
   TLBEntry27_ref;TLBEntry26_ref;TLBEntry25_ref;TLBEntry24_ref;TLBEntry23_ref;TLBEntry22_ref;
   TLBEntry21_ref;TLBEntry20_ref;TLBEntry19_ref;TLBEntry18_ref;TLBEntry17_ref;TLBEntry16_ref;
   TLBEntry15_ref;TLBEntry14_ref;TLBEntry13_ref;TLBEntry12_ref;TLBEntry11_ref;TLBEntry10_ref;
   TLBEntry09_ref;TLBEntry08_ref;TLBEntry07_ref;TLBEntry06_ref;TLBEntry05_ref;TLBEntry04_ref;
   TLBEntry03_ref;TLBEntry02_ref;TLBEntry01_ref;TLBEntry00_ref]))`;


(*val undefined_StatusReg : unit -> M StatusReg*)

val _ = Define `
 ((undefined_StatusReg:unit ->(regstate)state_monad$sequential_state ->(((StatusReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 :  32 words$word) . 
   internal_pick [Mk_StatusReg w__0])))`;


(*val _get_StatusReg : StatusReg -> mword ty32*)

val _ = Define `
 ((get_StatusReg:StatusReg ->(32)words$word) (Mk_StatusReg (v))=  v)`;


(*val _set_StatusReg : register_ref regstate register_value StatusReg -> mword ty32 -> M unit*)

val _ = Define `
 ((set_StatusReg:((regstate),(register_value),(StatusReg))register_ref ->(32)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_StatusReg v) in
   state_monad$write_regS r_ref r)))`;


(*val _get_StatusReg_CU : StatusReg -> mword ty4*)

val _ = Define `
 ((get_StatusReg_CU:StatusReg ->(4)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 31 : int):ii) (( 28 : int):ii)  :  4 words$word)))`;


(*val _set_StatusReg_CU : register_ref regstate register_value StatusReg -> mword ty4 -> M unit*)

val _ = Define `
 ((set_StatusReg_CU:((regstate),(register_value),(StatusReg))register_ref ->(4)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):ii) (( 28 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_CU : StatusReg -> mword ty4 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_CU:StatusReg ->(4)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 31 : int):ii) (( 28 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_BEV : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_BEV:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 22 : int):ii) (( 22 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_BEV : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_BEV:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):ii) (( 22 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_BEV : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_BEV:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 22 : int):ii) (( 22 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_IM : StatusReg -> mword ty8*)

val _ = Define `
 ((get_StatusReg_IM:StatusReg ->(8)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))`;


(*val _set_StatusReg_IM : register_ref regstate register_value StatusReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_StatusReg_IM:((regstate),(register_value),(StatusReg))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):ii) (( 8 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_IM : StatusReg -> mword ty8 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_IM:StatusReg ->(8)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_KX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_KX:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 7 : int):ii) (( 7 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_KX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_KX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):ii) (( 7 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_KX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_KX:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 7 : int):ii) (( 7 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_SX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_SX:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 6 : int):ii) (( 6 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_SX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_SX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 6 : int):ii) (( 6 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_SX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_SX:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 6 : int):ii) (( 6 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_UX : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_UX:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 5 : int):ii) (( 5 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_UX : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_UX:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 5 : int):ii) (( 5 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_UX : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_UX:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 5 : int):ii) (( 5 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_KSU : StatusReg -> mword ty2*)

val _ = Define `
 ((get_StatusReg_KSU:StatusReg ->(2)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 4 : int):ii) (( 3 : int):ii)  :  2 words$word)))`;


(*val _set_StatusReg_KSU : register_ref regstate register_value StatusReg -> mword ty2 -> M unit*)

val _ = Define `
 ((set_StatusReg_KSU:((regstate),(register_value),(StatusReg))register_ref ->(2)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 4 : int):ii) (( 3 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_KSU : StatusReg -> mword ty2 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_KSU:StatusReg ->(2)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 4 : int):ii) (( 3 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_ERL : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_ERL:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 2 : int):ii) (( 2 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_ERL : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_ERL:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 2 : int):ii) (( 2 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_ERL : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_ERL:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 2 : int):ii) (( 2 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_EXL : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_EXL:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_EXL : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_EXL:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):ii) (( 1 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_EXL : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_EXL:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 1 : int):ii) (( 1 : int):ii) x  :  32 words$word))))`;


(*val _get_StatusReg_IE : StatusReg -> mword ty1*)

val _ = Define `
 ((get_StatusReg_IE:StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii)  :  1 words$word)))`;


(*val _set_StatusReg_IE : register_ref regstate register_value StatusReg -> mword ty1 -> M unit*)

val _ = Define `
 ((set_StatusReg_IE:((regstate),(register_value),(StatusReg))register_ref ->(1)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):ii) (( 0 : int):ii) v  :  32 words$word)) in
   state_monad$write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_IE : StatusReg -> mword ty1 -> StatusReg*)

val _ = Define `
 ((update_StatusReg_IE:StatusReg ->(1)words$word -> StatusReg) (Mk_StatusReg (v)) x=
    (Mk_StatusReg ((update_subrange_vec_dec v (( 0 : int):ii) (( 0 : int):ii) x  :  32 words$word))))`;


(*val execute_branch : mword ty64 -> M unit*)

val _ = Define `
 ((execute_branch:(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) pc=  (state_monad$seqS
   (state_monad$write_regS delayedPC_ref pc) (state_monad$write_regS branchPending_ref (vec_of_bits [B1]  :  1 words$word))))`;


(*val NotWordVal : mword ty64 -> bool*)

val _ = Define `
 ((NotWordVal:(64)words$word -> bool) word=
    (((replicate_bits ((cast_unit_vec0 ((access_vec_dec word (( 31 : int):ii)))  :  1 words$word)) (( 32 : int):ii)
        :  32 words$word)) <> ((subrange_vec_dec word (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))))`;


(*val rGPR : mword ty5 -> M (mword ty64)*)

val _ = Define `
 ((rGPR:(5)words$word ->(regstate)state_monad$sequential_state ->((((64)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) idx=
    (let i = (lem$w2ui idx) in
   if (((i = (( 0 : int):ii)))) then
     state_monad$returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                          B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
              :  64 words$word)
   else state_monad$bindS
     (state_monad$read_regS GPR_ref) (\ (w__0 : ( 64 bits) list) . 
     state_monad$returnS ((access_list_dec w__0 i  :  64 words$word)))))`;


(*val wGPR : mword ty5 -> mword ty64 -> M unit*)

val _ = Define `
 ((wGPR:(5)words$word ->(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) idx v=
    (let i = (lem$w2ui idx) in
   if (((i = (( 0 : int):ii)))) then state_monad$returnS () 
   else state_monad$bindS
     (state_monad$read_regS GPR_ref) (\ (w__0 : ( 64 words$word) list) . 
     state_monad$write_regS GPR_ref ((update_list_dec w__0 i v  : ( 64 words$word) list)))))`;
















(*val Exception_of_num : integer -> Exception*)

val _ = Define `
 ((Exception_of_num:int -> Exception) arg_=
    (let l__81 = arg_ in
   if (((l__81 = (( 0 : int):ii)))) then Interrupt
   else if (((l__81 = (( 1 : int):ii)))) then TLBMod
   else if (((l__81 = (( 2 : int):ii)))) then TLBL
   else if (((l__81 = (( 3 : int):ii)))) then TLBS
   else if (((l__81 = (( 4 : int):ii)))) then AdEL
   else if (((l__81 = (( 5 : int):ii)))) then AdES
   else if (((l__81 = (( 6 : int):ii)))) then Sys
   else if (((l__81 = (( 7 : int):ii)))) then Bp
   else if (((l__81 = (( 8 : int):ii)))) then ResI
   else if (((l__81 = (( 9 : int):ii)))) then CpU
   else if (((l__81 = (( 10 : int):ii)))) then Ov
   else if (((l__81 = (( 11 : int):ii)))) then Tr
   else if (((l__81 = (( 12 : int):ii)))) then C2E
   else if (((l__81 = (( 13 : int):ii)))) then C2Trap
   else if (((l__81 = (( 14 : int):ii)))) then XTLBRefillL
   else if (((l__81 = (( 15 : int):ii)))) then XTLBRefillS
   else if (((l__81 = (( 16 : int):ii)))) then XTLBInvL
   else if (((l__81 = (( 17 : int):ii)))) then XTLBInvS
   else MCheck))`;


(*val num_of_Exception : Exception -> integer*)

val _ = Define `
 ((num_of_Exception:Exception -> int) arg_=
    ((case arg_ of
     Interrupt => (( 0 : int):ii)
   | TLBMod => (( 1 : int):ii)
   | TLBL => (( 2 : int):ii)
   | TLBS => (( 3 : int):ii)
   | AdEL => (( 4 : int):ii)
   | AdES => (( 5 : int):ii)
   | Sys => (( 6 : int):ii)
   | Bp => (( 7 : int):ii)
   | ResI => (( 8 : int):ii)
   | CpU => (( 9 : int):ii)
   | Ov => (( 10 : int):ii)
   | Tr => (( 11 : int):ii)
   | C2E => (( 12 : int):ii)
   | C2Trap => (( 13 : int):ii)
   | XTLBRefillL => (( 14 : int):ii)
   | XTLBRefillS => (( 15 : int):ii)
   | XTLBInvL => (( 16 : int):ii)
   | XTLBInvS => (( 17 : int):ii)
   | MCheck => (( 18 : int):ii)
   )))`;


(*val undefined_Exception : unit -> M Exception*)

val _ = Define `
 ((undefined_Exception:unit ->(regstate)state_monad$sequential_state ->(((Exception),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =
    (internal_pick
     [Interrupt;TLBMod;TLBL;TLBS;AdEL;AdES;Sys;Bp;ResI;CpU;Ov;Tr;C2E;C2Trap;XTLBRefillL;XTLBRefillS;XTLBInvL;XTLBInvS;MCheck]))`;


(*val ExceptionCode : Exception -> mword ty5*)

val _ = Define `
 ((ExceptionCode:Exception ->(5)words$word) ex=
    (let (x : 8 bits) =
     ((case ex of
       Interrupt => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
     | TLBMod => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)
     | TLBL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | TLBS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | AdEL => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0]  :  8 words$word)
     | AdES => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1]  :  8 words$word)
     | Sys => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0]  :  8 words$word)
     | Bp => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B1]  :  8 words$word)
     | ResI => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B0]  :  8 words$word)
     | CpU => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B1]  :  8 words$word)
     | Ov => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B0]  :  8 words$word)
     | Tr => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B1]  :  8 words$word)
     | C2E => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | C2Trap => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | XTLBInvL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBInvS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | MCheck => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0]  :  8 words$word)
     )) in
   (subrange_vec_dec x (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)))`;


(*val SignalExceptionMIPS : forall 'o. Exception -> mword ty64 -> M 'o*)

val _ = Define `
 ((SignalExceptionMIPS:Exception ->(64)words$word ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) ex kccBase=  (state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) .  state_monad$bindS (state_monad$seqS
   (if ((~ ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))))) then state_monad$bindS
      (state_monad$read_regS inBranchDelay_ref  : ( 1 words$word) M) (\ (w__1 : 1 bits) . 
      if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):ii))))) then state_monad$bindS
        (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) .  state_monad$seqS
        (state_monad$write_regS CP0EPC_ref ((sub_vec_int w__2 (( 4 : int):ii)  :  64 words$word)))
        (set_CauseReg_BD CP0Cause_ref (vec_of_bits [B1]  :  1 words$word)))
      else state_monad$bindS
        (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__3 : 64 bits) .  state_monad$seqS
        (state_monad$write_regS CP0EPC_ref w__3) (set_CauseReg_BD CP0Cause_ref (vec_of_bits [B0]  :  1 words$word))))
    else state_monad$returnS () )
   (state_monad$read_regS CP0Status_ref)) (\ (w__4 : StatusReg) . 
   let vectorOffset =
     (if ((bits_to_bool ((get_StatusReg_EXL w__4  :  1 words$word)))) then
       (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if ((((((ex = XTLBRefillL))) \/ (((ex = XTLBRefillS)))))) then
       (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if (((ex = C2Trap))) then (vec_of_bits [B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)) in state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__5 : StatusReg) . 
   let (vectorBase : 64 bits) =
     (if ((bits_to_bool ((get_StatusReg_BEV w__5  :  1 words$word)))) then
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)
     else
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)) in state_monad$seqS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS
     nextPC_ref
     ((sub_vec
         ((add_vec vectorBase ((sign_extend1 (( 64 : int):ii) vectorOffset  :  64 words$word))  :  64 words$word))
         kccBase
        :  64 words$word)))
   (set_CauseReg_ExcCode CP0Cause_ref ((ExceptionCode ex  :  5 words$word))))
   (set_StatusReg_EXL CP0Status_ref (vec_of_bits [B1]  :  1 words$word))) (state_monad$throwS (ISAException () )))))))`;


(*val SignalException : forall 'o. Exception -> M 'o*)

(*val SignalExceptionBadAddr : forall 'o. Exception -> mword ty64 -> M 'o*)

(*val capRegToCapStruct : mword ty257 -> CapStruct*)

val _ = Define `
 ((capRegToCapStruct:(257)words$word -> CapStruct) capReg=
    (<| CapStruct_tag := ((bit_to_bool ((access_vec_dec capReg (( 256 : int):ii))))); 
      CapStruct_padding := ((subrange_vec_dec capReg (( 255 : int):ii) (( 248 : int):ii)  :  8 words$word)); 
      CapStruct_otype := ((subrange_vec_dec capReg (( 247 : int):ii) (( 224 : int):ii)  :  24 words$word)); 
      CapStruct_uperms := ((subrange_vec_dec capReg (( 223 : int):ii) (( 208 : int):ii)  :  16 words$word)); 
      CapStruct_perm_reserved11_14 := ((subrange_vec_dec capReg (( 207 : int):ii) (( 204 : int):ii)  :  4 words$word)); 
      CapStruct_access_system_regs := ((bit_to_bool ((access_vec_dec capReg (( 203 : int):ii))))); 
      CapStruct_permit_unseal := ((bit_to_bool ((access_vec_dec capReg (( 202 : int):ii))))); 
      CapStruct_permit_ccall := ((bit_to_bool ((access_vec_dec capReg (( 201 : int):ii))))); 
      CapStruct_permit_seal := ((bit_to_bool ((access_vec_dec capReg (( 200 : int):ii))))); 
      CapStruct_permit_store_local_cap := ((bit_to_bool ((access_vec_dec capReg (( 199 : int):ii))))); 
      CapStruct_permit_store_cap := ((bit_to_bool ((access_vec_dec capReg (( 198 : int):ii))))); 
      CapStruct_permit_load_cap := ((bit_to_bool ((access_vec_dec capReg (( 197 : int):ii))))); 
      CapStruct_permit_store := ((bit_to_bool ((access_vec_dec capReg (( 196 : int):ii))))); 
      CapStruct_permit_load := ((bit_to_bool ((access_vec_dec capReg (( 195 : int):ii))))); 
      CapStruct_permit_execute := ((bit_to_bool ((access_vec_dec capReg (( 194 : int):ii))))); 
      CapStruct_global := ((bit_to_bool ((access_vec_dec capReg (( 193 : int):ii))))); 
      CapStruct_sealed := ((bit_to_bool ((access_vec_dec capReg (( 192 : int):ii))))); 
      CapStruct_address := ((subrange_vec_dec capReg (( 191 : int):ii) (( 128 : int):ii)  :  64 words$word)); 
      CapStruct_base := ((subrange_vec_dec capReg (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)); 
      CapStruct_length := ((subrange_vec_dec capReg (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)) |>))`;


(*val getCapPerms : CapStruct -> mword ty31*)

val _ = Define `
 ((getCapPerms:CapStruct ->(31)words$word) cap=
    ((concat_vec cap.CapStruct_uperms
      ((concat_vec cap.CapStruct_perm_reserved11_14
          ((concat_vec ((bool_to_bits cap.CapStruct_access_system_regs  :  1 words$word))
              ((concat_vec ((bool_to_bits cap.CapStruct_permit_unseal  :  1 words$word))
                  ((concat_vec ((bool_to_bits cap.CapStruct_permit_ccall  :  1 words$word))
                      ((concat_vec ((bool_to_bits cap.CapStruct_permit_seal  :  1 words$word))
                          ((concat_vec
                              ((bool_to_bits cap.CapStruct_permit_store_local_cap  :  1 words$word))
                              ((concat_vec
                                  ((bool_to_bits cap.CapStruct_permit_store_cap  :  1 words$word))
                                  ((concat_vec
                                      ((bool_to_bits cap.CapStruct_permit_load_cap  :  1 words$word))
                                      ((concat_vec
                                          ((bool_to_bits cap.CapStruct_permit_store  :  1 words$word))
                                          ((concat_vec
                                              ((bool_to_bits cap.CapStruct_permit_load  :  1 words$word))
                                              ((concat_vec
                                                  ((bool_to_bits cap.CapStruct_permit_execute
                                                     :  1 words$word))
                                                  ((bool_to_bits cap.CapStruct_global  :  1 words$word))
                                                 :  2 words$word))
                                             :  3 words$word))
                                         :  4 words$word))
                                     :  5 words$word))
                                 :  6 words$word))
                             :  7 words$word))
                         :  8 words$word))
                     :  9 words$word))
                 :  10 words$word))
             :  11 words$word))
         :  15 words$word))
     :  31 words$word)))`;


(*val capStructToMemBits256 : CapStruct -> mword ty256*)

val _ = Define `
 ((capStructToMemBits256:CapStruct ->(256)words$word) cap=
    ((concat_vec cap.CapStruct_padding
      ((concat_vec cap.CapStruct_otype
          ((concat_vec ((getCapPerms cap  :  31 words$word))
              ((concat_vec ((bool_to_bits cap.CapStruct_sealed  :  1 words$word))
                  ((concat_vec cap.CapStruct_address
                      ((concat_vec cap.CapStruct_base cap.CapStruct_length  :  128 words$word))
                     :  192 words$word))
                 :  193 words$word))
             :  224 words$word))
         :  248 words$word))
     :  256 words$word)))`;


(*val capStructToCapReg : CapStruct -> mword ty257*)

val _ = Define `
 ((capStructToCapReg:CapStruct ->(257)words$word) cap=
    ((concat_vec ((bool_to_bits cap.CapStruct_tag  :  1 words$word))
      ((capStructToMemBits256 cap  :  256 words$word))
     :  257 words$word)))`;


(*val getCapBase : CapStruct -> integer*)

val _ = Define `
 ((getCapBase:CapStruct -> int) c=  (lem$w2ui c.CapStruct_base))`;


val _ = Define `
((null_cap:CapStruct)=
   (<| CapStruct_tag := F; 
     CapStruct_padding := ((zeros0 (( 8 : int):ii) ()   :  8 words$word)); 
     CapStruct_otype := ((zeros0 (( 24 : int):ii) ()   :  24 words$word)); 
     CapStruct_uperms := ((zeros0 (( 16 : int):ii) ()   :  16 words$word)); 
     CapStruct_perm_reserved11_14 := ((zeros0 (( 4 : int):ii) ()   :  4 words$word)); 
     CapStruct_access_system_regs := F; 
     CapStruct_permit_unseal := F; 
     CapStruct_permit_ccall := F; 
     CapStruct_permit_seal := F; 
     CapStruct_permit_store_local_cap := F; 
     CapStruct_permit_store_cap := F; 
     CapStruct_permit_load_cap := F; 
     CapStruct_permit_store := F; 
     CapStruct_permit_load := F; 
     CapStruct_permit_execute := F; 
     CapStruct_global := F; 
     CapStruct_sealed := F; 
     CapStruct_address := ((zeros0 (( 64 : int):ii) ()   :  64 words$word)); 
     CapStruct_base := ((zeros0 (( 64 : int):ii) ()   :  64 words$word)); 
     CapStruct_length :=
       ((vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
         :  64 words$word)) |>))`;


(*val int_to_cap : mword ty64 -> CapStruct*)

val _ = Define `
 ((int_to_cap:(64)words$word -> CapStruct) address=  ((null_cap with<| CapStruct_address := address|>)))`;


(*
Set the offset capability of the a capability to given value and return the result, along with a boolean indicating true if the operation preserved the existing bounds of the capability.  When using compressed capabilities, setting the offset far outside the capability bounds can cause the result to become unrepresentable (XXX mention guarantees). Additionally in some implementations a fast representablity check may be used that could cause the operation to return failure even though the capability would be representable (XXX provide details). 
 *)
(*val setCapOffset : CapStruct -> mword ty64 -> (bool * CapStruct)*)

val _ = Define `
 ((setCapOffset:CapStruct ->(64)words$word -> bool#CapStruct) c offset=
    (T, (c with<| CapStruct_address := ((add_vec c.CapStruct_base offset  :  64 words$word))|>)))`;


val _ = Define `
 ((SignalException:Exception ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) ex=  (state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) .  state_monad$bindS (state_monad$seqS
   (if ((~ ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))))) then state_monad$bindS
      (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ pc .  state_monad$bindS
      (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__1 :  257 words$word) . 
      let pcc = (capRegToCapStruct w__1) in
      let (success, epcc) = (setCapOffset pcc pc) in
      if success then state_monad$write_regS C31_ref ((capStructToCapReg epcc  :  257 words$word))
      else
        state_monad$write_regS
          C31_ref
          ((capStructToCapReg
              ((int_to_cap
                  ((add_vec_int
                      ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase pcc))
                         :  64 words$word)) ((lem$w2ui pc))
                     :  64 words$word))))
             :  257 words$word))))
    else state_monad$returnS () )
   (state_monad$read_regS C29_ref  : ( 257 words$word) M)) (\ (w__2 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS nextPCC_ref w__2)
   (state_monad$read_regS C29_ref  : ( 257 words$word) M)) (\ (w__3 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS delayedPCC_ref w__3)
   (state_monad$read_regS C29_ref  : ( 257 words$word) M)) (\ (w__4 :  257 words$word) . 
   let base = (getCapBase ((capRegToCapStruct w__4))) in
   SignalExceptionMIPS ex ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) base  :  64 words$word))))))))`;


val _ = Define `
 ((SignalExceptionBadAddr:Exception ->(64)words$word ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) ex badAddr=  (state_monad$seqS (state_monad$write_regS CP0BadVAddr_ref badAddr) (SignalException ex)))`;


(*val SignalExceptionTLB : forall 'o. Exception -> mword ty64 -> M 'o*)

val _ = Define `
 ((SignalExceptionTLB:Exception ->(64)words$word ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) ex badAddr=  (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS CP0BadVAddr_ref badAddr)
   (set_ContextReg_BadVPN2 TLBContext_ref ((subrange_vec_dec badAddr (( 31 : int):ii) (( 13 : int):ii)  :  19 words$word))))
   (set_XContextReg_XBadVPN2 TLBXContext_ref
     ((subrange_vec_dec badAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word))))
   (set_XContextReg_XR TLBXContext_ref ((subrange_vec_dec badAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word))))
   (set_TLBEntryHiReg_R TLBEntryHi_ref ((subrange_vec_dec badAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word))))
   (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((subrange_vec_dec badAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word))))
   (SignalException ex)))`;


(*val MemAccessType_of_num : integer -> MemAccessType*)

val _ = Define `
 ((MemAccessType_of_num:int -> MemAccessType) arg_=
    (let l__79 = arg_ in
   if (((l__79 = (( 0 : int):ii)))) then Instruction
   else if (((l__79 = (( 1 : int):ii)))) then LoadData
   else StoreData))`;


(*val num_of_MemAccessType : MemAccessType -> integer*)

val _ = Define `
 ((num_of_MemAccessType:MemAccessType -> int) arg_=
    ((case arg_ of   Instruction => (( 0 : int):ii) | LoadData => (( 1 : int):ii) | StoreData => (( 2 : int):ii) )))`;


(*val undefined_MemAccessType : unit -> M MemAccessType*)

val _ = Define `
 ((undefined_MemAccessType:unit ->(regstate)state_monad$sequential_state ->(((MemAccessType),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [Instruction;LoadData;StoreData]))`;


(*val AccessLevel_of_num : integer -> AccessLevel*)

val _ = Define `
 ((AccessLevel_of_num:int -> AccessLevel) arg_=
    (let l__77 = arg_ in
   if (((l__77 = (( 0 : int):ii)))) then User
   else if (((l__77 = (( 1 : int):ii)))) then Supervisor
   else Kernel))`;


(*val num_of_AccessLevel : AccessLevel -> integer*)

val _ = Define `
 ((num_of_AccessLevel:AccessLevel -> int) arg_=
    ((case arg_ of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Kernel => (( 2 : int):ii) )))`;


(*val undefined_AccessLevel : unit -> M AccessLevel*)

val _ = Define `
 ((undefined_AccessLevel:unit ->(regstate)state_monad$sequential_state ->(((AccessLevel),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [User;Supervisor;Kernel]))`;


(*val int_of_AccessLevel : AccessLevel -> ii*)

val _ = Define `
 ((int_of_AccessLevel:AccessLevel -> int) level=
    ((case level of   User => (( 0 : int):ii) | Supervisor => (( 1 : int):ii) | Kernel => (( 2 : int):ii) )))`;


(*
Returns whether the first AccessLevel is sufficient to grant access at the second, required, access level.
 *)
(*val grantsAccess : AccessLevel -> AccessLevel -> bool*)

val _ = Define `
 ((grantsAccess:AccessLevel -> AccessLevel -> bool) currentLevel requiredLevel=
    (((int_of_AccessLevel currentLevel)) >= ((int_of_AccessLevel requiredLevel))))`;


(*
Returns the current effective access level determined by accessing the relevant parts of the MIPS status register.
 *)
(*val getAccessLevel : unit -> M AccessLevel*)

val _ = Define `
 ((getAccessLevel:unit ->(regstate)state_monad$sequential_state ->(((AccessLevel),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state$or_boolS
     ( state_monad$bindS(state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
      state_monad$returnS ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word))))))
     ( state_monad$bindS(state_monad$read_regS CP0Status_ref) (\ (w__1 : StatusReg) . 
      state_monad$returnS ((bits_to_bool ((get_StatusReg_ERL w__1  :  1 words$word))))))) (\ (w__2 : bool) . 
   if w__2 then state_monad$returnS Kernel
   else state_monad$bindS
     (state_monad$read_regS CP0Status_ref) (\ (w__3 : StatusReg) . 
     let p__133 = ((get_StatusReg_KSU w__3  :  2 words$word)) in
     let b__0 = p__133 in
     state_monad$returnS (if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then Kernel
             else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then Supervisor
             else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then User
             else User)))))`;


(*val checkCP0Access : unit -> M unit*)

val _ = Define `
 ((checkCP0Access:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (getAccessLevel () ) (\ accessLevel .  state_monad$bindS
   (state$and_boolS (state_monad$returnS (((accessLevel <> Kernel))))
     ( state_monad$bindS(state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
      state_monad$returnS ((~ ((bit_to_bool ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):ii)))))))))) (\ (w__1 :
     bool) . 
   if w__1 then state_monad$seqS
     (set_CauseReg_CE CP0Cause_ref (vec_of_bits [B0;B0]  :  2 words$word)) (SignalException CpU)
   else state_monad$returnS () ))))`;


(*val incrementCP0Count : unit -> M unit*)

val _ = Define `
 ((incrementCP0Count:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M) (\ (w__0 : TLBIndexT) .  state_monad$bindS
   (state_monad$read_regS TLBWired_ref  : ( 6 words$word) M) (\ (w__1 :  6 words$word) .  state_monad$bindS
   (if (((w__0 = w__1))) then state_monad$returnS TLBIndexMax
    else state_monad$bindS
      (state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M) (\ (w__2 :  6 words$word) . 
      state_monad$returnS ((sub_vec_int w__2 (( 1 : int):ii)  :  6 words$word)))) (\ (w__3 :  6 words$word) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBRandom_ref w__3)
   (state_monad$read_regS CP0Count_ref  : ( 32 words$word) M)) (\ (w__4 :  32 words$word) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0Count_ref ((add_vec_int w__4 (( 1 : int):ii)  :  32 words$word)))
   (state_monad$read_regS CP0Count_ref  : ( 32 words$word) M)) (\ (w__5 : 32 bits) .  state_monad$bindS
   (state_monad$read_regS CP0Compare_ref  : ( 32 words$word) M) (\ (w__6 :  32 words$word) .  state_monad$bindS (state_monad$seqS
   (if (((w__5 = w__6))) then state_monad$bindS
      (state_monad$read_regS CP0Cause_ref) (\ (w__7 : CauseReg) . 
      set_CauseReg_IP CP0Cause_ref
        ((or_vec ((get_CauseReg_IP w__7  :  8 words$word))
            (vec_of_bits [B1;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
           :  8 words$word)))
    else state_monad$returnS () )
   (state_monad$read_regS CP0Status_ref)) (\ (w__8 : StatusReg) . 
   let ims = ((get_StatusReg_IM w__8  :  8 words$word)) in state_monad$bindS
   (state_monad$read_regS CP0Cause_ref) (\ (w__9 : CauseReg) . 
   let ips = ((get_CauseReg_IP w__9  :  8 words$word)) in state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__10 : StatusReg) . 
   let ie = ((get_StatusReg_IE w__10  :  1 words$word)) in state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__11 : StatusReg) . 
   let exl = ((get_StatusReg_EXL w__11  :  1 words$word)) in state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__12 : StatusReg) . 
   let erl = ((get_StatusReg_ERL w__12  :  1 words$word)) in
   if (((((~ ((bits_to_bool exl)))) /\ (((((~ ((bits_to_bool erl)))) /\ (((((bits_to_bool ie)) /\ (((((and_vec ips ims  :  8 words$word)) <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))))))))) then
     SignalException Interrupt
   else state_monad$returnS () )))))))))))))`;


(*val decode_failure_of_num : integer -> decode_failure*)

val _ = Define `
 ((decode_failure_of_num:int -> decode_failure) arg_=
    (let l__74 = arg_ in
   if (((l__74 = (( 0 : int):ii)))) then No_matching_pattern
   else if (((l__74 = (( 1 : int):ii)))) then Unsupported_instruction
   else if (((l__74 = (( 2 : int):ii)))) then Illegal_instruction
   else Internal_error))`;


(*val num_of_decode_failure : decode_failure -> integer*)

val _ = Define `
 ((num_of_decode_failure:decode_failure -> int) arg_= 
  ((case arg_ of   no_matching_pattern => (( 0 : int): ii) )))`;


(*val undefined_decode_failure : unit -> M decode_failure*)

val _ = Define `
 ((undefined_decode_failure:unit ->(regstate)state_monad$sequential_state ->(((decode_failure),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =
    (internal_pick [No_matching_pattern;Unsupported_instruction;Illegal_instruction;Internal_error]))`;


(*val Comparison_of_num : integer -> Comparison*)

val _ = Define `
 ((Comparison_of_num:int -> Comparison) arg_=
    (let l__67 = arg_ in
   if (((l__67 = (( 0 : int):ii)))) then EQ'
   else if (((l__67 = (( 1 : int):ii)))) then NE
   else if (((l__67 = (( 2 : int):ii)))) then GE
   else if (((l__67 = (( 3 : int):ii)))) then GEU
   else if (((l__67 = (( 4 : int):ii)))) then GT'
   else if (((l__67 = (( 5 : int):ii)))) then LE
   else if (((l__67 = (( 6 : int):ii)))) then LT'
   else LTU))`;


(*val num_of_Comparison : Comparison -> integer*)

val _ = Define `
 ((num_of_Comparison:Comparison -> int) arg_=
    ((case arg_ of
     EQ' => (( 0 : int):ii)
   | NE => (( 1 : int):ii)
   | GE => (( 2 : int):ii)
   | GEU => (( 3 : int):ii)
   | GT' => (( 4 : int):ii)
   | LE => (( 5 : int):ii)
   | LT' => (( 6 : int):ii)
   | LTU => (( 7 : int):ii)
   )))`;


(*val undefined_Comparison : unit -> M Comparison*)

val _ = Define `
 ((undefined_Comparison:unit ->(regstate)state_monad$sequential_state ->(((Comparison),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [EQ';NE;GE;GEU;GT';LE;LT';LTU]))`;


(*val compare : Comparison -> mword ty64 -> mword ty64 -> bool*)

val _ = Define `
 ((compare:Comparison ->(64)words$word ->(64)words$word -> bool) cmp valA valB=
    ((case cmp of
     EQ' => (valA = valB)
   | NE => (valA <> valB)
   | GE => zopz0zKzJ_s valA valB
   | GEU => zopz0zKzJ_u valA valB
   | GT' => zopz0zI_s valB valA
   | LE => zopz0zKzJ_s valB valA
   | LT' => zopz0zI_s valA valB
   | LTU => zopz0zI_u valA valB
   )))`;


(*val WordType_of_num : integer -> WordType*)

val _ = Define `
 ((WordType_of_num:int -> WordType) arg_=
    (let l__64 = arg_ in
   if (((l__64 = (( 0 : int):ii)))) then B
   else if (((l__64 = (( 1 : int):ii)))) then H
   else if (((l__64 = (( 2 : int):ii)))) then W0
   else D))`;


(*val num_of_WordType : WordType -> integer*)

val _ = Define `
 ((num_of_WordType:WordType -> int) arg_=
    ((case arg_ of   B => (( 0 : int):ii) | H => (( 1 : int):ii) | W0 => (( 2 : int):ii) | D => (( 3 : int):ii) )))`;


(*val undefined_WordType : unit -> M WordType*)

val _ = Define `
 ((undefined_WordType:unit ->(regstate)state_monad$sequential_state ->(((WordType),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [B;H;W0;D]))`;


(*val wordWidthBytes : WordType -> integer*)

val _ = Define `
 ((wordWidthBytes:WordType -> int) w=  ((case w of   B => (( 1 : int):ii) | H => (( 2 : int):ii) | W0 => (( 4 : int):ii) | D => (( 8 : int):ii) )))`;


val _ = Define `
 ((alignment_width:int)=  ((( 16 : int):ii)))`;


(*val isAddressAligned : mword ty64 -> WordType -> bool*)

val _ = Define `
 ((isAddressAligned:(64)words$word -> WordType -> bool) addr wordType=
    (let a = (lem$w2ui addr) in
   (((a / alignment_width)) = ((((((a + ((wordWidthBytes wordType)))) - (( 1 : int):ii))) /
         alignment_width)))))`;


(*val MEMr_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => integer -> mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_wrapper:int ->(64)words$word -> int ->(regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) (p8_times_n___tv : int) addr size1=
    (if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then state_monad$bindS
     (state_monad$read_regS UART_RVALID_ref  : ( 1 words$word) M) (\ rvalid .  state_monad$bindS (state_monad$seqS
     (state_monad$write_regS UART_RVALID_ref (vec_of_bits [B0]  :  1 words$word))
     (state_monad$read_regS UART_RDATA_ref  : ( 8 words$word) M)) (\ (w__0 : 8 bits) . 
     state_monad$returnS ((mask p8_times_n___tv
                ((concat_vec
                    (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                      :  32 words$word)
                    ((concat_vec w__0
                        ((concat_vec rvalid
                            ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0;B0;B0]  :  7 words$word)
                                (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                  :  16 words$word)
                               :  23 words$word))
                           :  24 words$word))
                       :  32 words$word))
                   :  64 words$word))
               :  'p8_times_n_ words$word))))
   else if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]
                 :  64 words$word)))) then
     state_monad$returnS ((mask p8_times_n___tv
                (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                              B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;
                              B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
                  :  64 words$word)
               :  'p8_times_n_ words$word))
   else state_monad$bindS
     (MEMr instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) M) (\ w__1 . 
     state_monad$returnS ((reverse_endianness w__1  :  'p8_times_n_ words$word)))))`;


(*val MEMr_reserve_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> M (mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_reserve_wrapper:(64)words$word -> int ->(regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr size1=  (state_monad$bindS
   (MEMr_reserve instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) M) (\ w__0 . 
   state_monad$returnS ((reverse_endianness w__0  :  'p8_times_n_ words$word)))))`;


(*val init_cp0_state : unit -> M unit*)

val _ = Define `
 ((init_cp0_state:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (set_StatusReg_BEV CP0Status_ref ((cast_unit_vec0 B1  :  1 words$word))))`;


(*val init_cp2_state : unit -> M unit*)

(*val cp2_next_pc : unit -> M unit*)

(*val dump_cp2_state : unit -> M unit*)

(*val extzv : forall 'n 'm. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((extzv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((extz_vec m__tv v  :  'm words$word)))`;


(*val extsv : forall 'n 'm. Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

val _ = Define `
 ((extsv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((exts_vec m__tv v  :  'm words$word)))`;


(*val slice_mask : forall 'n . Size 'n => integer -> ii -> ii -> mword 'n*)

val _ = Define `
 ((slice_mask:int -> int -> int -> 'n words$word) (n__tv : int) i l=
    (let (one1 : 'n bits) = ((extzv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftl ((sub_vec ((shiftl one1 l  :  'n words$word)) one1  :  'n words$word)) i  :  'n words$word)))`;


(*val is_zero_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((is_zero_subrange:'n words$word -> int -> int -> bool) xs i j=
    (((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) = ((extzv ((int_of_num (words$word_len xs))) (vec_of_bits [B0]  :  1 words$word)  :  'n words$word))))`;


(*val is_ones_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((is_ones_subrange:'n words$word -> int -> int -> bool) xs i j=
    (let (m : 'n bits) = ((slice_mask ((int_of_num (words$word_len xs))) j ((j - i))  :  'n words$word)) in
   (((and_vec xs m  :  'n words$word)) = m)))`;


(*val slice_slice_concat : forall 'n 'm 'r . Size 'm, Size 'n, Size 'r => integer -> mword 'n -> ii -> ii -> mword 'm -> ii -> ii -> mword 'r*)

val _ = Define `
 ((slice_slice_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 'r words$word) (r__tv : int) xs i l ys i' l'=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   let ys =
     ((shiftr ((and_vec ys ((slice_mask ((int_of_num (words$word_len ys))) i' l'  :  'm words$word))  :  'm words$word)) i'
       :  'm words$word)) in
   (or_vec ((shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)) ((extzv r__tv ys  :  'r words$word))
     :  'r words$word)))`;


(*val slice_zeros_concat : forall 'n   'r . Size 'n, Size 'r => integer -> mword 'n -> ii -> integer -> integer -> mword 'r*)

val _ = Define `
 ((slice_zeros_concat:int -> 'n words$word -> int -> int -> int -> 'r words$word) (r__tv : int) xs i l l'=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)))`;


(*val subrange_subrange_eq : forall 'n . Size 'n => mword 'n -> ii -> ii -> mword 'n -> ii -> ii -> bool*)

val _ = Define `
 ((subrange_subrange_eq:'n words$word -> int -> int -> 'n words$word -> int -> int -> bool) xs i j ys i' j'=
    (let xs =
     ((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   let ys =
     ((shiftr
        ((and_vec ys ((slice_mask ((int_of_num (words$word_len xs))) j' ((i' - j'))  :  'n words$word))  :  'n words$word))
        j'
       :  'n words$word)) in
   (xs = ys)))`;


(*val subrange_subrange_concat : forall 'n   'm   's . Size 'm, Size 'n, Size 's => integer -> mword 'n -> integer -> integer -> mword 'm -> integer -> integer -> mword 's*)

val _ = Define `
 ((subrange_subrange_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 's words$word) (s__tv : int) xs i j ys i' j'=
    (let xs =
     ((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   let ys =
     ((shiftr
        ((and_vec ys ((slice_mask ((int_of_num (words$word_len ys))) j' ((i' - j'))  :  'm words$word))  :  'm words$word))
        j'
       :  'm words$word)) in
   (or_vec
      ((sub_vec_int ((shiftl ((extzv s__tv xs  :  's words$word)) i'  :  's words$word))
          ((j' - (( 1 : int):ii)))
         :  's words$word)) ((extzv s__tv ys  :  's words$word))
     :  's words$word)))`;


(*val place_subrange : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> ii -> mword 'm*)

val _ = Define `
 ((place_subrange:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i j shift=
    (let xs =
     ((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val place_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> ii -> mword 'm*)

val _ = Define `
 ((place_slice:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i l shift=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val zext_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> mword 'm*)

val _ = Define `
 ((zext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (extzv m__tv xs  :  'm words$word)))`;


(*val sext_slice : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> ii -> ii -> mword 'm*)

val _ = Define `
 ((sext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=
    (let xs =
     ((arith_shiftr
        ((shiftl ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word))
            ((((((int_of_num (words$word_len xs))) - i)) - l))
           :  'n words$word)) ((((int_of_num (words$word_len xs))) - l))
       :  'n words$word)) in
   (extsv m__tv xs  :  'm words$word)))`;


(*val unsigned_slice : forall 'n . Size 'n => mword 'n -> ii -> ii -> ii*)

val _ = Define `
 ((unsigned_slice:'n words$word -> int -> int -> int) xs i l=
    (let xs =
     ((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   lem$w2ui xs))`;


(*val unsigned_subrange : forall 'n . Size 'n => mword 'n -> ii -> ii -> ii*)

val _ = Define `
 ((unsigned_subrange:'n words$word -> int -> int -> int) xs i j=
    (let xs =
     ((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) i
       :  'n words$word)) in
   lem$w2ui xs))`;


(*val zext_ones : forall 'n . Size 'n => integer -> ii -> mword 'n*)

val _ = Define `
 ((zext_ones:int -> int -> 'n words$word) (n__tv : int) m=
    (let (v : 'n bits) = ((extsv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftr v ((((int_of_num (words$word_len v))) - m))  :  'n words$word)))`;


(*val tlbEntryMatch : mword ty2 -> mword ty27 -> mword ty8 -> TLBEntry -> bool*)

val _ = Define `
 ((tlbEntryMatch:(2)words$word ->(27)words$word ->(8)words$word -> TLBEntry -> bool) r vpn2 asid entry=
    (let entryValid = ((get_TLBEntry_valid entry  :  1 words$word)) in
   let entryR = ((get_TLBEntry_r entry  :  2 words$word)) in
   let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
   let entryVPN = ((get_TLBEntry_vpn2 entry  :  27 words$word)) in
   let entryASID = ((get_TLBEntry_asid entry  :  8 words$word)) in
   let entryG = ((get_TLBEntry_g entry  :  1 words$word)) in
   let (vpnMask : 27 bits) =
     ((not_vec ((zero_extend1 (( 27 : int):ii) entryMask  :  27 words$word))  :  27 words$word)) in
   (((bits_to_bool entryValid)) /\ ((((((r = entryR))) /\ ((((((((and_vec vpn2 vpnMask  :  27 words$word)) = ((and_vec entryVPN vpnMask  :  27 words$word))))) /\ ((((((asid = entryASID))) \/ ((bits_to_bool entryG))))))))))))))`;


(*val tlbSearch : mword ty64 -> M (maybe (mword ty6))*)

val _ = Define `
 ((tlbSearch:(64)words$word ->(regstate)state_monad$sequential_state ->(((((6)words$word)option),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) VAddr=
    (state_monad$catch_early_returnS
     (let r = ((subrange_vec_dec VAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)) in
     let vpn2 = ((subrange_vec_dec VAddr (( 39 : int):ii) (( 13 : int):ii)  :  27 words$word)) in state_monad$bindS
     (state_monad$liftRS (state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) . 
     let asid = ((get_TLBEntryHiReg_ASID w__0  :  8 words$word)) in state_monad$seqS
     (state$foreachS (index_list (( 0 : int):ii) (( 63 : int):ii) (( 1 : int):ii)) () 
       (\ idx unit_var .  state_monad$bindS
         (state_monad$liftRS (state_monad$read_regS ((access_list_dec TLBEntries idx)))) (\ (w__1 : TLBEntry) . 
         if ((tlbEntryMatch r vpn2 asid w__1)) then
           (state_monad$early_returnS (SOME ((to_bits ((make_the_value (( 6 : int):ii)  :  6 itself)) idx  :  6 words$word))) : (unit, ( ( 6 words$word)option))
             MR)
         else state_monad$returnS () )))
     (state_monad$returnS NONE)))))`;


(*val TLBTranslate2 : mword ty64 -> MemAccessType -> M (mword ty64 * bool)*)

val _ = Define `
 ((TLBTranslate2:(64)words$word -> MemAccessType ->(regstate)state_monad$sequential_state ->((((64)words$word#bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) vAddr accessType=  (state_monad$bindS
   (tlbSearch vAddr  : ( ( 6 words$word)option) M) (\ idx . 
   (case idx of
     SOME (idx) =>
      let i = (lem$w2ui idx) in state_monad$bindS
      (state_monad$read_regS ((access_list_dec TLBEntries i))) (\ entry . 
      let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
      let b__0 = entryMask in state_monad$bindS
      (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) then
         state_monad$returnS (( 12 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 14 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 16 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 18 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 20 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 22 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 24 : int):ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 26 : int):ii)
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         state_monad$returnS (( 28 : int):ii)
       else undefined_range (( 12 : int):ii) (( 28 : int):ii)) (\ (evenOddBit : int) . 
      let isOdd = (access_vec_dec vAddr evenOddBit) in
      let ((caps : 1 bits), (capl : 1 bits), (pfn : 24 bits), (d : 1 bits), (v : 1 bits)) =
        (if ((bit_to_bool isOdd)) then
          ((get_TLBEntry_caps1 entry  :  1 words$word),
           (get_TLBEntry_capl1 entry  :  1 words$word),
           (get_TLBEntry_pfn1 entry  :  24 words$word),
           (get_TLBEntry_d1 entry  :  1 words$word),
           (get_TLBEntry_v1 entry  :  1 words$word))
        else
          ((get_TLBEntry_caps0 entry  :  1 words$word),
           (get_TLBEntry_capl0 entry  :  1 words$word),
           (get_TLBEntry_pfn0 entry  :  24 words$word),
           (get_TLBEntry_d0 entry  :  1 words$word),
           (get_TLBEntry_v0 entry  :  1 words$word))) in
      if ((~ ((bits_to_bool v)))) then
        (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBInvS else XTLBInvL) vAddr
          : (( 64 words$word # bool)) M)
      else if ((((((accessType = StoreData))) /\ ((~ ((bits_to_bool d))))))) then
        (SignalExceptionTLB TLBMod vAddr  : (( 64 words$word # bool)) M)
      else
        let (res : 64 bits) =
          ((zero_extend1 (( 64 : int):ii)
             ((subrange_subrange_concat
                 (((((((( 23 : int):ii) -
                             ((((evenOddBit - (( 12 : int):ii))) - (( 1 : int):ii)))))
                         +
                         ((evenOddBit - (( 1 : int):ii)))))
                     - (((( 0 : int):ii) - (( 1 : int):ii))))) pfn
                 (( 23 : int):ii) ((evenOddBit - (( 12 : int):ii))) vAddr
                 ((evenOddBit - (( 1 : int):ii))) (( 0 : int):ii)
                :  36 words$word))
            :  64 words$word)) in
        state_monad$returnS (res, bits_to_bool (if (((accessType = StoreData))) then caps else capl))))
   | NONE =>
      (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBRefillS else XTLBRefillL) vAddr
        : (( 64 words$word # bool)) M)
   ))))`;


(*val TLBTranslateC : mword ty64 -> MemAccessType -> M (mword ty64 * bool)*)

val _ = Define `
 ((TLBTranslateC:(64)words$word -> MemAccessType ->(regstate)state_monad$sequential_state ->((((64)words$word#bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) vAddr accessType=  (state_monad$bindS
   (getAccessLevel () ) (\ currentAccessLevel . 
   let compat32 =
     (((subrange_vec_dec vAddr (( 61 : int):ii) (( 31 : int):ii)  :  31 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1]
         :  31 words$word)) in
   let b__0 = ((subrange_vec_dec vAddr (( 63 : int):ii) (( 62 : int):ii)  :  2 words$word)) in
   let ((requiredLevel : AccessLevel), (addr :  ( 64 bits)option)) =
     (if (((b__0 = (vec_of_bits [B1;B1]  :  2 words$word)))) then
       (case (compat32, (subrange_vec_dec vAddr (( 30 : int):ii) (( 29 : int):ii)  :  2 words$word)) of
         (T, b__1) =>
          if (((b__1 = (vec_of_bits [B1;B1]  :  2 words$word)))) then (Kernel, NONE)
          else if (((b__1 = (vec_of_bits [B1;B0]  :  2 words$word)))) then (Supervisor, NONE)
          else if (((b__1 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
          else
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):ii) (( 0 : int):ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
       | (g__131, g__132) => (Kernel, NONE)
       )
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (Kernel,
        SOME ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                 ((subrange_vec_dec vAddr (( 58 : int):ii) (( 0 : int):ii)  :  59 words$word))
                :  64 words$word)))
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then (Supervisor, NONE)
     else (User, NONE)) in
   if ((~ ((grantsAccess currentAccessLevel requiredLevel)))) then
     (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
       : (( 64 words$word # bool)) M)
   else state_monad$bindS
     (case addr of
       SOME (a) => state_monad$returnS (a, F)
     | NONE =>
        if (((((~ compat32)) /\ ((((lem$w2ui ((subrange_vec_dec vAddr (( 61 : int):ii) (( 0 : int):ii)  :  62 words$word)))) > MAX_VA))))) then
          (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
            : (( 64 words$word # bool)) M)
        else (TLBTranslate2 vAddr accessType  : (( 64 words$word # bool)) M)
     ) (\ varstup .  let ((pa : 64 bits), (c : bool)) = varstup in
     if ((((lem$w2ui pa)) > MAX_PA)) then
       (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
         : (( 64 words$word # bool)) M)
     else state_monad$returnS (pa, c)))))`;


(*val TLBTranslate : mword ty64 -> MemAccessType -> M (mword ty64)*)

val _ = Define `
 ((TLBTranslate:(64)words$word -> MemAccessType ->(regstate)state_monad$sequential_state ->((((64)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) vAddr accessType=  (state_monad$bindS
   (TLBTranslateC vAddr accessType  : (( 64 words$word # bool)) M) (\ varstup .  let (addr, c) = varstup in
   state_monad$returnS addr)))`;


(*val CPtrCmpOp_of_num : integer -> CPtrCmpOp*)

val _ = Define `
 ((CPtrCmpOp_of_num:int -> CPtrCmpOp) arg_=
    (let l__57 = arg_ in
   if (((l__57 = (( 0 : int):ii)))) then CEQ
   else if (((l__57 = (( 1 : int):ii)))) then CNE
   else if (((l__57 = (( 2 : int):ii)))) then CLT
   else if (((l__57 = (( 3 : int):ii)))) then CLE
   else if (((l__57 = (( 4 : int):ii)))) then CLTU
   else if (((l__57 = (( 5 : int):ii)))) then CLEU
   else if (((l__57 = (( 6 : int):ii)))) then CEXEQ
   else CNEXEQ))`;


(*val num_of_CPtrCmpOp : CPtrCmpOp -> integer*)

val _ = Define `
 ((num_of_CPtrCmpOp:CPtrCmpOp -> int) arg_=
    ((case arg_ of
     CEQ => (( 0 : int):ii)
   | CNE => (( 1 : int):ii)
   | CLT => (( 2 : int):ii)
   | CLE => (( 3 : int):ii)
   | CLTU => (( 4 : int):ii)
   | CLEU => (( 5 : int):ii)
   | CEXEQ => (( 6 : int):ii)
   | CNEXEQ => (( 7 : int):ii)
   )))`;


(*val undefined_CPtrCmpOp : unit -> M CPtrCmpOp*)

val _ = Define `
 ((undefined_CPtrCmpOp:unit ->(regstate)state_monad$sequential_state ->(((CPtrCmpOp),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [CEQ;CNE;CLT;CLE;CLTU;CLEU;CEXEQ;CNEXEQ]))`;


(*val ClearRegSet_of_num : integer -> ClearRegSet*)

val _ = Define `
 ((ClearRegSet_of_num:int -> ClearRegSet) arg_=
    (let l__54 = arg_ in
   if (((l__54 = (( 0 : int):ii)))) then GPLo
   else if (((l__54 = (( 1 : int):ii)))) then GPHi
   else if (((l__54 = (( 2 : int):ii)))) then CLo
   else CHi))`;


(*val num_of_ClearRegSet : ClearRegSet -> integer*)

val _ = Define `
 ((num_of_ClearRegSet:ClearRegSet -> int) arg_=
    ((case arg_ of   GPLo => (( 0 : int):ii) | GPHi => (( 1 : int):ii) | CLo => (( 2 : int):ii) | CHi => (( 3 : int):ii) )))`;


(*val undefined_ClearRegSet : unit -> M ClearRegSet*)

val _ = Define `
 ((undefined_ClearRegSet:unit ->(regstate)state_monad$sequential_state ->(((ClearRegSet),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (internal_pick [GPLo;GPHi;CLo;CHi]))`;


(*val undefined_CapStruct : unit -> M CapStruct*)

val _ = Define `
 ((undefined_CapStruct:unit ->(regstate)state_monad$sequential_state ->(((CapStruct),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__0 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M) (\ (w__1 : 8 bits) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 24 : int):ii)  : ( 24 words$word) M) (\ (w__2 : 24 bits) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__3 : 16 bits) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 4 : int):ii)  : ( 4 words$word) M) (\ (w__4 : 4 bits) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__5 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__6 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__7 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__8 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__9 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__10 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__11 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__12 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__13 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__14 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__15 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__16 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__17 : 64 bits) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__18 : 64 bits) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__19 : 64 bits) . 
   state_monad$returnS (<| CapStruct_tag := w__0; 
              CapStruct_padding := w__1; 
              CapStruct_otype := w__2; 
              CapStruct_uperms := w__3; 
              CapStruct_perm_reserved11_14 := w__4; 
              CapStruct_access_system_regs := w__5; 
              CapStruct_permit_unseal := w__6; 
              CapStruct_permit_ccall := w__7; 
              CapStruct_permit_seal := w__8; 
              CapStruct_permit_store_local_cap := w__9; 
              CapStruct_permit_store_cap := w__10; 
              CapStruct_permit_load_cap := w__11; 
              CapStruct_permit_store := w__12; 
              CapStruct_permit_load := w__13; 
              CapStruct_permit_execute := w__14; 
              CapStruct_global := w__15; 
              CapStruct_sealed := w__16; 
              CapStruct_address := w__17; 
              CapStruct_base := w__18; 
              CapStruct_length := w__19 |>)))))))))))))))))))))))`;


val _ = Define `
((default_cap:CapStruct)=
   (<| CapStruct_tag := T; 
     CapStruct_padding := ((zeros0 (( 8 : int):ii) ()   :  8 words$word)); 
     CapStruct_otype := ((zeros0 (( 24 : int):ii) ()   :  24 words$word)); 
     CapStruct_uperms := ((ones (( 16 : int):ii) ()   :  16 words$word)); 
     CapStruct_perm_reserved11_14 := ((ones (( 4 : int):ii) ()   :  4 words$word)); 
     CapStruct_access_system_regs := T; 
     CapStruct_permit_unseal := T; 
     CapStruct_permit_ccall := T; 
     CapStruct_permit_seal := T; 
     CapStruct_permit_store_local_cap := T; 
     CapStruct_permit_store_cap := T; 
     CapStruct_permit_load_cap := T; 
     CapStruct_permit_store := T; 
     CapStruct_permit_load := T; 
     CapStruct_permit_execute := T; 
     CapStruct_global := T; 
     CapStruct_sealed := F; 
     CapStruct_address := ((zeros0 (( 64 : int):ii) ()   :  64 words$word)); 
     CapStruct_base := ((zeros0 (( 64 : int):ii) ()   :  64 words$word)); 
     CapStruct_length :=
       ((vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
         :  64 words$word)) |>))`;


val _ = Define `
((null_cap_bits:(256)words$word)=  ((capStructToMemBits256 null_cap  :  256 words$word)))`;


(*val capStructToMemBits : CapStruct -> mword ty256*)

val _ = Define `
 ((capStructToMemBits:CapStruct ->(256)words$word) cap=
    ((xor_vec ((capStructToMemBits256 cap  :  256 words$word)) null_cap_bits  :  256 words$word)))`;


(*val memBitsToCapBits : bool -> mword ty256 -> mword ty257*)

val _ = Define `
 ((memBitsToCapBits:bool ->(256)words$word ->(257)words$word) tag b=
    ((concat_vec ((bool_to_bits tag  :  1 words$word)) ((xor_vec b null_cap_bits  :  256 words$word))
     :  257 words$word)))`;


(*val setCapPerms : CapStruct -> mword ty31 -> CapStruct*)

val _ = Define `
 ((setCapPerms:CapStruct ->(31)words$word -> CapStruct) cap perms=
    ((cap with<|
     CapStruct_uperms := ((subrange_vec_dec perms (( 30 : int):ii) (( 15 : int):ii)  :  16 words$word)); CapStruct_perm_reserved11_14 :=
       ((subrange_vec_dec perms (( 14 : int):ii) (( 11 : int):ii)  :  4 words$word)); CapStruct_access_system_regs :=
       ((bit_to_bool ((access_vec_dec perms (( 10 : int):ii))))); CapStruct_permit_unseal :=
       ((bit_to_bool ((access_vec_dec perms (( 9 : int):ii))))); CapStruct_permit_ccall :=
       ((bit_to_bool ((access_vec_dec perms (( 8 : int):ii))))); CapStruct_permit_seal :=
       ((bit_to_bool ((access_vec_dec perms (( 7 : int):ii))))); CapStruct_permit_store_local_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 6 : int):ii))))); CapStruct_permit_store_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 5 : int):ii))))); CapStruct_permit_load_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 4 : int):ii))))); CapStruct_permit_store :=
       ((bit_to_bool ((access_vec_dec perms (( 3 : int):ii))))); CapStruct_permit_load :=
       ((bit_to_bool ((access_vec_dec perms (( 2 : int):ii))))); CapStruct_permit_execute :=
       ((bit_to_bool ((access_vec_dec perms (( 1 : int):ii))))); CapStruct_global :=
       ((bit_to_bool ((access_vec_dec perms (( 0 : int):ii)))))|>)))`;


(*val sealCap : CapStruct -> mword ty24 -> (bool * CapStruct)*)

val _ = Define `
 ((sealCap:CapStruct ->(24)words$word -> bool#CapStruct) cap otype=  (T, (cap with<| CapStruct_sealed := T; CapStruct_otype := otype|>)))`;


(*val getCapTop : CapStruct -> integer*)

val _ = Define `
 ((getCapTop:CapStruct -> int) c=  (((lem$w2ui c.CapStruct_base)) + ((lem$w2ui c.CapStruct_length))))`;


(*val getCapOffset : CapStruct -> integer*)

val _ = Define `
 ((getCapOffset:CapStruct -> int) c=
    (hardware_mod ((((lem$w2ui c.CapStruct_address)) - ((lem$w2ui c.CapStruct_base))))
     ((pow2 (( 64 : int):ii)))))`;


(*val getCapLength : CapStruct -> integer*)

val _ = Define `
 ((getCapLength:CapStruct -> int) c=  (lem$w2ui c.CapStruct_length))`;


(*val getCapCursor : CapStruct -> integer*)

val _ = Define `
 ((getCapCursor:CapStruct -> int) c=  (lem$w2ui c.CapStruct_address))`;


(*
\function{incCapOffset} is the same as \function{setCapOffset} except that the 64-bit value is added to the current capability offset modulo $2^{64}$ (i.e. signed twos-complement arithemtic).
 *)
(*val incCapOffset : CapStruct -> mword ty64 -> (bool * CapStruct)*)

val _ = Define `
 ((incCapOffset:CapStruct ->(64)words$word -> bool#CapStruct) c delta=
    (let (newAddr : 64 bits) = ((add_vec c.CapStruct_address delta  :  64 words$word)) in
   (T, (c with<| CapStruct_address := newAddr|>))))`;


(*
Returns a capability derived from the given capability by setting the base and top to values provided.  The offset of the resulting capability is zero.  In case the requested bounds are not exactly representable the returned boolean is false and the returned capability has bounds at least including the region bounded by base and top but rounded to representable values.
 *)
(*val setCapBounds : CapStruct -> mword ty64 -> mword ty65 -> (bool * CapStruct)*)

val _ = Define `
 ((setCapBounds:CapStruct ->(64)words$word ->(65)words$word -> bool#CapStruct) cap base top=
    (let (length : 65 bits) =
     ((sub_vec top ((concat_vec (vec_of_bits [B0]  :  1 words$word) base  :  65 words$word))  :  65 words$word)) in
   (T,
    (cap with<|
      CapStruct_base := base; CapStruct_length :=
        ((subrange_vec_dec length (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)); CapStruct_address := base|>))))`;


(*val undefined_ast : unit -> M ast*)

val _ = Define `
 ((undefined_ast:unit ->(regstate)state_monad$sequential_state ->(((ast),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__0 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__1 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__2 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__3 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__4 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__5 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__6 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__7 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__8 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__9 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__10 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__11 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__12 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__13 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__14 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__15 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__16 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__17 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__18 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__19 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__20 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__21 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__22 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__23 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__24 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__25 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__26 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__27 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__28 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__29 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__30 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__31 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__32 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__33 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__34 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__35 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__36 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__37 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__38 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__39 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__40 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__41 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__42 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__43 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__44 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__45 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__46 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__47 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__48 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__49 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__50 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__51 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__52 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__53 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__54 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__55 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__56 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__57 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__58 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__59 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__60 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__61 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__62 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__63 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__64 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__65 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__66 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__67 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__68 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__69 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__70 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__71 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__72 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__73 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__74 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__75 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__76 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__77 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__78 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__79 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__80 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__81 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__82 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__83 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__84 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__85 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__86 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__87 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__88 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__89 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__90 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__91 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__92 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__93 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__94 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__95 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__96 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__97 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__98 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__99 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__100 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__101 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__102 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__103 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__104 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__105 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__106 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__107 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__108 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__109 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__110 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__111 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__112 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__113 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__114 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__115 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__116 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__117 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__118 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__119 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__120 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__121 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__122 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__123 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__124 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__125 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__126 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__127 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__128 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__129 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__130 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__131 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__132 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__133 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__134 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__135 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__136 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__137 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__138 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__139 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__140 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__141 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__142 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__143 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__144 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__145 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__146 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__147 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__148 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__149 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__150 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__151 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__152 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 26 : int):ii)  : ( 26 words$word) M) (\ (w__153 :  26 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 26 : int):ii)  : ( 26 words$word) M) (\ (w__154 :  26 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__155 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__156 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__157 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__158 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__159 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__160 :  16 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__161 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__162 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__163 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__164 :  16 words$word) .  state_monad$bindS
   (undefined_Comparison () ) (\ (w__165 : Comparison) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__166 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__167 : bool) .  state_monad$bindS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (undefined_unit () )
   (undefined_unit () ))
   (undefined_unit () ))
   (undefined_unit () ))
   (undefined_unit () ))
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__168 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__169 :  5 words$word) .  state_monad$bindS
   (undefined_Comparison () ) (\ (w__170 : Comparison) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__171 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__172 :  16 words$word) .  state_monad$bindS
   (undefined_Comparison () ) (\ (w__173 : Comparison) .  state_monad$bindS
   (undefined_WordType () ) (\ (w__174 : WordType) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__175 : bool) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__176 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__177 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__178 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__179 :  16 words$word) .  state_monad$bindS
   (undefined_WordType () ) (\ (w__180 : WordType) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__181 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__182 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__183 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__184 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__185 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__186 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__187 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__188 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__189 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__190 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__191 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__192 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__193 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__194 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__195 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__196 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__197 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__198 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__199 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__200 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__201 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__202 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__203 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__204 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__205 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__206 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__207 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__208 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__209 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__210 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__211 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__212 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__213 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__214 :  16 words$word) .  state_monad$bindS (state_monad$seqS
   (undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__215 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__216 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 3 : int):ii)  : ( 3 words$word) M) (\ (w__217 :  3 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__218 : bool) .  state_monad$bindS (state_monad$seqS
   (undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__219 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__220 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 3 : int):ii)  : ( 3 words$word) M) (\ (w__221 :  3 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__222 : bool) .  state_monad$bindS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (undefined_unit () )
   (undefined_unit () ))
   (undefined_unit () ))
   (undefined_unit () ))
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__223 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__224 :  5 words$word) .  state_monad$bindS (state_monad$seqS
   (undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__225 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__226 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__227 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__228 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__229 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__230 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__231 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__232 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__233 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__234 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__235 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__236 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__237 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__238 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__239 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__240 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__241 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__242 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__243 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__244 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__245 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__246 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__247 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__248 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__249 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__250 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__251 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__252 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__253 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__254 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__255 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__256 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__257 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__258 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__259 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__260 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__261 :  5 words$word) .  state_monad$bindS
   (undefined_CPtrCmpOp () ) (\ (w__262 : CPtrCmpOp) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__263 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__264 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__265 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__266 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__267 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):ii)  : ( 11 words$word) M) (\ (w__268 :  11 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__269 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__270 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__271 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__272 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__273 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__274 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__275 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__276 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):ii)  : ( 11 words$word) M) (\ (w__277 :  11 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__278 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__279 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__280 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__281 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__282 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__283 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__284 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__285 :  5 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__286 : bool) .  state_monad$bindS
   (undefined_ClearRegSet () ) (\ (w__287 : ClearRegSet) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__288 :  16 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__289 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__290 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__291 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__292 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__293 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__294 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__295 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__296 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__297 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__298 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__299 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__300 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__301 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__302 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__303 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__304 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__305 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__306 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__307 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__308 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__309 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__310 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__311 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__312 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__313 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__314 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__315 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):ii)  : ( 11 words$word) M) (\ (w__316 :  11 words$word) .  state_monad$bindS (state_monad$seqS
   (undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M)) (\ (w__317 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__318 :  16 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__319 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__320 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__321 :  16 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__322 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__323 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__324 :  5 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__325 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__326 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__327 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__328 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M) (\ (w__329 :  8 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__330 : bool) .  state_monad$bindS
   (undefined_WordType () ) (\ (w__331 : WordType) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__332 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__333 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__334 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__335 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__336 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M) (\ (w__337 :  8 words$word) .  state_monad$bindS
   (undefined_WordType () ) (\ (w__338 : WordType) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__339 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__340 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__341 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__342 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__343 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):ii)  : ( 11 words$word) M) (\ (w__344 :  11 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__345 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__346 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__347 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__348 :  5 words$word) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):ii)  : ( 11 words$word) M) (\ (w__349 :  11 words$word) .  state_monad$bindS
   (state_monad$undefined_boolS () ) (\ (w__350 : bool) .  state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):ii)  : ( 5 words$word) M) (\ (w__351 :  5 words$word) .  state_monad$seqS
   (undefined_unit () )
   (internal_pick
     [DADDIU (w__0,w__1,w__2);DADDU (w__3,w__4,w__5);DADDI (w__6,w__7,w__8);DADD (w__9,w__10,w__11);ADD (w__12,w__13,w__14);ADDI (w__15,w__16,w__17);ADDU (w__18,w__19,w__20);ADDIU (w__21,w__22,w__23);DSUBU (w__24,w__25,w__26);DSUB (w__27,w__28,w__29);SUB0 (w__30,w__31,w__32);SUBU (w__33,w__34,w__35);AND (w__36,w__37,w__38);ANDI (w__39,w__40,w__41);OR (w__42,w__43,w__44);ORI (w__45,w__46,w__47);NOR (w__48,w__49,w__50);XOR (w__51,w__52,w__53);XORI (w__54,w__55,w__56);LUI (w__57,w__58);DSLL (w__59,w__60,w__61);DSLL32 (w__62,w__63,w__64);DSLLV (w__65,w__66,w__67);DSRA (w__68,w__69,w__70);DSRA32 (w__71,w__72,w__73);DSRAV (w__74,w__75,w__76);DSRL (w__77,w__78,w__79);DSRL32 (w__80,w__81,w__82);DSRLV (w__83,w__84,w__85);SLL (w__86,w__87,w__88);SLLV (w__89,w__90,w__91);SRA (w__92,w__93,w__94);SRAV (w__95,w__96,w__97);SRL (w__98,w__99,w__100);SRLV (w__101,w__102,w__103);SLT (w__104,w__105,w__106);SLTI (w__107,w__108,w__109);SLTU (w__110,w__111,w__112);SLTIU (w__113,w__114,w__115);MOVN (w__116,w__117,w__118);MOVZ (w__119,w__120,w__121);MFHI w__122;MFLO w__123;MTHI w__124;MTLO w__125;MUL (w__126,w__127,w__128);MULT (w__129,w__130);MULTU (w__131,w__132);DMULT (w__133,w__134);DMULTU (w__135,w__136);MADD (w__137,w__138);MADDU (w__139,w__140);MSUB (w__141,w__142);MSUBU (w__143,w__144);DIV0 (w__145,w__146);DIVU (w__147,w__148);DDIV (w__149,w__150);DDIVU (w__151,w__152);J w__153;JAL w__154;JR w__155;JALR (w__156,w__157);BEQ (w__158,w__159,w__160,w__161,w__162);BCMPZ (w__163,w__164,w__165,w__166,w__167);SYSCALL_THREAD_START () ;ImplementationDefinedStopFetching () ;SYSCALL () ;BREAK () ;WAIT () ;TRAPREG (w__168,w__169,w__170);TRAPIMM (w__171,w__172,w__173);Load (w__174,w__175,w__176,w__177,w__178,w__179);Store (w__180,w__181,w__182,w__183,w__184);LWL (w__185,w__186,w__187);LWR (w__188,w__189,w__190);SWL (w__191,w__192,w__193);SWR (w__194,w__195,w__196);LDL (w__197,w__198,w__199);LDR (w__200,w__201,w__202);SDL (w__203,w__204,w__205);SDR (w__206,w__207,w__208);CACHE (w__209,w__210,w__211);PREF (w__212,w__213,w__214);SYNC () ;MFC0 (w__215,w__216,w__217,w__218);HCF () ;MTC0 (w__219,w__220,w__221,w__222);TLBWI () ;TLBWR () ;TLBR () ;TLBP () ;RDHWR (w__223,w__224);ERET () ;CGetPerm (w__225,w__226);CGetType (w__227,w__228);CGetBase (w__229,w__230);CGetLen (w__231,w__232);CGetTag (w__233,w__234);CGetSealed (w__235,w__236);CGetOffset (w__237,w__238);CGetAddr (w__239,w__240);CGetPCC w__241;CGetPCCSetOffset (w__242,w__243);CGetCause w__244;CSetCause w__245;CReadHwr (w__246,w__247);CWriteHwr (w__248,w__249);CAndPerm (w__250,w__251,w__252);CToPtr (w__253,w__254,w__255);CSub (w__256,w__257,w__258);CPtrCmp (w__259,w__260,w__261,w__262);CIncOffset (w__263,w__264,w__265);CIncOffsetImmediate (w__266,w__267,w__268);CSetOffset (w__269,w__270,w__271);CSetBounds (w__272,w__273,w__274);CSetBoundsImmediate (w__275,w__276,w__277);CSetBoundsExact (w__278,w__279,w__280);CClearTag (w__281,w__282);CMOVX (w__283,w__284,w__285,w__286);ClearRegs (w__287,w__288);CFromPtr (w__289,w__290,w__291);CBuildCap (w__292,w__293,w__294);CCopyType (w__295,w__296,w__297);CCheckPerm (w__298,w__299);CCheckType (w__300,w__301);CTestSubset (w__302,w__303,w__304);CSeal (w__305,w__306,w__307);CCSeal (w__308,w__309,w__310);CUnseal (w__311,w__312,w__313);CCall (w__314,w__315,w__316);CReturn () ;CBX (w__317,w__318,w__319);CBZ (w__320,w__321,w__322);CJALR (w__323,w__324,w__325);CLoad (w__326,w__327,w__328,w__329,w__330,w__331,w__332);CStore (w__333,w__334,w__335,w__336,w__337,w__338,w__339);CSC (w__340,w__341,w__342,w__343,w__344,w__345);CLC (w__346,w__347,w__348,w__349,w__350);C2Dump w__351;RI () ])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`;


(*val execute : ast -> M unit*)

(*val decode : mword ty32 -> maybe ast*)

val _ = Define `
((DDC:(5)words$word)=  ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))`;


val _ = Define `
((IDC:(5)words$word)=  ((vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)))`;


val _ = Define `
((KR1C:(5)words$word)=  ((vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))`;


val _ = Define `
((KR2C:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))`;


val _ = Define `
((KCC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))`;


val _ = Define `
((KDC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))`;


val _ = Define `
((EPCC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word)))`;


val _ = Define `
((CapRegs:(((regstate),(register_value),(CapReg))register_ref)list)=
   ([C31_ref;C30_ref;C29_ref;C28_ref;C27_ref;C26_ref;C25_ref;C24_ref;C23_ref;C22_ref;C21_ref;C20_ref;
   C19_ref;C18_ref;C17_ref;C16_ref;C15_ref;C14_ref;C13_ref;C12_ref;C11_ref;C10_ref;C09_ref;C08_ref;
   C07_ref;C06_ref;C05_ref;C04_ref;C03_ref;C02_ref;C01_ref;C00_ref]))`;


val _ = Define `
 ((max_otype:int)=  (MAX0 (( 24 : int):ii)))`;


val _ = Define `
 ((have_cp2:bool)=  T)`;


(*
This function reads a given capability register and returns its contents converted to a CapStruct.
*)
(*val readCapReg : mword ty5 -> M CapStruct*)

val _ = Define `
 ((readCapReg:(5)words$word ->(regstate)state_monad$sequential_state ->(((CapStruct),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) n=
    (let i = (lem$w2ui n) in state_monad$bindS
   (state_monad$read_regS ((access_list_dec CapRegs i  : (regstate, register_value, ( 257 words$word)) register_ref))
     : ( 257 words$word) M) (\ (w__0 :  257 words$word) . 
   state_monad$returnS ((capRegToCapStruct w__0)))))`;


(*val writeCapReg : mword ty5 -> CapStruct -> M unit*)

val _ = Define `
 ((writeCapReg:(5)words$word -> CapStruct ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) n cap=
    (let i = (lem$w2ui n) in
   state_monad$write_regS
     ((access_list_dec CapRegs i  : (regstate, register_value, ( 257 words$word)) register_ref))
     ((capStructToCapReg cap  :  257 words$word))))`;


(*val CapEx_of_num : integer -> CapEx*)

val _ = Define `
 ((CapEx_of_num:int -> CapEx) arg_=
    (let l__32 = arg_ in
   if (((l__32 = (( 0 : int):ii)))) then CapEx_None
   else if (((l__32 = (( 1 : int):ii)))) then CapEx_LengthViolation
   else if (((l__32 = (( 2 : int):ii)))) then CapEx_TagViolation
   else if (((l__32 = (( 3 : int):ii)))) then CapEx_SealViolation
   else if (((l__32 = (( 4 : int):ii)))) then CapEx_TypeViolation
   else if (((l__32 = (( 5 : int):ii)))) then CapEx_CallTrap
   else if (((l__32 = (( 6 : int):ii)))) then CapEx_ReturnTrap
   else if (((l__32 = (( 7 : int):ii)))) then CapEx_TSSUnderFlow
   else if (((l__32 = (( 8 : int):ii)))) then CapEx_UserDefViolation
   else if (((l__32 = (( 9 : int):ii)))) then CapEx_TLBNoStoreCap
   else if (((l__32 = (( 10 : int):ii)))) then CapEx_InexactBounds
   else if (((l__32 = (( 11 : int):ii)))) then CapEx_GlobalViolation
   else if (((l__32 = (( 12 : int):ii)))) then CapEx_PermitExecuteViolation
   else if (((l__32 = (( 13 : int):ii)))) then CapEx_PermitLoadViolation
   else if (((l__32 = (( 14 : int):ii)))) then CapEx_PermitStoreViolation
   else if (((l__32 = (( 15 : int):ii)))) then CapEx_PermitLoadCapViolation
   else if (((l__32 = (( 16 : int):ii)))) then CapEx_PermitStoreCapViolation
   else if (((l__32 = (( 17 : int):ii)))) then CapEx_PermitStoreLocalCapViolation
   else if (((l__32 = (( 18 : int):ii)))) then CapEx_PermitSealViolation
   else if (((l__32 = (( 19 : int):ii)))) then CapEx_AccessSystemRegsViolation
   else if (((l__32 = (( 20 : int):ii)))) then CapEx_PermitCCallViolation
   else if (((l__32 = (( 21 : int):ii)))) then CapEx_AccessCCallIDCViolation
   else CapEx_PermitUnsealViolation))`;


(*val num_of_CapEx : CapEx -> integer*)

val _ = Define `
 ((num_of_CapEx:CapEx -> int) arg_=
    ((case arg_ of
     CapEx_None => (( 0 : int):ii)
   | CapEx_LengthViolation => (( 1 : int):ii)
   | CapEx_TagViolation => (( 2 : int):ii)
   | CapEx_SealViolation => (( 3 : int):ii)
   | CapEx_TypeViolation => (( 4 : int):ii)
   | CapEx_CallTrap => (( 5 : int):ii)
   | CapEx_ReturnTrap => (( 6 : int):ii)
   | CapEx_TSSUnderFlow => (( 7 : int):ii)
   | CapEx_UserDefViolation => (( 8 : int):ii)
   | CapEx_TLBNoStoreCap => (( 9 : int):ii)
   | CapEx_InexactBounds => (( 10 : int):ii)
   | CapEx_GlobalViolation => (( 11 : int):ii)
   | CapEx_PermitExecuteViolation => (( 12 : int):ii)
   | CapEx_PermitLoadViolation => (( 13 : int):ii)
   | CapEx_PermitStoreViolation => (( 14 : int):ii)
   | CapEx_PermitLoadCapViolation => (( 15 : int):ii)
   | CapEx_PermitStoreCapViolation => (( 16 : int):ii)
   | CapEx_PermitStoreLocalCapViolation => (( 17 : int):ii)
   | CapEx_PermitSealViolation => (( 18 : int):ii)
   | CapEx_AccessSystemRegsViolation => (( 19 : int):ii)
   | CapEx_PermitCCallViolation => (( 20 : int):ii)
   | CapEx_AccessCCallIDCViolation => (( 21 : int):ii)
   | CapEx_PermitUnsealViolation => (( 22 : int):ii)
   )))`;


(*val undefined_CapEx : unit -> M CapEx*)

val _ = Define `
 ((undefined_CapEx:unit ->(regstate)state_monad$sequential_state ->(((CapEx),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =
    (internal_pick
     [CapEx_None;CapEx_LengthViolation;CapEx_TagViolation;CapEx_SealViolation;CapEx_TypeViolation;CapEx_CallTrap;CapEx_ReturnTrap;CapEx_TSSUnderFlow;CapEx_UserDefViolation;CapEx_TLBNoStoreCap;CapEx_InexactBounds;CapEx_GlobalViolation;CapEx_PermitExecuteViolation;CapEx_PermitLoadViolation;CapEx_PermitStoreViolation;CapEx_PermitLoadCapViolation;CapEx_PermitStoreCapViolation;CapEx_PermitStoreLocalCapViolation;CapEx_PermitSealViolation;CapEx_AccessSystemRegsViolation;CapEx_PermitCCallViolation;CapEx_AccessCCallIDCViolation;CapEx_PermitUnsealViolation]))`;


(*val CapExCode : CapEx -> mword ty8*)

val _ = Define `
 ((CapExCode:CapEx ->(8)words$word) ex=
    ((case ex of
     CapEx_None => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
   | CapEx_LengthViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)
   | CapEx_TagViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
   | CapEx_SealViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
   | CapEx_TypeViolation => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0]  :  8 words$word)
   | CapEx_CallTrap => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1]  :  8 words$word)
   | CapEx_ReturnTrap => (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B0]  :  8 words$word)
   | CapEx_TSSUnderFlow => (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1]  :  8 words$word)
   | CapEx_UserDefViolation => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0]  :  8 words$word)
   | CapEx_TLBNoStoreCap => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B1]  :  8 words$word)
   | CapEx_InexactBounds => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B0]  :  8 words$word)
   | CapEx_GlobalViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0]  :  8 words$word)
   | CapEx_PermitExecuteViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B1]  :  8 words$word)
   | CapEx_PermitLoadViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
   | CapEx_PermitStoreViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B1]  :  8 words$word)
   | CapEx_PermitLoadCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0]  :  8 words$word)
   | CapEx_PermitStoreCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B1]  :  8 words$word)
   | CapEx_PermitStoreLocalCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B0]  :  8 words$word)
   | CapEx_PermitSealViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1]  :  8 words$word)
   | CapEx_AccessSystemRegsViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0]  :  8 words$word)
   | CapEx_PermitCCallViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B1]  :  8 words$word)
   | CapEx_AccessCCallIDCViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B1;B0]  :  8 words$word)
   | CapEx_PermitUnsealViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B1;B1]  :  8 words$word)
   )))`;


(*val undefined_CapCauseReg : unit -> M CapCauseReg*)

val _ = Define `
 ((undefined_CapCauseReg:unit ->(regstate)state_monad$sequential_state ->(((CapCauseReg),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M) (\ (w__0 :  16 words$word) . 
   internal_pick [Mk_CapCauseReg w__0])))`;


val _ = Define `
 ((get_CapCauseReg:CapCauseReg ->(16)words$word) (Mk_CapCauseReg (v))=  v)`;


val _ = Define `
 ((set_CapCauseReg:((regstate),(register_value),(CapCauseReg))register_ref ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ r . 
   let r = (Mk_CapCauseReg v) in
   state_monad$write_regS r_ref r)))`;


val _ = Define `
 ((get_CapCauseReg_ExcCode:CapCauseReg ->(8)words$word) (Mk_CapCauseReg (v))=  ((subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))`;


val _ = Define `
 ((set_CapCauseReg_ExcCode:((regstate),(register_value),(CapCauseReg))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CapCauseReg) . 
   let r = ((get_CapCauseReg w__0  :  16 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):ii) (( 8 : int):ii) v  :  16 words$word)) in
   state_monad$write_regS r_ref (Mk_CapCauseReg r))))`;


val _ = Define `
 ((update_CapCauseReg_ExcCode:CapCauseReg ->(8)words$word -> CapCauseReg) (Mk_CapCauseReg (v)) x=
    (Mk_CapCauseReg ((update_subrange_vec_dec v (( 15 : int):ii) (( 8 : int):ii) x  :  16 words$word))))`;


(*val _get_CapCauseReg_RegNum : CapCauseReg -> mword ty8*)

val _ = Define `
 ((get_CapCauseReg_RegNum:CapCauseReg ->(8)words$word) (Mk_CapCauseReg (v))=  ((subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))`;


(*val _set_CapCauseReg_RegNum : register_ref regstate register_value CapCauseReg -> mword ty8 -> M unit*)

val _ = Define `
 ((set_CapCauseReg_RegNum:((regstate),(register_value),(CapCauseReg))register_ref ->(8)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r_ref v=  (state_monad$bindS
   (state_monad$read_regS r_ref) (\ (w__0 : CapCauseReg) . 
   let r = ((get_CapCauseReg w__0  :  16 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):ii) (( 0 : int):ii) v  :  16 words$word)) in
   state_monad$write_regS r_ref (Mk_CapCauseReg r))))`;


(*val _update_CapCauseReg_RegNum : CapCauseReg -> mword ty8 -> CapCauseReg*)

val _ = Define `
 ((update_CapCauseReg_RegNum:CapCauseReg ->(8)words$word -> CapCauseReg) (Mk_CapCauseReg (v)) x=
    (Mk_CapCauseReg ((update_subrange_vec_dec v (( 7 : int):ii) (( 0 : int):ii) x  :  16 words$word))))`;


(*val execute_branch_pcc : CapStruct -> M unit*)

val _ = Define `
 ((execute_branch_pcc:CapStruct ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) newPCC=  (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS
     delayedPC_ref
     ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapOffset newPCC))  :  64 words$word)))
   (state_monad$write_regS delayedPCC_ref ((capStructToCapReg newPCC  :  257 words$word))))
   (state_monad$write_regS branchPending_ref (vec_of_bits [B1]  :  1 words$word))))`;


(*val ERETHook : unit -> M unit*)

val _ = Define `
 ((ERETHook:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS C31_ref  : ( 257 words$word) M) (\ (w__0 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS nextPCC_ref w__0)
   (state_monad$read_regS C31_ref  : ( 257 words$word) M)) (\ (w__1 : CapReg) .  state_monad$write_regS delayedPCC_ref w__1))))`;


(*val raise_c2_exception8 : forall 'o. CapEx -> mword ty8 -> M 'o*)

val _ = Define `
 ((raise_c2_exception8:CapEx ->(8)words$word ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) capEx regnum=  (state_monad$seqS (state_monad$seqS
   (set_CapCauseReg_ExcCode CapCause_ref ((CapExCode capEx  :  8 words$word)))
   (set_CapCauseReg_RegNum CapCause_ref regnum))
   (let mipsEx =
     (if ((((((capEx = CapEx_CallTrap))) \/ (((capEx = CapEx_ReturnTrap)))))) then C2Trap
     else C2E) in
   SignalException mipsEx)))`;


(*val raise_c2_exception : forall 'o. CapEx -> mword ty5 -> M 'o*)

val _ = Define `
 ((raise_c2_exception:CapEx ->(5)words$word ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) capEx regnum=
    (let reg8 = ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word) regnum  :  8 words$word)) in
   if ((((((capEx = CapEx_AccessSystemRegsViolation))) /\ (((regnum = IDC)))))) then
     raise_c2_exception8 CapEx_AccessCCallIDCViolation reg8
   else raise_c2_exception8 capEx reg8))`;


(*val raise_c2_exception_noreg : forall 'o. CapEx -> M 'o*)

val _ = Define `
 ((raise_c2_exception_noreg:CapEx ->(regstate)state_monad$sequential_state ->(('o,(exception))state_monad$result#(regstate)state_monad$sequential_state)set) capEx=
    (raise_c2_exception8 capEx (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1]  :  8 words$word)))`;


(*val pcc_access_system_regs : unit -> M bool*)

val _ = Define `
 ((pcc_access_system_regs:unit ->(regstate)state_monad$sequential_state ->(((bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__0 :  257 words$word) . 
   let pcc = (capRegToCapStruct w__0) in
   state_monad$returnS pcc.CapStruct_access_system_regs)))`;


(*
The following function should be called before reading or writing any capability register to check whether it is one of the protected system capabilities. Although it is usually a general purpose capabilty the invoked data capabiltiy (IDC) is restricted in the branch delay slot of the CCall (selector one) instruction to protect the confidentiality and integrity of the invoked sandbox.
 *)
(*val register_inaccessible : mword ty5 -> M bool*)

val _ = Define `
 ((register_inaccessible:(5)words$word ->(regstate)state_monad$sequential_state ->(((bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) r=
    (state$or_boolS
     (state$and_boolS (state_monad$returnS (((r = IDC))))
        ( state_monad$bindS(state_monad$read_regS inCCallDelay_ref  : ( 1 words$word) M) (\ (w__0 :  1 words$word) . 
         state_monad$returnS ((bits_to_bool w__0)))))
     (state$and_boolS
        (state_monad$returnS ((((((r = KR1C))) \/ ((((((r = KR2C))) \/ ((((((r = KDC))) \/ ((((((r = KCC))) \/ (((r = EPCC))))))))))))))))
        ( state_monad$bindS(pcc_access_system_regs () ) (\ (w__2 : bool) .  state_monad$returnS ((~ w__2)))))))`;


(*val MEMr_tagged : mword ty64 -> M (bool * mword ty256)*)

val _ = Define `
 ((MEMr_tagged:(64)words$word ->(regstate)state_monad$sequential_state ->(((bool#(256)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr=  (state_monad$bindS (state_monad$seqS
   (state_monad$assert_expS (((((((lem$w2ui addr)) % cap_size)) = (( 0 : int):ii)))) "")
   (read_tag_bool instance_Sail_values_Bitvector_Machine_word_mword_dict addr)) (\ tag .  state_monad$bindS
   (MEMr instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size  : ( 256 words$word) M) (\ data . 
   state_monad$returnS (tag, (reverse_endianness data  :  256 words$word))))))`;


(*val MEMr_tagged_reserve : mword ty64 -> M (bool * mword ty256)*)

val _ = Define `
 ((MEMr_tagged_reserve:(64)words$word ->(regstate)state_monad$sequential_state ->(((bool#(256)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr=  (state_monad$bindS (state_monad$seqS
   (state_monad$assert_expS (((((((lem$w2ui addr)) % cap_size)) = (( 0 : int):ii)))) "")
   (read_tag_bool instance_Sail_values_Bitvector_Machine_word_mword_dict addr)) (\ tag .  state_monad$bindS
   (MEMr_reserve instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size  : ( 256 words$word) M) (\ data . 
   state_monad$returnS (tag, (reverse_endianness data  :  256 words$word))))))`;


(*val MEMw_tagged : mword ty64 -> bool -> mword ty256 -> M unit*)

val _ = Define `
 ((MEMw_tagged:(64)words$word -> bool ->(256)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr tag data=  (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (state_monad$assert_expS (((((((lem$w2ui addr)) % cap_size)) = (( 0 : int):ii)))) "")
   (MEMea instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size))
   (MEMval instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size ((reverse_endianness data  :  256 words$word)))) (write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr tag)))`;


(*val MEMw_tagged_conditional : mword ty64 -> bool -> mword ty256 -> M bool*)

val _ = Define `
 ((MEMw_tagged_conditional:(64)words$word -> bool ->(256)words$word ->(regstate)state_monad$sequential_state ->(((bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr tag data=  (state_monad$bindS (state_monad$seqS (state_monad$seqS
   (state_monad$assert_expS (((((((lem$w2ui addr)) % cap_size)) = (( 0 : int):ii)))) "")
   (MEMea_conditional 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size))
   (MEMval_conditional 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size ((reverse_endianness data  :  256 words$word)))) (\ success .  state_monad$seqS
   (if success then write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr tag else state_monad$returnS () ) (state_monad$returnS success))))`;


val _ = Define `
 ((cap_addr_mask:(64)words$word)=
   ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((((pow2 (( 64 : int):ii))) - cap_size))
    :  64 words$word)))`;


(*val MEMw_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M unit*)

val _ = Define `
 ((MEMw_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr size1 data=
    (let ledata = ((reverse_endianness data  :  'p8_times_n_ words$word)) in
   if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then state_monad$seqS
     (state_monad$write_regS UART_WDATA_ref ((subrange_vec_dec ledata (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))
     (state_monad$write_regS UART_WRITTEN_ref (vec_of_bits [B1]  :  1 words$word))
   else state_monad$seqS (state_monad$seqS (state_monad$seqS
     (state_monad$assert_expS (((((and_vec addr cap_addr_mask  :  64 words$word)) = ((and_vec
                        ((add_vec addr
                            ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself))
                                ((size1 - (( 1 : int):ii)))
                               :  64 words$word))
                           :  64 words$word)) cap_addr_mask
                       :  64 words$word))))) "")
     (MEMea instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1))
     (MEMval instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1 ledata)) (write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict ((and_vec addr cap_addr_mask  :  64 words$word)) F)))`;


(*val MEMw_conditional_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => mword ty64 -> integer -> mword 'p8_times_n_ -> M bool*)

val _ = Define `
 ((MEMw_conditional_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(regstate)state_monad$sequential_state ->(((bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr size1 data=  (state_monad$bindS (state_monad$seqS (state_monad$seqS
   (state_monad$assert_expS (((((and_vec addr cap_addr_mask  :  64 words$word)) = ((and_vec
                      ((add_vec addr
                          ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself))
                              ((size1 - (( 1 : int):ii)))
                             :  64 words$word))
                         :  64 words$word)) cap_addr_mask
                     :  64 words$word))))) "")
   (MEMea_conditional 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1))
   (MEMval_conditional 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1 ((reverse_endianness data  :  'p8_times_n_ words$word)))) (\ success .  state_monad$seqS
   (if success then write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict ((and_vec addr cap_addr_mask  :  64 words$word)) F
    else state_monad$returnS () )
   (state_monad$returnS success))))`;


(*val addrWrapper : mword ty64 -> MemAccessType -> WordType -> M (mword ty64)*)

val _ = Define `
 ((addrWrapper:(64)words$word -> MemAccessType -> WordType ->(regstate)state_monad$sequential_state ->((((64)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) addr accessType width=
    (let capno = ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)) in state_monad$bindS
   (readCapReg capno) (\ cap .  state_monad$seqS (state_monad$seqS
   (if ((~ cap.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation capno
    else if cap.CapStruct_sealed then raise_c2_exception CapEx_SealViolation capno
    else state_monad$returnS () )
   (case accessType of
     Instruction =>
      if ((~ cap.CapStruct_permit_execute)) then
        raise_c2_exception CapEx_PermitExecuteViolation capno
      else state_monad$returnS () 
   | LoadData =>
      if ((~ cap.CapStruct_permit_load)) then raise_c2_exception CapEx_PermitLoadViolation capno
      else state_monad$returnS () 
   | StoreData =>
      if ((~ cap.CapStruct_permit_store)) then raise_c2_exception CapEx_PermitStoreViolation capno
      else state_monad$returnS () 
   ))
   (let cursor = (getCapCursor cap) in
   let vAddr = (((cursor + ((lem$w2ui addr)))) % ((pow2 (( 64 : int):ii)))) in
   let size1 = (wordWidthBytes width) in
   let base = (getCapBase cap) in
   let top = (getCapTop cap) in
   if ((((vAddr + size1)) > top)) then
     (raise_c2_exception CapEx_LengthViolation capno  : ( 64 words$word) M)
   else if ((vAddr < base)) then (raise_c2_exception CapEx_LengthViolation capno  : ( 64 words$word) M)
   else state_monad$returnS ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word))))))`;


(*val TranslatePC : mword ty64 -> M (mword ty64)*)

val _ = Define `
 ((TranslatePC:(64)words$word ->(regstate)state_monad$sequential_state ->((((64)words$word),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) vAddr=  (state_monad$bindS (state_monad$seqS
   (incrementCP0Count () )
   (state_monad$read_regS PCC_ref  : ( 257 words$word) M)) (\ (w__0 :  257 words$word) . 
   let pcc = (capRegToCapStruct w__0) in
   let base = (getCapBase pcc) in
   let top = (getCapTop pcc) in
   let absPC = (base + ((lem$w2ui vAddr))) in
   if (((((absPC % (( 4 : int):ii))) <> (( 0 : int):ii)))) then
     (SignalExceptionBadAddr AdEL
        ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) absPC  :  64 words$word))
       : ( 64 words$word) M)
   else if ((~ pcc.CapStruct_tag)) then
     (raise_c2_exception_noreg CapEx_TagViolation  : ( 64 words$word) M)
   else if ((((absPC + (( 4 : int):ii))) > top)) then
     (raise_c2_exception_noreg CapEx_LengthViolation  : ( 64 words$word) M)
   else
     (TLBTranslate ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) absPC  :  64 words$word))
        Instruction
       : ( 64 words$word) M))))`;


(*  
All capability instrucitons must first check that the capability
co-processor is enabled using the following function that raises a
co-processor unusable exception if a CP0Status.CU2 is not set. This
allows the operating system to only save and restore the full
capability context for processes that use capabilities.
*)
(*val checkCP2usable : unit -> M unit*)

val _ = Define `
 ((checkCP2usable:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
   if ((~ ((bit_to_bool ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 2 : int):ii))))))) then state_monad$seqS
     (set_CauseReg_CE CP0Cause_ref (vec_of_bits [B1;B0]  :  2 words$word)) (SignalException CpU)
   else state_monad$returnS () )))`;


val _ = Define `
 ((init_cp2_state:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =
    (let defaultBits = ((capStructToCapReg default_cap  :  257 words$word)) in state_monad$seqS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS PCC_ref defaultBits)
   (state_monad$write_regS nextPCC_ref defaultBits))
   (state_monad$write_regS delayedPCC_ref defaultBits))
   (state$foreachS (index_list (( 0 : int):ii) (( 31 : int):ii) (( 1 : int):ii)) () 
     (\ i unit_var . 
       let idx = ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) i  :  5 words$word)) in
       writeCapReg idx default_cap))))`;


val _ = Define `
 ((cp2_next_pc:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS nextPCC_ref  : ( 257 words$word) M) (\ (w__0 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS PCC_ref w__0)
   (state_monad$read_regS inBranchDelay_ref  : ( 1 words$word) M)) (\ (w__1 :  1 words$word) . 
   if ((bits_to_bool w__1)) then state_monad$bindS
     (state_monad$read_regS delayedPCC_ref  : ( 257 words$word) M) (\ (w__2 : CapReg) . 
     state_monad$write_regS nextPCC_ref w__2)
   else state_monad$write_regS inCCallDelay_ref (vec_of_bits [B0]  :  1 words$word)))))`;


(*val capToString : CapStruct -> M string*)

val _ = Define `
 ((capToString:CapStruct ->(regstate)state_monad$sequential_state ->(((string),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cap=  (state_monad$seqS
   (skip () )
   (state_monad$returnS ((STRCAT " t:"
              ((STRCAT (if cap.CapStruct_tag then "1" else "0")
                  ((STRCAT " s:"
                      ((STRCAT (if cap.CapStruct_sealed then "1" else "0")
                          ((STRCAT " perms:"
                              ((STRCAT
                                  ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                      ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                                          ((getCapPerms cap  :  31 words$word))
                                         :  32 words$word))))
                                  ((STRCAT " type:"
                                      ((STRCAT ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict cap.CapStruct_otype))
                                          ((STRCAT " offset:"
                                              ((STRCAT
                                                  ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                      ((to_bits
                                                          ((make_the_value (( 64 : int):ii)  :  64 itself))
                                                          ((getCapOffset cap))
                                                         :  64 words$word))))
                                                  ((STRCAT " base:"
                                                      ((STRCAT
                                                          ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                              ((to_bits
                                                                  ((make_the_value (( 64 : int):ii)
                                                                     :  64 itself))
                                                                  ((getCapBase cap))
                                                                 :  64 words$word))))
                                                          ((STRCAT " length:"
                                                              ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                                  ((to_bits
                                                                      ((make_the_value (( 64 : int):ii)
                                                                         :  64 itself))
                                                                      ((int_min ((getCapLength cap))
                                                                          ((MAX0 (( 64 : int):ii)))))
                                                                     :  64 words$word)))))))))))))))))))))))))))))))))`;


val _ = Define `
 ((dump_cp2_state:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__0 :  257 words$word) .  state_monad$bindS
   (capToString ((capRegToCapStruct w__0))) (\ (w__1 : string) . 
   let (_ : unit) = (prerr_endline ((STRCAT "DEBUG CAP PCC" w__1))) in
   (state$foreachS (index_list (( 0 : int):ii) (( 31 : int):ii) (( 1 : int):ii)) () 
     (\ i unit_var .  state_monad$bindS
       (readCapReg ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) i  :  5 words$word))) (\ (w__2 :
         CapStruct) .  state_monad$bindS
       (capToString w__2) (\ (w__3 : string) . 
       state_monad$returnS (let _ =
         (prerr_endline ((STRCAT "DEBUG CAP REG " ((STRCAT ((string_of_int 
  instance_Show_Show_Num_integer_dict i)) w__3))))) in
       () )))))))))`;


(*val extendLoad : forall 'sz . Size 'sz => mword 'sz -> bool -> mword ty64*)

val _ = Define `
 ((extendLoad:'sz words$word -> bool ->(64)words$word) memResult sign=
    (if sign then (sign_extend1 (( 64 : int):ii) memResult  :  64 words$word)
   else (zero_extend1 (( 64 : int):ii) memResult  :  64 words$word)))`;


(*val TLBWriteEntry : mword ty6 -> M unit*)

val _ = Define `
 ((TLBWriteEntry:(6)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) idx=  (state_monad$bindS
   (state_monad$read_regS TLBPageMask_ref  : ( 16 words$word) M) (\ pagemask . 
   let b__0 = pagemask in state_monad$seqS
   (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word))))
    then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      state_monad$returnS () 
    else SignalException MCheck)
   (let i = (lem$w2ui idx) in
   let entry = (access_list_dec TLBEntries i) in state_monad$bindS (state_monad$seqS
   (set_TLBEntry_pagemask entry pagemask)
   (state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_r entry ((get_TLBEntryHiReg_R w__0  :  2 words$word)))
   (state_monad$read_regS TLBEntryHi_ref)) (\ (w__1 : TLBEntryHiReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_vpn2 entry ((get_TLBEntryHiReg_VPN2 w__1  :  27 words$word)))
   (state_monad$read_regS TLBEntryHi_ref)) (\ (w__2 : TLBEntryHiReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_asid entry ((get_TLBEntryHiReg_ASID w__2  :  8 words$word)))
   (state$and_boolS
     ( state_monad$bindS(state_monad$read_regS TLBEntryLo0_ref) (\ (w__3 : TLBEntryLoReg) . 
      state_monad$returnS ((bits_to_bool ((get_TLBEntryLoReg_G w__3  :  1 words$word))))))
     ( state_monad$bindS(state_monad$read_regS TLBEntryLo1_ref) (\ (w__4 : TLBEntryLoReg) . 
      state_monad$returnS ((bits_to_bool ((get_TLBEntryLoReg_G w__4  :  1 words$word)))))))) (\ (w__5 : bool) .  state_monad$bindS (state_monad$seqS (state_monad$seqS
   (set_TLBEntry_g entry ((bool_to_bits w__5  :  1 words$word)))
   (set_TLBEntry_valid entry ((cast_unit_vec0 B1  :  1 words$word))))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__6 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_caps0 entry ((get_TLBEntryLoReg_CapS w__6  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__7 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_capl0 entry ((get_TLBEntryLoReg_CapL w__7  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__8 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_pfn0 entry ((get_TLBEntryLoReg_PFN w__8  :  24 words$word)))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__9 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_c0 entry ((get_TLBEntryLoReg_C w__9  :  3 words$word)))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__10 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_d0 entry ((get_TLBEntryLoReg_D w__10  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo0_ref)) (\ (w__11 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_v0 entry ((get_TLBEntryLoReg_V w__11  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__12 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_caps1 entry ((get_TLBEntryLoReg_CapS w__12  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__13 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_capl1 entry ((get_TLBEntryLoReg_CapL w__13  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__14 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_pfn1 entry ((get_TLBEntryLoReg_PFN w__14  :  24 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__15 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_c1 entry ((get_TLBEntryLoReg_C w__15  :  3 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__16 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (set_TLBEntry_d1 entry ((get_TLBEntryLoReg_D w__16  :  1 words$word)))
   (state_monad$read_regS TLBEntryLo1_ref)) (\ (w__17 : TLBEntryLoReg) . 
   set_TLBEntry_v1 entry ((get_TLBEntryLoReg_V w__17  :  1 words$word))))))))))))))))))))))`;


val _ = Define `
 ((decode:(32)words$word ->(ast)option) v__0=
    (if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (DADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (DADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DADD (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (ADD (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (ADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSUB (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SUB0 (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (AND (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ANDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (OR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ORI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (NOR (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (XOR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (XORI (rs,rt,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LUI (rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSLL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRA32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : 5 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (DSRL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (DSRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sa : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (SRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLT (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SLTI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (SLTU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SLTIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MOVN (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MOVZ (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MFHI rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MFLO rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 0 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B1]
                     :  21 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (MTHI rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 0 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B1]
                     :  21 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (MTLO rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (MUL (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DMULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DMULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MADD (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MADDU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MSUB (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (MSUBU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DIV0 (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DIVU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B0]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DDIV (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (DDIVU (rs,rt))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (offset : 26 bits) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 0 : int):ii)  :  26 words$word)) in
     SOME (J offset)
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (offset : 26 bits) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 0 : int):ii)  :  26 words$word)) in
     SOME (JAL offset)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):ii) (( 11 : int):ii)  :  10 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  10 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     SOME (JR rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (JALR (rs,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,T))
   else if (((v__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                             B1;B1;B0;B0;B1;B1;B0;B0]
                 :  32 words$word)))) then
     SOME (SYSCALL_THREAD_START () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word))))))) then
     SOME (SYSCALL () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word))))))) then
     SOME (BREAK () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B1;B0;B0;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (WAIT () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LTU))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (B,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (B,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (H,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (H,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (D,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (W0,T,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Load (D,F,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (B,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (H,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (W0,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (D,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (W0,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (Store (D,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (LDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (offset : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (SDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (op : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CACHE (base,op,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B1]  :  6 words$word)))) then
     let (base : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (op : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : imm16) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (PREF (base,op,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 11 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  21 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1]  :  6 words$word))))))) then
     SOME (SYNC () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (sel : 3 bits) = ((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,T))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWI () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B1;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1]
                 :  32 words$word)))) then
     SOME (TLBR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (TLBP () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (RDHWR (rt,rd))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B1;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (ERET () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetPerm (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetType (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetBase (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetLen (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetTag (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetSealed (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (CGetCause rd)
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (CReturn () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetOffset (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 11 : int):ii)  :  21 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  21 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetCause rt)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CAndPerm (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CToPtr (rd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CNE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLT))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CNEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CIncOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetBounds (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CClearTag (cd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CFromPtr (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B1]  :  11 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))))))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CCheckPerm (cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CCheckType (cs,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CUnseal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CJALR (cd,cb,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CJALR ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),cb,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (CGetCause rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (CSetCause rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (CGetPCC cd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (CJALR ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),cb,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CCheckPerm (cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CCheckType (cs,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CClearTag (cd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CJALR (cd,cb,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetPerm (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetType (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetBase (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetLen (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetTag (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetSealed (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetOffset (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetPCCSetOffset (cd,rs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (sel : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CReadHwr (cd,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (sel : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CWriteHwr (cb,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (sel : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CGetAddr (cb,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CUnseal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CAndPerm (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetOffset (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetBounds (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSetBoundsExact (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CIncOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CBuildCap (cd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CCopyType (cd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CCSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CToPtr (rd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CFromPtr (cd,cb,rs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSub (rt,cb,cs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,rs,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,rs,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CNE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLT))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (cs : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CNEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (ct : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CTestSubset (rd,cb,ct))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B0;B1]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CBX (cd,imm,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B0]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CBX (cd,imm,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B1]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CBZ (cd,imm,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B1;B0]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (CBZ (cd,imm,T))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;
                             B1;B1;B1;B1;B1;B1;B1;B1]
                 :  32 words$word)))) then
     SOME (CReturn () )
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B1]  :  11 words$word)))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (selector : 11 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) in
     SOME (CCall (cs,cb,selector))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  16 words$word)))) then
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ClearRegs (GPLo,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B1]  :  16 words$word)))) then
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ClearRegs (GPHi,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B1;B0]  :  16 words$word)))) then
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ClearRegs (CLo,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B1;B1]  :  16 words$word)))) then
     let (imm : 16 bits) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) in
     SOME (ClearRegs (CHi,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B1;B1]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (imm : 11 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) in
     SOME (CIncOffsetImmediate (cd,cb,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B1;B0;B0]  :  11 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (imm : 11 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) in
     SOME (CSetBoundsImmediate (cd,cb,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B0]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B0]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,D,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),F,B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),T,B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),F,H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),T,H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),F,W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),T,W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                  B0;B0]
                                                                      :  8 words$word),F,D,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 8 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 3 : int):ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,D,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;
                                                                                      B0;B0;B0]
                                                                          :  8 words$word),B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;
                                                                                      B0;B0;B0]
                                                                          :  8 words$word),H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;
                                                                                      B0;B0;B0]
                                                                          :  8 words$word),W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;
                                                                                      B0;B0;B0]
                                                                          :  8 words$word),D,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B0]  :  6 words$word)))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 11 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) in
     SOME (CSC (cs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (cs : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (rd : regno) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 6 : int):ii)  :  5 words$word)) in
     SOME (CSC (cs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;
                                                                                   B0;B0;B0;B0;B0]
                                                                       :  11 words$word),T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):ii) (( 26 : int):ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B0]  :  6 words$word)))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 25 : int):ii) (( 21 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (rt : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     let (offset : 11 bits) = ((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) in
     SOME (CLC (cd,cb,rt,offset,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):ii) (( 0 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     let (cb : regno) = ((subrange_vec_dec v__0 (( 15 : int):ii) (( 11 : int):ii)  :  5 words$word)) in
     SOME (CLC (cd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;
                                                                                B0;B0;B0;B0]
                                                                    :  11 words$word),T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):ii) (( 21 : int):ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  16 words$word)))))))
   then
     let (rt : regno) = ((subrange_vec_dec v__0 (( 20 : int):ii) (( 16 : int):ii)  :  5 words$word)) in
     SOME (C2Dump rt)
   else SOME (RI () )))`;


(*val execute_XORI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_XORI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((xor_vec w__0 ((zero_extend1 (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_XOR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_XOR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((xor_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_WAIT : unit -> M unit*)

val _ = Define `
 ((execute_WAIT:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__121=  (state_monad$bindS
   (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$write_regS nextPC_ref w__0)))`;


(*val execute_TRAPREG : mword ty5 -> mword ty5 -> Comparison -> M unit*)

val _ = Define `
 ((execute_TRAPREG:(5)words$word ->(5)words$word -> Comparison ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt cmp=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   let condition = (compare cmp rs_val rt_val) in
   if condition then SignalException Tr
   else state_monad$returnS () ))))`;


(*val execute_TRAPIMM : mword ty5 -> mword ty16 -> Comparison -> M unit*)

val _ = Define `
 ((execute_TRAPIMM:(5)words$word ->(16)words$word -> Comparison ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs imm cmp=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
   let (imm_val : 64 bits) = ((sign_extend1 (( 64 : int):ii) imm  :  64 words$word)) in
   let condition = (compare cmp rs_val imm_val) in
   if condition then SignalException Tr
   else state_monad$returnS () )))`;


(*val execute_TLBWR : unit -> M unit*)

val _ = Define `
 ((execute_TLBWR:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__125=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () )
   (state_monad$read_regS TLBRandom_ref  : ( 6 words$word) M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBWI : unit -> M unit*)

val _ = Define `
 ((execute_TLBWI:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__124=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () )
   (state_monad$read_regS TLBIndex_ref  : ( 6 words$word) M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBR : unit -> M unit*)

val _ = Define `
 ((execute_TLBR:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__126=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () )
   (state_monad$read_regS TLBIndex_ref  : ( 6 words$word) M)) (\ (w__0 : TLBIndexT) . 
   let i = (lem$w2ui w__0) in state_monad$bindS
   (state_monad$read_regS ((access_list_dec TLBEntries i))) (\ entry .  state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS TLBPageMask_ref ((get_TLBEntry_pagemask entry  :  16 words$word)))
   (set_TLBEntryHiReg_R TLBEntryHi_ref ((get_TLBEntry_r entry  :  2 words$word))))
   (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((get_TLBEntry_vpn2 entry  :  27 words$word))))
   (set_TLBEntryHiReg_ASID TLBEntryHi_ref ((get_TLBEntry_asid entry  :  8 words$word))))
   (set_TLBEntryLoReg_CapS TLBEntryLo0_ref ((get_TLBEntry_caps0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapL TLBEntryLo0_ref ((get_TLBEntry_capl0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_PFN TLBEntryLo0_ref ((get_TLBEntry_pfn0 entry  :  24 words$word))))
   (set_TLBEntryLoReg_C TLBEntryLo0_ref ((get_TLBEntry_c0 entry  :  3 words$word))))
   (set_TLBEntryLoReg_D TLBEntryLo0_ref ((get_TLBEntry_d0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_V TLBEntryLo0_ref ((get_TLBEntry_v0 entry  :  1 words$word))))
   (set_TLBEntryLoReg_G TLBEntryLo0_ref ((get_TLBEntry_g entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapS TLBEntryLo1_ref ((get_TLBEntry_caps1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_CapL TLBEntryLo1_ref ((get_TLBEntry_capl1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_PFN TLBEntryLo1_ref ((get_TLBEntry_pfn1 entry  :  24 words$word))))
   (set_TLBEntryLoReg_C TLBEntryLo1_ref ((get_TLBEntry_c1 entry  :  3 words$word))))
   (set_TLBEntryLoReg_D TLBEntryLo1_ref ((get_TLBEntry_d1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_V TLBEntryLo1_ref ((get_TLBEntry_v1 entry  :  1 words$word))))
   (set_TLBEntryLoReg_G TLBEntryLo1_ref ((get_TLBEntry_g entry  :  1 words$word)))))))`;


(*val execute_TLBP : unit -> M unit*)

val _ = Define `
 ((execute_TLBP:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__127=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () )
   (state_monad$read_regS TLBEntryHi_ref)) (\ (w__0 : TLBEntryHiReg) .  state_monad$bindS
   (tlbSearch ((get_TLBEntryHiReg w__0  :  64 words$word))  : ( ( 6 words$word)option) M) (\ result . 
   (case result of
     SOME (idx) => state_monad$seqS
      (state_monad$write_regS TLBProbe_ref (vec_of_bits [B0]  :  1 words$word)) (state_monad$write_regS TLBIndex_ref idx)
   | NONE => state_monad$seqS
      (state_monad$write_regS TLBProbe_ref (vec_of_bits [B1]  :  1 words$word))
      (state_monad$write_regS TLBIndex_ref (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))
   )))))`;


(*val execute_Store : WordType -> bool -> mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_Store:WordType -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) width conditional base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData width
     : ( 64 words$word) M) (\ (vAddr : 64 bits) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdES vAddr
   else state_monad$bindS
     (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr . 
     if conditional then state_monad$bindS
       (state_monad$read_regS CP0LLBit_ref  : ( 1 words$word) M) (\ (w__1 : 1 bits) .  state_monad$bindS
       (if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):ii))))) then
          (case width of
            B =>
             MEMw_conditional_wrapper pAddr (( 1 : int):ii)
               ((subrange_vec_dec rt_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          | H =>
             MEMw_conditional_wrapper pAddr (( 2 : int):ii)
               ((subrange_vec_dec rt_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          | W0 =>
             MEMw_conditional_wrapper pAddr (( 4 : int):ii)
               ((subrange_vec_dec rt_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          | D => MEMw_conditional_wrapper pAddr (( 8 : int):ii) rt_val
          )
        else state_monad$returnS F) (\ (success : bool) . 
       wGPR rt ((zero_extend1 (( 64 : int):ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
     else
       (case width of
         B => MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec rt_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
       | H => MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec rt_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
       | W0 => MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec rt_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
       | D => MEMw_wrapper pAddr (( 8 : int):ii) rt_val
       )))))))`;


(*val execute_SYSCALL_THREAD_START : unit -> unit*)

val _ = Define `
 ((execute_SYSCALL_THREAD_START:unit -> unit) g__117=  () )`;


(*val execute_SYSCALL : unit -> M unit*)

val _ = Define `
 ((execute_SYSCALL:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__119=  (SignalException Sys))`;


(*val execute_SYNC : unit -> M unit*)

val _ = Define `
 ((execute_SYNC:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__122=  (MEM_sync () ))`;


(*val execute_SWR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SWR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData W0
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr . 
   let wordAddr =
     ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
        (vec_of_bits [B0;B0]  :  2 words$word)
       :  64 words$word)) in state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__12 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   if (((b__12 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
   else if (((b__12 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
   else if (((b__12 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
   else MEMw_wrapper wordAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))))))))`;


(*val execute_SWL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SWL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData W0
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__8 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   if (((b__8 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
   else if (((b__8 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
   else if (((b__8 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))))))))`;


(*val execute_SUBU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SUBU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((sign_extend1 (( 64 : int):ii)
           ((sub_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_SUB : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SUB:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (temp33 : 33 bits) =
       ((sub_vec
          ((sign_extend1 (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):ii) ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec temp33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec temp33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec temp33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            :  64 words$word))))))`;


(*val execute_SRLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
     (shift_bits_right 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SRL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   if ((NotWordVal temp)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
     (shift_bits_right 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SRAV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRAV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
     (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SRA : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SRA:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   if ((NotWordVal temp)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
     (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SLTU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLTU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val . 
   wGPR rd
     ((zero_extend1 (( 64 : int):ii)
         (if ((zopz0zI_u rs_val rt_val)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLTIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SLTIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
   let (immext : 64 bits) = ((sign_extend1 (( 64 : int):ii) imm  :  64 words$word)) in
   wGPR rt
     ((zero_extend1 (( 64 : int):ii)
         (if ((zopz0zI_u rs_val immext)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLTI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SLTI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=
    (let imm_val = (integer_word$w2i imm) in state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rs_val = (integer_word$w2i w__0) in
   wGPR rt
     ((zero_extend1 (( 64 : int):ii)
         (if ((rs_val < imm_val)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLT : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLT:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd
     ((zero_extend1 (( 64 : int):ii)
         (if ((zopz0zI_s w__0 w__1)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):ii) (( 0 : int):ii)  :  5 words$word)) in state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__2 :  32 words$word) . 
   wGPR rd ((sign_extend1 (( 64 : int):ii) w__2  :  64 words$word)))))))`;


(*val execute_SLL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_SLL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__0 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word)) in state_monad$bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) M) (\ (w__1 :  32 words$word) . 
   wGPR rd ((sign_extend1 (( 64 : int):ii) w__1  :  64 words$word))))))`;


(*val execute_SDR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SDR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData D
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let wordAddr =
     ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
        (vec_of_bits [B0;B0;B0]  :  3 words$word)
       :  64 words$word)) in
   let b__40 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   if (((b__40 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
   else if (((b__40 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 5 : int):ii) ((subrange_vec_dec reg_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 6 : int):ii) ((subrange_vec_dec reg_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
   else if (((b__40 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 7 : int):ii) ((subrange_vec_dec reg_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
   else MEMw_wrapper wordAddr (( 8 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))))))))`;


(*val execute_SDL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_SDL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData D
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__32 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   if (((b__32 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 8 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))
   else if (((b__32 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 7 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 6 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 5 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
   else if (((b__32 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec reg_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word))))))))`;


(*val execute_RI : unit -> M unit*)

val _ = Define `
 ((execute_RI:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__130=  (SignalException ResI))`;


(*val execute_RDHWR : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_RDHWR:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd=  (state_monad$bindS
   (getAccessLevel () ) (\ accessLevel . 
   let (haveAccessLevel : bool) = (accessLevel = Kernel) in state_monad$bindS
   (state_monad$read_regS CP0Status_ref) (\ (w__0 : StatusReg) . 
   let (haveCU0 : bool) = (B1 = ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):ii)))) in
   let rdi = (lem$w2ui rd) in state_monad$bindS
   (state_monad$read_regS CP0HWREna_ref  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
   let (haveHWREna : bool) = (B1 = ((access_vec_dec w__1 rdi))) in state_monad$seqS
   (if ((~ (((haveAccessLevel \/ (((haveCU0 \/ haveHWREna)))))))) then SignalException ResI
    else state_monad$returnS () )
   (let b__146 = rd in state_monad$bindS
   (if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) then
      state_monad$returnS ((zero_extend1 (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))) then
      state_monad$returnS ((zero_extend1 (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))) then state_monad$bindS
      (state_monad$read_regS CP0Count_ref  : ( 32 words$word) M) (\ (w__2 : 32 bits) . 
      state_monad$returnS ((zero_extend1 (( 64 : int):ii) w__2  :  64 words$word)))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))) then
      state_monad$returnS ((zero_extend1 (( 64 : int):ii) (vec_of_bits [B1]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))) then
      (state_monad$read_regS CP0UserLocal_ref  : ( 64 words$word) M)
    else (SignalException ResI  : ( 64 words$word) M)) (\ (temp : 64 bits) . 
   wGPR rt temp)))))))`;


(*val execute_PREF : mword ty5 -> mword ty5 -> mword ty16 -> unit*)

val _ = Define `
 ((execute_PREF:(5)words$word ->(5)words$word ->(16)words$word -> unit) base op imm=  () )`;


(*val execute_ORI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ORI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((or_vec w__0 ((zero_extend1 (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_OR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_OR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((or_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_NOR : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_NOR:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((not_vec ((or_vec w__0 w__1  :  64 words$word))  :  64 words$word))))))`;


(*val execute_MULTU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MULTU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (result : 64 bits) .  state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))`;


(*val execute_MULT : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MULT:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (result : 64 bits) .  state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))`;


(*val execute_MUL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MUL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal . 
   let (result : 64 bits) =
     ((sign_extend1 (( 64 : int):ii)
        ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1)))))`;


(*val execute_MTLO : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MTLO:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$write_regS LO_ref w__0)))`;


(*val execute_MTHI : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MTHI:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$write_regS HI_ref w__0)))`;


(*val execute_MTC0 : mword ty5 -> mword ty5 -> mword ty3 -> bool -> M unit*)

val _ = Define `
 ((execute_MTC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sel double=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () )
   (rGPR rt  : ( 64 words$word) M)) (\ reg_val .  
  (case (rd, sel) of
        (b__108, b__109) =>
  if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B0] : 5 words$word)))) /\
          (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
    state_monad$write_regS TLBIndex_ref
      ((mask (( 6 : int): ii) reg_val : 6 words$word)) else
    if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B1] : 5 words$word)))) /\
            (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
      state_monad$returnS ()  else
      if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B0] : 5 words$word)))) /\
              (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
        set_TLBEntryLoReg TLBEntryLo0_ref reg_val else
        if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B1] : 5 words$word)))) /\
                (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
          set_TLBEntryLoReg TLBEntryLo1_ref reg_val else
          if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                  /\ (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
            set_ContextReg_PTEBase TLBContext_ref
              ((subrange_vec_dec reg_val (( 63 : int): ii) (( 23 : int): ii) : 41 words$word))
          else
            if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                    /\ (((b__109 = (vec_of_bits [B0;B1;B0] : 3 words$word))))))) then
              state_monad$write_regS CP0UserLocal_ref reg_val else
              if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B1] : 5 words$word))))
                      /\
                      (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                state_monad$write_regS TLBPageMask_ref
                  ((subrange_vec_dec reg_val (( 28 : int): ii)
                      (( 13 : int): ii) : 16 words$word)) else
                if ((((((b__108 =
                           (vec_of_bits [B0;B0;B1;B1;B0] : 5 words$word))))
                        /\
                        (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                  state_monad$seqS
                    (state_monad$write_regS TLBWired_ref
                       ((mask (( 6 : int): ii) reg_val : 6 words$word)))
                    (state_monad$write_regS TLBRandom_ref TLBIndexMax) else
                  if ((((((b__108 =
                             (vec_of_bits [B0;B0;B1;B1;B1] : 5 words$word))))
                          /\
                          (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                    state_monad$write_regS CP0HWREna_ref
                      ((concat_vec
                          ((subrange_vec_dec reg_val (( 31 : int): ii)
                              (( 29 : int): ii) : 3 words$word))
                          ((concat_vec
                              (vec_of_bits
                                 [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0] : 25 words$word)
                              ((subrange_vec_dec reg_val (( 3 : int): ii)
                                  (( 0 : int): ii) : 4 words$word))
                           : 29 words$word)) : 32 words$word)) else
                    if ((((((b__108 =
                               (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                            /\
                            (((b__109 =
                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                      state_monad$returnS ()  else
                      if ((((((b__108 =
                                 (vec_of_bits [B0;B1;B0;B0;B1] : 5 words$word))))
                              /\
                              (((b__109 =
                                   (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                        state_monad$write_regS CP0Count_ref
                          ((subrange_vec_dec reg_val (( 31 : int): ii)
                              (( 0 : int): ii) : 32 words$word)) else
                        if ((((((b__108 =
                                   (vec_of_bits [B0;B1;B0;B1;B0] : 5 words$word))))
                                /\
                                (((b__109 =
                                     (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                          state_monad$seqS
                            (state_monad$seqS
                               (set_TLBEntryHiReg_R TLBEntryHi_ref
                                  ((subrange_vec_dec reg_val
                                      (( 63 : int): ii) (( 62 : int): ii) : 2 words$word)))
                               (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref
                                  ((subrange_vec_dec reg_val
                                      (( 39 : int): ii) (( 13 : int): ii) : 27 words$word))))
                            (set_TLBEntryHiReg_ASID TLBEntryHi_ref
                               ((subrange_vec_dec reg_val (( 7 : int): ii)
                                   (( 0 : int): ii) : 8 words$word))) else
                          if ((((((b__108 =
                                     (vec_of_bits [B0;B1;B0;B1;B1] : 5 words$word))))
                                  /\
                                  (((b__109 =
                                       (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                            state_monad$bindS
                              (state_monad$seqS
                                 (state_monad$write_regS CP0Compare_ref
                                    ((subrange_vec_dec reg_val
                                        (( 31 : int): ii) (( 0 : int): ii) : 32 words$word)))
                                 (state_monad$read_regS CP0Cause_ref))
                              (\ (w__0 : CauseReg) . 
                               set_CauseReg_IP CP0Cause_ref
                                 ((and_vec
                                     ((get_CauseReg_IP w__0 : 8 words$word))
                                     (vec_of_bits [B0;B1;B1;B1;B1;B1;B1;B1] : 8 words$word)
                                  : 8 words$word))) else
                            if ((((((b__108 =
                                       (vec_of_bits [B0;B1;B1;B0;B0] : 5 words$word))))
                                    /\
                                    (((b__109 =
                                         (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                              state_monad$seqS
                                (state_monad$seqS
                                   (state_monad$seqS
                                      (state_monad$seqS
                                         (state_monad$seqS
                                            (state_monad$seqS
                                               (state_monad$seqS
                                                  (state_monad$seqS
                                                     (state_monad$seqS
                                                        (set_StatusReg_CU
                                                           CP0Status_ref
                                                           ((subrange_vec_dec
                                                               reg_val
                                                               (( 31 : int): ii)
                                                               (( 28 : int): ii) : 4 words$word)))
                                                        (set_StatusReg_BEV
                                                           CP0Status_ref
                                                           ((cast_unit_vec0
                                                               ((access_vec_dec
                                                                   reg_val
                                                                   ((
                                                                     22 : int): ii))) : 1 words$word))))
                                                     (set_StatusReg_IM
                                                        CP0Status_ref
                                                        ((subrange_vec_dec
                                                            reg_val
                                                            (( 15 : int): ii)
                                                            (( 8 : int): ii) : 8 words$word))))
                                                  (set_StatusReg_KX
                                                     CP0Status_ref
                                                     ((cast_unit_vec0
                                                         ((access_vec_dec
                                                             reg_val
                                                             (( 7 : int): ii))) : 1 words$word))))
                                               (set_StatusReg_SX
                                                  CP0Status_ref
                                                  ((cast_unit_vec0
                                                      ((access_vec_dec
                                                          reg_val
                                                          (( 6 : int): ii))) : 1 words$word))))
                                            (set_StatusReg_UX CP0Status_ref
                                               ((cast_unit_vec0
                                                   ((access_vec_dec reg_val
                                                       (( 5 : int): ii))) : 1 words$word))))
                                         (set_StatusReg_KSU CP0Status_ref
                                            ((subrange_vec_dec reg_val
                                                (( 4 : int): ii)
                                                (( 3 : int): ii) : 2 words$word))))
                                      (set_StatusReg_ERL CP0Status_ref
                                         ((cast_unit_vec0
                                             ((access_vec_dec reg_val
                                                 (( 2 : int): ii))) : 1 words$word))))
                                   (set_StatusReg_EXL CP0Status_ref
                                      ((cast_unit_vec0
                                          ((access_vec_dec reg_val
                                              (( 1 : int): ii))) : 1 words$word))))
                                (set_StatusReg_IE CP0Status_ref
                                   ((cast_unit_vec0
                                       ((access_vec_dec reg_val
                                           (( 0 : int): ii))) : 1 words$word)))
                            else
                              if ((((((b__108 =
                                         (vec_of_bits [B0;B1;B1;B0;B1] : 5 words$word))))
                                      /\
                                      (((b__109 =
                                           (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                state_monad$bindS
                                  (state_monad$seqS
                                     (set_CauseReg_IV CP0Cause_ref
                                        ((cast_unit_vec0
                                            ((access_vec_dec reg_val
                                                (( 23 : int): ii))) : 1 words$word)))
                                     (state_monad$read_regS CP0Cause_ref))
                                  (\ (w__1 : CauseReg) . 
                                   let ip = ((get_CauseReg_IP w__1 : 8 words$word)) in
                                   set_CauseReg_IP CP0Cause_ref
                                     ((concat_vec
                                         ((subrange_vec_dec ip
                                             (( 7 : int): ii)
                                             (( 2 : int): ii) : 6 words$word))
                                         ((subrange_vec_dec reg_val
                                             (( 9 : int): ii)
                                             (( 8 : int): ii) : 2 words$word))
                                      : 8 words$word))) else
                                if ((((((b__108 =
                                           (vec_of_bits [B0;B1;B1;B1;B0] : 5 words$word))))
                                        /\
                                        (((b__109 =
                                             (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                  state_monad$write_regS CP0EPC_ref reg_val
                                else
                                  if ((((((b__108 =
                                             (vec_of_bits [B1;B0;B0;B0;B0] : 5 words$word))))
                                          /\
                                          (((b__109 =
                                               (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                    state_monad$returnS ()  else
                                    if ((((((b__108 =
                                               (vec_of_bits [B1;B0;B1;B0;B0] : 5 words$word))))
                                            /\
                                            (((b__109 =
                                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                      set_XContextReg_XPTEBase
                                        TLBXContext_ref
                                        ((subrange_vec_dec reg_val
                                            (( 63 : int): ii)
                                            (( 33 : int): ii) : 31 words$word))
                                    else
                                      state_monad$write_regS CP0ErrorEPC_ref
                                        reg_val
  ))))`;


(*val execute_MSUBU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MSUBU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  state_monad$bindS
   (state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  state_monad$bindS
   (state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MSUB : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MSUB:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  state_monad$bindS
   (state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  state_monad$bindS
   (state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MOVZ : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MOVZ:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   if (((w__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then state_monad$bindS
     (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else state_monad$returnS () )))`;


(*val execute_MOVN : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MOVN:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   if (((w__0 <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
            :  64 words$word)))) then state_monad$bindS
     (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else state_monad$returnS () )))`;


(*val execute_MFLO : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MFLO:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd=  (state_monad$bindS
   (state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFHI : mword ty5 -> M unit*)

val _ = Define `
 ((execute_MFHI:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd=  (state_monad$bindS
   (state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFC0 : mword ty5 -> mword ty5 -> mword ty3 -> bool -> M unit*)

val _ = Define `
 ((execute_MFC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sel double=  (state_monad$bindS (state_monad$seqS
   (checkCP0Access () ) 
  (case (rd, sel) of
        (b__48, b__49) =>
  if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B0] : 5 words$word)))) /\
          (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
    state_monad$bindS
      (state_monad$read_regS TLBIndex_ref : ( 6 words$word) M)
      (\ (w__0 : TLBIndexT) . 
       let (idx : 31 bits) = ((zero_extend1 (( 31 : int): ii) w__0 : 31 words$word)) in
       state_monad$bindS
         (state_monad$read_regS TLBProbe_ref : ( 1 words$word) M)
         (\ (w__1 : 1 bits) . 
          state_monad$returnS
            ((concat_vec
                (vec_of_bits
                   [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0] : 32 words$word)
                ((concat_vec w__1 idx : 32 words$word)) : 64 words$word))))
  else
    if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B1] : 5 words$word)))) /\
            (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
      state_monad$bindS
        (state_monad$read_regS TLBRandom_ref : ( 6 words$word) M)
        (\ (w__2 : TLBIndexT) . 
         state_monad$returnS
           ((zero_extend1 (( 64 : int): ii) w__2 : 64 words$word))) else
      if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B0] : 5 words$word)))) /\
              (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
        state_monad$bindS (state_monad$read_regS TLBEntryLo0_ref)
          (\ (w__3 : TLBEntryLoReg) . 
           state_monad$returnS ((get_TLBEntryLoReg w__3 : 64 words$word)))
      else
        if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B1] : 5 words$word)))) /\
                (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
          state_monad$bindS (state_monad$read_regS TLBEntryLo1_ref)
            (\ (w__4 : TLBEntryLoReg) . 
             state_monad$returnS ((get_TLBEntryLoReg w__4 : 64 words$word)))
        else
          if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                  /\ (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
            state_monad$bindS (state_monad$read_regS TLBContext_ref)
              (\ (w__5 : ContextReg) . 
               state_monad$returnS ((get_ContextReg w__5 : 64 words$word)))
          else
            if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                    /\ (((b__49 = (vec_of_bits [B0;B1;B0] : 3 words$word))))))) then
              (state_monad$read_regS CP0UserLocal_ref : ( 64 words$word) M)
            else
              if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B1] : 5 words$word))))
                      /\
                      (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                state_monad$bindS
                  (state_monad$read_regS TLBPageMask_ref : ( 16 words$word) M)
                  (\ (w__7 : 16 bits) . 
                   state_monad$returnS
                     ((zero_extend1 (( 64 : int): ii)
                         ((concat_vec w__7
                             (vec_of_bits
                                [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0] : 12 words$word)
                          : 28 words$word)) : 64 words$word))) else
                if ((((((b__48 =
                           (vec_of_bits [B0;B0;B1;B1;B0] : 5 words$word))))
                        /\
                        (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                  state_monad$bindS
                    (state_monad$read_regS TLBWired_ref : ( 6 words$word) M)
                    (\ (w__8 : TLBIndexT) . 
                     state_monad$returnS
                       ((zero_extend1 (( 64 : int): ii) w__8 : 64 words$word)))
                else
                  if ((((((b__48 =
                             (vec_of_bits [B0;B0;B1;B1;B1] : 5 words$word))))
                          /\
                          (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                    state_monad$bindS
                      (state_monad$read_regS CP0HWREna_ref : ( 32 words$word) M)
                      (\ (w__9 : 32 bits) . 
                       state_monad$returnS
                         ((zero_extend1 (( 64 : int): ii) w__9 : 64 words$word)))
                  else
                    if ((((((b__48 =
                               (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                            /\
                            (((b__49 =
                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                      (state_monad$read_regS CP0BadVAddr_ref : ( 64 words$word) M)
                    else
                      if ((((((b__48 =
                                 (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                              /\
                              (((b__49 =
                                   (vec_of_bits [B0;B0;B1] : 3 words$word))))))) then
                        state_monad$returnS
                          ((zero_extend1 (( 64 : int): ii)
                              (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                      else
                        if ((((((b__48 =
                                   (vec_of_bits [B0;B1;B0;B0;B1] : 5 words$word))))
                                /\
                                (((b__49 =
                                     (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                          state_monad$bindS
                            (state_monad$read_regS CP0Count_ref : ( 32 words$word) M)
                            (\ (w__11 : 32 bits) . 
                             state_monad$returnS
                               ((zero_extend1 (( 64 : int): ii) w__11 : 64 words$word)))
                        else
                          if ((((((b__48 =
                                     (vec_of_bits [B0;B1;B0;B1;B0] : 5 words$word))))
                                  /\
                                  (((b__49 =
                                       (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                            state_monad$bindS
                              (state_monad$read_regS TLBEntryHi_ref)
                              (\ (w__12 : TLBEntryHiReg) . 
                               state_monad$returnS
                                 ((get_TLBEntryHiReg w__12 : 64 words$word)))
                          else
                            if ((((((b__48 =
                                       (vec_of_bits [B0;B1;B0;B1;B1] : 5 words$word))))
                                    /\
                                    (((b__49 =
                                         (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                              state_monad$bindS
                                (state_monad$read_regS CP0Compare_ref : ( 32 words$word) M)
                                (\ (w__13 : 32 bits) . 
                                 state_monad$returnS
                                   ((zero_extend1 (( 64 : int): ii) w__13 : 64 words$word)))
                            else
                              if ((((((b__48 =
                                         (vec_of_bits [B0;B1;B1;B0;B0] : 5 words$word))))
                                      /\
                                      (((b__49 =
                                           (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                state_monad$bindS
                                  (state_monad$read_regS CP0Status_ref)
                                  (\ (w__14 : StatusReg) . 
                                   state_monad$returnS
                                     ((zero_extend1 (( 64 : int): ii)
                                         ((get_StatusReg w__14 : 32 words$word)) : 64 words$word)))
                              else
                                if ((((((b__48 =
                                           (vec_of_bits [B0;B1;B1;B0;B1] : 5 words$word))))
                                        /\
                                        (((b__49 =
                                             (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                  state_monad$bindS
                                    (state_monad$read_regS CP0Cause_ref)
                                    (\ (w__15 : CauseReg) . 
                                     state_monad$returnS
                                       ((zero_extend1 (( 64 : int): ii)
                                           ((get_CauseReg w__15 : 32 words$word)) : 64 words$word)))
                                else
                                  if ((((((b__48 =
                                             (vec_of_bits [B0;B1;B1;B1;B0] : 5 words$word))))
                                          /\
                                          (((b__49 =
                                               (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                    (state_monad$read_regS CP0EPC_ref : ( 64 words$word) M)
                                  else
                                    if ((((((b__48 =
                                               (vec_of_bits [B0;B1;B1;B1;B1] : 5 words$word))))
                                            /\
                                            (((b__49 =
                                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                      state_monad$returnS
                                        ((zero_extend1 (( 64 : int): ii)
                                            (vec_of_bits
                                               [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;
                                               B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                            : 32 words$word) : 64 words$word))
                                    else
                                      if ((((((b__48 =
                                                 (vec_of_bits
                                                    [B0;B1;B1;B1;B1] : 5 words$word))))
                                              /\
                                              (((b__49 =
                                                   (vec_of_bits [B1;B1;B0] : 3 words$word))))))) then
                                        state_monad$returnS
                                          ((zero_extend1 (( 64 : int): ii)
                                              (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                                      else
                                        if ((((((b__48 =
                                                   (vec_of_bits
                                                      [B0;B1;B1;B1;B1] : 5 words$word))))
                                                /\
                                                (((b__49 =
                                                     (vec_of_bits [B1;B1;B1] : 3 words$word))))))) then
                                          state_monad$returnS
                                            ((zero_extend1 (( 64 : int): ii)
                                                (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                                        else
                                          if ((((((b__48 =
                                                     (vec_of_bits
                                                        [B1;B0;B0;B0;B0] : 5 words$word))))
                                                  /\
                                                  (((b__49 =
                                                       (vec_of_bits
                                                          [B0;B0;B0] : 3 words$word))))))) then
                                            state_monad$returnS
                                              ((zero_extend1
                                                  (( 64 : int): ii)
                                                  ((concat_vec
                                                      (vec_of_bits [B1] : 1 words$word)
                                                      ((concat_vec
                                                          (vec_of_bits
                                                             [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0] : 15 words$word)
                                                          ((concat_vec
                                                              (vec_of_bits
                                                                 [B1] : 1 words$word)
                                                              ((concat_vec
                                                                  (vec_of_bits
                                                                    [B1;B0] : 2 words$word)
                                                                  ((concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B1] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    : 7 words$word))
                                                                    : 10 words$word))
                                                                   : 13 words$word))
                                                               : 15 words$word))
                                                           : 16 words$word))
                                                       : 31 words$word))
                                                   : 32 words$word))
                                               : 64 words$word)) else
                                            if ((((((b__48 =
                                                       (vec_of_bits
                                                          [B1;B0;B0;B0;B0] : 5 words$word))))
                                                    /\
                                                    (((b__49 =
                                                         (vec_of_bits
                                                            [B0;B0;B1] : 3 words$word))))))) then
                                              state_monad$returnS
                                                ((zero_extend1
                                                    (( 64 : int): ii)
                                                    ((concat_vec
                                                        (vec_of_bits [B1] : 1 words$word)
                                                        ((concat_vec
                                                            TLBIndexMax
                                                            ((concat_vec
                                                                (vec_of_bits
                                                                   [B0;B0;B0] : 3 words$word)
                                                                ((concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    (
                                                                    bool_to_bits
                                                                    have_cp2 : 1 words$word))
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    : 2 words$word))
                                                                    : 3 words$word))
                                                                    : 4 words$word))
                                                                    : 5 words$word))
                                                                    : 6 words$word))
                                                                    : 7 words$word))
                                                                    : 10 words$word))
                                                                    : 13 words$word))
                                                                    : 16 words$word))
                                                                    : 19 words$word))
                                                                 : 22 words$word))
                                                             : 25 words$word))
                                                         : 31 words$word))
                                                     : 32 words$word))
                                                 : 64 words$word)) else
                                              if ((((((b__48 =
                                                         (vec_of_bits
                                                            [B1;B0;B0;B0;B0] : 5 words$word))))
                                                      /\
                                                      (((b__49 =
                                                           (vec_of_bits
                                                              [B0;B1;B0] : 3 words$word))))))) then
                                                state_monad$returnS
                                                  ((zero_extend1
                                                      (( 64 : int): ii)
                                                      ((concat_vec
                                                          (vec_of_bits [B1] : 1 words$word)
                                                          ((concat_vec
                                                              (vec_of_bits
                                                                 [B0;B0;B0] : 3 words$word)
                                                              ((concat_vec
                                                                  (vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                  ((concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    : 8 words$word))
                                                                    : 12 words$word))
                                                                    : 16 words$word))
                                                                    : 20 words$word))
                                                                   : 24 words$word))
                                                               : 28 words$word))
                                                           : 31 words$word))
                                                       : 32 words$word))
                                                   : 64 words$word)) else
                                                if ((((((b__48 =
                                                           (vec_of_bits
                                                              [B1;B0;B0;B0;B0] : 5 words$word))))
                                                        /\
                                                        (((b__49 =
                                                             (vec_of_bits
                                                                [B0;B1;B1] : 3 words$word))))))) then
                                                  state_monad$returnS
                                                    (vec_of_bits
                                                       [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                       B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                                    : 64 words$word) else
                                                  if ((((((b__48 =
                                                             (vec_of_bits
                                                                [B1;B0;B0;B0;B0] : 5 words$word))))
                                                          /\
                                                          (((b__49 =
                                                               (vec_of_bits
                                                                  [B1;B0;B1] : 3 words$word))))))) then
                                                    state_monad$returnS
                                                      (vec_of_bits
                                                         [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                         B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                                      : 64 words$word) else
                                                    if ((((((b__48 =
                                                               (vec_of_bits
                                                                  [B1;B0;B0;B0;B1] : 5 words$word))))
                                                            /\
                                                            (((b__49 =
                                                                 (vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                      (state_monad$read_regS
                                                         CP0LLAddr_ref : ( 64 words$word) M)
                                                    else
                                                      if ((((((b__48 =
                                                                 (vec_of_bits
                                                                    [B1;B0;B0;B1;B0] : 5 words$word))))
                                                              /\
                                                              (((b__49 =
                                                                   (vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                        state_monad$returnS
                                                          ((zero_extend1
                                                              (( 64 : int): ii)
                                                              (vec_of_bits
                                                                 [B0] : 1 words$word) : 64 words$word))
                                                      else
                                                        if ((((((b__48 =
                                                                   (vec_of_bits
                                                                    [B1;B0;B0;B1;B1] : 5 words$word))))
                                                                /\
                                                                (((b__49 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                          state_monad$returnS
                                                            ((zero_extend1
                                                                (( 64 : int): ii)
                                                                (vec_of_bits
                                                                   [B0] : 1 words$word) : 64 words$word))
                                                        else
                                                          if ((((((b__48 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B1;B0;B1;B0;B0] : 5 words$word))))
                                                                  /\
                                                                  (((
                                                                    b__49 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                            state_monad$bindS
                                                              (state_monad$read_regS
                                                                 TLBXContext_ref)
                                                              (\ (w__18 : XContextReg) . 
                                                               state_monad$returnS
                                                                 ((get_XContextReg
                                                                    w__18 : 64 words$word)))
                                                          else
                                                            (state_monad$read_regS
                                                               CP0ErrorEPC_ref : ( 64 words$word) M)
  )) (\ (result : 64 bits) . 
   wGPR rt
     (if double then result
      else
        (sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word)))))`;


(*val execute_MADDU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MADDU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  state_monad$bindS
   (state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  state_monad$bindS
   (state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MADD : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_MADD:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)
    else
      state_monad$returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                 ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
                :  64 words$word))) (\ (mul_result : 64 bits) .  state_monad$bindS
   (state_monad$read_regS HI_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  state_monad$bindS
   (state_monad$read_regS LO_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) . 
   let result =
     ((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in state_monad$seqS
   (state_monad$write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))  :  64 words$word)))
   (state_monad$write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec result (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_Load : WordType -> bool -> bool -> mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_Load:WordType -> bool -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) width sign linked base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      width
     : ( 64 words$word) M) (\ (vAddr : 64 bits) . 
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdEL vAddr
   else state_monad$bindS
     (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
     (if linked then state_monad$seqS (state_monad$seqS
        (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
        (state_monad$write_regS CP0LLAddr_ref pAddr))
        (case width of
          B => state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 1 : int):ii)  : ( 8 words$word) M) (\ (w__1 :  8 words$word) . 
           state_monad$returnS ((extendLoad w__1 sign  :  64 words$word)))
        | H => state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 2 : int):ii)  : ( 16 words$word) M) (\ (w__2 :  16 words$word) . 
           state_monad$returnS ((extendLoad w__2 sign  :  64 words$word)))
        | W0 => state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 4 : int):ii)  : ( 32 words$word) M) (\ (w__3 :  32 words$word) . 
           state_monad$returnS ((extendLoad w__3 sign  :  64 words$word)))
        | D => state_monad$bindS
           (MEMr_reserve_wrapper pAddr (( 8 : int):ii)  : ( 64 words$word) M) (\ (w__4 :  64 words$word) . 
           state_monad$returnS ((extendLoad w__4 sign  :  64 words$word)))
        )
      else
        (case width of
          B => state_monad$bindS
           (MEMr_wrapper (( 8 : int):ii) pAddr (( 1 : int):ii)  : ( 8 words$word) M) (\ (w__6 :  8 words$word) . 
           state_monad$returnS ((extendLoad w__6 sign  :  64 words$word)))
        | H => state_monad$bindS
           (MEMr_wrapper (( 16 : int):ii) pAddr (( 2 : int):ii)  : ( 16 words$word) M) (\ (w__7 :  16 words$word) . 
           state_monad$returnS ((extendLoad w__7 sign  :  64 words$word)))
        | W0 => state_monad$bindS
           (MEMr_wrapper (( 32 : int):ii) pAddr (( 4 : int):ii)  : ( 32 words$word) M) (\ (w__8 :  32 words$word) . 
           state_monad$returnS ((extendLoad w__8 sign  :  64 words$word)))
        | D => state_monad$bindS
           (MEMr_wrapper (( 64 : int):ii) pAddr (( 8 : int):ii)  : ( 64 words$word) M) (\ (w__9 :  64 words$word) . 
           state_monad$returnS ((extendLoad w__9 sign  :  64 words$word)))
        )) (\ (memResult : 64 bits) . 
     wGPR rt memResult))))))`;


(*val execute_LWR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LWR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      W0
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (MEMr_wrapper (( 32 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):ii)
     : ( 32 words$word) M) (\ mem_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__4 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   let (result : 32 bits) =
     (if (((b__4 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 16 : int):ii)  :  16 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):ii) (( 24 : int):ii)  :  8 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):ii) (( 8 : int):ii)  :  24 words$word))
         :  32 words$word)
     else mem_val) in
   wGPR rt ((sign_extend1 (( 64 : int):ii) result  :  64 words$word)))))))))`;


(*val execute_LWL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LWL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      W0
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (MEMr_wrapper (( 32 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 2 : int):ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):ii)
     : ( 32 words$word) M) (\ mem_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__0 = ((subrange_vec_dec vAddr (( 1 : int):ii) (( 0 : int):ii)  :  2 words$word)) in
   let (result : 32 bits) =
     (if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then mem_val
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
         :  32 words$word)
     else
       (concat_vec ((subrange_vec_dec mem_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
         :  32 words$word)) in
   wGPR rt ((sign_extend1 (( 64 : int):ii) result  :  64 words$word)))))))))`;


(*val execute_LUI : mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LUI:(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt imm=
    (wGPR rt
     ((sign_extend1 (( 64 : int):ii)
         ((concat_vec imm
             (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)
            :  32 words$word))
        :  64 words$word))))`;


(*val execute_LDR : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LDR:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      D
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (MEMr_wrapper (( 64 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):ii)
     : ( 64 words$word) M) (\ mem_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__24 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__24 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 32 : int):ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 40 : int):ii)  :  24 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 24 : int):ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 48 : int):ii)  :  16 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 16 : int):ii)  :  48 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):ii) (( 56 : int):ii)  :  8 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):ii) (( 8 : int):ii)  :  56 words$word))
          :  64 words$word)
      else mem_val))))))))`;


(*val execute_LDL : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_LDL:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base rt offset=  (state_monad$bindS
   (rGPR base  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      D
     : ( 64 words$word) M) (\ vAddr .  state_monad$bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
   (MEMr_wrapper (( 64 : int):ii)
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):ii) (( 3 : int):ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):ii)
     : ( 64 words$word) M) (\ mem_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ reg_val . 
   let b__16 = ((subrange_vec_dec vAddr (( 2 : int):ii) (( 0 : int):ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__16 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then mem_val
      else if (((b__16 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
           ((subrange_vec_dec reg_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
           ((subrange_vec_dec reg_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
           ((subrange_vec_dec reg_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
           ((subrange_vec_dec reg_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 23 : int):ii) (( 0 : int):ii)  :  24 words$word))
           ((subrange_vec_dec reg_val (( 39 : int):ii) (( 0 : int):ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
           ((subrange_vec_dec reg_val (( 47 : int):ii) (( 0 : int):ii)  :  48 words$word))
          :  64 words$word)
      else
        (concat_vec ((subrange_vec_dec mem_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
           ((subrange_vec_dec reg_val (( 55 : int):ii) (( 0 : int):ii)  :  56 words$word))
          :  64 words$word)))))))))`;


(*val execute_JR : mword ty5 -> M unit*)

val _ = Define `
 ((execute_JR:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs=  (state_monad$bindS (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  execute_branch w__0)))`;


(*val execute_JALR : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_JALR:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS (state_monad$seqS
   (execute_branch w__0)
   (state_monad$read_regS PC_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec_int w__1 (( 8 : int):ii)  :  64 words$word))))))`;


(*val execute_JAL : mword ty26 -> M unit*)

val _ = Define `
 ((execute_JAL:(26)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) offset=  (state_monad$bindS
   (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):ii)  :  64 words$word)) (( 63 : int):ii) (( 28 : int):ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))
   (state_monad$read_regS PC_ref  : ( 64 words$word) M)) (\ (w__1 :  64 words$word) . 
   wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) ((add_vec_int w__1 (( 8 : int):ii)  :  64 words$word))))))`;


(*val execute_J : mword ty26 -> M unit*)

val _ = Define `
 ((execute_J:(26)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) offset=  (state_monad$bindS
   (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) . 
   execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):ii)  :  64 words$word)) (( 63 : int):ii) (( 28 : int):ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))))`;


(*val execute_ImplementationDefinedStopFetching : unit -> unit*)

val _ = Define `
 ((execute_ImplementationDefinedStopFetching:unit -> unit) g__118=  () )`;


(*val execute_HCF : unit -> unit*)

val _ = Define `
 ((execute_HCF:unit -> unit) g__123=  () )`;


(*val execute_ERET : unit -> M unit*)

val _ = Define `
 ((execute_ERET:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__128=  (state_monad$bindS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (checkCP0Access () )
   (ERETHook () ))
   (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B0]  :  1 words$word)))
   (state_monad$read_regS CP0Status_ref)) (\ (w__0 : StatusReg) . 
   if (((((bits_to_bool ((get_StatusReg_ERL w__0  :  1 words$word)))) = ((bit_to_bool B1))))) then state_monad$bindS
     (state_monad$read_regS CP0ErrorEPC_ref  : ( 64 words$word) M) (\ (w__1 : 64 bits) .  state_monad$seqS
     (state_monad$write_regS nextPC_ref w__1) (set_StatusReg_ERL CP0Status_ref (vec_of_bits [B0]  :  1 words$word)))
   else state_monad$bindS
     (state_monad$read_regS CP0EPC_ref  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  state_monad$seqS
     (state_monad$write_regS nextPC_ref w__2) (set_StatusReg_EXL CP0Status_ref (vec_of_bits [B0]  :  1 words$word))))))`;


(*val execute_DSUBU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSUBU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((sub_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DSUB : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSUB:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let (temp65 : 65 bits) =
     ((sub_vec ((sign_extend1 (( 65 : int):ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec temp65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec temp65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec temp65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))))))`;


(*val execute_DSRLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) in state_monad$bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRL32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRL32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in state_monad$bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRAV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRAV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word)) in state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRA32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRA32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRA : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSRA:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ temp .  state_monad$bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSLLV : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLLV:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  state_monad$bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 ((subrange_vec_dec w__1 (( 5 : int):ii) (( 0 : int):ii)  :  6 words$word))  : ( 64 words$word) M) (\ (w__2 :
      64 words$word) . 
   wGPR rd w__2)))))`;


(*val execute_DSLL32 : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLL32:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word))
     : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1))))`;


(*val execute_DSLL : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DSLL:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt rd sa=  (state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 sa  : ( 64 words$word) M) (\ (w__1 :  64 words$word) .  wGPR rd w__1))))`;


(*val execute_DMULTU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DMULTU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let result = ((mult_vec w__0 w__1  :  128 words$word)) in state_monad$seqS
   (state_monad$write_regS HI_ref ((subrange_vec_dec result (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)))
   (state_monad$write_regS LO_ref ((subrange_vec_dec result (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))))`;


(*val execute_DMULT : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DMULT:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let result = ((mults_vec w__0 w__1  :  128 words$word)) in state_monad$seqS
   (state_monad$write_regS HI_ref ((subrange_vec_dec result (( 127 : int):ii) (( 64 : int):ii)  :  64 words$word)))
   (state_monad$write_regS LO_ref ((subrange_vec_dec result (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))))`;


(*val execute_DIVU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DIVU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  64 words$word)))))))))) then state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 : 32 bits) .  state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
      state_monad$returnS (w__0, w__1)))
    else
      let si = (lem$w2ui ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let ti = (lem$w2ui ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (hardware_mod si ti) in
      state_monad$returnS ((to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) qi  :  32 words$word),
              (to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in state_monad$seqS
   (state_monad$write_regS HI_ref ((sign_extend1 (( 64 : int):ii) r  :  64 words$word)))
   (state_monad$write_regS LO_ref ((sign_extend1 (( 64 : int):ii) q  :  64 words$word))))))))`;


(*val execute_DIV : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DIV:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ rsVal .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rtVal .  state_monad$bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  64 words$word)))))))))) then state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__0 : 32 bits) .  state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M) (\ (w__1 : 32 bits) . 
      state_monad$returnS (w__0, w__1)))
    else
      let si = (integer_word$w2i ((subrange_vec_dec rsVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let ti = (integer_word$w2i ((subrange_vec_dec rtVal (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (si - ((ti * qi))) in
      state_monad$returnS ((to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) qi  :  32 words$word),
              (to_bits ((make_the_value (( 32 : int):ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in state_monad$seqS
   (state_monad$write_regS HI_ref ((sign_extend1 (( 64 : int):ii) r  :  64 words$word)))
   (state_monad$write_regS LO_ref ((sign_extend1 (( 64 : int):ii) q  :  64 words$word))))))))`;


(*val execute_DDIVU : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DDIVU:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rsVal = (lem$w2ui w__0) in state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rtVal = (lem$w2ui w__1) in state_monad$bindS
   (if (((rtVal = (( 0 : int):ii)))) then state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__3 : 64 bits) . 
      state_monad$returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (hardware_mod rsVal rtVal) in
      state_monad$returnS ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) qi  :  64 words$word),
              (to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in state_monad$seqS
   (state_monad$write_regS LO_ref q) (state_monad$write_regS HI_ref r))))))`;


(*val execute_DDIV : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DDIV:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rsVal = (integer_word$w2i w__0) in state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let rtVal = (integer_word$w2i w__1) in state_monad$bindS
   (if (((rtVal = (( 0 : int):ii)))) then state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__2 : 64 bits) .  state_monad$bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__3 : 64 bits) . 
      state_monad$returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (rsVal - ((qi * rtVal))) in
      state_monad$returnS ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) qi  :  64 words$word),
              (to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in state_monad$seqS
   (state_monad$write_regS LO_ref q) (state_monad$write_regS HI_ref r))))))`;


(*val execute_DADDU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DADDU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DADDIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_DADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((add_vec w__0 ((sign_extend1 (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_DADDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_DADDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let (sum65 : 65 bits) =
     ((add_vec ((sign_extend1 (( 65 : int):ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):ii) imm  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rt ((subrange_vec_dec sum65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word)))))`;


(*val execute_DADD : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_DADD:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   let (sum65 : 65 bits) =
     ((add_vec ((sign_extend1 (( 65 : int):ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec sum65 (( 63 : int):ii) (( 0 : int):ii)  :  64 words$word))))))`;


(*val execute_ClearRegs : ClearRegSet -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ClearRegs:ClearRegSet ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) regset m=  (state_monad$seqS (state_monad$seqS
   (if ((((((regset = CLo))) \/ (((regset = CHi)))))) then checkCP2usable () 
    else state_monad$returnS () )
   (if (((regset = CHi))) then
      (state$foreachS (index_list (( 0 : int):ii) (( 15 : int):ii) (( 1 : int):ii)) () 
        (\ i unit_var . 
          let r =
            ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) ((i + (( 16 : int):ii)))  :  5 words$word)) in state_monad$bindS
          (state$and_boolS (state_monad$returnS ((bit_to_bool ((access_vec_dec m i))))) ((register_inaccessible r))) (\ (w__1 :
            bool) . 
          if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation r
          else state_monad$returnS () )))
    else state_monad$returnS () ))
   (state$foreachS (index_list (( 0 : int):ii) (( 15 : int):ii) (( 1 : int):ii)) () 
     (\ i unit_var . 
       if ((bit_to_bool ((access_vec_dec m i)))) then
         (case regset of
           GPLo =>
            wGPR ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) i  :  5 words$word))
              ((zeros0 (( 64 : int):ii) ()   :  64 words$word))
         | GPHi =>
            wGPR
              ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) ((i + (( 16 : int):ii)))
                 :  5 words$word)) ((zeros0 (( 64 : int):ii) ()   :  64 words$word))
         | CLo =>
            writeCapReg ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) i  :  5 words$word)) null_cap
         | CHi =>
            writeCapReg
              ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) ((i + (( 16 : int):ii)))
                 :  5 words$word)) null_cap
         )
       else state_monad$returnS () ))))`;


(*val execute_CWriteHwr : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CWriteHwr:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cb sel=  (state_monad$seqS
   (checkCP2usable () )
   (let l__24 = (lem$w2ui sel) in state_monad$bindS
   (if (((l__24 = (( 0 : int):ii)))) then state_monad$returnS (F, F)
    else if (((l__24 = (( 1 : int):ii)))) then state_monad$returnS (F, F)
    else if (((l__24 = (( 8 : int):ii)))) then state_monad$returnS (F, T)
    else if (((l__24 = (( 22 : int):ii)))) then state_monad$returnS (T, F)
    else if (((l__24 = (( 23 : int):ii)))) then state_monad$returnS (T, F)
    else if (((l__24 = (( 29 : int):ii)))) then state_monad$returnS (T, T)
    else if (((l__24 = (( 30 : int):ii)))) then state_monad$returnS (T, T)
    else if (((l__24 = (( 31 : int):ii)))) then state_monad$returnS (T, T)
    else SignalException ResI) (\ varstup .  let ((needSup : bool), (needAccessSys : bool)) = varstup in state_monad$bindS
   (register_inaccessible cb) (\ (w__8 : bool) . 
   if w__8 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (state$and_boolS (state_monad$returnS needAccessSys)
       ( state_monad$bindS(pcc_access_system_regs () ) (\ (w__9 : bool) .  state_monad$returnS ((~ w__9))))) (\ (w__10 :
       bool) . 
     if w__10 then raise_c2_exception CapEx_AccessSystemRegsViolation sel
     else state_monad$bindS
       (state$and_boolS (state_monad$returnS needSup)
         ( state_monad$bindS(getAccessLevel () ) (\ (w__11 : AccessLevel) . 
          state_monad$returnS ((~ ((grantsAccess w__11 Supervisor))))))) (\ (w__12 : bool) . 
       if w__12 then raise_c2_exception CapEx_AccessSystemRegsViolation sel
       else state_monad$bindS
         (readCapReg cb) (\ capVal . 
         let l__16 = (lem$w2ui sel) in
         if (((l__16 = (( 0 : int):ii)))) then writeCapReg DDC capVal
         else if (((l__16 = (( 1 : int):ii)))) then
           state_monad$write_regS CTLSU_ref ((capStructToCapReg capVal  :  257 words$word))
         else if (((l__16 = (( 8 : int):ii)))) then
           state_monad$write_regS CTLSP_ref ((capStructToCapReg capVal  :  257 words$word))
         else if (((l__16 = (( 22 : int):ii)))) then writeCapReg KR1C capVal
         else if (((l__16 = (( 23 : int):ii)))) then writeCapReg KR2C capVal
         else if (((l__16 = (( 29 : int):ii)))) then writeCapReg KCC capVal
         else if (((l__16 = (( 30 : int):ii)))) then writeCapReg KDC capVal
         else if (((l__16 = (( 31 : int):ii)))) then writeCapReg EPCC capVal
         else state_monad$assert_expS F "should be unreachable code"))))))))`;


(*val execute_CUnseal : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CUnseal:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cs ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else state_monad$bindS
       (register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if (((ct_cursor <> ((lem$w2ui cs_val.CapStruct_otype))))) then
         raise_c2_exception CapEx_TypeViolation ct
       else if ((~ ct_val.CapStruct_permit_unseal)) then
         raise_c2_exception CapEx_PermitUnsealViolation ct
       else if ((ct_cursor < ((getCapBase ct_val)))) then
         raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ((getCapTop ct_val)))) then
         raise_c2_exception CapEx_LengthViolation ct
       else
         writeCapReg cd
           (cs_val with<|
             CapStruct_sealed := F; CapStruct_otype := ((zeros0 (( 24 : int):ii) ()   :  24 words$word)); CapStruct_global :=
               (((cs_val.CapStruct_global /\ ct_val.CapStruct_global)))|>))))))))`;


(*val execute_CToPtr : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CToPtr:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg ct)) (\ ct_val .  state_monad$bindS
   (readCapReg cb) (\ cb_val .  state_monad$bindS
   (register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let cbBase = (getCapBase cb_val) in
       let cbTop = (getCapTop cb_val) in
       let ctBase = (getCapBase ct_val) in
       let ctTop = (getCapTop ct_val) in
       wGPR rd
         (if (((((~ cb_val.CapStruct_tag)) \/ (((((cbBase < ctBase)) \/ ((cbTop > ctTop)))))))) then
            (zeros0 (( 64 : int):ii) ()   :  64 words$word)
          else
            (to_bits ((make_the_value (( 64 : int):ii)  :  64 itself))
               ((((getCapCursor cb_val)) - ctBase))
              :  64 words$word))))))))`;


(*val execute_CTestSubset : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CTestSubset:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in
   let ct_perms = ((getCapPerms ct_val  :  31 words$word)) in
   let cb_top = (getCapTop cb_val) in
   let cb_base = (getCapBase cb_val) in
   let cb_perms = ((getCapPerms cb_val  :  31 words$word)) in state_monad$bindS
   (register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else
       let (result : 1 bits) =
         (if ((neq_bool cb_val.CapStruct_tag ct_val.CapStruct_tag)) then
           (vec_of_bits [B0]  :  1 words$word)
         else if ((ct_base < cb_base)) then (vec_of_bits [B0]  :  1 words$word)
         else if ((ct_top > cb_top)) then (vec_of_bits [B0]  :  1 words$word)
         else if (((((and_vec ct_perms cb_perms  :  31 words$word)) <> ct_perms))) then
           (vec_of_bits [B0]  :  1 words$word)
         else (vec_of_bits [B1]  :  1 words$word)) in
       wGPR rd ((zero_extend1 (( 64 : int):ii) result  :  64 words$word))))))))`;


(*val execute_CSub : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSub:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg ct)) (\ ct_val .  state_monad$bindS
   (readCapReg cb) (\ cb_val .  state_monad$bindS
   (register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else
       wGPR rd
         ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself))
             ((((getCapCursor cb_val)) - ((getCapCursor ct_val))))
            :  64 words$word))))))))`;


(*val execute_CStore : mword ty5 -> mword ty5 -> mword ty5 -> mword ty5 -> mword ty8 -> WordType -> bool -> M unit*)

val _ = Define `
 ((execute_CStore:(5)words$word ->(5)words$word ->(5)words$word ->(5)words$word ->(8)words$word -> WordType -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs cb rt rd offset width conditional=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
   else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
   else if ((~ cb_val.CapStruct_permit_store)) then
     raise_c2_exception CapEx_PermitStoreViolation cb
   else
     let size1 = (wordWidthBytes width) in
     let cursor = (getCapCursor cb_val) in state_monad$bindS
     (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
     let vAddr =
       (((((cursor + ((lem$w2ui w__1)))) + ((size1 * ((integer_word$w2i offset))))))
         %
         ((pow2 (( 64 : int):ii)))) in
     let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
     if ((((vAddr + size1)) > ((getCapTop cb_val)))) then
       raise_c2_exception CapEx_LengthViolation cb
     else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
     else if ((~ ((isAddressAligned vAddr64 width)))) then SignalExceptionBadAddr AdES vAddr64
     else state_monad$bindS
       (TLBTranslate vAddr64 StoreData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
       (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
       if conditional then state_monad$bindS
         (state_monad$read_regS CP0LLBit_ref  : ( 1 words$word) M) (\ (w__2 : 1 bits) .  state_monad$bindS
         (if ((bit_to_bool ((access_vec_dec w__2 (( 0 : int):ii))))) then
            (case width of
              B =>
               MEMw_conditional_wrapper pAddr (( 1 : int):ii)
                 ((subrange_vec_dec rs_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
            | H =>
               MEMw_conditional_wrapper pAddr (( 2 : int):ii)
                 ((subrange_vec_dec rs_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
            | W0 =>
               MEMw_conditional_wrapper pAddr (( 4 : int):ii)
                 ((subrange_vec_dec rs_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
            | D => MEMw_conditional_wrapper pAddr (( 8 : int):ii) rs_val
            )
          else state_monad$returnS F) (\ (success : bool) . 
         wGPR rd ((zero_extend1 (( 64 : int):ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
       else
         (case width of
           B => MEMw_wrapper pAddr (( 1 : int):ii) ((subrange_vec_dec rs_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word))
         | H => MEMw_wrapper pAddr (( 2 : int):ii) ((subrange_vec_dec rs_val (( 15 : int):ii) (( 0 : int):ii)  :  16 words$word))
         | W0 => MEMw_wrapper pAddr (( 4 : int):ii) ((subrange_vec_dec rs_val (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
         | D => MEMw_wrapper pAddr (( 8 : int):ii) rs_val
         ))))))))`;


(*val execute_CSetOffset : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSetOffset:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val .  state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (setCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CSetCause : mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSetCause:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (pcc_access_system_regs () )) (\ (w__0 : bool) . 
   if ((~ w__0)) then raise_c2_exception_noreg CapEx_AccessSystemRegsViolation
   else state_monad$bindS
     (rGPR rt  : ( 64 words$word) M) (\ rt_val .  state_monad$seqS
     (set_CapCauseReg_ExcCode CapCause_ref ((subrange_vec_dec rt_val (( 15 : int):ii) (( 8 : int):ii)  :  8 words$word)))
     (set_CapCauseReg_RegNum CapCause_ref ((subrange_vec_dec rt_val (( 7 : int):ii) (( 0 : int):ii)  :  8 words$word)))))))`;


(*val execute_CSetBoundsImmediate : mword ty5 -> mword ty5 -> mword ty11 -> M unit*)

val _ = Define `
 ((execute_CSetBoundsImmediate:(5)words$word ->(5)words$word ->(11)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb imm=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val . 
   let immU = (lem$w2ui imm) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + immU) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else  (case
 setCapBounds cb_val
   ((to_bits ((make_the_value (( 64 : int): ii) : 64 itself)) cursor : 64 words$word))
   ((to_bits ((make_the_value (( 65 : int): ii) : 65 itself)) newTop : 65 words$word)) of
     (_, newCap) =>
 writeCapReg cd newCap
 ))))))`;


(*val execute_CSetBoundsExact : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSetBoundsExact:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rt_val = (lem$w2ui w__0) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + rt_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__1 : bool) . 
   if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else
       let (exact, newCap) =
         (setCapBounds cb_val
           ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) cursor  :  64 words$word))
           ((to_bits ((make_the_value (( 65 : int):ii)  :  65 itself)) newTop  :  65 words$word))) in
       if ((~ exact)) then raise_c2_exception CapEx_InexactBounds cb
       else writeCapReg cd newCap))))))`;


(*val execute_CSetBounds : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSetBounds:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   let rt_val = (lem$w2ui w__0) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + rt_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__1 : bool) . 
   if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else  (case
 setCapBounds cb_val
   ((to_bits ((make_the_value (( 64 : int): ii) : 64 itself)) cursor : 64 words$word))
   ((to_bits ((make_the_value (( 65 : int): ii) : 65 itself)) newTop : 65 words$word)) of
     (_, newCap) =>
 writeCapReg cd newCap
 )))))))`;


(*val execute_CSeal : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CSeal:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cs ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else state_monad$bindS
       (register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
       else if cs_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if ((~ ct_val.CapStruct_permit_seal)) then
         raise_c2_exception CapEx_PermitSealViolation ct
       else if ((ct_cursor < ct_base)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor > max_otype)) then raise_c2_exception CapEx_LengthViolation ct
       else
         let (success, newCap) =
           (sealCap cs_val
             ((to_bits ((make_the_value (( 24 : int):ii)  :  24 itself)) ct_cursor  :  24 words$word))) in
         if ((~ success)) then raise_c2_exception CapEx_InexactBounds cs
         else writeCapReg cd newCap)))))))`;


(*val execute_CSC : mword ty5 -> mword ty5 -> mword ty5 -> mword ty5 -> mword ty11 -> bool -> M unit*)

val _ = Define `
 ((execute_CSC:(5)words$word ->(5)words$word ->(5)words$word ->(5)words$word ->(11)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cs cb rt rd offset conditional=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val .  state_monad$bindS
   (readCapReg cb) (\ cb_val .  state_monad$bindS
   (register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_store)) then
       raise_c2_exception CapEx_PermitStoreViolation cb
     else if ((~ cb_val.CapStruct_permit_store_cap)) then
       raise_c2_exception CapEx_PermitStoreCapViolation cb
     else if (((((~ cb_val.CapStruct_permit_store_local_cap)) /\ (((cs_val.CapStruct_tag /\ ((~ cs_val.CapStruct_global)))))))) then
       raise_c2_exception CapEx_PermitStoreLocalCapViolation cb
     else
       let cursor = (getCapCursor cb_val) in state_monad$bindS
       (rGPR rt  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
       let vAddr =
         (((((cursor + ((lem$w2ui w__2)))) + (((( 16 : int):ii) * ((integer_word$w2i offset))))))
           %
           ((pow2 (( 64 : int):ii)))) in
       let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
       if ((((vAddr + cap_size)) > ((getCapTop cb_val)))) then
         raise_c2_exception CapEx_LengthViolation cb
       else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
       else if (((((vAddr % cap_size)) <> (( 0 : int):ii)))) then SignalExceptionBadAddr AdES vAddr64
       else state_monad$bindS
         (TLBTranslateC vAddr64 StoreData  : (( 64 words$word # bool)) M) (\ varstup .  let (pAddr, noStoreCap) = varstup in
         if (((cs_val.CapStruct_tag /\ noStoreCap))) then
           raise_c2_exception CapEx_TLBNoStoreCap cs
         else if conditional then state_monad$bindS
           (state_monad$read_regS CP0LLBit_ref  : ( 1 words$word) M) (\ (w__3 : 1 bits) .  state_monad$bindS
           (if ((bit_to_bool ((access_vec_dec w__3 (( 0 : int):ii))))) then
              MEMw_tagged_conditional pAddr cs_val.CapStruct_tag
                ((capStructToMemBits cs_val  :  256 words$word))
            else state_monad$returnS F) (\ success . 
           wGPR rd ((zero_extend1 (( 64 : int):ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
         else MEMw_tagged pAddr cs_val.CapStruct_tag ((capStructToMemBits cs_val  :  256 words$word))))))))))`;


(*val execute_CReturn : unit -> M unit*)

val _ = Define `
 ((execute_CReturn:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__129=  (state_monad$seqS (checkCP2usable () ) (raise_c2_exception_noreg CapEx_ReturnTrap)))`;


(*val execute_CReadHwr : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CReadHwr:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd sel=  (state_monad$seqS
   (checkCP2usable () )
   (let l__8 = (lem$w2ui sel) in state_monad$bindS
   (if (((l__8 = (( 0 : int):ii)))) then state_monad$returnS (F, F)
    else if (((l__8 = (( 1 : int):ii)))) then state_monad$returnS (F, F)
    else if (((l__8 = (( 8 : int):ii)))) then state_monad$returnS (F, T)
    else if (((l__8 = (( 22 : int):ii)))) then state_monad$returnS (T, F)
    else if (((l__8 = (( 23 : int):ii)))) then state_monad$returnS (T, F)
    else if (((l__8 = (( 29 : int):ii)))) then state_monad$returnS (T, T)
    else if (((l__8 = (( 30 : int):ii)))) then state_monad$returnS (T, T)
    else if (((l__8 = (( 31 : int):ii)))) then state_monad$returnS (T, T)
    else SignalException ResI) (\ varstup .  let ((needSup : bool), (needAccessSys : bool)) = varstup in state_monad$bindS
   (register_inaccessible cd) (\ (w__8 : bool) . 
   if w__8 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (state$and_boolS (state_monad$returnS needAccessSys)
       ( state_monad$bindS(pcc_access_system_regs () ) (\ (w__9 : bool) .  state_monad$returnS ((~ w__9))))) (\ (w__10 :
       bool) . 
     if w__10 then raise_c2_exception CapEx_AccessSystemRegsViolation sel
     else state_monad$bindS
       (state$and_boolS (state_monad$returnS needSup)
         ( state_monad$bindS(getAccessLevel () ) (\ (w__11 : AccessLevel) . 
          state_monad$returnS ((~ ((grantsAccess w__11 Supervisor))))))) (\ (w__12 : bool) . 
       if w__12 then raise_c2_exception CapEx_AccessSystemRegsViolation sel
       else
         let l__0 = (lem$w2ui sel) in state_monad$bindS
         (if (((l__0 = (( 0 : int):ii)))) then readCapReg DDC
          else if (((l__0 = (( 1 : int):ii)))) then state_monad$bindS
            (state_monad$read_regS CTLSU_ref  : ( 257 words$word) M) (\ (w__14 :  257 words$word) . 
            state_monad$returnS ((capRegToCapStruct w__14)))
          else if (((l__0 = (( 8 : int):ii)))) then state_monad$bindS
            (state_monad$read_regS CTLSP_ref  : ( 257 words$word) M) (\ (w__15 :  257 words$word) . 
            state_monad$returnS ((capRegToCapStruct w__15)))
          else if (((l__0 = (( 22 : int):ii)))) then readCapReg KR1C
          else if (((l__0 = (( 23 : int):ii)))) then readCapReg KR2C
          else if (((l__0 = (( 29 : int):ii)))) then readCapReg KCC
          else if (((l__0 = (( 30 : int):ii)))) then readCapReg KDC
          else if (((l__0 = (( 31 : int):ii)))) then readCapReg EPCC
          else state_monad$seqS (state_monad$assert_expS F "should be unreachable code") (undefined_CapStruct () )) (\ (capVal :
           CapStruct) . 
         writeCapReg cd capVal))))))))`;


(*val execute_CPtrCmp : mword ty5 -> mword ty5 -> mword ty5 -> CPtrCmpOp -> M unit*)

val _ = Define `
 ((execute_CPtrCmp:(5)words$word ->(5)words$word ->(5)words$word -> CPtrCmpOp ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb ct op=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else state_monad$bindS
       (readCapReg cb) (\ cb_val .  state_monad$bindS
       (readCapReg ct) (\ ct_val . 
       let equal = F in
       let ltu = F in
       let lts = F in
       let ((equal : bool), (lts : bool), (ltu : bool)) =
         (if ((neq_bool cb_val.CapStruct_tag ct_val.CapStruct_tag)) then
           let ((lts : bool), (ltu : bool)) =
             (if ((~ cb_val.CapStruct_tag)) then
               let (ltu : bool) = T in
               let (lts : bool) = T in
               (lts, ltu)
             else (lts, ltu)) in
           (equal, lts, ltu)
         else
           let cursor1 = (getCapCursor cb_val) in
           let cursor2 = (getCapCursor ct_val) in
           let (equal : bool) = (cursor1 = cursor2) in
           let (ltu : bool) = (cursor1 < cursor2) in
           let (lts : bool) =
             (zopz0zI_s ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) cursor1  :  64 words$word))
               ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) cursor2  :  64 words$word))) in
           (equal, lts, ltu)) in
       let (cmp : bool) =
         ((case op of
           CEQ => equal
         | CNE => ~ equal
         | CLT => lts
         | CLE => (lts \/ equal)
         | CLTU => ltu
         | CLEU => (ltu \/ equal)
         | CEXEQ => (cb_val = ct_val)
         | CNEXEQ => (cb_val <> ct_val)
         )) in
       wGPR rd ((zero_extend1 (( 64 : int):ii) ((bool_to_bits cmp  :  1 words$word))  :  64 words$word))))))))`;


(*val execute_CMOVX : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M unit*)

val _ = Define `
 ((execute_CMOVX:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt ismovn=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else state_monad$bindS
       (rGPR rt  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
       if ((bits_to_bool
              ((xor_vec
                  ((bool_to_bits (((w__2 = ((zeros0 (( 64 : int):ii) ()   :  64 words$word)))))  :  1 words$word))
                  ((bool_to_bits ismovn  :  1 words$word))
                 :  1 words$word)))) then state_monad$bindS
         (readCapReg cb) (\ (w__3 : CapStruct) .  writeCapReg cd w__3)
       else state_monad$returnS () )))))`;


(*val execute_CLoad : mword ty5 -> mword ty5 -> mword ty5 -> mword ty8 -> bool -> WordType -> bool -> M unit*)

val _ = Define `
 ((execute_CLoad:(5)words$word ->(5)words$word ->(5)words$word ->(8)words$word -> bool -> WordType -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) arg0 arg1 arg2 arg3 arg4 arg5 arg6=
    (let merge_var = (arg0, arg1, arg2, arg3, arg4, arg5, arg6) in
   (case merge_var of
     (rd, cb, rt, offset, signext, B, linked) => state_monad$bindS (state_monad$seqS
      (checkCP2usable () )
      (readCapReg cb)) (\ cb_val .  state_monad$bindS
      (register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in state_monad$bindS
        (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
        let vAddr =
          (((((cursor + ((lem$w2ui w__1)))) + (((( 1 : int):ii) * ((integer_word$w2i offset))))))
            %
            ((pow2 (( 64 : int):ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 1 : int):ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 B)))) then SignalExceptionBadAddr AdEL vAddr64
        else state_monad$bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
          (if linked then state_monad$bindS (state_monad$seqS (state_monad$seqS
             (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
             (state_monad$write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 1 : int):ii)  : ( 8 words$word) M)) (\ (w__2 :  8 words$word) . 
             state_monad$returnS ((extendLoad w__2 signext  :  64 words$word)))
           else state_monad$bindS
             (MEMr_wrapper (( 8 : int):ii) pAddr (( 1 : int):ii)  : ( 8 words$word) M) (\ (w__3 :  8 words$word) . 
             state_monad$returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, D, linked) => state_monad$bindS (state_monad$seqS
      (checkCP2usable () )
      (readCapReg cb)) (\ cb_val .  state_monad$bindS
      (register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in state_monad$bindS
        (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
        let vAddr =
          (((((cursor + ((lem$w2ui w__1)))) + (((( 8 : int):ii) * ((integer_word$w2i offset))))))
            %
            ((pow2 (( 64 : int):ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 8 : int):ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 D)))) then SignalExceptionBadAddr AdEL vAddr64
        else state_monad$bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
          (if linked then state_monad$bindS (state_monad$seqS (state_monad$seqS
             (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
             (state_monad$write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 8 : int):ii)  : ( 64 words$word) M)) (\ (w__2 :  64 words$word) . 
             state_monad$returnS ((extendLoad w__2 signext  :  64 words$word)))
           else state_monad$bindS
             (MEMr_wrapper (( 64 : int):ii) pAddr (( 8 : int):ii)  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
             state_monad$returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, H, linked) => state_monad$bindS (state_monad$seqS
      (checkCP2usable () )
      (readCapReg cb)) (\ cb_val .  state_monad$bindS
      (register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in state_monad$bindS
        (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
        let vAddr =
          (((((cursor + ((lem$w2ui w__1)))) + (((( 2 : int):ii) * ((integer_word$w2i offset))))))
            %
            ((pow2 (( 64 : int):ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 2 : int):ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 H)))) then SignalExceptionBadAddr AdEL vAddr64
        else state_monad$bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
          (if linked then state_monad$bindS (state_monad$seqS (state_monad$seqS
             (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
             (state_monad$write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 2 : int):ii)  : ( 16 words$word) M)) (\ (w__2 :  16 words$word) . 
             state_monad$returnS ((extendLoad w__2 signext  :  64 words$word)))
           else state_monad$bindS
             (MEMr_wrapper (( 16 : int):ii) pAddr (( 2 : int):ii)  : ( 16 words$word) M) (\ (w__3 :  16 words$word) . 
             state_monad$returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, W0, linked) => state_monad$bindS (state_monad$seqS
      (checkCP2usable () )
      (readCapReg cb)) (\ cb_val .  state_monad$bindS
      (register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in state_monad$bindS
        (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
        let vAddr =
          (((((cursor + ((lem$w2ui w__1)))) + (((( 4 : int):ii) * ((integer_word$w2i offset))))))
            %
            ((pow2 (( 64 : int):ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 4 : int):ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 W0)))) then SignalExceptionBadAddr AdEL vAddr64
        else state_monad$bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) M) (\ pAddr .  state_monad$bindS
          (if linked then state_monad$bindS (state_monad$seqS (state_monad$seqS
             (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
             (state_monad$write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 4 : int):ii)  : ( 32 words$word) M)) (\ (w__2 :  32 words$word) . 
             state_monad$returnS ((extendLoad w__2 signext  :  64 words$word)))
           else state_monad$bindS
             (MEMr_wrapper (( 32 : int):ii) pAddr (( 4 : int):ii)  : ( 32 words$word) M) (\ (w__3 :  32 words$word) . 
             state_monad$returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 bits) . 
          wGPR rd memResult)))))
   )))`;


(*val execute_CLC : mword ty5 -> mword ty5 -> mword ty5 -> mword ty11 -> bool -> M unit*)

val _ = Define `
 ((execute_CLC:(5)words$word ->(5)words$word ->(5)words$word ->(11)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt offset linked=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_load)) then
       raise_c2_exception CapEx_PermitLoadViolation cb
     else
       let cursor = (getCapCursor cb_val) in state_monad$bindS
       (rGPR rt  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
       let vAddr =
         (((((cursor + ((lem$w2ui w__2)))) + (((( 16 : int):ii) * ((integer_word$w2i offset))))))
           %
           ((pow2 (( 64 : int):ii)))) in
       let vAddr64 = ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) vAddr  :  64 words$word)) in
       if ((((vAddr + cap_size)) > ((getCapTop cb_val)))) then
         raise_c2_exception CapEx_LengthViolation cb
       else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
       else if (((((vAddr % cap_size)) <> (( 0 : int):ii)))) then SignalExceptionBadAddr AdEL vAddr64
       else state_monad$bindS
         (TLBTranslateC vAddr64 LoadData  : (( 64 words$word # bool)) M) (\ varstup .  let (pAddr, suppressTag) = varstup in
         let cd = (lem$w2ui cd) in
         if linked then state_monad$bindS (state_monad$seqS (state_monad$seqS
           (state_monad$write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))
           (state_monad$write_regS CP0LLAddr_ref pAddr))
           (MEMr_tagged_reserve pAddr  : ((bool #  256 words$word)) M)) (\ varstup .  let (tag, mem) = varstup in
           state_monad$write_regS
             ((access_list_dec CapRegs cd  : (regstate, register_value, ( 257 words$word)) register_ref))
             ((memBitsToCapBits
                 (((tag /\ (((cb_val.CapStruct_permit_load_cap /\ ((~ suppressTag))))))))
                 mem
                :  257 words$word)))
         else state_monad$bindS
           (MEMr_tagged pAddr  : ((bool #  256 words$word)) M) (\ varstup .  let (tag, mem) = varstup in
           state_monad$write_regS
             ((access_list_dec CapRegs cd  : (regstate, register_value, ( 257 words$word)) register_ref))
             ((memBitsToCapBits
                 (((tag /\ (((cb_val.CapStruct_permit_load_cap /\ ((~ suppressTag))))))))
                 mem
                :  257 words$word))))))))))`;


(*val execute_CJALR : mword ty5 -> mword ty5 -> bool -> M unit*)

val _ = Define `
 ((execute_CJALR:(5)words$word ->(5)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb link=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val . 
   let cb_ptr = (getCapCursor cb_val) in
   let cb_top = (getCapTop cb_val) in
   let cb_base = (getCapBase cb_val) in state_monad$bindS
   (state$and_boolS (state_monad$returnS link) ((register_inaccessible cd))) (\ (w__1 : bool) . 
   if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_execute)) then
       raise_c2_exception CapEx_PermitExecuteViolation cb
     else if ((cb_ptr < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((((cb_ptr + (( 4 : int):ii))) > cb_top)) then
       raise_c2_exception CapEx_LengthViolation cb
     else if (((((cb_ptr % (( 4 : int):ii))) <> (( 0 : int):ii)))) then SignalException AdEL
     else state_monad$seqS
       (if link then state_monad$bindS
          (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__3 :  257 words$word) . 
          let pcc = (capRegToCapStruct w__3) in state_monad$bindS
          (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__4 :  64 words$word) . 
          let (success, linkCap) = (setCapOffset pcc ((add_vec_int w__4 (( 8 : int):ii)  :  64 words$word))) in
          if success then writeCapReg cd linkCap
          else state_monad$assert_expS F ""))
        else state_monad$returnS () )
       (execute_branch_pcc cb_val))))))`;


(*val execute_CIncOffsetImmediate : mword ty5 -> mword ty5 -> mword ty11 -> M unit*)

val _ = Define `
 ((execute_CIncOffsetImmediate:(5)words$word ->(5)words$word ->(11)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb imm=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val . 
   let (imm64 : 64 bits) = ((sign_extend1 (( 64 : int):ii) imm  :  64 words$word)) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (incCapOffset cb_val imm64) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) imm64
                  :  64 words$word)))))))))`;


(*val execute_CIncOffset : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CIncOffset:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val .  state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ (((cb_val.CapStruct_sealed /\ (((rt_val <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0]
                           :  64 words$word)))))))))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (incCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CGetType : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetType:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       (if capVal.CapStruct_sealed then (zero_extend1 (( 64 : int):ii) capVal.CapStruct_otype  :  64 words$word)
        else (replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):ii)  :  64 words$word))))))`;


(*val execute_CGetTag : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetTag:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       ((zero_extend1 (( 64 : int):ii) ((bool_to_bits capVal.CapStruct_tag  :  1 words$word))  :  64 words$word))))))`;


(*val execute_CGetSealed : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetSealed:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       ((zero_extend1 (( 64 : int):ii) ((bool_to_bits capVal.CapStruct_sealed  :  1 words$word))  :  64 words$word))))))`;


(*val execute_CGetPerm : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetPerm:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd ((zero_extend1 (( 64 : int):ii) ((getCapPerms capVal  :  31 words$word))  :  64 words$word))))))`;


(*val execute_CGetPCCSetOffset : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetPCCSetOffset:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd rs=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__1 :  257 words$word) . 
     let pcc = (capRegToCapStruct w__1) in state_monad$bindS
     (rGPR rs  : ( 64 words$word) M) (\ rs_val . 
     let (success, newPCC) = (setCapOffset pcc rs_val) in
     if success then writeCapReg cd newPCC
     else writeCapReg cd ((int_to_cap rs_val)))))))`;


(*val execute_CGetPCC : mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetPCC:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (state_monad$read_regS PCC_ref  : ( 257 words$word) M) (\ (w__1 :  257 words$word) . 
     let pcc = (capRegToCapStruct w__1) in state_monad$bindS
     (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
     let (success, pcc2) = (setCapOffset pcc w__2) in state_monad$seqS
     (state_monad$assert_expS success "") (writeCapReg cd pcc2))))))`;


(*val execute_CGetOffset : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetOffset:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapOffset capVal))  :  64 words$word))))))`;


(*val execute_CGetLen : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetLen:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     let len65 = (getCapLength capVal) in
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself))
           (if ((len65 > MAX_U64)) then MAX_U64
            else len65)
          :  64 words$word))))))`;


(*val execute_CGetCause : mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetCause:(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (pcc_access_system_regs () )) (\ (w__0 : bool) . 
   if ((~ w__0)) then raise_c2_exception_noreg CapEx_AccessSystemRegsViolation
   else state_monad$bindS
     (state_monad$read_regS CapCause_ref) (\ (w__1 : CapCauseReg) . 
     wGPR rd ((zero_extend1 (( 64 : int):ii) ((get_CapCauseReg w__1  :  16 words$word))  :  64 words$word))))))`;


(*val execute_CGetBase : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetBase:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase capVal))  :  64 words$word))))))`;


(*val execute_CGetAddr : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CGetAddr:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapCursor capVal))  :  64 words$word))))))`;


(*val execute_CFromPtr : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CFromPtr:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val .  state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((rt = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) then writeCapReg cd null_cap
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (setCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CCopyType : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CCopyType:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let cb_base = (getCapBase cb_val) in
   let cb_top = (getCapTop cb_val) in
   let ct_otype = (lem$w2ui ct_val.CapStruct_otype) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else state_monad$bindS
       (register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
       else if ct_val.CapStruct_sealed then
         if ((ct_otype < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
         else if ((ct_otype >= cb_top)) then raise_c2_exception CapEx_LengthViolation cb
         else
           let (success, cap) =
             (setCapOffset cb_val
               ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((ct_otype - cb_base))
                  :  64 words$word))) in state_monad$seqS
           (state_monad$assert_expS success "") (writeCapReg cd cap)
       else
         writeCapReg cd
           ((int_to_cap ((replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):ii)  :  64 words$word)))))))))))`;


(*val execute_CClearTag : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CClearTag:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else state_monad$bindS (readCapReg cb) (\ cb_val .  writeCapReg cd (cb_val with<| CapStruct_tag := F|>))))))`;


(*val execute_CCheckType : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CCheckType:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cs cb=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val .  state_monad$bindS
   (readCapReg cb) (\ cb_val .  state_monad$bindS
   (register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
     else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
     else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
       raise_c2_exception CapEx_TypeViolation cs
     else state_monad$returnS () ))))))`;


(*val execute_CCheckPerm : mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CCheckPerm:(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cs rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val . 
   let (cs_perms : 64 bits) =
     ((zero_extend1 (( 64 : int):ii) ((getCapPerms cs_val  :  31 words$word))  :  64 words$word)) in state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_perms .  state_monad$bindS
   (register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
   else if (((((and_vec cs_perms rt_perms  :  64 words$word)) <> rt_perms))) then
     raise_c2_exception CapEx_UserDefViolation cs
   else state_monad$returnS () )))))`;


(*val execute_CCall : mword ty5 -> mword ty5 -> mword ty11 -> M unit*)

val _ = Define `
 ((execute_CCall:(5)words$word ->(5)words$word ->(11)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cs cb b__151=
    (if (((b__151 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) then state_monad$bindS (state_monad$seqS
     (checkCP2usable () )
     (readCapReg cs)) (\ cs_val .  state_monad$bindS
     (readCapReg cb) (\ cb_val . 
     let cs_cursor = (getCapCursor cs_val) in state_monad$bindS
     (register_inaccessible cs) (\ (w__0 : bool) . 
     if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else state_monad$bindS
       (register_inaccessible cb) (\ (w__1 : bool) . 
       if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
       else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
         raise_c2_exception CapEx_TypeViolation cs
       else if ((~ cs_val.CapStruct_permit_execute)) then
         raise_c2_exception CapEx_PermitExecuteViolation cs
       else if cb_val.CapStruct_permit_execute then
         raise_c2_exception CapEx_PermitExecuteViolation cb
       else if ((cs_cursor < ((getCapBase cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else if ((cs_cursor >= ((getCapTop cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else raise_c2_exception CapEx_CallTrap cs))))
   else state_monad$bindS (state_monad$seqS
     (checkCP2usable () )
     (readCapReg cs)) (\ cs_val .  state_monad$bindS
     (readCapReg cb) (\ cb_val . 
     let cs_cursor = (getCapCursor cs_val) in state_monad$bindS
     (register_inaccessible cs) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else state_monad$bindS
       (register_inaccessible cb) (\ (w__3 : bool) . 
       if w__3 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
       else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
         raise_c2_exception CapEx_TypeViolation cs
       else if ((~ cs_val.CapStruct_permit_ccall)) then
         raise_c2_exception CapEx_PermitCCallViolation cs
       else if ((~ cb_val.CapStruct_permit_ccall)) then
         raise_c2_exception CapEx_PermitCCallViolation cb
       else if ((~ cs_val.CapStruct_permit_execute)) then
         raise_c2_exception CapEx_PermitExecuteViolation cs
       else if cb_val.CapStruct_permit_execute then
         raise_c2_exception CapEx_PermitExecuteViolation cb
       else if ((cs_cursor < ((getCapBase cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else if ((cs_cursor >= ((getCapTop cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else state_monad$seqS (state_monad$seqS
         (execute_branch_pcc
           (cs_val with<|
             CapStruct_sealed := F; CapStruct_otype := ((zeros0 (( 24 : int):ii) ()   :  24 words$word))|>))
         (state_monad$write_regS inCCallDelay_ref (vec_of_bits [B1]  :  1 words$word)))
         (state_monad$write_regS
           C26_ref
           ((capStructToCapReg
               (cb_val with<|
                 CapStruct_sealed := F; CapStruct_otype := ((zeros0 (( 24 : int):ii) ()   :  24 words$word))|>)
              :  257 words$word)))))))))`;


(*val execute_CCSeal : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CCSeal:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cs ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cs)) (\ cs_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else state_monad$bindS
       (register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if (((((~ ct_val.CapStruct_tag)) \/ (((((getCapCursor ct_val)) = ((lem$w2ui ((replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):ii)  :  64 words$word))))))))))
       then
         writeCapReg cd cs_val
       else if cs_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if ((~ ct_val.CapStruct_permit_seal)) then
         raise_c2_exception CapEx_PermitSealViolation ct
       else if ((ct_cursor < ct_base)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor > max_otype)) then raise_c2_exception CapEx_LengthViolation ct
       else
         let (success, newCap) =
           (sealCap cs_val
             ((to_bits ((make_the_value (( 24 : int):ii)  :  24 itself)) ct_cursor  :  24 words$word))) in
         if ((~ success)) then raise_c2_exception CapEx_InexactBounds cs
         else writeCapReg cd newCap)))))))`;


(*val execute_CBuildCap : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CBuildCap:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb ct=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (readCapReg ct) (\ ct_val . 
   let cb_base = (getCapBase cb_val) in
   let ct_base = (getCapBase ct_val) in
   let cb_top = (getCapTop cb_val) in
   let ct_top = (getCapTop ct_val) in
   let cb_perms = ((getCapPerms cb_val  :  31 words$word)) in
   let ct_perms = ((getCapPerms ct_val  :  31 words$word)) in
   let ct_offset = (getCapOffset ct_val) in state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else state_monad$bindS
       (register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
       else if ((ct_base < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
       else if ((ct_top > cb_top)) then raise_c2_exception CapEx_LengthViolation cb
       else if ((ct_base > ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if (((((and_vec ct_perms cb_perms  :  31 words$word)) <> ct_perms))) then
         raise_c2_exception CapEx_UserDefViolation cb
       else
         let (exact, cd1) =
           (setCapBounds cb_val
             ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ct_base  :  64 words$word))
             ((to_bits ((make_the_value (( 65 : int):ii)  :  65 itself)) ct_top  :  65 words$word))) in
         let (representable, cd2) =
           (setCapOffset cd1
             ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ct_offset  :  64 words$word))) in
         let cd3 = (setCapPerms cd2 ct_perms) in state_monad$seqS (state_monad$seqS
         (state_monad$assert_expS exact "") (state_monad$assert_expS representable "")) (writeCapReg cd cd3))))))))`;


(*val execute_CBZ : mword ty5 -> mword ty16 -> bool -> M unit*)

val _ = Define `
 ((execute_CBZ:(5)words$word ->(16)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cb imm notzero=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ (w__1 : CapStruct) . 
     if ((bits_to_bool
            ((xor_vec ((bool_to_bits (((w__1 = null_cap)))  :  1 words$word))
                ((bool_to_bits notzero  :  1 words$word))
               :  1 words$word)))) then
       let (offset : 64 bits) =
         ((add_vec_int
            ((sign_extend1 (( 64 : int):ii)
                ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
               :  64 words$word)) (( 4 : int):ii)
           :  64 words$word)) in state_monad$bindS
       (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
       execute_branch ((add_vec w__2 offset  :  64 words$word)))
     else state_monad$returnS () ))))`;


(*val execute_CBX : mword ty5 -> mword ty16 -> bool -> M unit*)

val _ = Define `
 ((execute_CBX:(5)words$word ->(16)words$word -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cb imm notset=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else state_monad$bindS
     (readCapReg cb) (\ (w__1 : CapStruct) . 
     if ((bits_to_bool
            ((xor_vec ((bool_to_bits w__1.CapStruct_tag  :  1 words$word))
                ((bool_to_bits notset  :  1 words$word))
               :  1 words$word)))) then
       let (offset : 64 bits) =
         ((add_vec_int
            ((sign_extend1 (( 64 : int):ii)
                ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
               :  64 words$word)) (( 4 : int):ii)
           :  64 words$word)) in state_monad$bindS
       (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
       execute_branch ((add_vec w__2 offset  :  64 words$word)))
     else state_monad$returnS () ))))`;


(*val execute_CAndPerm : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_CAndPerm:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) cd cb rt=  (state_monad$bindS (state_monad$seqS
   (checkCP2usable () )
   (readCapReg cb)) (\ cb_val .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ rt_val .  state_monad$bindS
   (register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else state_monad$bindS
     (register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else
       let perms = ((getCapPerms cb_val  :  31 words$word)) in
       let newCap =
         (setCapPerms cb_val
           ((and_vec perms ((subrange_vec_dec rt_val (( 30 : int):ii) (( 0 : int):ii)  :  31 words$word))  :  31 words$word))) in
       writeCapReg cd newCap))))))`;


(*val execute_CACHE : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_CACHE:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) base op imm=  (checkCP0Access () ))`;


(*val execute_C2Dump : mword ty5 -> unit*)

val _ = Define `
 ((execute_C2Dump:(5)words$word -> unit) rt=  () )`;


(*val execute_BREAK : unit -> M unit*)

val _ = Define `
 ((execute_BREAK:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) g__120=  (SignalException Bp))`;


(*val execute_BEQ : mword ty5 -> mword ty5 -> mword ty16 -> bool -> bool -> M unit*)

val _ = Define `
 ((execute_BEQ:(5)words$word ->(5)words$word ->(16)words$word -> bool -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rd imm ne likely=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rd  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   if ((bits_to_bool
          ((xor_vec ((bool_to_bits (((w__0 = w__1)))  :  1 words$word))
              ((bool_to_bits ne  :  1 words$word))
             :  1 words$word)))) then
     let (offset : 64 bits) =
       ((add_vec_int
          ((sign_extend1 (( 64 : int):ii) ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
             :  64 words$word)) (( 4 : int):ii)
         :  64 words$word)) in state_monad$bindS
     (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
     execute_branch ((add_vec w__2 offset  :  64 words$word)))
   else if likely then state_monad$bindS
     (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__3 :  64 words$word) . 
     state_monad$write_regS nextPC_ref ((add_vec_int w__3 (( 8 : int):ii)  :  64 words$word)))
   else state_monad$returnS () ))))`;


(*val execute_BCMPZ : mword ty5 -> mword ty16 -> Comparison -> bool -> bool -> M unit*)

val _ = Define `
 ((execute_BCMPZ:(5)words$word ->(16)words$word -> Comparison -> bool -> bool ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs imm cmp link likely=  (state_monad$bindS
   (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) . 
   let linkVal = ((add_vec_int w__0 (( 8 : int):ii)  :  64 words$word)) in state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ regVal . 
   let condition =
     (compare cmp regVal ((zero_extend1 (( 64 : int):ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in state_monad$seqS
   (if condition then
      let (offset : 64 bits) =
        ((add_vec_int
           ((sign_extend1 (( 64 : int):ii) ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
              :  64 words$word)) (( 4 : int):ii)
          :  64 words$word)) in state_monad$bindS
      (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
      execute_branch ((add_vec w__1 offset  :  64 words$word)))
    else if likely then state_monad$bindS
      (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__2 :  64 words$word) . 
      state_monad$write_regS nextPC_ref ((add_vec_int w__2 (( 8 : int):ii)  :  64 words$word)))
    else state_monad$returnS () )
   (if link then wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) linkVal
   else state_monad$returnS () )))))`;


(*val execute_ANDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ANDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((and_vec w__0 ((zero_extend1 (( 64 : int):ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_AND : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_AND:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((and_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_ADDU : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_ADDU:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((sign_extend1 (( 64 : int):ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_ADDIU : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA . 
   if ((NotWordVal opA)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     wGPR rt
       ((sign_extend1 (( 64 : int):ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))
               ((sign_extend1 (( 32 : int):ii) imm  :  32 words$word))
              :  32 words$word))
          :  64 words$word)))))`;


(*val execute_ADDI : mword ty5 -> mword ty5 -> mword ty16 -> M unit*)

val _ = Define `
 ((execute_ADDI:(5)words$word ->(5)words$word ->(16)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt imm=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ opA . 
   if ((NotWordVal opA)) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     let (sum33 : 33 bits) =
       ((add_vec
          ((sign_extend1 (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):ii) imm  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rt
         ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec sum33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word)))))`;


(*val execute_ADD : mword ty5 -> mword ty5 -> mword ty5 -> M unit*)

val _ = Define `
 ((execute_ADD:(5)words$word ->(5)words$word ->(5)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) rs rt rd=  (state_monad$bindS
   (rGPR rs  : ( 64 words$word) M) (\ (opA : 64 bits) .  state_monad$bindS
   (rGPR rt  : ( 64 words$word) M) (\ (opB : 64 bits) . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then state_monad$bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (sum33 : 33 bits) =
       ((add_vec
          ((sign_extend1 (( 33 : int):ii) ((subrange_vec_dec opA (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):ii) ((subrange_vec_dec opB (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((sign_extend1 (( 64 : int):ii) ((subrange_vec_dec sum33 (( 31 : int):ii) (( 0 : int):ii)  :  32 words$word))  :  64 words$word))))))`;


val _ = Define `
 ((execute:ast ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) merge_var=
    ((case merge_var of
     DADDIU (rs,rt,imm) => execute_DADDIU rs rt imm
   | DADDU (rs,rt,rd) => execute_DADDU rs rt rd
   | DADDI (rs,rt,imm) => execute_DADDI rs rt imm
   | DADD (rs,rt,rd) => execute_DADD rs rt rd
   | ADD (rs,rt,rd) => execute_ADD rs rt rd
   | ADDI (rs,rt,imm) => execute_ADDI rs rt imm
   | ADDU (rs,rt,rd) => execute_ADDU rs rt rd
   | ADDIU (rs,rt,imm) => execute_ADDIU rs rt imm
   | DSUBU (rs,rt,rd) => execute_DSUBU rs rt rd
   | DSUB (rs,rt,rd) => execute_DSUB rs rt rd
   | SUB0 (rs,rt,rd) => execute_SUB rs rt rd
   | SUBU (rs,rt,rd) => execute_SUBU rs rt rd
   | AND (rs,rt,rd) => execute_AND rs rt rd
   | ANDI (rs,rt,imm) => execute_ANDI rs rt imm
   | OR (rs,rt,rd) => execute_OR rs rt rd
   | ORI (rs,rt,imm) => execute_ORI rs rt imm
   | NOR (rs,rt,rd) => execute_NOR rs rt rd
   | XOR (rs,rt,rd) => execute_XOR rs rt rd
   | XORI (rs,rt,imm) => execute_XORI rs rt imm
   | LUI (rt,imm) => execute_LUI rt imm
   | DSLL (rt,rd,sa) => execute_DSLL rt rd sa
   | DSLL32 (rt,rd,sa) => execute_DSLL32 rt rd sa
   | DSLLV (rs,rt,rd) => execute_DSLLV rs rt rd
   | DSRA (rt,rd,sa) => execute_DSRA rt rd sa
   | DSRA32 (rt,rd,sa) => execute_DSRA32 rt rd sa
   | DSRAV (rs,rt,rd) => execute_DSRAV rs rt rd
   | DSRL (rt,rd,sa) => execute_DSRL rt rd sa
   | DSRL32 (rt,rd,sa) => execute_DSRL32 rt rd sa
   | DSRLV (rs,rt,rd) => execute_DSRLV rs rt rd
   | SLL (rt,rd,sa) => execute_SLL rt rd sa
   | SLLV (rs,rt,rd) => execute_SLLV rs rt rd
   | SRA (rt,rd,sa) => execute_SRA rt rd sa
   | SRAV (rs,rt,rd) => execute_SRAV rs rt rd
   | SRL (rt,rd,sa) => execute_SRL rt rd sa
   | SRLV (rs,rt,rd) => execute_SRLV rs rt rd
   | SLT (rs,rt,rd) => execute_SLT rs rt rd
   | SLTI (rs,rt,imm) => execute_SLTI rs rt imm
   | SLTU (rs,rt,rd) => execute_SLTU rs rt rd
   | SLTIU (rs,rt,imm) => execute_SLTIU rs rt imm
   | MOVN (rs,rt,rd) => execute_MOVN rs rt rd
   | MOVZ (rs,rt,rd) => execute_MOVZ rs rt rd
   | MFHI (rd) => execute_MFHI rd
   | MFLO (rd) => execute_MFLO rd
   | MTHI (rs) => execute_MTHI rs
   | MTLO (rs) => execute_MTLO rs
   | MUL (rs,rt,rd) => execute_MUL rs rt rd
   | MULT (rs,rt) => execute_MULT rs rt
   | MULTU (rs,rt) => execute_MULTU rs rt
   | DMULT (rs,rt) => execute_DMULT rs rt
   | DMULTU (rs,rt) => execute_DMULTU rs rt
   | MADD (rs,rt) => execute_MADD rs rt
   | MADDU (rs,rt) => execute_MADDU rs rt
   | MSUB (rs,rt) => execute_MSUB rs rt
   | MSUBU (rs,rt) => execute_MSUBU rs rt
   | DIV0 (rs,rt) => execute_DIV rs rt
   | DIVU (rs,rt) => execute_DIVU rs rt
   | DDIV (rs,rt) => execute_DDIV rs rt
   | DDIVU (rs,rt) => execute_DDIVU rs rt
   | J (offset) => execute_J offset
   | JAL (offset) => execute_JAL offset
   | JR (rs) => execute_JR rs
   | JALR (rs,rd) => execute_JALR rs rd
   | BEQ (rs,rd,imm,ne,likely) => execute_BEQ rs rd imm ne likely
   | BCMPZ (rs,imm,cmp,link,likely) => execute_BCMPZ rs imm cmp link likely
   | SYSCALL_THREAD_START (g__117) => state_monad$returnS ((execute_SYSCALL_THREAD_START g__117))
   | ImplementationDefinedStopFetching (g__118) =>
      state_monad$returnS ((execute_ImplementationDefinedStopFetching g__118))
   | SYSCALL (g__119) => execute_SYSCALL g__119
   | BREAK (g__120) => execute_BREAK g__120
   | WAIT (g__121) => execute_WAIT g__121
   | TRAPREG (rs,rt,cmp) => execute_TRAPREG rs rt cmp
   | TRAPIMM (rs,imm,cmp) => execute_TRAPIMM rs imm cmp
   | Load (width,sign,linked,base,rt,offset) => execute_Load width sign linked base rt offset
   | Store (width,conditional,base,rt,offset) => execute_Store width conditional base rt offset
   | LWL (base,rt,offset) => execute_LWL base rt offset
   | LWR (base,rt,offset) => execute_LWR base rt offset
   | SWL (base,rt,offset) => execute_SWL base rt offset
   | SWR (base,rt,offset) => execute_SWR base rt offset
   | LDL (base,rt,offset) => execute_LDL base rt offset
   | LDR (base,rt,offset) => execute_LDR base rt offset
   | SDL (base,rt,offset) => execute_SDL base rt offset
   | SDR (base,rt,offset) => execute_SDR base rt offset
   | CACHE (base,op,imm) => execute_CACHE base op imm
   | PREF (base,op,imm) => state_monad$returnS ((execute_PREF base op imm))
   | SYNC (g__122) => execute_SYNC g__122
   | MFC0 (rt,rd,sel,double) => execute_MFC0 rt rd sel double
   | HCF (g__123) => state_monad$returnS ((execute_HCF g__123))
   | MTC0 (rt,rd,sel,double) => execute_MTC0 rt rd sel double
   | TLBWI (g__124) => execute_TLBWI g__124
   | TLBWR (g__125) => execute_TLBWR g__125
   | TLBR (g__126) => execute_TLBR g__126
   | TLBP (g__127) => execute_TLBP g__127
   | RDHWR (rt,rd) => execute_RDHWR rt rd
   | ERET (g__128) => execute_ERET g__128
   | CGetPerm (rd,cb) => execute_CGetPerm rd cb
   | CGetType (rd,cb) => execute_CGetType rd cb
   | CGetBase (rd,cb) => execute_CGetBase rd cb
   | CGetOffset (rd,cb) => execute_CGetOffset rd cb
   | CGetLen (rd,cb) => execute_CGetLen rd cb
   | CGetTag (rd,cb) => execute_CGetTag rd cb
   | CGetSealed (rd,cb) => execute_CGetSealed rd cb
   | CGetAddr (rd,cb) => execute_CGetAddr rd cb
   | CGetPCC (cd) => execute_CGetPCC cd
   | CGetPCCSetOffset (cd,rs) => execute_CGetPCCSetOffset cd rs
   | CGetCause (rd) => execute_CGetCause rd
   | CSetCause (rt) => execute_CSetCause rt
   | CReadHwr (cd,sel) => execute_CReadHwr cd sel
   | CWriteHwr (cb,sel) => execute_CWriteHwr cb sel
   | CAndPerm (cd,cb,rt) => execute_CAndPerm cd cb rt
   | CToPtr (rd,cb,ct) => execute_CToPtr rd cb ct
   | CSub (rd,cb,ct) => execute_CSub rd cb ct
   | CPtrCmp (rd,cb,ct,op) => execute_CPtrCmp rd cb ct op
   | CIncOffset (cd,cb,rt) => execute_CIncOffset cd cb rt
   | CIncOffsetImmediate (cd,cb,imm) => execute_CIncOffsetImmediate cd cb imm
   | CSetOffset (cd,cb,rt) => execute_CSetOffset cd cb rt
   | CSetBounds (cd,cb,rt) => execute_CSetBounds cd cb rt
   | CSetBoundsImmediate (cd,cb,imm) => execute_CSetBoundsImmediate cd cb imm
   | CSetBoundsExact (cd,cb,rt) => execute_CSetBoundsExact cd cb rt
   | CClearTag (cd,cb) => execute_CClearTag cd cb
   | CMOVX (cd,cb,rt,ismovn) => execute_CMOVX cd cb rt ismovn
   | ClearRegs (regset,m) => execute_ClearRegs regset m
   | CFromPtr (cd,cb,rt) => execute_CFromPtr cd cb rt
   | CBuildCap (cd,cb,ct) => execute_CBuildCap cd cb ct
   | CCopyType (cd,cb,ct) => execute_CCopyType cd cb ct
   | CCheckPerm (cs,rt) => execute_CCheckPerm cs rt
   | CCheckType (cs,cb) => execute_CCheckType cs cb
   | CTestSubset (rd,cb,ct) => execute_CTestSubset rd cb ct
   | CSeal (cd,cs,ct) => execute_CSeal cd cs ct
   | CCSeal (cd,cs,ct) => execute_CCSeal cd cs ct
   | CUnseal (cd,cs,ct) => execute_CUnseal cd cs ct
   | CCall (cs,cb,b__151) => execute_CCall cs cb b__151
   | CReturn (g__129) => execute_CReturn g__129
   | CBX (cb,imm,notset) => execute_CBX cb imm notset
   | CBZ (cb,imm,notzero) => execute_CBZ cb imm notzero
   | CJALR (cd,cb,link) => execute_CJALR cd cb link
   | CLoad (rd,cb,rt,offset,signext,arg5,linked) =>
      execute_CLoad rd cb rt offset signext arg5 linked
   | CStore (rs,cb,rt,rd,offset,width,conditional) =>
      execute_CStore rs cb rt rd offset width conditional
   | CSC (cs,cb,rt,rd,offset,conditional) => execute_CSC cs cb rt rd offset conditional
   | CLC (cd,cb,rt,offset,linked) => execute_CLC cd cb rt offset linked
   | C2Dump (rt) => state_monad$returnS ((execute_C2Dump rt))
   | RI (g__130) => execute_RI g__130
   )))`;


(*val supported_instructions : ast -> maybe ast*)

val _ = Define `
 ((supported_instructions:ast ->(ast)option) instr=  (SOME instr))`;


(*val fetch_and_execute : unit -> M bool*)

val _ = Define `
 ((fetch_and_execute:unit ->(regstate)state_monad$sequential_state ->(((bool),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS nextPC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS PC_ref w__0)
   (state_monad$read_regS branchPending_ref  : ( 1 words$word) M)) (\ (w__1 : 1 bits) .  state_monad$bindS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS inBranchDelay_ref w__1)
   (state_monad$write_regS branchPending_ref (vec_of_bits [B0]  :  1 words$word)))
   (state_monad$read_regS inBranchDelay_ref  : ( 1 words$word) M)) (\ (w__2 :  1 words$word) .  state_monad$bindS
   (if ((bits_to_bool w__2)) then (state_monad$read_regS delayedPC_ref  : ( 64 words$word) M)
    else state_monad$bindS
      (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__4 :  64 words$word) . 
      state_monad$returnS ((add_vec_int w__4 (( 4 : int):ii)  :  64 words$word)))) (\ (w__5 :  64 words$word) .  state_monad$bindS (state_monad$seqS (state_monad$seqS
   (state_monad$write_regS nextPC_ref w__5)
   (cp2_next_pc () ))
   (state_monad$read_regS instCount_ref)) (\ (w__6 : ii) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS instCount_ref ((w__6 + (( 1 : int):ii))))
   (state_monad$read_regS UART_WRITTEN_ref  : ( 1 words$word) M)) (\ (w__7 :  1 words$word) .  state_monad$bindS (state_monad$seqS (state_monad$seqS (state_monad$seqS
   (if ((bits_to_bool w__7)) then state_monad$bindS
      (state_monad$read_regS UART_WDATA_ref  : ( 8 words$word) M) (\ (w__8 : 8 bits) . 
      let (_ : unit) = (putchar ((lem$w2ui w__8))) in
      state_monad$write_regS UART_WRITTEN_ref (vec_of_bits [B0]  :  1 words$word))
    else state_monad$returnS () )
   (skip () ))
   (skip () ))
   (state_monad$read_regS PC_ref  : ( 64 words$word) M)) (\ (w__9 : 64 bits) . 
   let (_ : unit) = (print_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict "PC: " w__9) in
   state_monad$try_catchS ( state_monad$bindS(state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__10 :  64 words$word) .  state_monad$bindS
              (TranslatePC w__10  : ( 64 words$word) M) (\ pc_pa .  state_monad$bindS
              (MEMr_wrapper (( 32 : int):ii) pc_pa (( 4 : int):ii)  : ( 32 words$word) M) (\ instr . 
              let instr_ast = (decode instr) in
              (case instr_ast of
                SOME ((HCF (_))) =>
                 let (_ : unit) = (prerr_endline "simulation stopped due to halt instruction.") in
                 state_monad$returnS F
              | SOME (ast) => state_monad$seqS (execute ast) (state_monad$returnS T)
              | NONE =>
                 let (_ : unit) = (prerr_endline "Decode failed") in
                 state_monad$exitS () 
              ))))) (\x .  
  (case x of
        ISAException (_) =>
  let (_ : unit) = (prerr_endline "EXCEPTION") in state_monad$returnS T
  )))))))))))`;


(*val init_registers : mword ty64 -> M unit*)

val _ = Define `
 ((init_registers:(64)words$word ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) initialPC=  (state_monad$seqS (state_monad$seqS
   (init_cp0_state () ) (init_cp2_state () )) (state_monad$write_regS nextPC_ref initialPC)))`;


(*val dump_mips_state : unit -> M unit*)

val _ = Define `
 ((dump_mips_state:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (state_monad$read_regS PC_ref  : ( 64 words$word) M) (\ (w__0 : 64 bits) . 
   let (_ : unit) = (print_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict "DEBUG MIPS PC " w__0) in
   (state$foreachS (index_list (( 0 : int):ii) (( 31 : int):ii) (( 1 : int):ii)) () 
     (\ idx unit_var .  state_monad$bindS
       (rGPR ((to_bits ((make_the_value (( 5 : int):ii)  :  5 itself)) idx  :  5 words$word))  : ( 64 words$word) M) (\ (w__1 :
          64 words$word) . 
       state_monad$returnS (let _ =
         (prerr_endline
           ((STRCAT "DEBUG MIPS REG "
               ((STRCAT ((string_of_int 
  instance_Show_Show_Num_integer_dict idx)) ((STRCAT " " ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict w__1))))))))) in
       () )))))))`;


(*val main : unit -> M unit*)

val _ = Define `
 ((main:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$seqS
   (init_registers
     ((to_bits ((make_the_value (( 64 : int):ii)  :  64 itself)) ((elf_entry () ))  :  64 words$word)))
   (let startTime = (get_time_ns () ) in state_monad$seqS
   (state$whileS ()  (\ unit_var .  fetch_and_execute () ) (\ unit_var .  state_monad$returnS () ))
   (let endTime = (get_time_ns () ) in
   let elapsed = (endTime - startTime) in state_monad$bindS
   (state_monad$read_regS instCount_ref) (\ (w__1 : ii) . 
   let inst_1e9 = (w__1 * (( 1000000000 : int):ii)) in
   let ips = (inst_1e9 / elapsed) in state_monad$bindS (state_monad$seqS (state_monad$seqS
   (dump_mips_state () )
   (dump_cp2_state () ))
   (state_monad$read_regS instCount_ref)) (\ (w__2 : ii) . 
   let (_ : unit) = (print_int "Executed instructions: " w__2) in
   let (_ : unit) = (print_int "Nanoseconds elapsed: " elapsed) in
   state_monad$returnS ((print_int "Instructions per second: " ips))))))))`;


(*val initialize_registers : unit -> M unit*)

val _ = Define `
 ((initialize_registers:unit ->(regstate)state_monad$sequential_state ->(((unit),(exception))state_monad$result#(regstate)state_monad$sequential_state)set) () =  (state_monad$bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M) (\ (w__0 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS PC_ref w__0)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__1 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS nextPC_ref w__1)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__2 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBProbe_ref w__2)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__3 : TLBIndexT) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBIndex_ref w__3)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__4 : TLBIndexT) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBRandom_ref w__4)
   (undefined_TLBEntryLoReg () )) (\ (w__5 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntryLo0_ref w__5)
   (undefined_TLBEntryLoReg () )) (\ (w__6 : TLBEntryLoReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntryLo1_ref w__6)
   (undefined_ContextReg () )) (\ (w__7 : ContextReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBContext_ref w__7)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):ii)  : ( 16 words$word) M)) (\ (w__8 : 16 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBPageMask_ref w__8)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):ii)  : ( 6 words$word) M)) (\ (w__9 : TLBIndexT) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBWired_ref w__9)
   (undefined_TLBEntryHiReg () )) (\ (w__10 : TLBEntryHiReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntryHi_ref w__10)
   (undefined_XContextReg () )) (\ (w__11 : XContextReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBXContext_ref w__11)
   (undefined_TLBEntry () )) (\ (w__12 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry00_ref w__12)
   (undefined_TLBEntry () )) (\ (w__13 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry01_ref w__13)
   (undefined_TLBEntry () )) (\ (w__14 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry02_ref w__14)
   (undefined_TLBEntry () )) (\ (w__15 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry03_ref w__15)
   (undefined_TLBEntry () )) (\ (w__16 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry04_ref w__16)
   (undefined_TLBEntry () )) (\ (w__17 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry05_ref w__17)
   (undefined_TLBEntry () )) (\ (w__18 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry06_ref w__18)
   (undefined_TLBEntry () )) (\ (w__19 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry07_ref w__19)
   (undefined_TLBEntry () )) (\ (w__20 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry08_ref w__20)
   (undefined_TLBEntry () )) (\ (w__21 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry09_ref w__21)
   (undefined_TLBEntry () )) (\ (w__22 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry10_ref w__22)
   (undefined_TLBEntry () )) (\ (w__23 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry11_ref w__23)
   (undefined_TLBEntry () )) (\ (w__24 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry12_ref w__24)
   (undefined_TLBEntry () )) (\ (w__25 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry13_ref w__25)
   (undefined_TLBEntry () )) (\ (w__26 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry14_ref w__26)
   (undefined_TLBEntry () )) (\ (w__27 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry15_ref w__27)
   (undefined_TLBEntry () )) (\ (w__28 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry16_ref w__28)
   (undefined_TLBEntry () )) (\ (w__29 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry17_ref w__29)
   (undefined_TLBEntry () )) (\ (w__30 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry18_ref w__30)
   (undefined_TLBEntry () )) (\ (w__31 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry19_ref w__31)
   (undefined_TLBEntry () )) (\ (w__32 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry20_ref w__32)
   (undefined_TLBEntry () )) (\ (w__33 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry21_ref w__33)
   (undefined_TLBEntry () )) (\ (w__34 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry22_ref w__34)
   (undefined_TLBEntry () )) (\ (w__35 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry23_ref w__35)
   (undefined_TLBEntry () )) (\ (w__36 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry24_ref w__36)
   (undefined_TLBEntry () )) (\ (w__37 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry25_ref w__37)
   (undefined_TLBEntry () )) (\ (w__38 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry26_ref w__38)
   (undefined_TLBEntry () )) (\ (w__39 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry27_ref w__39)
   (undefined_TLBEntry () )) (\ (w__40 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry28_ref w__40)
   (undefined_TLBEntry () )) (\ (w__41 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry29_ref w__41)
   (undefined_TLBEntry () )) (\ (w__42 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry30_ref w__42)
   (undefined_TLBEntry () )) (\ (w__43 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry31_ref w__43)
   (undefined_TLBEntry () )) (\ (w__44 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry32_ref w__44)
   (undefined_TLBEntry () )) (\ (w__45 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry33_ref w__45)
   (undefined_TLBEntry () )) (\ (w__46 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry34_ref w__46)
   (undefined_TLBEntry () )) (\ (w__47 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry35_ref w__47)
   (undefined_TLBEntry () )) (\ (w__48 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry36_ref w__48)
   (undefined_TLBEntry () )) (\ (w__49 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry37_ref w__49)
   (undefined_TLBEntry () )) (\ (w__50 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry38_ref w__50)
   (undefined_TLBEntry () )) (\ (w__51 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry39_ref w__51)
   (undefined_TLBEntry () )) (\ (w__52 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry40_ref w__52)
   (undefined_TLBEntry () )) (\ (w__53 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry41_ref w__53)
   (undefined_TLBEntry () )) (\ (w__54 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry42_ref w__54)
   (undefined_TLBEntry () )) (\ (w__55 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry43_ref w__55)
   (undefined_TLBEntry () )) (\ (w__56 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry44_ref w__56)
   (undefined_TLBEntry () )) (\ (w__57 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry45_ref w__57)
   (undefined_TLBEntry () )) (\ (w__58 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry46_ref w__58)
   (undefined_TLBEntry () )) (\ (w__59 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry47_ref w__59)
   (undefined_TLBEntry () )) (\ (w__60 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry48_ref w__60)
   (undefined_TLBEntry () )) (\ (w__61 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry49_ref w__61)
   (undefined_TLBEntry () )) (\ (w__62 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry50_ref w__62)
   (undefined_TLBEntry () )) (\ (w__63 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry51_ref w__63)
   (undefined_TLBEntry () )) (\ (w__64 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry52_ref w__64)
   (undefined_TLBEntry () )) (\ (w__65 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry53_ref w__65)
   (undefined_TLBEntry () )) (\ (w__66 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry54_ref w__66)
   (undefined_TLBEntry () )) (\ (w__67 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry55_ref w__67)
   (undefined_TLBEntry () )) (\ (w__68 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry56_ref w__68)
   (undefined_TLBEntry () )) (\ (w__69 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry57_ref w__69)
   (undefined_TLBEntry () )) (\ (w__70 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry58_ref w__70)
   (undefined_TLBEntry () )) (\ (w__71 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry59_ref w__71)
   (undefined_TLBEntry () )) (\ (w__72 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry60_ref w__72)
   (undefined_TLBEntry () )) (\ (w__73 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry61_ref w__73)
   (undefined_TLBEntry () )) (\ (w__74 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry62_ref w__74)
   (undefined_TLBEntry () )) (\ (w__75 : TLBEntry) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS TLBEntry63_ref w__75)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__76 : 32 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0Compare_ref w__76)
   (undefined_CauseReg () )) (\ (w__77 : CauseReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0Cause_ref w__77)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__78 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0EPC_ref w__78)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__79 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0ErrorEPC_ref w__79)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__80 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0LLBit_ref w__80)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__81 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0LLAddr_ref w__81)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__82 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0BadVAddr_ref w__82)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__83 : 32 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0Count_ref w__83)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):ii)  : ( 32 words$word) M)) (\ (w__84 : 32 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0HWREna_ref w__84)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__85 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0UserLocal_ref w__85)
   (undefined_StatusReg () )) (\ (w__86 : StatusReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CP0Status_ref w__86)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__87 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS branchPending_ref w__87)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__88 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS inBranchDelay_ref w__88)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__89 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS delayedPC_ref w__89)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__90 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS HI_ref w__90)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__91 : 64 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS LO_ref w__91)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):ii)  : ( 64 words$word) M)) (\ (w__92 :  64 words$word) .  state_monad$bindS
   (undefined_vector (( 32 : int):ii) w__92  : ( ( 64 words$word)list) M) (\ (w__93 : ( 64 bits) list) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS GPR_ref w__93)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M)) (\ (w__94 : 8 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS UART_WDATA_ref w__94)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__95 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS UART_WRITTEN_ref w__95)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):ii)  : ( 8 words$word) M)) (\ (w__96 : 8 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS UART_RDATA_ref w__96)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__97 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS UART_RVALID_ref w__97)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__98 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS PCC_ref w__98)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__99 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS nextPCC_ref w__99)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__100 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS delayedPCC_ref w__100)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):ii)  : ( 1 words$word) M)) (\ (w__101 : 1 bits) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS inCCallDelay_ref w__101)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__102 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C00_ref w__102)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__103 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C01_ref w__103)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__104 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C02_ref w__104)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__105 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C03_ref w__105)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__106 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C04_ref w__106)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__107 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C05_ref w__107)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__108 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C06_ref w__108)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__109 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C07_ref w__109)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__110 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C08_ref w__110)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__111 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C09_ref w__111)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__112 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C10_ref w__112)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__113 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C11_ref w__113)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__114 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C12_ref w__114)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__115 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C13_ref w__115)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__116 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C14_ref w__116)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__117 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C15_ref w__117)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__118 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C16_ref w__118)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__119 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C17_ref w__119)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__120 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C18_ref w__120)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__121 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C19_ref w__121)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__122 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C20_ref w__122)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__123 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C21_ref w__123)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__124 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C22_ref w__124)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__125 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C23_ref w__125)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__126 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C24_ref w__126)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__127 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C25_ref w__127)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__128 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C26_ref w__128)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__129 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C27_ref w__129)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__130 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C28_ref w__130)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__131 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C29_ref w__131)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__132 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C30_ref w__132)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__133 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS C31_ref w__133)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__134 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CTLSU_ref w__134)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):ii)  : ( 257 words$word) M)) (\ (w__135 : CapReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CTLSP_ref w__135)
   (undefined_CapCauseReg () )) (\ (w__136 : CapCauseReg) .  state_monad$bindS (state_monad$seqS
   (state_monad$write_regS CapCause_ref w__136)
   (undefined_int () )) (\ (w__137 : ii) .  state_monad$write_regS instCount_ref w__137))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`;


val _ = Define `
((initial_regstate:regstate)=
   (<| instCount := ((( 0 : int):ii)); 
     CapCause :=
       (Mk_CapCauseReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)); 
     CTLSP :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     CTLSU :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C31 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C30 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C29 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C28 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C27 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C26 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C25 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C24 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C23 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C22 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C21 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C20 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C19 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C18 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C17 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C16 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C15 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C14 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C13 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C12 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C11 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C10 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C09 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C08 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C07 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C06 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C05 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C04 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C03 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C02 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C01 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     C00 :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     inCCallDelay := ((vec_of_bits [B0]  :  1 words$word)); 
     delayedPCC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     nextPCC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     PCC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  257 words$word)); 
     UART_RVALID := ((vec_of_bits [B0]  :  1 words$word)); 
     UART_RDATA := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)); 
     UART_WRITTEN := ((vec_of_bits [B0]  :  1 words$word)); 
     UART_WDATA := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)); 
     GPR :=
       ([(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word);
         (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
           :  64 words$word)]); 
     LO :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     HI :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     delayedPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     inBranchDelay := ((vec_of_bits [B0]  :  1 words$word)); 
     branchPending := ((vec_of_bits [B0]  :  1 words$word)); 
     CP0Status :=
       (Mk_StatusReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                       :  32 words$word)); 
     CP0UserLocal :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0HWREna :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     CP0Count :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     CP0BadVAddr :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0LLAddr :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0LLBit := ((vec_of_bits [B0]  :  1 words$word)); 
     CP0ErrorEPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0EPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     CP0Cause :=
       (Mk_CauseReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                      :  32 words$word)); 
     CP0Compare :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0]
         :  32 words$word)); 
     TLBEntry63 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry62 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry61 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry60 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry59 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry58 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry57 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry56 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry55 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry54 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry53 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry52 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry51 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry50 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry49 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry48 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry47 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry46 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry45 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry44 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry43 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry42 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry41 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry40 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry39 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry38 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry37 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry36 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry35 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry34 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry33 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry32 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry31 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry30 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry29 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry28 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry27 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry26 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry25 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry24 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry23 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry22 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry21 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry20 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry19 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry18 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry17 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry16 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry15 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry14 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry13 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry12 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry11 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry10 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry09 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry08 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry07 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry06 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry05 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry04 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry03 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry02 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry01 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBEntry00 :=
       (Mk_TLBEntry (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                  B0;B0;B0;B0;B0;B0;B0]
                      :  117 words$word)); 
     TLBXContext :=
       (Mk_XContextReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                     B0]
                         :  64 words$word)); 
     TLBEntryHi :=
       (Mk_TLBEntryHiReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0]
                           :  64 words$word)); 
     TLBWired := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBPageMask := ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)); 
     TLBContext :=
       (Mk_ContextReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0]
                        :  64 words$word)); 
     TLBEntryLo1 :=
       (Mk_TLBEntryLoReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0]
                           :  64 words$word)); 
     TLBEntryLo0 :=
       (Mk_TLBEntryLoReg (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0]
                           :  64 words$word)); 
     TLBRandom := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBIndex := ((vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)); 
     TLBProbe := ((vec_of_bits [B0]  :  1 words$word)); 
     nextPC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)); 
     PC :=
       ((vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
         :  64 words$word)) |>))`;



val _ = export_theory()

