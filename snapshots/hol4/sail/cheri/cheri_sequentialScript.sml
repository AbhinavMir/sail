(*Generated by Lem from cheri_sequential.lem.*)
open HolKernel Parse boolLib bossLib;
open lem_pervasives_extraTheory sail_instr_kindsTheory sail_valuesTheory sail_operators_mwordsTheory state_monadTheory stateTheory cheri_sequential_typesTheory mips_extras_sequentialTheory;

val _ = numLib.prefer_num();



val _ = new_theory "cheri_sequential"

(*Generated by Sail from cheri_sequential.*)
(*open import Pervasives_extra*)
(*open import Sail_instr_kinds*)
(*open import Sail_values*)
(*open import Sail_operators_mwords*)
(*open import State_monad*)
(*open import State*)
(*open import Cheri_sequential_types*)
(*open import Mips_extras_sequential*)

val _ = Define `
 ((cap_size:int)=  ((( 32 : int):sail_values$ii)))`;


(*val undefined_option : forall 'a. 'a -> Cheri_sequential_types.M (Maybe.maybe 'a)*)

val _ = Define `
 ((undefined_option:'a ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((('a option),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) typ_a=  (seqS (undefined_unit () ) (internal_pick [NONE;SOME typ_a])))`;








(*val neq_bool : bool -> bool -> bool*)

val _ = Define `
 ((neq_bool:bool -> bool -> bool) x y=  (~ (((x = y)))))`;






(*val builtin_and_vec : forall 'n. Cheri_sequential_types.bits 'n -> Cheri_sequential_types.bits 'n -> Cheri_sequential_types.bits 'n*)



(*val builtin_or_vec : forall 'n. Cheri_sequential_types.bits 'n -> Cheri_sequential_types.bits 'n -> Cheri_sequential_types.bits 'n*)



(*val cast_unit_vec : Sail_values.bitU -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((cast_unit_vec0:sail_values$bitU ->(1)words$word) b=   
 ((case b of   B0 => (vec_of_bits [B0]  :  1 words$word) | B1 => (vec_of_bits [B1]  :  1 words$word) )))`;


(*val DecStr : Sail_values.ii -> string*)

(*val HexStr : Sail_values.ii -> string*)

(*val __MIPS_write : forall  'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Machine_word.mword 'p8_times_n_ -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((MIPS_write:(64)words$word -> int -> 'p8_times_n_ words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr width data=   
 (write_ram instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii) width
     (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                   B0]
       :  64 words$word) addr data))`;


(*val __MIPS_read : forall  'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Cheri_sequential_types.M (Machine_word.mword 'p8_times_n_)*)

val _ = Define `
 ((MIPS_read:(64)words$word -> int ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr width=   
 ((read_ram instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii) width
      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                    B0]
        :  64 words$word) addr
     : ( 'p8_times_n_ words$word) cheri_sequential_types$M)))`;




(*val undefined_exception : unit -> Cheri_sequential_types.M Cheri_sequential_types.exception*)

val _ = Define `
 ((undefined_exception:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$exception),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS (seqS   
(undefined_unit () )   
(undefined_string () )) (\ (w__0 : string) .  seqS (seqS (seqS   
(undefined_unit () )   
(undefined_unit () ))   
(undefined_unit () ))   
(internal_pick
     [ISAException () ;Error_not_implemented w__0;Error_misaligned_access () ;Error_EBREAK () ;Error_internal_error () ]))))`;


(*val sign_extend : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Machine_word.mword 'm*)

(*val zero_extend : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Machine_word.mword 'm*)

val _ = Define `
 ((sign_extend1:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((sign_extend0 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict v m__tv  :  'm words$word)))`;


val _ = Define `
 ((zero_extend1:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((zero_extend0 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict v m__tv  :  'm words$word)))`;


(*val zeros : forall 'n . Size 'n => Num.integer -> unit -> Machine_word.mword 'n*)

val _ = Define `
 ((zeros:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B0]  :  1 words$word) n__tv  :  'n words$word)))`;


(*val ones : forall 'n . Size 'n => Num.integer -> unit -> Machine_word.mword 'n*)

val _ = Define `
 ((ones:int -> unit -> 'n words$word) (n__tv : int) () =  ((replicate_bits (vec_of_bits [B1]  :  1 words$word) n__tv  :  'n words$word)))`;










(*val bool_to_bits : bool -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((bool_to_bits:bool ->(1)words$word) x=  (if x then (vec_of_bits [B1]  :  1 words$word) else (vec_of_bits [B0]  :  1 words$word)))`;


(*val bit_to_bool : Sail_values.bitU -> bool*)

val _ = Define `
 ((bit_to_bool:sail_values$bitU -> bool) b=  ((case b of   B1 => T | B0 => F )))`;


(*val bits_to_bool : Machine_word.mword Machine_word.ty1 -> bool*)

val _ = Define `
 ((bits_to_bool:(1)words$word -> bool) x=  (bit_to_bool ((access_vec_dec x (( 0 : int):sail_values$ii)))))`;


(*val to_bits : forall 'l. Size 'l => Machine_word.itself 'l -> Sail_values.ii -> Machine_word.mword 'l*)

val _ = Define `
 ((to_bits:'l itself -> int -> 'l words$word) l n=   
 (let l = (size_itself_int l) in
   (get_slice_int instance_Sail_values_Bitvector_Machine_word_mword_dict l n (( 0 : int):sail_values$ii)  :  'l words$word)))`;


(*val mask : forall 'm 'n . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'm -> Machine_word.mword 'n*)

val _ = Define `
 ((mask:int -> 'm words$word -> 'n words$word) (n__tv : int) bs=   
 ((subrange_vec_dec bs ((n__tv - (( 1 : int):sail_values$ii))) (( 0 : int):sail_values$ii)  :  'n words$word)))`;


(*val extzv : forall 'n 'm. Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Machine_word.mword 'm*)

val _ = Define `
 ((extzv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((extz_vec m__tv v  :  'm words$word)))`;


(*val extsv : forall 'n 'm. Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Machine_word.mword 'm*)

val _ = Define `
 ((extsv:int -> 'n words$word -> 'm words$word) (m__tv : int) v=  ((exts_vec m__tv v  :  'm words$word)))`;


(*val slice_mask : forall 'n . Size 'n => Num.integer -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'n*)

val _ = Define `
 ((slice_mask:int -> int -> int -> 'n words$word) (n__tv : int) i l=   
 (let (one1 : 'n cheri_sequential_types$bits) = ((extzv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftl ((sub_vec ((shiftl one1 l  :  'n words$word)) one1  :  'n words$word)) i  :  'n words$word)))`;


(*val is_zero_subrange : forall 'n . Size 'n => Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> bool*)

val _ = Define `
 ((is_zero_subrange:'n words$word -> int -> int -> bool) xs i j= 
   (((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) = ((extzv ((int_of_num (words$word_len xs))) (vec_of_bits [B0]  :  1 words$word)  :  'n words$word))))`;


(*val is_ones_subrange : forall 'n . Size 'n => Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> bool*)

val _ = Define `
 ((is_ones_subrange:'n words$word -> int -> int -> bool) xs i j=   
 (let (m : 'n cheri_sequential_types$bits) = ((slice_mask ((int_of_num (words$word_len xs))) j ((j - i))  :  'n words$word)) in
   (((and_vec xs m  :  'n words$word)) = m)))`;


(*val slice_slice_concat : forall 'n 'm 'r . Size 'm, Size 'n, Size 'r => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'm -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'r*)

val _ = Define `
 ((slice_slice_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 'r words$word) (r__tv : int) xs i l ys i' l'=   
 (let xs =     
((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   let ys =     
((shiftr ((and_vec ys ((slice_mask ((int_of_num (words$word_len ys))) i' l'  :  'm words$word))  :  'm words$word)) i'
       :  'm words$word)) in
   (or_vec ((shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)) ((extzv r__tv ys  :  'r words$word))
     :  'r words$word)))`;


(*val slice_zeros_concat : forall 'n   'r . Size 'n, Size 'r => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Num.integer -> Num.integer -> Machine_word.mword 'r*)

val _ = Define `
 ((slice_zeros_concat:int -> 'n words$word -> int -> int -> int -> 'r words$word) (r__tv : int) xs i l l'=   
 (let xs =     
((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv r__tv xs  :  'r words$word)) l'  :  'r words$word)))`;


(*val subrange_subrange_eq : forall 'n . Size 'n => Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> bool*)

val _ = Define `
 ((subrange_subrange_eq:'n words$word -> int -> int -> 'n words$word -> int -> int -> bool) xs i j ys i' j'=   
 (let xs =     
((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   let ys =     
((shiftr
        ((and_vec ys ((slice_mask ((int_of_num (words$word_len xs))) j' ((i' - j'))  :  'n words$word))  :  'n words$word))
        j'
       :  'n words$word)) in
   (xs = ys)))`;


(*val subrange_subrange_concat : forall 'n   'm   's . Size 'm, Size 'n, Size 's => Num.integer -> Machine_word.mword 'n -> Num.integer -> Num.integer -> Machine_word.mword 'm -> Num.integer -> Num.integer -> Machine_word.mword 's*)

val _ = Define `
 ((subrange_subrange_concat:int -> 'n words$word -> int -> int -> 'm words$word -> int -> int -> 's words$word) (s__tv : int) xs i j ys i' j'=   
 (let xs =     
((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   let ys =     
((shiftr
        ((and_vec ys ((slice_mask ((int_of_num (words$word_len ys))) j' ((i' - j'))  :  'm words$word))  :  'm words$word))
        j'
       :  'm words$word)) in
   (or_vec
      ((sub_vec_int ((shiftl ((extzv s__tv xs  :  's words$word)) i'  :  's words$word))
          ((j' - (( 1 : int):sail_values$ii)))
         :  's words$word)) ((extzv s__tv ys  :  's words$word))
     :  's words$word)))`;


(*val place_subrange : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'm*)

val _ = Define `
 ((place_subrange:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i j shift=   
 (let xs =     
((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) j
       :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val place_slice : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'm*)

val _ = Define `
 ((place_slice:int -> 'n words$word -> int -> int -> int -> 'm words$word) (m__tv : int) xs i l shift=   
 (let xs =     
((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (shiftl ((extzv m__tv xs  :  'm words$word)) shift  :  'm words$word)))`;


(*val zext_slice : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'm*)

val _ = Define `
 ((zext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=   
 (let xs =     
((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   (extzv m__tv xs  :  'm words$word)))`;


(*val sext_slice : forall 'n 'm . Size 'm, Size 'n => Num.integer -> Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Machine_word.mword 'm*)

val _ = Define `
 ((sext_slice:int -> 'n words$word -> int -> int -> 'm words$word) (m__tv : int) xs i l=   
 (let xs =     
((arith_shiftr
        ((shiftl ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word))
            ((((((int_of_num (words$word_len xs))) - i)) - l))
           :  'n words$word)) ((((int_of_num (words$word_len xs))) - l))
       :  'n words$word)) in
   (extsv m__tv xs  :  'm words$word)))`;


(*val unsigned_slice : forall 'n . Size 'n => Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Sail_values.ii*)

val _ = Define `
 ((unsigned_slice:'n words$word -> int -> int -> int) xs i l=   
 (let xs =     
((shiftr ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) i l  :  'n words$word))  :  'n words$word)) i  :  'n words$word)) in
   lem$w2ui xs))`;


(*val unsigned_subrange : forall 'n . Size 'n => Machine_word.mword 'n -> Sail_values.ii -> Sail_values.ii -> Sail_values.ii*)

val _ = Define `
 ((unsigned_subrange:'n words$word -> int -> int -> int) xs i j=   
 (let xs =     
((shiftr
        ((and_vec xs ((slice_mask ((int_of_num (words$word_len xs))) j ((i - j))  :  'n words$word))  :  'n words$word)) i
       :  'n words$word)) in
   lem$w2ui xs))`;


(*val zext_ones : forall 'n . Size 'n => Num.integer -> Sail_values.ii -> Machine_word.mword 'n*)

val _ = Define `
 ((zext_ones:int -> int -> 'n words$word) (n__tv : int) m=   
 (let (v : 'n cheri_sequential_types$bits) = ((extsv n__tv (vec_of_bits [B1]  :  1 words$word)  :  'n words$word)) in
   (shiftr v ((((int_of_num (words$word_len v))) - m))  :  'n words$word)))`;


(*val undefined_CauseReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((undefined_CauseReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CauseReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__0 :  32 words$word) . 
   internal_pick [Mk_CauseReg w__0])))`;


(*val _get_CauseReg : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty32*)

val _ = Define `
 ((get_CauseReg:cheri_sequential_types$CauseReg ->(32)words$word) (Mk_CauseReg (v))=  v)`;


(*val _set_CauseReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty32 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(32)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_CauseReg v) in
   write_regS r_ref r)))`;


(*val _get_CapCauseReg : Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty16*)

(*val _set_CapCauseReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

(*val _get_CauseReg_BD : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_CauseReg_BD:cheri_sequential_types$CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_CauseReg_BD : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_BD:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_BD : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_BD:cheri_sequential_types$CauseReg ->(1)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_CauseReg_CE : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty2*)

val _ = Define `
 ((get_CauseReg_CE:cheri_sequential_types$CauseReg ->(2)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 29 : int):sail_values$ii) (( 28 : int):sail_values$ii)  :  2 words$word)))`;


(*val _set_CauseReg_CE : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_CE:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(2)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):sail_values$ii) (( 28 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_CE : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_CE:cheri_sequential_types$CauseReg ->(2)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 29 : int):sail_values$ii) (( 28 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_CauseReg_IV : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_CauseReg_IV:cheri_sequential_types$CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 23 : int):sail_values$ii) (( 23 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_CauseReg_IV : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_IV:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 23 : int):sail_values$ii) (( 23 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_IV : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_IV:cheri_sequential_types$CauseReg ->(1)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 23 : int):sail_values$ii) (( 23 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_CauseReg_WP : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_CauseReg_WP:cheri_sequential_types$CauseReg ->(1)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_CauseReg_WP : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_WP:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_WP : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_WP:cheri_sequential_types$CauseReg ->(1)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_CauseReg_IP : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((get_CauseReg_IP:cheri_sequential_types$CauseReg ->(8)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  8 words$word)))`;


(*val _set_CauseReg_IP : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_IP:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_IP : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_IP:cheri_sequential_types$CauseReg ->(8)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_CauseReg_ExcCode : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty5*)

val _ = Define `
 ((get_CauseReg_ExcCode:cheri_sequential_types$CauseReg ->(5)words$word) (Mk_CauseReg (v))=  ((subrange_vec_dec v (( 6 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  5 words$word)))`;


(*val _set_CauseReg_ExcCode : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CauseReg_ExcCode:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CauseReg))sail_values$register_ref ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CauseReg) . 
   let r = ((get_CauseReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 6 : int):sail_values$ii) (( 2 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_CauseReg r))))`;


(*val _update_CauseReg_ExcCode : Cheri_sequential_types.CauseReg -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.CauseReg*)

val _ = Define `
 ((update_CauseReg_ExcCode:cheri_sequential_types$CauseReg ->(5)words$word -> cheri_sequential_types$CauseReg) (Mk_CauseReg (v)) x=   
 (Mk_CauseReg ((update_subrange_vec_dec v (( 6 : int):sail_values$ii) (( 2 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _update_CapCauseReg_ExcCode : Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.CapCauseReg*)

(*val _get_CapCauseReg_ExcCode : Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8*)

(*val _set_CapCauseReg_ExcCode : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

(*val undefined_TLBEntryLoReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((undefined_TLBEntryLoReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$TLBEntryLoReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_TLBEntryLoReg w__0])))`;


(*val _get_TLBEntryLoReg : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty64*)

val _ = Define `
 ((get_TLBEntryLoReg:cheri_sequential_types$TLBEntryLoReg ->(64)words$word) (Mk_TLBEntryLoReg (v))=  v)`;


(*val _set_TLBEntryLoReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntryLoReg v) in
   write_regS r_ref r)))`;


(*val _get_TLBEntryLoReg_CapS : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapS:cheri_sequential_types$TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=   
 ((subrange_vec_dec v (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapS : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapS:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_CapS : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapS:cheri_sequential_types$TLBEntryLoReg ->(1)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_CapL : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_CapL:cheri_sequential_types$TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=   
 ((subrange_vec_dec v (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_CapL : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_CapL:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_CapL : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_CapL:cheri_sequential_types$TLBEntryLoReg ->(1)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_PFN : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty24*)

val _ = Define `
 ((get_TLBEntryLoReg_PFN:cheri_sequential_types$TLBEntryLoReg ->(24)words$word) (Mk_TLBEntryLoReg (v))=   
 ((subrange_vec_dec v (( 29 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  24 words$word)))`;


(*val _set_TLBEntryLoReg_PFN : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_PFN:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(24)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):sail_values$ii) (( 6 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_PFN : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_PFN:cheri_sequential_types$TLBEntryLoReg ->(24)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 29 : int):sail_values$ii) (( 6 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_C : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty3*)

val _ = Define `
 ((get_TLBEntryLoReg_C:cheri_sequential_types$TLBEntryLoReg ->(3)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 5 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  3 words$word)))`;


(*val _set_TLBEntryLoReg_C : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_C:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(3)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 5 : int):sail_values$ii) (( 3 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_C : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_C:cheri_sequential_types$TLBEntryLoReg ->(3)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 5 : int):sail_values$ii) (( 3 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_D : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_D:cheri_sequential_types$TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_D : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_D:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_D : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_D:cheri_sequential_types$TLBEntryLoReg ->(1)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_V : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_V:cheri_sequential_types$TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_V : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_V:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_V : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_V:cheri_sequential_types$TLBEntryLoReg ->(1)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryLoReg_G : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntryLoReg_G:cheri_sequential_types$TLBEntryLoReg ->(1)words$word) (Mk_TLBEntryLoReg (v))=  ((subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntryLoReg_G : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryLoReg_G:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryLoReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryLoReg) . 
   let r = ((get_TLBEntryLoReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryLoReg r))))`;


(*val _update_TLBEntryLoReg_G : Cheri_sequential_types.TLBEntryLoReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntryLoReg*)

val _ = Define `
 ((update_TLBEntryLoReg_G:cheri_sequential_types$TLBEntryLoReg ->(1)words$word -> cheri_sequential_types$TLBEntryLoReg) (Mk_TLBEntryLoReg (v)) x=   
 (Mk_TLBEntryLoReg ((update_subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) x  :  64 words$word))))`;


(*val undefined_TLBEntryHiReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.TLBEntryHiReg*)

val _ = Define `
 ((undefined_TLBEntryHiReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$TLBEntryHiReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_TLBEntryHiReg w__0])))`;


(*val _get_TLBEntryHiReg : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty64*)

val _ = Define `
 ((get_TLBEntryHiReg:cheri_sequential_types$TLBEntryHiReg ->(64)words$word) (Mk_TLBEntryHiReg (v))=  v)`;


(*val _set_TLBEntryHiReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryHiReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryHiReg))sail_values$register_ref ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntryHiReg v) in
   write_regS r_ref r)))`;


(*val _get_TLBEntryHiReg_R : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty2*)

val _ = Define `
 ((get_TLBEntryHiReg_R:cheri_sequential_types$TLBEntryHiReg ->(2)words$word) (Mk_TLBEntryHiReg (v))=  ((subrange_vec_dec v (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  2 words$word)))`;


(*val _set_TLBEntryHiReg_R : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_R:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryHiReg))sail_values$register_ref ->(2)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_R : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_R:cheri_sequential_types$TLBEntryHiReg ->(2)words$word -> cheri_sequential_types$TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=   
 (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryHiReg_VPN2 : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty27*)

val _ = Define `
 ((get_TLBEntryHiReg_VPN2:cheri_sequential_types$TLBEntryHiReg ->(27)words$word) (Mk_TLBEntryHiReg (v))=   
 ((subrange_vec_dec v (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii)  :  27 words$word)))`;


(*val _set_TLBEntryHiReg_VPN2 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_VPN2:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryHiReg))sail_values$register_ref ->(27)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_VPN2 : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_VPN2:cheri_sequential_types$TLBEntryHiReg ->(27)words$word -> cheri_sequential_types$TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=   
 (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_TLBEntryHiReg_ASID : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((get_TLBEntryHiReg_ASID:cheri_sequential_types$TLBEntryHiReg ->(8)words$word) (Mk_TLBEntryHiReg (v))=  ((subrange_vec_dec v (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word)))`;


(*val _set_TLBEntryHiReg_ASID : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntryHiReg_ASID:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntryHiReg))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) . 
   let r = ((get_TLBEntryHiReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_TLBEntryHiReg r))))`;


(*val _update_TLBEntryHiReg_ASID : Cheri_sequential_types.TLBEntryHiReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.TLBEntryHiReg*)

val _ = Define `
 ((update_TLBEntryHiReg_ASID:cheri_sequential_types$TLBEntryHiReg ->(8)words$word -> cheri_sequential_types$TLBEntryHiReg) (Mk_TLBEntryHiReg (v)) x=   
 (Mk_TLBEntryHiReg ((update_subrange_vec_dec v (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii) x  :  64 words$word))))`;


(*val undefined_ContextReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.ContextReg*)

val _ = Define `
 ((undefined_ContextReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$ContextReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_ContextReg w__0])))`;


(*val _get_ContextReg : Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty64*)

val _ = Define `
 ((get_ContextReg:cheri_sequential_types$ContextReg ->(64)words$word) (Mk_ContextReg (v))=  v)`;


(*val _set_ContextReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_ContextReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$ContextReg))sail_values$register_ref ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_ContextReg v) in
   write_regS r_ref r)))`;


(*val _get_ContextReg_PTEBase : Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty41*)

val _ = Define `
 ((get_ContextReg_PTEBase:cheri_sequential_types$ContextReg ->(41)words$word) (Mk_ContextReg (v))=  ((subrange_vec_dec v (( 63 : int):sail_values$ii) (( 23 : int):sail_values$ii)  :  41 words$word)))`;


(*val _set_ContextReg_PTEBase : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty41 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_ContextReg_PTEBase:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$ContextReg))sail_values$register_ref ->(41)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$ContextReg) . 
   let r = ((get_ContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):sail_values$ii) (( 23 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_ContextReg r))))`;


(*val _update_ContextReg_PTEBase : Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty41 -> Cheri_sequential_types.ContextReg*)

val _ = Define `
 ((update_ContextReg_PTEBase:cheri_sequential_types$ContextReg ->(41)words$word -> cheri_sequential_types$ContextReg) (Mk_ContextReg (v)) x=   
 (Mk_ContextReg ((update_subrange_vec_dec v (( 63 : int):sail_values$ii) (( 23 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_ContextReg_BadVPN2 : Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty19*)

val _ = Define `
 ((get_ContextReg_BadVPN2:cheri_sequential_types$ContextReg ->(19)words$word) (Mk_ContextReg (v))=  ((subrange_vec_dec v (( 22 : int):sail_values$ii) (( 4 : int):sail_values$ii)  :  19 words$word)))`;


(*val _set_ContextReg_BadVPN2 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty19 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_ContextReg_BadVPN2:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$ContextReg))sail_values$register_ref ->(19)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$ContextReg) . 
   let r = ((get_ContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):sail_values$ii) (( 4 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_ContextReg r))))`;


(*val _update_ContextReg_BadVPN2 : Cheri_sequential_types.ContextReg -> Machine_word.mword Machine_word.ty19 -> Cheri_sequential_types.ContextReg*)

val _ = Define `
 ((update_ContextReg_BadVPN2:cheri_sequential_types$ContextReg ->(19)words$word -> cheri_sequential_types$ContextReg) (Mk_ContextReg (v)) x=   
 (Mk_ContextReg ((update_subrange_vec_dec v (( 22 : int):sail_values$ii) (( 4 : int):sail_values$ii) x  :  64 words$word))))`;


(*val undefined_XContextReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.XContextReg*)

val _ = Define `
 ((undefined_XContextReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$XContextReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   internal_pick [Mk_XContextReg w__0])))`;


(*val _get_XContextReg : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty64*)

val _ = Define `
 ((get_XContextReg:cheri_sequential_types$XContextReg ->(64)words$word) (Mk_XContextReg (v))=  v)`;


(*val _set_XContextReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_XContextReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$XContextReg))sail_values$register_ref ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_XContextReg v) in
   write_regS r_ref r)))`;


(*val _get_XContextReg_XPTEBase : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty31*)

val _ = Define `
 ((get_XContextReg_XPTEBase:cheri_sequential_types$XContextReg ->(31)words$word) (Mk_XContextReg (v))=   
 ((subrange_vec_dec v (( 63 : int):sail_values$ii) (( 33 : int):sail_values$ii)  :  31 words$word)))`;


(*val _set_XContextReg_XPTEBase : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty31 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_XContextReg_XPTEBase:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$XContextReg))sail_values$register_ref ->(31)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):sail_values$ii) (( 33 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XPTEBase : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty31 -> Cheri_sequential_types.XContextReg*)

val _ = Define `
 ((update_XContextReg_XPTEBase:cheri_sequential_types$XContextReg ->(31)words$word -> cheri_sequential_types$XContextReg) (Mk_XContextReg (v)) x=   
 (Mk_XContextReg ((update_subrange_vec_dec v (( 63 : int):sail_values$ii) (( 33 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_XContextReg_XR : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty2*)

val _ = Define `
 ((get_XContextReg_XR:cheri_sequential_types$XContextReg ->(2)words$word) (Mk_XContextReg (v))=  ((subrange_vec_dec v (( 32 : int):sail_values$ii) (( 31 : int):sail_values$ii)  :  2 words$word)))`;


(*val _set_XContextReg_XR : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_XContextReg_XR:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$XContextReg))sail_values$register_ref ->(2)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 32 : int):sail_values$ii) (( 31 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XR : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.XContextReg*)

val _ = Define `
 ((update_XContextReg_XR:cheri_sequential_types$XContextReg ->(2)words$word -> cheri_sequential_types$XContextReg) (Mk_XContextReg (v)) x=   
 (Mk_XContextReg ((update_subrange_vec_dec v (( 32 : int):sail_values$ii) (( 31 : int):sail_values$ii) x  :  64 words$word))))`;


(*val _get_XContextReg_XBadVPN2 : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty27*)

val _ = Define `
 ((get_XContextReg_XBadVPN2:cheri_sequential_types$XContextReg ->(27)words$word) (Mk_XContextReg (v))=   
 ((subrange_vec_dec v (( 30 : int):sail_values$ii) (( 4 : int):sail_values$ii)  :  27 words$word)))`;


(*val _set_XContextReg_XBadVPN2 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_XContextReg_XBadVPN2:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$XContextReg))sail_values$register_ref ->(27)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$XContextReg) . 
   let r = ((get_XContextReg w__0  :  64 words$word)) in
   let r = ((update_subrange_vec_dec r (( 30 : int):sail_values$ii) (( 4 : int):sail_values$ii) v  :  64 words$word)) in
   write_regS r_ref (Mk_XContextReg r))))`;


(*val _update_XContextReg_XBadVPN2 : Cheri_sequential_types.XContextReg -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.XContextReg*)

val _ = Define `
 ((update_XContextReg_XBadVPN2:cheri_sequential_types$XContextReg ->(27)words$word -> cheri_sequential_types$XContextReg) (Mk_XContextReg (v)) x=   
 (Mk_XContextReg ((update_subrange_vec_dec v (( 30 : int):sail_values$ii) (( 4 : int):sail_values$ii) x  :  64 words$word))))`;


val _ = Define `
 ((TLBNumEntries:int)=  ((( 64 : int):sail_values$ii)))`;


val _ = Define `
((TLBIndexMax:(6)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))`;


(*val MAX : Num.integer -> Num.integer*)

val _ = Define `
 ((MAX0:int -> int) n=  (((pow2 n)) - (( 1 : int):sail_values$ii)))`;


val _ = Define `
 ((MAX_U64:int)=  (MAX0 (( 64 : int):sail_values$ii)))`;


val _ = Define `
 ((MAX_VA:int)=  (MAX0 (( 40 : int):sail_values$ii)))`;


val _ = Define `
 ((MAX_PA:int)=  (MAX0 (( 36 : int):sail_values$ii)))`;


(*val undefined_TLBEntry : unit -> Cheri_sequential_types.M Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((undefined_TLBEntry:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$TLBEntry),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 117 : int):sail_values$ii)  : ( 117 words$word) cheri_sequential_types$M) (\ (w__0 :  117 words$word) . 
   internal_pick [Mk_TLBEntry w__0])))`;


(*val _get_TLBEntry : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty117*)

val _ = Define `
 ((get_TLBEntry:cheri_sequential_types$TLBEntry ->(117)words$word) (Mk_TLBEntry (v))=  v)`;


(*val _set_TLBEntry : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty117 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(117)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_TLBEntry v) in
   write_regS r_ref r)))`;


(*val _get_TLBEntry_pagemask : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty16*)

val _ = Define `
 ((get_TLBEntry_pagemask:cheri_sequential_types$TLBEntry ->(16)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 116 : int):sail_values$ii) (( 101 : int):sail_values$ii)  :  16 words$word)))`;


(*val _set_TLBEntry_pagemask : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_pagemask:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 116 : int):sail_values$ii) (( 101 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pagemask : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pagemask:cheri_sequential_types$TLBEntry ->(16)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 116 : int):sail_values$ii) (( 101 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_r : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty2*)

val _ = Define `
 ((get_TLBEntry_r:cheri_sequential_types$TLBEntry ->(2)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 100 : int):sail_values$ii) (( 99 : int):sail_values$ii)  :  2 words$word)))`;


(*val _set_TLBEntry_r : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_r:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(2)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 100 : int):sail_values$ii) (( 99 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_r : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_r:cheri_sequential_types$TLBEntry ->(2)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 100 : int):sail_values$ii) (( 99 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_vpn2 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty27*)

val _ = Define `
 ((get_TLBEntry_vpn2:cheri_sequential_types$TLBEntry ->(27)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 98 : int):sail_values$ii) (( 72 : int):sail_values$ii)  :  27 words$word)))`;


(*val _set_TLBEntry_vpn2 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_vpn2:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(27)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 98 : int):sail_values$ii) (( 72 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_vpn2 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty27 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_vpn2:cheri_sequential_types$TLBEntry ->(27)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 98 : int):sail_values$ii) (( 72 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_asid : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((get_TLBEntry_asid:cheri_sequential_types$TLBEntry ->(8)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 71 : int):sail_values$ii) (( 64 : int):sail_values$ii)  :  8 words$word)))`;


(*val _set_TLBEntry_asid : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_asid:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 71 : int):sail_values$ii) (( 64 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_asid : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_asid:cheri_sequential_types$TLBEntry ->(8)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 71 : int):sail_values$ii) (( 64 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_g : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_g:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_g : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_g:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_g : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_g:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 63 : int):sail_values$ii) (( 63 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_valid : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_valid:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_valid : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_valid:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_valid : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_valid:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 62 : int):sail_values$ii) (( 62 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_caps1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_caps1:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 61 : int):sail_values$ii) (( 61 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_caps1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 61 : int):sail_values$ii) (( 61 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_caps1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps1:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 61 : int):sail_values$ii) (( 61 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_capl1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_capl1:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 60 : int):sail_values$ii) (( 60 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_capl1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 60 : int):sail_values$ii) (( 60 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_capl1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl1:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 60 : int):sail_values$ii) (( 60 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_pfn1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24*)

val _ = Define `
 ((get_TLBEntry_pfn1:cheri_sequential_types$TLBEntry ->(24)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 59 : int):sail_values$ii) (( 36 : int):sail_values$ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_pfn1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(24)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 59 : int):sail_values$ii) (( 36 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pfn1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn1:cheri_sequential_types$TLBEntry ->(24)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 59 : int):sail_values$ii) (( 36 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_c1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3*)

val _ = Define `
 ((get_TLBEntry_c1:cheri_sequential_types$TLBEntry ->(3)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 35 : int):sail_values$ii) (( 33 : int):sail_values$ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_c1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(3)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 35 : int):sail_values$ii) (( 33 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_c1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c1:cheri_sequential_types$TLBEntry ->(3)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 35 : int):sail_values$ii) (( 33 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_d1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_d1:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 32 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_d1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 32 : int):sail_values$ii) (( 32 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_d1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d1:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 32 : int):sail_values$ii) (( 32 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_v1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_v1:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v1 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_v1:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_v1 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v1:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 31 : int):sail_values$ii) (( 31 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_caps0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_caps0:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 30 : int):sail_values$ii) (( 30 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_caps0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_caps0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 30 : int):sail_values$ii) (( 30 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_caps0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_caps0:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 30 : int):sail_values$ii) (( 30 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_capl0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_capl0:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 29 : int):sail_values$ii) (( 29 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_capl0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_capl0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 29 : int):sail_values$ii) (( 29 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_capl0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_capl0:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 29 : int):sail_values$ii) (( 29 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_pfn0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24*)

val _ = Define `
 ((get_TLBEntry_pfn0:cheri_sequential_types$TLBEntry ->(24)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 28 : int):sail_values$ii) (( 5 : int):sail_values$ii)  :  24 words$word)))`;


(*val _set_TLBEntry_pfn0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_pfn0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(24)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 28 : int):sail_values$ii) (( 5 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_pfn0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty24 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_pfn0:cheri_sequential_types$TLBEntry ->(24)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 28 : int):sail_values$ii) (( 5 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_c0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3*)

val _ = Define `
 ((get_TLBEntry_c0:cheri_sequential_types$TLBEntry ->(3)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 4 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  3 words$word)))`;


(*val _set_TLBEntry_c0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_c0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(3)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 4 : int):sail_values$ii) (( 2 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_c0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty3 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_c0:cheri_sequential_types$TLBEntry ->(3)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 4 : int):sail_values$ii) (( 2 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_d0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_d0:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_d0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_d0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_d0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_d0:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) x  :  117 words$word))))`;


(*val _get_TLBEntry_v0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_TLBEntry_v0:cheri_sequential_types$TLBEntry ->(1)words$word) (Mk_TLBEntry (v))=  ((subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_TLBEntry_v0 : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_TLBEntry_v0:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$TLBEntry) . 
   let r = ((get_TLBEntry w__0  :  117 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) v  :  117 words$word)) in
   write_regS r_ref (Mk_TLBEntry r))))`;


(*val _update_TLBEntry_v0 : Cheri_sequential_types.TLBEntry -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.TLBEntry*)

val _ = Define `
 ((update_TLBEntry_v0:cheri_sequential_types$TLBEntry ->(1)words$word -> cheri_sequential_types$TLBEntry) (Mk_TLBEntry (v)) x=   
 (Mk_TLBEntry ((update_subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) x  :  117 words$word))))`;


val _ = Define `
((TLBEntries:(((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$TLBEntry))sail_values$register_ref)list)=  
 ([TLBEntry63_ref;TLBEntry62_ref;TLBEntry61_ref;TLBEntry60_ref;TLBEntry59_ref;TLBEntry58_ref;TLBEntry57_ref;TLBEntry56_ref;TLBEntry55_ref;TLBEntry54_ref;TLBEntry53_ref;TLBEntry52_ref;TLBEntry51_ref;TLBEntry50_ref;TLBEntry49_ref;TLBEntry48_ref;TLBEntry47_ref;TLBEntry46_ref;TLBEntry45_ref;TLBEntry44_ref;TLBEntry43_ref;
   TLBEntry42_ref;TLBEntry41_ref;TLBEntry40_ref;TLBEntry39_ref;TLBEntry38_ref;TLBEntry37_ref;TLBEntry36_ref;TLBEntry35_ref;TLBEntry34_ref;TLBEntry33_ref;TLBEntry32_ref;TLBEntry31_ref;TLBEntry30_ref;TLBEntry29_ref;TLBEntry28_ref;TLBEntry27_ref;TLBEntry26_ref;TLBEntry25_ref;TLBEntry24_ref;TLBEntry23_ref;TLBEntry22_ref;
   TLBEntry21_ref;TLBEntry20_ref;TLBEntry19_ref;TLBEntry18_ref;TLBEntry17_ref;TLBEntry16_ref;TLBEntry15_ref;TLBEntry14_ref;TLBEntry13_ref;TLBEntry12_ref;TLBEntry11_ref;TLBEntry10_ref;TLBEntry09_ref;TLBEntry08_ref;TLBEntry07_ref;TLBEntry06_ref;TLBEntry05_ref;TLBEntry04_ref;TLBEntry03_ref;TLBEntry02_ref;TLBEntry01_ref;
   TLBEntry00_ref]))`;


(*val undefined_StatusReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((undefined_StatusReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$StatusReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__0 :  32 words$word) . 
   internal_pick [Mk_StatusReg w__0])))`;


(*val _get_StatusReg : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty32*)

val _ = Define `
 ((get_StatusReg:cheri_sequential_types$StatusReg ->(32)words$word) (Mk_StatusReg (v))=  v)`;


(*val _set_StatusReg : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty32 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(32)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_StatusReg v) in
   write_regS r_ref r)))`;


(*val _get_StatusReg_CU : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty4*)

val _ = Define `
 ((get_StatusReg_CU:cheri_sequential_types$StatusReg ->(4)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 31 : int):sail_values$ii) (( 28 : int):sail_values$ii)  :  4 words$word)))`;


(*val _set_StatusReg_CU : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty4 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_CU:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(4)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 31 : int):sail_values$ii) (( 28 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_CU : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty4 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_CU:cheri_sequential_types$StatusReg ->(4)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 31 : int):sail_values$ii) (( 28 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_BEV : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_BEV:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_BEV : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_BEV:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_BEV : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_BEV:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 22 : int):sail_values$ii) (( 22 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_IM : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((get_StatusReg_IM:cheri_sequential_types$StatusReg ->(8)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  8 words$word)))`;


(*val _set_StatusReg_IM : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_IM:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_IM : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_IM:cheri_sequential_types$StatusReg ->(8)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_KX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_KX:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 7 : int):sail_values$ii) (( 7 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_KX : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_KX:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):sail_values$ii) (( 7 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_KX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_KX:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 7 : int):sail_values$ii) (( 7 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_SX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_SX:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 6 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_SX : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_SX:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 6 : int):sail_values$ii) (( 6 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_SX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_SX:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 6 : int):sail_values$ii) (( 6 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_UX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_UX:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 5 : int):sail_values$ii) (( 5 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_UX : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_UX:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 5 : int):sail_values$ii) (( 5 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_UX : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_UX:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 5 : int):sail_values$ii) (( 5 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_KSU : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty2*)

val _ = Define `
 ((get_StatusReg_KSU:cheri_sequential_types$StatusReg ->(2)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 4 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  2 words$word)))`;


(*val _set_StatusReg_KSU : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_KSU:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(2)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 4 : int):sail_values$ii) (( 3 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_KSU : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty2 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_KSU:cheri_sequential_types$StatusReg ->(2)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 4 : int):sail_values$ii) (( 3 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_ERL : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_ERL:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_ERL : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_ERL:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_ERL : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_ERL:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 2 : int):sail_values$ii) (( 2 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_EXL : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_EXL:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_EXL : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_EXL:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_EXL : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_EXL:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 1 : int):sail_values$ii) (( 1 : int):sail_values$ii) x  :  32 words$word))))`;


(*val _get_StatusReg_IE : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1*)

val _ = Define `
 ((get_StatusReg_IE:cheri_sequential_types$StatusReg ->(1)words$word) (Mk_StatusReg (v))=  ((subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  1 words$word)))`;


(*val _set_StatusReg_IE : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_StatusReg_IE:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$StatusReg))sail_values$register_ref ->(1)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let r = ((get_StatusReg w__0  :  32 words$word)) in
   let r = ((update_subrange_vec_dec r (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) v  :  32 words$word)) in
   write_regS r_ref (Mk_StatusReg r))))`;


(*val _update_StatusReg_IE : Cheri_sequential_types.StatusReg -> Machine_word.mword Machine_word.ty1 -> Cheri_sequential_types.StatusReg*)

val _ = Define `
 ((update_StatusReg_IE:cheri_sequential_types$StatusReg ->(1)words$word -> cheri_sequential_types$StatusReg) (Mk_StatusReg (v)) x=   
 (Mk_StatusReg ((update_subrange_vec_dec v (( 0 : int):sail_values$ii) (( 0 : int):sail_values$ii) x  :  32 words$word))))`;


(*val execute_branch : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_branch:(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) pc=  (seqS   
(write_regS delayedPC_ref pc) (write_regS branchPending_ref (vec_of_bits [B1]  :  1 words$word))))`;


(*val NotWordVal : Machine_word.mword Machine_word.ty64 -> bool*)

val _ = Define `
 ((NotWordVal:(64)words$word -> bool) word= 
   (((replicate_bits ((cast_unit_vec0 ((access_vec_dec word (( 31 : int):sail_values$ii)))  :  1 words$word)) (( 32 : int):sail_values$ii)
        :  32 words$word)) <> ((subrange_vec_dec word (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))))`;


(*val rGPR : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64)*)

val _ = Define `
 ((rGPR:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) idx=   
 (let i = (lem$w2ui idx) in
   if (((i = (( 0 : int):sail_values$ii)))) then
     returnS (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                           B0]
               :  64 words$word)
   else bindS     
(read_regS GPR_ref) (\ (w__0 : ( 64 cheri_sequential_types$bits) list) . 
     returnS ((access_list_dec w__0 i  :  64 words$word)))))`;


(*val wGPR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((wGPR:(5)words$word ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) idx v=   
 (let i = (lem$w2ui idx) in
   if (((i = (( 0 : int):sail_values$ii)))) then returnS () 
   else bindS     
(read_regS GPR_ref) (\ (w__0 : ( 64 words$word) list) . 
     write_regS GPR_ref ((update_list_dec w__0 i v  : ( 64 words$word) list)))))`;
















(*val Exception_of_num : Num.integer -> Cheri_sequential_types.Exception*)

val _ = Define `
 ((Exception_of_num:int -> cheri_sequential_types$Exception) arg_=   
 (let l__81 = arg_ in
   if (((l__81 = (( 0 : int):sail_values$ii)))) then Interrupt
   else if (((l__81 = (( 1 : int):sail_values$ii)))) then TLBMod
   else if (((l__81 = (( 2 : int):sail_values$ii)))) then TLBL
   else if (((l__81 = (( 3 : int):sail_values$ii)))) then TLBS
   else if (((l__81 = (( 4 : int):sail_values$ii)))) then AdEL
   else if (((l__81 = (( 5 : int):sail_values$ii)))) then AdES
   else if (((l__81 = (( 6 : int):sail_values$ii)))) then Sys
   else if (((l__81 = (( 7 : int):sail_values$ii)))) then Bp
   else if (((l__81 = (( 8 : int):sail_values$ii)))) then ResI
   else if (((l__81 = (( 9 : int):sail_values$ii)))) then CpU
   else if (((l__81 = (( 10 : int):sail_values$ii)))) then Ov
   else if (((l__81 = (( 11 : int):sail_values$ii)))) then Tr
   else if (((l__81 = (( 12 : int):sail_values$ii)))) then C2E
   else if (((l__81 = (( 13 : int):sail_values$ii)))) then C2Trap
   else if (((l__81 = (( 14 : int):sail_values$ii)))) then XTLBRefillL
   else if (((l__81 = (( 15 : int):sail_values$ii)))) then XTLBRefillS
   else if (((l__81 = (( 16 : int):sail_values$ii)))) then XTLBInvL
   else if (((l__81 = (( 17 : int):sail_values$ii)))) then XTLBInvS
   else MCheck))`;


(*val num_of_Exception : Cheri_sequential_types.Exception -> Num.integer*)

val _ = Define `
 ((num_of_Exception:cheri_sequential_types$Exception -> int) arg_=   
 ((case arg_ of
     Interrupt => (( 0 : int):sail_values$ii)
   | TLBMod => (( 1 : int):sail_values$ii)
   | TLBL => (( 2 : int):sail_values$ii)
   | TLBS => (( 3 : int):sail_values$ii)
   | AdEL => (( 4 : int):sail_values$ii)
   | AdES => (( 5 : int):sail_values$ii)
   | Sys => (( 6 : int):sail_values$ii)
   | Bp => (( 7 : int):sail_values$ii)
   | ResI => (( 8 : int):sail_values$ii)
   | CpU => (( 9 : int):sail_values$ii)
   | Ov => (( 10 : int):sail_values$ii)
   | Tr => (( 11 : int):sail_values$ii)
   | C2E => (( 12 : int):sail_values$ii)
   | C2Trap => (( 13 : int):sail_values$ii)
   | XTLBRefillL => (( 14 : int):sail_values$ii)
   | XTLBRefillS => (( 15 : int):sail_values$ii)
   | XTLBInvL => (( 16 : int):sail_values$ii)
   | XTLBInvS => (( 17 : int):sail_values$ii)
   | MCheck => (( 18 : int):sail_values$ii)
   )))`;


(*val undefined_Exception : unit -> Cheri_sequential_types.M Cheri_sequential_types.Exception*)

val _ = Define `
 ((undefined_Exception:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$Exception),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =   
 (internal_pick
     [Interrupt;TLBMod;TLBL;TLBS;AdEL;AdES;Sys;Bp;ResI;CpU;Ov;Tr;C2E;C2Trap;XTLBRefillL;XTLBRefillS;XTLBInvL;XTLBInvS;MCheck]))`;


(*val ExceptionCode : Cheri_sequential_types.Exception -> Machine_word.mword Machine_word.ty5*)

val _ = Define `
 ((ExceptionCode:cheri_sequential_types$Exception ->(5)words$word) ex=   
 (let (x : 8 cheri_sequential_types$bits) =     
((case ex of
       Interrupt => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
     | TLBMod => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)
     | TLBL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | TLBS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | AdEL => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0]  :  8 words$word)
     | AdES => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1]  :  8 words$word)
     | Sys => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0]  :  8 words$word)
     | Bp => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B1]  :  8 words$word)
     | ResI => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B0]  :  8 words$word)
     | CpU => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B1]  :  8 words$word)
     | Ov => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B0]  :  8 words$word)
     | Tr => (vec_of_bits [B0;B0;B0;B0;B1;B1;B0;B1]  :  8 words$word)
     | C2E => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | C2Trap => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBRefillS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | XTLBInvL => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
     | XTLBInvS => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
     | MCheck => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0]  :  8 words$word)
     )) in
   (subrange_vec_dec x (( 4 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  5 words$word)))`;


(*val SignalExceptionMIPS : forall 'o. Cheri_sequential_types.Exception -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M 'o*)

val _ = Define `
 ((SignalExceptionMIPS:cheri_sequential_types$Exception ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) ex kccBase=  (bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) .  bindS (seqS
   (if ((~ ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))))) then bindS
      (read_regS inBranchDelay_ref  : ( 1 words$word) cheri_sequential_types$M) (\ (w__1 : 1 cheri_sequential_types$bits) . 
      if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):sail_values$ii))))) then bindS
        (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) .  seqS        
(write_regS CP0EPC_ref ((sub_vec_int w__2 (( 4 : int):sail_values$ii)  :  64 words$word)))        
(set_CauseReg_BD CP0Cause_ref (vec_of_bits [B1]  :  1 words$word)))
      else bindS
        (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 : 64 cheri_sequential_types$bits) .  seqS        
(write_regS CP0EPC_ref w__3) (set_CauseReg_BD CP0Cause_ref (vec_of_bits [B0]  :  1 words$word))))
    else returnS () )   
(read_regS CP0Status_ref)) (\ (w__4 : cheri_sequential_types$StatusReg) . 
   let vectorOffset =     
(if ((bits_to_bool ((get_StatusReg_EXL w__4  :  1 words$word)))) then
       (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if ((((((ex = XTLBRefillL))) \/ (((ex = XTLBRefillS)))))) then
       (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else if (((ex = C2Trap))) then (vec_of_bits [B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)
     else (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0]  :  12 words$word)) in bindS   
(read_regS CP0Status_ref) (\ (w__5 : cheri_sequential_types$StatusReg) . 
   let (vectorBase : 64 cheri_sequential_types$bits) =     
(if ((bits_to_bool ((get_StatusReg_BEV w__5  :  1 words$word)))) then
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0]
         :  64 words$word)
     else
       (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                     B0]
         :  64 words$word)) in seqS (seqS (seqS   
(write_regS
     nextPC_ref
     ((sub_vec
         ((add_vec vectorBase ((sign_extend1 (( 64 : int):sail_values$ii) vectorOffset  :  64 words$word))  :  64 words$word))
         kccBase
        :  64 words$word)))   
(set_CauseReg_ExcCode CP0Cause_ref ((ExceptionCode ex  :  5 words$word))))   
(set_StatusReg_EXL CP0Status_ref (vec_of_bits [B1]  :  1 words$word))) (throwS (ISAException () )))))))`;


(*val SignalException : forall 'o. Cheri_sequential_types.Exception -> Cheri_sequential_types.M 'o*)

(*val SignalExceptionBadAddr : forall 'o. Cheri_sequential_types.Exception -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M 'o*)

(*val capRegToCapStruct : Machine_word.mword Machine_word.ty257 -> Cheri_sequential_types.CapStruct*)

val _ = Define `
 ((capRegToCapStruct:(257)words$word -> cheri_sequential_types$CapStruct) capReg=   
 (<| CapStruct_tag := ((bit_to_bool ((access_vec_dec capReg (( 256 : int):sail_values$ii))))); 
      CapStruct_padding := ((subrange_vec_dec capReg (( 255 : int):sail_values$ii) (( 248 : int):sail_values$ii)  :  8 words$word)); 
      CapStruct_otype := ((subrange_vec_dec capReg (( 247 : int):sail_values$ii) (( 224 : int):sail_values$ii)  :  24 words$word)); 
      CapStruct_uperms := ((subrange_vec_dec capReg (( 223 : int):sail_values$ii) (( 208 : int):sail_values$ii)  :  16 words$word)); 
      CapStruct_perm_reserved11_14 := ((subrange_vec_dec capReg (( 207 : int):sail_values$ii) (( 204 : int):sail_values$ii)  :  4 words$word)); 
      CapStruct_access_system_regs := ((bit_to_bool ((access_vec_dec capReg (( 203 : int):sail_values$ii))))); 
      CapStruct_permit_unseal := ((bit_to_bool ((access_vec_dec capReg (( 202 : int):sail_values$ii))))); 
      CapStruct_permit_ccall := ((bit_to_bool ((access_vec_dec capReg (( 201 : int):sail_values$ii))))); 
      CapStruct_permit_seal := ((bit_to_bool ((access_vec_dec capReg (( 200 : int):sail_values$ii))))); 
      CapStruct_permit_store_local_cap := ((bit_to_bool ((access_vec_dec capReg (( 199 : int):sail_values$ii))))); 
      CapStruct_permit_store_cap := ((bit_to_bool ((access_vec_dec capReg (( 198 : int):sail_values$ii))))); 
      CapStruct_permit_load_cap := ((bit_to_bool ((access_vec_dec capReg (( 197 : int):sail_values$ii))))); 
      CapStruct_permit_store := ((bit_to_bool ((access_vec_dec capReg (( 196 : int):sail_values$ii))))); 
      CapStruct_permit_load := ((bit_to_bool ((access_vec_dec capReg (( 195 : int):sail_values$ii))))); 
      CapStruct_permit_execute := ((bit_to_bool ((access_vec_dec capReg (( 194 : int):sail_values$ii))))); 
      CapStruct_global := ((bit_to_bool ((access_vec_dec capReg (( 193 : int):sail_values$ii))))); 
      CapStruct_sealed := ((bit_to_bool ((access_vec_dec capReg (( 192 : int):sail_values$ii))))); 
      CapStruct_address := ((subrange_vec_dec capReg (( 191 : int):sail_values$ii) (( 128 : int):sail_values$ii)  :  64 words$word)); 
      CapStruct_base := ((subrange_vec_dec capReg (( 127 : int):sail_values$ii) (( 64 : int):sail_values$ii)  :  64 words$word)); 
      CapStruct_length := ((subrange_vec_dec capReg (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word)) |>))`;


(*val getCapPerms : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty31*)

val _ = Define `
 ((getCapPerms:cheri_sequential_types$CapStruct ->(31)words$word) cap=   
 ((concat_vec cap.CapStruct_uperms
      ((concat_vec cap.CapStruct_perm_reserved11_14
          ((concat_vec ((bool_to_bits cap.CapStruct_access_system_regs  :  1 words$word))
              ((concat_vec ((bool_to_bits cap.CapStruct_permit_unseal  :  1 words$word))
                  ((concat_vec ((bool_to_bits cap.CapStruct_permit_ccall  :  1 words$word))
                      ((concat_vec ((bool_to_bits cap.CapStruct_permit_seal  :  1 words$word))
                          ((concat_vec
                              ((bool_to_bits cap.CapStruct_permit_store_local_cap  :  1 words$word))
                              ((concat_vec
                                  ((bool_to_bits cap.CapStruct_permit_store_cap  :  1 words$word))
                                  ((concat_vec
                                      ((bool_to_bits cap.CapStruct_permit_load_cap  :  1 words$word))
                                      ((concat_vec
                                          ((bool_to_bits cap.CapStruct_permit_store  :  1 words$word))
                                          ((concat_vec
                                              ((bool_to_bits cap.CapStruct_permit_load  :  1 words$word))
                                              ((concat_vec
                                                  ((bool_to_bits cap.CapStruct_permit_execute
                                                     :  1 words$word))
                                                  ((bool_to_bits cap.CapStruct_global  :  1 words$word))
                                                 :  2 words$word))
                                             :  3 words$word))
                                         :  4 words$word))
                                     :  5 words$word))
                                 :  6 words$word))
                             :  7 words$word))
                         :  8 words$word))
                     :  9 words$word))
                 :  10 words$word))
             :  11 words$word))
         :  15 words$word))
     :  31 words$word)))`;


(*val capStructToMemBits256 : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty256*)

val _ = Define `
 ((capStructToMemBits256:cheri_sequential_types$CapStruct ->(256)words$word) cap=   
 ((concat_vec cap.CapStruct_padding
      ((concat_vec cap.CapStruct_otype
          ((concat_vec ((getCapPerms cap  :  31 words$word))
              ((concat_vec ((bool_to_bits cap.CapStruct_sealed  :  1 words$word))
                  ((concat_vec cap.CapStruct_address
                      ((concat_vec cap.CapStruct_base cap.CapStruct_length  :  128 words$word))
                     :  192 words$word))
                 :  193 words$word))
             :  224 words$word))
         :  248 words$word))
     :  256 words$word)))`;


(*val capStructToCapReg : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty257*)

val _ = Define `
 ((capStructToCapReg:cheri_sequential_types$CapStruct ->(257)words$word) cap=   
 ((concat_vec ((bool_to_bits cap.CapStruct_tag  :  1 words$word))
      ((capStructToMemBits256 cap  :  256 words$word))
     :  257 words$word)))`;


(*val getCapBase : Cheri_sequential_types.CapStruct -> Num.integer*)

val _ = Define `
 ((getCapBase:cheri_sequential_types$CapStruct -> int) c=  (lem$w2ui c.CapStruct_base))`;


val _ = Define `
((null_cap:cheri_sequential_types$CapStruct)=  
 (<| CapStruct_tag := F; 
     CapStruct_padding := ((zeros (( 8 : int):sail_values$ii) ()   :  8 words$word)); 
     CapStruct_otype := ((zeros (( 24 : int):sail_values$ii) ()   :  24 words$word)); 
     CapStruct_uperms := ((zeros (( 16 : int):sail_values$ii) ()   :  16 words$word)); 
     CapStruct_perm_reserved11_14 := ((zeros (( 4 : int):sail_values$ii) ()   :  4 words$word)); 
     CapStruct_access_system_regs := F; 
     CapStruct_permit_unseal := F; 
     CapStruct_permit_ccall := F; 
     CapStruct_permit_seal := F; 
     CapStruct_permit_store_local_cap := F; 
     CapStruct_permit_store_cap := F; 
     CapStruct_permit_load_cap := F; 
     CapStruct_permit_store := F; 
     CapStruct_permit_load := F; 
     CapStruct_permit_execute := F; 
     CapStruct_global := F; 
     CapStruct_sealed := F; 
     CapStruct_address := ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)); 
     CapStruct_base := ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)); 
     CapStruct_length :=       
((vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1]
         :  64 words$word)) |>))`;


(*val int_to_cap : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.CapStruct*)

val _ = Define `
 ((int_to_cap:(64)words$word -> cheri_sequential_types$CapStruct) address=  ((null_cap with<| CapStruct_address := address|>)))`;


(*val setCapOffset : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty64 -> (bool * Cheri_sequential_types.CapStruct)*)

val _ = Define `
 ((setCapOffset:cheri_sequential_types$CapStruct ->(64)words$word -> bool#cheri_sequential_types$CapStruct) c offset= 
   (T, (c with<| CapStruct_address := ((add_vec c.CapStruct_base offset  :  64 words$word))|>)))`;


val _ = Define `
 ((SignalException:cheri_sequential_types$Exception ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) ex=  (bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) .  bindS (seqS
   (if ((~ ((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))))) then bindS
      (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ pc .  bindS
      (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__1 :  257 words$word) . 
      let pcc = (capRegToCapStruct w__1) in
      let (success, epcc) = (setCapOffset pcc pc) in
      if success then write_regS C31_ref ((capStructToCapReg epcc  :  257 words$word))
      else
        write_regS
          C31_ref
          ((capStructToCapReg
              ((int_to_cap
                  ((add_vec_int
                      ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase pcc))
                         :  64 words$word)) ((lem$w2ui pc))
                     :  64 words$word))))
             :  257 words$word))))
    else returnS () )
   (read_regS C29_ref  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__2 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS nextPCC_ref w__2)
   (read_regS C29_ref  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__3 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS delayedPCC_ref w__3)
   (read_regS C29_ref  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__4 :  257 words$word) . 
   let base = (getCapBase ((capRegToCapStruct w__4))) in
   SignalExceptionMIPS ex ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) base  :  64 words$word))))))))`;


val _ = Define `
 ((SignalExceptionBadAddr:cheri_sequential_types$Exception ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) ex badAddr=  (seqS (write_regS CP0BadVAddr_ref badAddr) (SignalException ex)))`;


(*val SignalExceptionTLB : forall 'o. Cheri_sequential_types.Exception -> Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M 'o*)

val _ = Define `
 ((SignalExceptionTLB:cheri_sequential_types$Exception ->(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) ex badAddr=  (seqS (seqS (seqS (seqS (seqS (seqS   
(write_regS CP0BadVAddr_ref badAddr)   
(set_ContextReg_BadVPN2 TLBContext_ref ((subrange_vec_dec badAddr (( 31 : int):sail_values$ii) (( 13 : int):sail_values$ii)  :  19 words$word))))   
(set_XContextReg_XBadVPN2 TLBXContext_ref
     ((subrange_vec_dec badAddr (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii)  :  27 words$word))))   
(set_XContextReg_XR TLBXContext_ref ((subrange_vec_dec badAddr (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  2 words$word))))   
(set_TLBEntryHiReg_R TLBEntryHi_ref ((subrange_vec_dec badAddr (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  2 words$word))))   
(set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((subrange_vec_dec badAddr (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii)  :  27 words$word))))   
(SignalException ex)))`;


(*val MemAccessType_of_num : Num.integer -> Cheri_sequential_types.MemAccessType*)

val _ = Define `
 ((MemAccessType_of_num:int -> cheri_sequential_types$MemAccessType) arg_=   
 (let l__79 = arg_ in
   if (((l__79 = (( 0 : int):sail_values$ii)))) then Instruction
   else if (((l__79 = (( 1 : int):sail_values$ii)))) then LoadData
   else StoreData))`;


(*val num_of_MemAccessType : Cheri_sequential_types.MemAccessType -> Num.integer*)

val _ = Define `
 ((num_of_MemAccessType:cheri_sequential_types$MemAccessType -> int) arg_=   
 ((case arg_ of   Instruction => (( 0 : int):sail_values$ii) | LoadData => (( 1 : int):sail_values$ii) | StoreData => (( 2 : int):sail_values$ii) )))`;


(*val undefined_MemAccessType : unit -> Cheri_sequential_types.M Cheri_sequential_types.MemAccessType*)

val _ = Define `
 ((undefined_MemAccessType:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$MemAccessType),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [Instruction;LoadData;StoreData]))`;


(*val AccessLevel_of_num : Num.integer -> Cheri_sequential_types.AccessLevel*)

val _ = Define `
 ((AccessLevel_of_num:int -> cheri_sequential_types$AccessLevel) arg_=   
 (let l__77 = arg_ in
   if (((l__77 = (( 0 : int):sail_values$ii)))) then User
   else if (((l__77 = (( 1 : int):sail_values$ii)))) then Supervisor
   else Kernel))`;


(*val num_of_AccessLevel : Cheri_sequential_types.AccessLevel -> Num.integer*)

val _ = Define `
 ((num_of_AccessLevel:cheri_sequential_types$AccessLevel -> int) arg_=   
 ((case arg_ of   User => (( 0 : int):sail_values$ii) | Supervisor => (( 1 : int):sail_values$ii) | Kernel => (( 2 : int):sail_values$ii) )))`;


(*val undefined_AccessLevel : unit -> Cheri_sequential_types.M Cheri_sequential_types.AccessLevel*)

val _ = Define `
 ((undefined_AccessLevel:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$AccessLevel),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [User;Supervisor;Kernel]))`;


(*val int_of_AccessLevel : Cheri_sequential_types.AccessLevel -> Sail_values.ii*)

val _ = Define `
 ((int_of_AccessLevel:cheri_sequential_types$AccessLevel -> int) level=   
 ((case level of   User => (( 0 : int):sail_values$ii) | Supervisor => (( 1 : int):sail_values$ii) | Kernel => (( 2 : int):sail_values$ii) )))`;


(*val grantsAccess : Cheri_sequential_types.AccessLevel -> Cheri_sequential_types.AccessLevel -> bool*)

val _ = Define `
 ((grantsAccess:cheri_sequential_types$AccessLevel -> cheri_sequential_types$AccessLevel -> bool) currentLevel requiredLevel=   
 (((int_of_AccessLevel currentLevel)) >= ((int_of_AccessLevel requiredLevel))))`;


(*val getAccessLevel : unit -> Cheri_sequential_types.M Cheri_sequential_types.AccessLevel*)

val _ = Define `
 ((getAccessLevel:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$AccessLevel),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) .  bindS   
(read_regS CP0Status_ref) (\ (w__1 : cheri_sequential_types$StatusReg) . 
   if (((((bits_to_bool ((get_StatusReg_EXL w__0  :  1 words$word)))) \/ ((bits_to_bool ((get_StatusReg_ERL w__1  :  1 words$word))))))) then
     returnS Kernel
   else bindS     
(read_regS CP0Status_ref) (\ (w__2 : cheri_sequential_types$StatusReg) . 
     let p__132 = ((get_StatusReg_KSU w__2  :  2 words$word)) in
     let b__0 = p__132 in
     returnS (if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then Kernel
              else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then Supervisor
              else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then User
              else User))))))`;


(*val checkCP0Access : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((checkCP0Access:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS   
(getAccessLevel () ) (\ accessLevel .  bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   if ((((((accessLevel <> Kernel))) /\ ((~ ((bit_to_bool ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):sail_values$ii))))))))))
   then seqS     
(set_CauseReg_CE CP0Cause_ref (vec_of_bits [B0;B0]  :  2 words$word)) (SignalException CpU)
   else returnS () ))))`;


(*val incrementCP0Count : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((incrementCP0Count:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (read_regS TLBRandom_ref  : ( 6 words$word) cheri_sequential_types$M) (\ (w__0 : cheri_sequential_types$TLBIndexT) .  bindS
   (read_regS TLBWired_ref  : ( 6 words$word) cheri_sequential_types$M) (\ (w__1 :  6 words$word) .  bindS
   (if (((w__0 = w__1))) then returnS TLBIndexMax
    else bindS
      (read_regS TLBRandom_ref  : ( 6 words$word) cheri_sequential_types$M) (\ (w__2 :  6 words$word) . 
      returnS ((sub_vec_int w__2 (( 1 : int):sail_values$ii)  :  6 words$word)))) (\ (w__3 :  6 words$word) .  bindS (seqS   
(write_regS TLBRandom_ref w__3)
   (read_regS CP0Count_ref  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__4 :  32 words$word) .  bindS (seqS   
(write_regS CP0Count_ref ((add_vec_int w__4 (( 1 : int):sail_values$ii)  :  32 words$word)))
   (read_regS CP0Count_ref  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__5 : 32 cheri_sequential_types$bits) .  bindS
   (read_regS CP0Compare_ref  : ( 32 words$word) cheri_sequential_types$M) (\ (w__6 :  32 words$word) .  bindS (seqS
   (if (((w__5 = w__6))) then bindS      
(read_regS CP0Cause_ref) (\ (w__7 : cheri_sequential_types$CauseReg) . 
      set_CauseReg_IP CP0Cause_ref
        ((or_vec ((get_CauseReg_IP w__7  :  8 words$word))
            (vec_of_bits [B1;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
           :  8 words$word)))
    else returnS () )   
(read_regS CP0Status_ref)) (\ (w__8 : cheri_sequential_types$StatusReg) . 
   let ims = ((get_StatusReg_IM w__8  :  8 words$word)) in bindS   
(read_regS CP0Cause_ref) (\ (w__9 : cheri_sequential_types$CauseReg) . 
   let ips = ((get_CauseReg_IP w__9  :  8 words$word)) in bindS   
(read_regS CP0Status_ref) (\ (w__10 : cheri_sequential_types$StatusReg) . 
   let ie = ((get_StatusReg_IE w__10  :  1 words$word)) in bindS   
(read_regS CP0Status_ref) (\ (w__11 : cheri_sequential_types$StatusReg) . 
   let exl = ((get_StatusReg_EXL w__11  :  1 words$word)) in bindS   
(read_regS CP0Status_ref) (\ (w__12 : cheri_sequential_types$StatusReg) . 
   let erl = ((get_StatusReg_ERL w__12  :  1 words$word)) in
   if (((((~ ((bits_to_bool exl)))) /\ (((((~ ((bits_to_bool erl)))) /\ (((((bits_to_bool ie)) /\ (((((and_vec ips ims  :  8 words$word)) <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))))))))) then
     SignalException Interrupt
   else returnS () )))))))))))))`;


(*val decode_failure_of_num : Num.integer -> Cheri_sequential_types.decode_failure*)

val _ = Define `
 ((decode_failure_of_num:int -> cheri_sequential_types$decode_failure) arg_=   
 (let l__74 = arg_ in
   if (((l__74 = (( 0 : int):sail_values$ii)))) then No_matching_pattern
   else if (((l__74 = (( 1 : int):sail_values$ii)))) then Unsupported_instruction
   else if (((l__74 = (( 2 : int):sail_values$ii)))) then Illegal_instruction
   else Internal_error))`;


(*val num_of_decode_failure : Cheri_sequential_types.decode_failure -> Num.integer*)

val _ = Define `
 ((num_of_decode_failure:cheri_sequential_types$decode_failure -> int) arg_= 
  ((case arg_ of   no_matching_pattern => (( 0 : int): sail_values$ii) )))`;


(*val undefined_decode_failure : unit -> Cheri_sequential_types.M Cheri_sequential_types.decode_failure*)

val _ = Define `
 ((undefined_decode_failure:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$decode_failure),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =   
 (internal_pick [No_matching_pattern;Unsupported_instruction;Illegal_instruction;Internal_error]))`;


(*val Comparison_of_num : Num.integer -> Cheri_sequential_types.Comparison*)

val _ = Define `
 ((Comparison_of_num:int -> cheri_sequential_types$Comparison) arg_=   
 (let l__67 = arg_ in
   if (((l__67 = (( 0 : int):sail_values$ii)))) then EQ'
   else if (((l__67 = (( 1 : int):sail_values$ii)))) then NE
   else if (((l__67 = (( 2 : int):sail_values$ii)))) then GE
   else if (((l__67 = (( 3 : int):sail_values$ii)))) then GEU
   else if (((l__67 = (( 4 : int):sail_values$ii)))) then GT'
   else if (((l__67 = (( 5 : int):sail_values$ii)))) then LE
   else if (((l__67 = (( 6 : int):sail_values$ii)))) then LT'
   else LTU))`;


(*val num_of_Comparison : Cheri_sequential_types.Comparison -> Num.integer*)

val _ = Define `
 ((num_of_Comparison:cheri_sequential_types$Comparison -> int) arg_=   
 ((case arg_ of
     EQ' => (( 0 : int):sail_values$ii)
   | NE => (( 1 : int):sail_values$ii)
   | GE => (( 2 : int):sail_values$ii)
   | GEU => (( 3 : int):sail_values$ii)
   | GT' => (( 4 : int):sail_values$ii)
   | LE => (( 5 : int):sail_values$ii)
   | LT' => (( 6 : int):sail_values$ii)
   | LTU => (( 7 : int):sail_values$ii)
   )))`;


(*val undefined_Comparison : unit -> Cheri_sequential_types.M Cheri_sequential_types.Comparison*)

val _ = Define `
 ((undefined_Comparison:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$Comparison),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [EQ';NE;GE;GEU;GT';LE;LT';LTU]))`;


(*val compare : Cheri_sequential_types.Comparison -> Machine_word.mword Machine_word.ty64 -> Machine_word.mword Machine_word.ty64 -> bool*)

val _ = Define `
 ((compare:cheri_sequential_types$Comparison ->(64)words$word ->(64)words$word -> bool) cmp valA valB=   
 ((case cmp of
     EQ' => (valA = valB)
   | NE => (valA <> valB)
   | GE => ((integer_word$w2i valA) >= (integer_word$w2i valB))
   | GEU => ((lem$w2ui valA) >= (lem$w2ui valB))
   | GT' => ((integer_word$w2i valB) < (integer_word$w2i valA))
   | LE => ((integer_word$w2i valB) >= (integer_word$w2i valA))
   | LT' => ((integer_word$w2i valA) < (integer_word$w2i valB))
   | LTU => ((lem$w2ui valA) < (lem$w2ui valB))
   )))`;


(*val WordType_of_num : Num.integer -> Cheri_sequential_types.WordType*)

val _ = Define `
 ((WordType_of_num:int -> cheri_sequential_types$WordType) arg_=   
 (let l__64 = arg_ in
   if (((l__64 = (( 0 : int):sail_values$ii)))) then B
   else if (((l__64 = (( 1 : int):sail_values$ii)))) then H
   else if (((l__64 = (( 2 : int):sail_values$ii)))) then W0
   else D))`;


(*val num_of_WordType : Cheri_sequential_types.WordType -> Num.integer*)

val _ = Define `
 ((num_of_WordType:cheri_sequential_types$WordType -> int) arg_=   
 ((case arg_ of   B => (( 0 : int):sail_values$ii) | H => (( 1 : int):sail_values$ii) | W0 => (( 2 : int):sail_values$ii) | D => (( 3 : int):sail_values$ii) )))`;


(*val undefined_WordType : unit -> Cheri_sequential_types.M Cheri_sequential_types.WordType*)

val _ = Define `
 ((undefined_WordType:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$WordType),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [B;H;W0;D]))`;


(*val wordWidthBytes : Cheri_sequential_types.WordType -> Num.integer*)

val _ = Define `
 ((wordWidthBytes:cheri_sequential_types$WordType -> int) w=  ((case w of   B => (( 1 : int):sail_values$ii) | H => (( 2 : int):sail_values$ii) | W0 => (( 4 : int):sail_values$ii) | D => (( 8 : int):sail_values$ii) )))`;


val _ = Define `
 ((alignment_width:int)=  ((( 16 : int):sail_values$ii)))`;


(*val isAddressAligned : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.WordType -> bool*)

val _ = Define `
 ((isAddressAligned:(64)words$word -> cheri_sequential_types$WordType -> bool) addr wordType=   
 (let a = (lem$w2ui addr) in
   (((a / alignment_width)) = ((((((a + ((wordWidthBytes wordType)))) - (( 1 : int):sail_values$ii))) /
         alignment_width)))))`;


(*val MEMr_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Cheri_sequential_types.M (Machine_word.mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_wrapper:(64)words$word -> int ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr size1=  (bindS
   (MEMr instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) cheri_sequential_types$M) (\ w__0 . 
   returnS ((reverse_endianness w__0  :  'p8_times_n_ words$word)))))`;


(*val MEMr_reserve_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Cheri_sequential_types.M (Machine_word.mword 'p8_times_n_)*)

val _ = Define `
 ((MEMr_reserve_wrapper:(64)words$word -> int ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((('p8_times_n_ words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr size1=  (bindS
   (MEMr_reserve instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1  : ( 'p8_times_n_ words$word) cheri_sequential_types$M) (\ w__0 . 
   returnS ((reverse_endianness w__0  :  'p8_times_n_ words$word)))))`;


(*val init_cp0_state : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((init_cp0_state:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (set_StatusReg_BEV CP0Status_ref ((cast_unit_vec0 B1  :  1 words$word))))`;


(*val init_cp2_state : unit -> Cheri_sequential_types.M unit*)

(*val cp2_next_pc : unit -> Cheri_sequential_types.M unit*)

(*val dump_cp2_state : unit -> Cheri_sequential_types.M unit*)

(*val tlbEntryMatch : Machine_word.mword Machine_word.ty2 -> Machine_word.mword Machine_word.ty27 -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.TLBEntry -> bool*)

val _ = Define `
 ((tlbEntryMatch:(2)words$word ->(27)words$word ->(8)words$word -> cheri_sequential_types$TLBEntry -> bool) r vpn2 asid entry=   
 (let entryValid = ((get_TLBEntry_valid entry  :  1 words$word)) in
   let entryR = ((get_TLBEntry_r entry  :  2 words$word)) in
   let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
   let entryVPN = ((get_TLBEntry_vpn2 entry  :  27 words$word)) in
   let entryASID = ((get_TLBEntry_asid entry  :  8 words$word)) in
   let entryG = ((get_TLBEntry_g entry  :  1 words$word)) in
   let (vpnMask : 27 cheri_sequential_types$bits) =     
((not_vec ((zero_extend1 (( 27 : int):sail_values$ii) entryMask  :  27 words$word))  :  27 words$word)) in
   (((bits_to_bool entryValid)) /\ ((((((r = entryR))) /\ ((((((((and_vec vpn2 vpnMask  :  27 words$word)) = ((and_vec entryVPN vpnMask  :  27 words$word))))) /\ ((((((asid = entryASID))) \/ ((bits_to_bool entryG))))))))))))))`;


(*val tlbSearch : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M (Maybe.maybe (Machine_word.mword Machine_word.ty6))*)

val _ = Define `
 ((tlbSearch:(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((((6)words$word)option),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) VAddr=   
 (catch_early_returnS
     (let r = ((subrange_vec_dec VAddr (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  2 words$word)) in
     let vpn2 = ((subrange_vec_dec VAddr (( 39 : int):sail_values$ii) (( 13 : int):sail_values$ii)  :  27 words$word)) in bindS     
(liftRS (read_regS TLBEntryHi_ref)) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) . 
     let asid = ((get_TLBEntryHiReg_ASID w__0  :  8 words$word)) in seqS
     (foreachS (index_list (( 0 : int):sail_values$ii) (( 63 : int):sail_values$ii) (( 1 : int):sail_values$ii)) () 
       (\ idx unit_var .  bindS         
(liftRS (read_regS ((access_list_dec TLBEntries idx)))) (\ (w__1 : cheri_sequential_types$TLBEntry) . 
         if ((tlbEntryMatch r vpn2 asid w__1)) then
           (early_returnS (SOME ((to_bits ((make_the_value (( 6 : int):sail_values$ii)  :  6 itself)) idx  :  6 words$word))) : (unit, ( ( 6 words$word)option))
             cheri_sequential_types$MR)
         else returnS () )))     
(returnS NONE)))))`;


(*val TLBTranslate2 : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.MemAccessType -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64 * bool)*)

val _ = Define `
 ((TLBTranslate2:(64)words$word -> cheri_sequential_types$MemAccessType ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word#bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) vAddr accessType=  (bindS
   (tlbSearch vAddr  : ( ( 6 words$word)option) cheri_sequential_types$M) (\ idx . 
   (case idx of
     SOME (idx) =>
      let i = (lem$w2ui idx) in bindS      
(read_regS ((access_list_dec TLBEntries i))) (\ entry . 
      let entryMask = ((get_TLBEntry_pagemask entry  :  16 words$word)) in
      let b__0 = entryMask in bindS
      (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) then
         returnS (( 12 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word))))
       then
         returnS (( 14 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 16 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 18 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 20 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 22 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 24 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 26 : int):sail_values$ii)
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word))))
       then
         returnS (( 28 : int):sail_values$ii)
       else undefined_range (( 12 : int):sail_values$ii) (( 28 : int):sail_values$ii)) (\ (evenOddBit : int) . 
      let isOdd = (access_vec_dec vAddr evenOddBit) in
      let ((caps : 1 cheri_sequential_types$bits), (capl : 1 cheri_sequential_types$bits), (pfn : 24 cheri_sequential_types$bits), (d : 1 cheri_sequential_types$bits), (v : 1 cheri_sequential_types$bits)) =        
(if ((bit_to_bool isOdd)) then
          ((get_TLBEntry_caps1 entry  :  1 words$word),
           (get_TLBEntry_capl1 entry  :  1 words$word),
           (get_TLBEntry_pfn1 entry  :  24 words$word),
           (get_TLBEntry_d1 entry  :  1 words$word),
           (get_TLBEntry_v1 entry  :  1 words$word))
        else
          ((get_TLBEntry_caps0 entry  :  1 words$word),
           (get_TLBEntry_capl0 entry  :  1 words$word),
           (get_TLBEntry_pfn0 entry  :  24 words$word),
           (get_TLBEntry_d0 entry  :  1 words$word),
           (get_TLBEntry_v0 entry  :  1 words$word))) in
      if ((~ ((bits_to_bool v)))) then
        (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBInvS else XTLBInvL) vAddr
          : (( 64 words$word # bool)) cheri_sequential_types$M)
      else if ((((((accessType = StoreData))) /\ ((~ ((bits_to_bool d))))))) then
        (SignalExceptionTLB TLBMod vAddr  : (( 64 words$word # bool)) cheri_sequential_types$M)
      else
        let (res : 64 cheri_sequential_types$bits) =          
((zero_extend1 (( 64 : int):sail_values$ii)
             ((subrange_subrange_concat
                 (((((((( 23 : int):sail_values$ii) -
                             ((((evenOddBit - (( 12 : int):sail_values$ii))) - (( 1 : int):sail_values$ii)))))
                         +
                         ((evenOddBit - (( 1 : int):sail_values$ii)))))
                     - (((( 0 : int):sail_values$ii) - (( 1 : int):sail_values$ii))))) pfn
                 (( 23 : int):sail_values$ii) ((evenOddBit - (( 12 : int):sail_values$ii))) vAddr
                 ((evenOddBit - (( 1 : int):sail_values$ii))) (( 0 : int):sail_values$ii)
                :  36 words$word))
            :  64 words$word)) in
        returnS (res, bits_to_bool (if (((accessType = StoreData))) then caps else capl))))
   | NONE =>
      (SignalExceptionTLB (if (((accessType = StoreData))) then XTLBRefillS else XTLBRefillL) vAddr
        : (( 64 words$word # bool)) cheri_sequential_types$M)
   ))))`;


(*val TLBTranslateC : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.MemAccessType -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64 * bool)*)

val _ = Define `
 ((TLBTranslateC:(64)words$word -> cheri_sequential_types$MemAccessType ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word#bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) vAddr accessType=  (bindS   
(getAccessLevel () ) (\ currentAccessLevel . 
   let compat32 =
     (((subrange_vec_dec vAddr (( 61 : int):sail_values$ii) (( 31 : int):sail_values$ii)  :  31 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
         :  31 words$word)) in
   let b__0 = ((subrange_vec_dec vAddr (( 63 : int):sail_values$ii) (( 62 : int):sail_values$ii)  :  2 words$word)) in
   let ((requiredLevel : cheri_sequential_types$AccessLevel), (addr :  ( 64 cheri_sequential_types$bits)option)) =     
(if (((b__0 = (vec_of_bits [B1;B1]  :  2 words$word)))) then
       (case (compat32, (subrange_vec_dec vAddr (( 30 : int):sail_values$ii) (( 29 : int):sail_values$ii)  :  2 words$word)) of
         (T, b__1) =>
          if (((b__1 = (vec_of_bits [B1;B1]  :  2 words$word)))) then (Kernel, NONE)
          else if (((b__1 = (vec_of_bits [B1;B0]  :  2 words$word)))) then (Supervisor, NONE)
          else if (((b__1 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
          else
            (Kernel,
             SOME ((concat_vec
                      (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                    B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                        :  32 words$word)
                      ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word)
                          ((subrange_vec_dec vAddr (( 28 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  29 words$word))
                         :  32 words$word))
                     :  64 words$word)))
       | (g__130, g__131) => (Kernel, NONE)
       )
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (Kernel,
        SOME ((concat_vec (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)
                 ((subrange_vec_dec vAddr (( 58 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  59 words$word))
                :  64 words$word)))
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then (Supervisor, NONE)
     else (User, NONE)) in
   if ((~ ((grantsAccess currentAccessLevel requiredLevel)))) then
     (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
       : (( 64 words$word # bool)) cheri_sequential_types$M)
   else bindS
     (case addr of
       SOME (a) => returnS (a, F)
     | NONE =>
        if (((((~ compat32)) /\ ((((lem$w2ui ((subrange_vec_dec vAddr (( 61 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  62 words$word)))) > MAX_VA))))) then
          (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
            : (( 64 words$word # bool)) cheri_sequential_types$M)
        else (TLBTranslate2 vAddr accessType  : (( 64 words$word # bool)) cheri_sequential_types$M)
     ) (\ varstup .  let ((pa : 64 cheri_sequential_types$bits), (c : bool)) = varstup in
     if ((((lem$w2ui pa)) > MAX_PA)) then
       (SignalExceptionBadAddr (if (((accessType = StoreData))) then AdES else AdEL) vAddr
         : (( 64 words$word # bool)) cheri_sequential_types$M)
     else returnS (pa, c)))))`;


(*val TLBTranslate : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.MemAccessType -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64)*)

val _ = Define `
 ((TLBTranslate:(64)words$word -> cheri_sequential_types$MemAccessType ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) vAddr accessType=  (bindS
   (TLBTranslateC vAddr accessType  : (( 64 words$word # bool)) cheri_sequential_types$M) (\ varstup .  let (addr, c) = varstup in
   returnS addr)))`;


(*val CPtrCmpOp_of_num : Num.integer -> Cheri_sequential_types.CPtrCmpOp*)

val _ = Define `
 ((CPtrCmpOp_of_num:int -> cheri_sequential_types$CPtrCmpOp) arg_=   
 (let l__57 = arg_ in
   if (((l__57 = (( 0 : int):sail_values$ii)))) then CEQ
   else if (((l__57 = (( 1 : int):sail_values$ii)))) then CNE
   else if (((l__57 = (( 2 : int):sail_values$ii)))) then CLT
   else if (((l__57 = (( 3 : int):sail_values$ii)))) then CLE
   else if (((l__57 = (( 4 : int):sail_values$ii)))) then CLTU
   else if (((l__57 = (( 5 : int):sail_values$ii)))) then CLEU
   else if (((l__57 = (( 6 : int):sail_values$ii)))) then CEXEQ
   else CNEXEQ))`;


(*val num_of_CPtrCmpOp : Cheri_sequential_types.CPtrCmpOp -> Num.integer*)

val _ = Define `
 ((num_of_CPtrCmpOp:cheri_sequential_types$CPtrCmpOp -> int) arg_=   
 ((case arg_ of
     CEQ => (( 0 : int):sail_values$ii)
   | CNE => (( 1 : int):sail_values$ii)
   | CLT => (( 2 : int):sail_values$ii)
   | CLE => (( 3 : int):sail_values$ii)
   | CLTU => (( 4 : int):sail_values$ii)
   | CLEU => (( 5 : int):sail_values$ii)
   | CEXEQ => (( 6 : int):sail_values$ii)
   | CNEXEQ => (( 7 : int):sail_values$ii)
   )))`;


(*val undefined_CPtrCmpOp : unit -> Cheri_sequential_types.M Cheri_sequential_types.CPtrCmpOp*)

val _ = Define `
 ((undefined_CPtrCmpOp:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CPtrCmpOp),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [CEQ;CNE;CLT;CLE;CLTU;CLEU;CEXEQ;CNEXEQ]))`;


(*val ClearRegSet_of_num : Num.integer -> Cheri_sequential_types.ClearRegSet*)

val _ = Define `
 ((ClearRegSet_of_num:int -> cheri_sequential_types$ClearRegSet) arg_=   
 (let l__54 = arg_ in
   if (((l__54 = (( 0 : int):sail_values$ii)))) then GPLo
   else if (((l__54 = (( 1 : int):sail_values$ii)))) then GPHi
   else if (((l__54 = (( 2 : int):sail_values$ii)))) then CLo
   else CHi))`;


(*val num_of_ClearRegSet : Cheri_sequential_types.ClearRegSet -> Num.integer*)

val _ = Define `
 ((num_of_ClearRegSet:cheri_sequential_types$ClearRegSet -> int) arg_=   
 ((case arg_ of   GPLo => (( 0 : int):sail_values$ii) | GPHi => (( 1 : int):sail_values$ii) | CLo => (( 2 : int):sail_values$ii) | CHi => (( 3 : int):sail_values$ii) )))`;


(*val undefined_ClearRegSet : unit -> Cheri_sequential_types.M Cheri_sequential_types.ClearRegSet*)

val _ = Define `
 ((undefined_ClearRegSet:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$ClearRegSet),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (internal_pick [GPLo;GPHi;CLo;CHi]))`;


(*val undefined_CapStruct : unit -> Cheri_sequential_types.M Cheri_sequential_types.CapStruct*)

val _ = Define `
 ((undefined_CapStruct:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CapStruct),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS   
(undefined_bool0 () ) (\ (w__0 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__1 : 8 cheri_sequential_types$bits) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 24 : int):sail_values$ii)  : ( 24 words$word) cheri_sequential_types$M) (\ (w__2 : 24 cheri_sequential_types$bits) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__3 : 16 cheri_sequential_types$bits) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 4 : int):sail_values$ii)  : ( 4 words$word) cheri_sequential_types$M) (\ (w__4 : 4 cheri_sequential_types$bits) .  bindS   
(undefined_bool0 () ) (\ (w__5 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__6 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__7 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__8 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__9 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__10 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__11 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__12 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__13 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__14 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__15 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__16 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__17 : 64 cheri_sequential_types$bits) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__18 : 64 cheri_sequential_types$bits) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__19 : 64 cheri_sequential_types$bits) . 
   returnS (<| CapStruct_tag := w__0; 
               CapStruct_padding := w__1; 
               CapStruct_otype := w__2; 
               CapStruct_uperms := w__3; 
               CapStruct_perm_reserved11_14 := w__4; 
               CapStruct_access_system_regs := w__5; 
               CapStruct_permit_unseal := w__6; 
               CapStruct_permit_ccall := w__7; 
               CapStruct_permit_seal := w__8; 
               CapStruct_permit_store_local_cap := w__9; 
               CapStruct_permit_store_cap := w__10; 
               CapStruct_permit_load_cap := w__11; 
               CapStruct_permit_store := w__12; 
               CapStruct_permit_load := w__13; 
               CapStruct_permit_execute := w__14; 
               CapStruct_global := w__15; 
               CapStruct_sealed := w__16; 
               CapStruct_address := w__17; 
               CapStruct_base := w__18; 
               CapStruct_length := w__19 |>)))))))))))))))))))))))`;


val _ = Define `
((default_cap:cheri_sequential_types$CapStruct)=  
 (<| CapStruct_tag := T; 
     CapStruct_padding := ((zeros (( 8 : int):sail_values$ii) ()   :  8 words$word)); 
     CapStruct_otype := ((zeros (( 24 : int):sail_values$ii) ()   :  24 words$word)); 
     CapStruct_uperms := ((ones (( 16 : int):sail_values$ii) ()   :  16 words$word)); 
     CapStruct_perm_reserved11_14 := ((ones (( 4 : int):sail_values$ii) ()   :  4 words$word)); 
     CapStruct_access_system_regs := T; 
     CapStruct_permit_unseal := T; 
     CapStruct_permit_ccall := T; 
     CapStruct_permit_seal := T; 
     CapStruct_permit_store_local_cap := T; 
     CapStruct_permit_store_cap := T; 
     CapStruct_permit_load_cap := T; 
     CapStruct_permit_store := T; 
     CapStruct_permit_load := T; 
     CapStruct_permit_execute := T; 
     CapStruct_global := T; 
     CapStruct_sealed := F; 
     CapStruct_address := ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)); 
     CapStruct_base := ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)); 
     CapStruct_length :=       
((vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                     B1]
         :  64 words$word)) |>))`;


val _ = Define `
((null_cap_bits:(256)words$word)=  ((capStructToMemBits256 null_cap  :  256 words$word)))`;


(*val capStructToMemBits : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty256*)

val _ = Define `
 ((capStructToMemBits:cheri_sequential_types$CapStruct ->(256)words$word) cap=   
 ((xor_vec ((capStructToMemBits256 cap  :  256 words$word)) null_cap_bits  :  256 words$word)))`;


(*val memBitsToCapBits : bool -> Machine_word.mword Machine_word.ty256 -> Machine_word.mword Machine_word.ty257*)

val _ = Define `
 ((memBitsToCapBits:bool ->(256)words$word ->(257)words$word) tag b=   
 ((concat_vec ((bool_to_bits tag  :  1 words$word)) ((xor_vec b null_cap_bits  :  256 words$word))
     :  257 words$word)))`;


(*val setCapPerms : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty31 -> Cheri_sequential_types.CapStruct*)

val _ = Define `
 ((setCapPerms:cheri_sequential_types$CapStruct ->(31)words$word -> cheri_sequential_types$CapStruct) cap perms=   
 ((cap with<|
     CapStruct_uperms := ((subrange_vec_dec perms (( 30 : int):sail_values$ii) (( 15 : int):sail_values$ii)  :  16 words$word)); CapStruct_perm_reserved11_14 :=
       ((subrange_vec_dec perms (( 14 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  4 words$word)); CapStruct_access_system_regs :=
       ((bit_to_bool ((access_vec_dec perms (( 10 : int):sail_values$ii))))); CapStruct_permit_unseal :=
       ((bit_to_bool ((access_vec_dec perms (( 9 : int):sail_values$ii))))); CapStruct_permit_ccall :=
       ((bit_to_bool ((access_vec_dec perms (( 8 : int):sail_values$ii))))); CapStruct_permit_seal :=
       ((bit_to_bool ((access_vec_dec perms (( 7 : int):sail_values$ii))))); CapStruct_permit_store_local_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 6 : int):sail_values$ii))))); CapStruct_permit_store_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 5 : int):sail_values$ii))))); CapStruct_permit_load_cap :=
       ((bit_to_bool ((access_vec_dec perms (( 4 : int):sail_values$ii))))); CapStruct_permit_store :=
       ((bit_to_bool ((access_vec_dec perms (( 3 : int):sail_values$ii))))); CapStruct_permit_load :=
       ((bit_to_bool ((access_vec_dec perms (( 2 : int):sail_values$ii))))); CapStruct_permit_execute :=
       ((bit_to_bool ((access_vec_dec perms (( 1 : int):sail_values$ii))))); CapStruct_global :=
       ((bit_to_bool ((access_vec_dec perms (( 0 : int):sail_values$ii)))))|>)))`;


(*val sealCap : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty24 -> (bool * Cheri_sequential_types.CapStruct)*)

val _ = Define `
 ((sealCap:cheri_sequential_types$CapStruct ->(24)words$word -> bool#cheri_sequential_types$CapStruct) cap otype=  (T, (cap with<| CapStruct_sealed := T; CapStruct_otype := otype|>)))`;


(*val getCapTop : Cheri_sequential_types.CapStruct -> Num.integer*)

val _ = Define `
 ((getCapTop:cheri_sequential_types$CapStruct -> int) c=  (((lem$w2ui c.CapStruct_base)) + ((lem$w2ui c.CapStruct_length))))`;


(*val getCapOffset : Cheri_sequential_types.CapStruct -> Num.integer*)

val _ = Define `
 ((getCapOffset:cheri_sequential_types$CapStruct -> int) c=   
 (hardware_mod ((((lem$w2ui c.CapStruct_address)) - ((lem$w2ui c.CapStruct_base))))
     ((pow2 (( 64 : int):sail_values$ii)))))`;


(*val getCapLength : Cheri_sequential_types.CapStruct -> Num.integer*)

val _ = Define `
 ((getCapLength:cheri_sequential_types$CapStruct -> int) c=  (lem$w2ui c.CapStruct_length))`;


(*val getCapCursor : Cheri_sequential_types.CapStruct -> Num.integer*)

val _ = Define `
 ((getCapCursor:cheri_sequential_types$CapStruct -> int) c=  (lem$w2ui c.CapStruct_address))`;


(*val incCapOffset : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty64 -> (bool * Cheri_sequential_types.CapStruct)*)

val _ = Define `
 ((incCapOffset:cheri_sequential_types$CapStruct ->(64)words$word -> bool#cheri_sequential_types$CapStruct) c delta=   
 (let (newAddr : 64 cheri_sequential_types$bits) = ((add_vec c.CapStruct_address delta  :  64 words$word)) in
   (T, (c with<| CapStruct_address := newAddr|>))))`;


(*val setCapBounds : Cheri_sequential_types.CapStruct -> Machine_word.mword Machine_word.ty64 -> Machine_word.mword Machine_word.ty65 -> (bool * Cheri_sequential_types.CapStruct)*)

val _ = Define `
 ((setCapBounds:cheri_sequential_types$CapStruct ->(64)words$word ->(65)words$word -> bool#cheri_sequential_types$CapStruct) cap base top=   
 (let (length : 65 cheri_sequential_types$bits) =     
((sub_vec top ((concat_vec (vec_of_bits [B0]  :  1 words$word) base  :  65 words$word))  :  65 words$word)) in
   (T,
    (cap with<|
      CapStruct_base := base; CapStruct_length :=
        ((subrange_vec_dec length (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word)); CapStruct_address := base|>))))`;


(*val undefined_ast : unit -> Cheri_sequential_types.M Cheri_sequential_types.ast*)

val _ = Define `
 ((undefined_ast:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$ast),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__0 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__1 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__2 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__3 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__4 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__5 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__6 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__7 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__8 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__9 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__10 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__11 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__12 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__13 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__14 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__15 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__16 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__17 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__18 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__19 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__20 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__21 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__22 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__23 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__24 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__25 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__26 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__27 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__28 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__29 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__30 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__31 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__32 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__33 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__34 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__35 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__36 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__37 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__38 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__39 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__40 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__41 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__42 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__43 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__44 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__45 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__46 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__47 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__48 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__49 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__50 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__51 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__52 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__53 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__54 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__55 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__56 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__57 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__58 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__59 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__60 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__61 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__62 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__63 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__64 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__65 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__66 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__67 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__68 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__69 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__70 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__71 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__72 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__73 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__74 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__75 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__76 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__77 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__78 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__79 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__80 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__81 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__82 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__83 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__84 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__85 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__86 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__87 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__88 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__89 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__90 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__91 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__92 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__93 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__94 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__95 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__96 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__97 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__98 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__99 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__100 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__101 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__102 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__103 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__104 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__105 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__106 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__107 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__108 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__109 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__110 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__111 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__112 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__113 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__114 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__115 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__116 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__117 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__118 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__119 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__120 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__121 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__122 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__123 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__124 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__125 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__126 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__127 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__128 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__129 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__130 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__131 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__132 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__133 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__134 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__135 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__136 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__137 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__138 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__139 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__140 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__141 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__142 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__143 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__144 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__145 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__146 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__147 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__148 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__149 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__150 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__151 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__152 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 26 : int):sail_values$ii)  : ( 26 words$word) cheri_sequential_types$M) (\ (w__153 :  26 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 26 : int):sail_values$ii)  : ( 26 words$word) cheri_sequential_types$M) (\ (w__154 :  26 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__155 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__156 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__157 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__158 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__159 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__160 :  16 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__161 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__162 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__163 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__164 :  16 words$word) .  bindS   
(undefined_Comparison () ) (\ (w__165 : cheri_sequential_types$Comparison) .  bindS   
(undefined_bool0 () ) (\ (w__166 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__167 : bool) .  bindS (seqS (seqS (seqS (seqS (seqS   
(undefined_unit () )   
(undefined_unit () ))   
(undefined_unit () ))   
(undefined_unit () ))   
(undefined_unit () ))
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__168 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__169 :  5 words$word) .  bindS   
(undefined_Comparison () ) (\ (w__170 : cheri_sequential_types$Comparison) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__171 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__172 :  16 words$word) .  bindS   
(undefined_Comparison () ) (\ (w__173 : cheri_sequential_types$Comparison) .  bindS   
(undefined_WordType () ) (\ (w__174 : cheri_sequential_types$WordType) .  bindS   
(undefined_bool0 () ) (\ (w__175 : bool) .  bindS   
(undefined_bool0 () ) (\ (w__176 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__177 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__178 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__179 :  16 words$word) .  bindS   
(undefined_WordType () ) (\ (w__180 : cheri_sequential_types$WordType) .  bindS   
(undefined_bool0 () ) (\ (w__181 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__182 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__183 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__184 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__185 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__186 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__187 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__188 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__189 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__190 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__191 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__192 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__193 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__194 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__195 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__196 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__197 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__198 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__199 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__200 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__201 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__202 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__203 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__204 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__205 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__206 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__207 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__208 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__209 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__210 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__211 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__212 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__213 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__214 :  16 words$word) .  bindS (seqS   
(undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__215 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__216 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 3 : int):sail_values$ii)  : ( 3 words$word) cheri_sequential_types$M) (\ (w__217 :  3 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__218 : bool) .  bindS (seqS   
(undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__219 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__220 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 3 : int):sail_values$ii)  : ( 3 words$word) cheri_sequential_types$M) (\ (w__221 :  3 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__222 : bool) .  bindS (seqS (seqS (seqS (seqS   
(undefined_unit () )   
(undefined_unit () ))   
(undefined_unit () ))   
(undefined_unit () ))
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__223 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__224 :  5 words$word) .  bindS (seqS   
(undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__225 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__226 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__227 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__228 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__229 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__230 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__231 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__232 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__233 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__234 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__235 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__236 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__237 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__238 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__239 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__240 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__241 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__242 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__243 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__244 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__245 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__246 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__247 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__248 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__249 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__250 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__251 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__252 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__253 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__254 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__255 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__256 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__257 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__258 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__259 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__260 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__261 :  5 words$word) .  bindS   
(undefined_CPtrCmpOp () ) (\ (w__262 : cheri_sequential_types$CPtrCmpOp) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__263 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__264 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__265 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__266 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__267 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):sail_values$ii)  : ( 11 words$word) cheri_sequential_types$M) (\ (w__268 :  11 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__269 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__270 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__271 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__272 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__273 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__274 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__275 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__276 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):sail_values$ii)  : ( 11 words$word) cheri_sequential_types$M) (\ (w__277 :  11 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__278 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__279 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__280 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__281 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__282 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__283 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__284 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__285 :  5 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__286 : bool) .  bindS   
(undefined_ClearRegSet () ) (\ (w__287 : cheri_sequential_types$ClearRegSet) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__288 :  16 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__289 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__290 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__291 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__292 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__293 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__294 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__295 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__296 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__297 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__298 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__299 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__300 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__301 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__302 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__303 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__304 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__305 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__306 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__307 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__308 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__309 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__310 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__311 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__312 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__313 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__314 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__315 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):sail_values$ii)  : ( 11 words$word) cheri_sequential_types$M) (\ (w__316 :  11 words$word) .  bindS (seqS   
(undefined_unit () )
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M)) (\ (w__317 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__318 :  16 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__319 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__320 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__321 :  16 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__322 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__323 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__324 :  5 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__325 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__326 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__327 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__328 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__329 :  8 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__330 : bool) .  bindS   
(undefined_WordType () ) (\ (w__331 : cheri_sequential_types$WordType) .  bindS   
(undefined_bool0 () ) (\ (w__332 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__333 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__334 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__335 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__336 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__337 :  8 words$word) .  bindS   
(undefined_WordType () ) (\ (w__338 : cheri_sequential_types$WordType) .  bindS   
(undefined_bool0 () ) (\ (w__339 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__340 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__341 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__342 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__343 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):sail_values$ii)  : ( 11 words$word) cheri_sequential_types$M) (\ (w__344 :  11 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__345 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__346 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__347 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__348 :  5 words$word) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 11 : int):sail_values$ii)  : ( 11 words$word) cheri_sequential_types$M) (\ (w__349 :  11 words$word) .  bindS   
(undefined_bool0 () ) (\ (w__350 : bool) .  bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 5 : int):sail_values$ii)  : ( 5 words$word) cheri_sequential_types$M) (\ (w__351 :  5 words$word) .  seqS   
(undefined_unit () )   
(internal_pick
     [DADDIU (w__0,w__1,w__2);DADDU (w__3,w__4,w__5);DADDI (w__6,w__7,w__8);DADD (w__9,w__10,w__11);ADD (w__12,w__13,w__14);ADDI (w__15,w__16,w__17);ADDU (w__18,w__19,w__20);ADDIU (w__21,w__22,w__23);DSUBU (w__24,w__25,w__26);DSUB (w__27,w__28,w__29);SUB0 (w__30,w__31,w__32);SUBU (w__33,w__34,w__35);AND (w__36,w__37,w__38);ANDI (w__39,w__40,w__41);OR (w__42,w__43,w__44);ORI (w__45,w__46,w__47);NOR (w__48,w__49,w__50);XOR (w__51,w__52,w__53);XORI (w__54,w__55,w__56);LUI (w__57,w__58);DSLL (w__59,w__60,w__61);DSLL32 (w__62,w__63,w__64);DSLLV (w__65,w__66,w__67);DSRA (w__68,w__69,w__70);DSRA32 (w__71,w__72,w__73);DSRAV (w__74,w__75,w__76);DSRL (w__77,w__78,w__79);DSRL32 (w__80,w__81,w__82);DSRLV (w__83,w__84,w__85);SLL (w__86,w__87,w__88);SLLV (w__89,w__90,w__91);SRA (w__92,w__93,w__94);SRAV (w__95,w__96,w__97);SRL (w__98,w__99,w__100);SRLV (w__101,w__102,w__103);SLT (w__104,w__105,w__106);SLTI (w__107,w__108,w__109);SLTU (w__110,w__111,w__112);SLTIU (w__113,w__114,w__115);MOVN (w__116,w__117,w__118);MOVZ (w__119,w__120,w__121);MFHI w__122;MFLO w__123;MTHI w__124;MTLO w__125;MUL (w__126,w__127,w__128);MULT (w__129,w__130);MULTU (w__131,w__132);DMULT (w__133,w__134);DMULTU (w__135,w__136);MADD (w__137,w__138);MADDU (w__139,w__140);MSUB (w__141,w__142);MSUBU (w__143,w__144);DIV0 (w__145,w__146);DIVU (w__147,w__148);DDIV (w__149,w__150);DDIVU (w__151,w__152);J w__153;JAL w__154;JR w__155;JALR (w__156,w__157);BEQ (w__158,w__159,w__160,w__161,w__162);BCMPZ (w__163,w__164,w__165,w__166,w__167);SYSCALL_THREAD_START () ;ImplementationDefinedStopFetching () ;SYSCALL () ;BREAK () ;WAIT () ;TRAPREG (w__168,w__169,w__170);TRAPIMM (w__171,w__172,w__173);Load (w__174,w__175,w__176,w__177,w__178,w__179);Store (w__180,w__181,w__182,w__183,w__184);LWL (w__185,w__186,w__187);LWR (w__188,w__189,w__190);SWL (w__191,w__192,w__193);SWR (w__194,w__195,w__196);LDL (w__197,w__198,w__199);LDR (w__200,w__201,w__202);SDL (w__203,w__204,w__205);SDR (w__206,w__207,w__208);CACHE (w__209,w__210,w__211);PREF (w__212,w__213,w__214);SYNC () ;MFC0 (w__215,w__216,w__217,w__218);HCF () ;MTC0 (w__219,w__220,w__221,w__222);TLBWI () ;TLBWR () ;TLBR () ;TLBP () ;RDHWR (w__223,w__224);ERET () ;CGetPerm (w__225,w__226);CGetType (w__227,w__228);CGetBase (w__229,w__230);CGetLen (w__231,w__232);CGetTag (w__233,w__234);CGetSealed (w__235,w__236);CGetOffset (w__237,w__238);CGetAddr (w__239,w__240);CGetPCC w__241;CGetPCCSetOffset (w__242,w__243);CGetCause w__244;CSetCause w__245;CReadHwr (w__246,w__247);CWriteHwr (w__248,w__249);CAndPerm (w__250,w__251,w__252);CToPtr (w__253,w__254,w__255);CSub (w__256,w__257,w__258);CPtrCmp (w__259,w__260,w__261,w__262);CIncOffset (w__263,w__264,w__265);CIncOffsetImmediate (w__266,w__267,w__268);CSetOffset (w__269,w__270,w__271);CSetBounds (w__272,w__273,w__274);CSetBoundsImmediate (w__275,w__276,w__277);CSetBoundsExact (w__278,w__279,w__280);CClearTag (w__281,w__282);CMOVX (w__283,w__284,w__285,w__286);ClearRegs (w__287,w__288);CFromPtr (w__289,w__290,w__291);CBuildCap (w__292,w__293,w__294);CCopyType (w__295,w__296,w__297);CCheckPerm (w__298,w__299);CCheckType (w__300,w__301);CTestSubset (w__302,w__303,w__304);CSeal (w__305,w__306,w__307);CCSeal (w__308,w__309,w__310);CUnseal (w__311,w__312,w__313);CCall (w__314,w__315,w__316);CReturn () ;CBX (w__317,w__318,w__319);CBZ (w__320,w__321,w__322);CJALR (w__323,w__324,w__325);CLoad (w__326,w__327,w__328,w__329,w__330,w__331,w__332);CStore (w__333,w__334,w__335,w__336,w__337,w__338,w__339);CSC (w__340,w__341,w__342,w__343,w__344,w__345);CLC (w__346,w__347,w__348,w__349,w__350);C2Dump w__351;RI () ])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`;


(*val execute : Cheri_sequential_types.ast -> Cheri_sequential_types.M unit*)

(*val decode : Machine_word.mword Machine_word.ty32 -> Maybe.maybe Cheri_sequential_types.ast*)

val _ = Define `
((DDC:(5)words$word)=  ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))`;


val _ = Define `
((IDC:(5)words$word)=  ((vec_of_bits [B1;B1;B0;B1;B0]  :  5 words$word)))`;


val _ = Define `
((KR1C:(5)words$word)=  ((vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))`;


val _ = Define `
((KR2C:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))`;


val _ = Define `
((KCC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))`;


val _ = Define `
((KDC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))`;


val _ = Define `
((EPCC:(5)words$word)=  ((vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word)))`;


val _ = Define `
((CapRegs:(((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CapReg))sail_values$register_ref)list)=  
 ([C31_ref;C30_ref;C29_ref;C28_ref;C27_ref;C26_ref;C25_ref;C24_ref;C23_ref;C22_ref;C21_ref;C20_ref;C19_ref;C18_ref;C17_ref;C16_ref;C15_ref;C14_ref;C13_ref;C12_ref;C11_ref;
   C10_ref;C09_ref;C08_ref;C07_ref;C06_ref;C05_ref;C04_ref;C03_ref;C02_ref;C01_ref;C00_ref]))`;


val _ = Define `
 ((max_otype:int)=  (MAX0 (( 24 : int):sail_values$ii)))`;


val _ = Define `
 ((have_cp2:bool)=  T)`;


(*val readCapReg : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M Cheri_sequential_types.CapStruct*)

val _ = Define `
 ((readCapReg:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CapStruct),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) n=   
 (let i = (lem$w2ui n) in bindS
   (read_regS ((access_list_dec CapRegs i  : (cheri_sequential_types$regstate, cheri_sequential_types$register_value, ( 257 words$word)) sail_values$register_ref))
     : ( 257 words$word) cheri_sequential_types$M) (\ (w__0 :  257 words$word) . 
   returnS ((capRegToCapStruct w__0)))))`;


(*val writeCapReg : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.CapStruct -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((writeCapReg:(5)words$word -> cheri_sequential_types$CapStruct ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) n cap=   
 (let i = (lem$w2ui n) in
   write_regS
     ((access_list_dec CapRegs i  : (cheri_sequential_types$regstate, cheri_sequential_types$register_value, ( 257 words$word)) sail_values$register_ref))
     ((capStructToCapReg cap  :  257 words$word))))`;


(*val CapEx_of_num : Num.integer -> Cheri_sequential_types.CapEx*)

val _ = Define `
 ((CapEx_of_num:int -> cheri_sequential_types$CapEx) arg_=   
 (let l__32 = arg_ in
   if (((l__32 = (( 0 : int):sail_values$ii)))) then CapEx_None
   else if (((l__32 = (( 1 : int):sail_values$ii)))) then CapEx_LengthViolation
   else if (((l__32 = (( 2 : int):sail_values$ii)))) then CapEx_TagViolation
   else if (((l__32 = (( 3 : int):sail_values$ii)))) then CapEx_SealViolation
   else if (((l__32 = (( 4 : int):sail_values$ii)))) then CapEx_TypeViolation
   else if (((l__32 = (( 5 : int):sail_values$ii)))) then CapEx_CallTrap
   else if (((l__32 = (( 6 : int):sail_values$ii)))) then CapEx_ReturnTrap
   else if (((l__32 = (( 7 : int):sail_values$ii)))) then CapEx_TSSUnderFlow
   else if (((l__32 = (( 8 : int):sail_values$ii)))) then CapEx_UserDefViolation
   else if (((l__32 = (( 9 : int):sail_values$ii)))) then CapEx_TLBNoStoreCap
   else if (((l__32 = (( 10 : int):sail_values$ii)))) then CapEx_InexactBounds
   else if (((l__32 = (( 11 : int):sail_values$ii)))) then CapEx_GlobalViolation
   else if (((l__32 = (( 12 : int):sail_values$ii)))) then CapEx_PermitExecuteViolation
   else if (((l__32 = (( 13 : int):sail_values$ii)))) then CapEx_PermitLoadViolation
   else if (((l__32 = (( 14 : int):sail_values$ii)))) then CapEx_PermitStoreViolation
   else if (((l__32 = (( 15 : int):sail_values$ii)))) then CapEx_PermitLoadCapViolation
   else if (((l__32 = (( 16 : int):sail_values$ii)))) then CapEx_PermitStoreCapViolation
   else if (((l__32 = (( 17 : int):sail_values$ii)))) then CapEx_PermitStoreLocalCapViolation
   else if (((l__32 = (( 18 : int):sail_values$ii)))) then CapEx_PermitSealViolation
   else if (((l__32 = (( 19 : int):sail_values$ii)))) then CapEx_AccessSystemRegsViolation
   else if (((l__32 = (( 20 : int):sail_values$ii)))) then CapEx_PermitCCallViolation
   else if (((l__32 = (( 21 : int):sail_values$ii)))) then CapEx_AccessCCallIDCViolation
   else CapEx_PermitUnsealViolation))`;


(*val num_of_CapEx : Cheri_sequential_types.CapEx -> Num.integer*)

val _ = Define `
 ((num_of_CapEx:cheri_sequential_types$CapEx -> int) arg_=   
 ((case arg_ of
     CapEx_None => (( 0 : int):sail_values$ii)
   | CapEx_LengthViolation => (( 1 : int):sail_values$ii)
   | CapEx_TagViolation => (( 2 : int):sail_values$ii)
   | CapEx_SealViolation => (( 3 : int):sail_values$ii)
   | CapEx_TypeViolation => (( 4 : int):sail_values$ii)
   | CapEx_CallTrap => (( 5 : int):sail_values$ii)
   | CapEx_ReturnTrap => (( 6 : int):sail_values$ii)
   | CapEx_TSSUnderFlow => (( 7 : int):sail_values$ii)
   | CapEx_UserDefViolation => (( 8 : int):sail_values$ii)
   | CapEx_TLBNoStoreCap => (( 9 : int):sail_values$ii)
   | CapEx_InexactBounds => (( 10 : int):sail_values$ii)
   | CapEx_GlobalViolation => (( 11 : int):sail_values$ii)
   | CapEx_PermitExecuteViolation => (( 12 : int):sail_values$ii)
   | CapEx_PermitLoadViolation => (( 13 : int):sail_values$ii)
   | CapEx_PermitStoreViolation => (( 14 : int):sail_values$ii)
   | CapEx_PermitLoadCapViolation => (( 15 : int):sail_values$ii)
   | CapEx_PermitStoreCapViolation => (( 16 : int):sail_values$ii)
   | CapEx_PermitStoreLocalCapViolation => (( 17 : int):sail_values$ii)
   | CapEx_PermitSealViolation => (( 18 : int):sail_values$ii)
   | CapEx_AccessSystemRegsViolation => (( 19 : int):sail_values$ii)
   | CapEx_PermitCCallViolation => (( 20 : int):sail_values$ii)
   | CapEx_AccessCCallIDCViolation => (( 21 : int):sail_values$ii)
   | CapEx_PermitUnsealViolation => (( 22 : int):sail_values$ii)
   )))`;


(*val undefined_CapEx : unit -> Cheri_sequential_types.M Cheri_sequential_types.CapEx*)

val _ = Define `
 ((undefined_CapEx:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CapEx),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =   
 (internal_pick
     [CapEx_None;CapEx_LengthViolation;CapEx_TagViolation;CapEx_SealViolation;CapEx_TypeViolation;CapEx_CallTrap;CapEx_ReturnTrap;CapEx_TSSUnderFlow;CapEx_UserDefViolation;CapEx_TLBNoStoreCap;CapEx_InexactBounds;CapEx_GlobalViolation;CapEx_PermitExecuteViolation;CapEx_PermitLoadViolation;CapEx_PermitStoreViolation;CapEx_PermitLoadCapViolation;CapEx_PermitStoreCapViolation;CapEx_PermitStoreLocalCapViolation;CapEx_PermitSealViolation;CapEx_AccessSystemRegsViolation;CapEx_PermitCCallViolation;CapEx_AccessCCallIDCViolation;CapEx_PermitUnsealViolation]))`;


(*val CapExCode : Cheri_sequential_types.CapEx -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((CapExCode:cheri_sequential_types$CapEx ->(8)words$word) ex=   
 ((case ex of
     CapEx_None => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word)
   | CapEx_LengthViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1]  :  8 words$word)
   | CapEx_TagViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0]  :  8 words$word)
   | CapEx_SealViolation => (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1]  :  8 words$word)
   | CapEx_TypeViolation => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0]  :  8 words$word)
   | CapEx_CallTrap => (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1]  :  8 words$word)
   | CapEx_ReturnTrap => (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B0]  :  8 words$word)
   | CapEx_TSSUnderFlow => (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1]  :  8 words$word)
   | CapEx_UserDefViolation => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B0]  :  8 words$word)
   | CapEx_TLBNoStoreCap => (vec_of_bits [B0;B0;B0;B0;B1;B0;B0;B1]  :  8 words$word)
   | CapEx_InexactBounds => (vec_of_bits [B0;B0;B0;B0;B1;B0;B1;B0]  :  8 words$word)
   | CapEx_GlobalViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B0]  :  8 words$word)
   | CapEx_PermitExecuteViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B0;B1]  :  8 words$word)
   | CapEx_PermitLoadViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B0]  :  8 words$word)
   | CapEx_PermitStoreViolation => (vec_of_bits [B0;B0;B0;B1;B0;B0;B1;B1]  :  8 words$word)
   | CapEx_PermitLoadCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B0]  :  8 words$word)
   | CapEx_PermitStoreCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B0;B1]  :  8 words$word)
   | CapEx_PermitStoreLocalCapViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B0]  :  8 words$word)
   | CapEx_PermitSealViolation => (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1]  :  8 words$word)
   | CapEx_AccessSystemRegsViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B0]  :  8 words$word)
   | CapEx_PermitCCallViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B0;B1]  :  8 words$word)
   | CapEx_AccessCCallIDCViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B1;B0]  :  8 words$word)
   | CapEx_PermitUnsealViolation => (vec_of_bits [B0;B0;B0;B1;B1;B0;B1;B1]  :  8 words$word)
   )))`;


(*val undefined_CapCauseReg : unit -> Cheri_sequential_types.M Cheri_sequential_types.CapCauseReg*)

val _ = Define `
 ((undefined_CapCauseReg:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((cheri_sequential_types$CapCauseReg),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__0 :  16 words$word) . 
   internal_pick [Mk_CapCauseReg w__0])))`;


val _ = Define `
 ((get_CapCauseReg:cheri_sequential_types$CapCauseReg ->(16)words$word) (Mk_CapCauseReg (v))=  v)`;


val _ = Define `
 ((set_CapCauseReg:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CapCauseReg))sail_values$register_ref ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ r . 
   let r = (Mk_CapCauseReg v) in
   write_regS r_ref r)))`;


val _ = Define `
 ((get_CapCauseReg_ExcCode:cheri_sequential_types$CapCauseReg ->(8)words$word) (Mk_CapCauseReg (v))=  ((subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  8 words$word)))`;


val _ = Define `
 ((set_CapCauseReg_ExcCode:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CapCauseReg))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CapCauseReg) . 
   let r = ((get_CapCauseReg w__0  :  16 words$word)) in
   let r = ((update_subrange_vec_dec r (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) v  :  16 words$word)) in
   write_regS r_ref (Mk_CapCauseReg r))))`;


val _ = Define `
 ((update_CapCauseReg_ExcCode:cheri_sequential_types$CapCauseReg ->(8)words$word -> cheri_sequential_types$CapCauseReg) (Mk_CapCauseReg (v)) x=   
 (Mk_CapCauseReg ((update_subrange_vec_dec v (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii) x  :  16 words$word))))`;


(*val _get_CapCauseReg_RegNum : Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8*)

val _ = Define `
 ((get_CapCauseReg_RegNum:cheri_sequential_types$CapCauseReg ->(8)words$word) (Mk_CapCauseReg (v))=  ((subrange_vec_dec v (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word)))`;


(*val _set_CapCauseReg_RegNum : Sail_values.register_ref Cheri_sequential_types.regstate Cheri_sequential_types.register_value Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((set_CapCauseReg_RegNum:((cheri_sequential_types$regstate),(cheri_sequential_types$register_value),(cheri_sequential_types$CapCauseReg))sail_values$register_ref ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r_ref v=  (bindS   
(read_regS r_ref) (\ (w__0 : cheri_sequential_types$CapCauseReg) . 
   let r = ((get_CapCauseReg w__0  :  16 words$word)) in
   let r = ((update_subrange_vec_dec r (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii) v  :  16 words$word)) in
   write_regS r_ref (Mk_CapCauseReg r))))`;


(*val _update_CapCauseReg_RegNum : Cheri_sequential_types.CapCauseReg -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.CapCauseReg*)

val _ = Define `
 ((update_CapCauseReg_RegNum:cheri_sequential_types$CapCauseReg ->(8)words$word -> cheri_sequential_types$CapCauseReg) (Mk_CapCauseReg (v)) x=   
 (Mk_CapCauseReg ((update_subrange_vec_dec v (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii) x  :  16 words$word))))`;


(*val execute_branch_pcc : Cheri_sequential_types.CapStruct -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_branch_pcc:cheri_sequential_types$CapStruct ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) newPCC=  (seqS (seqS   
(write_regS
     delayedPC_ref
     ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapOffset newPCC))  :  64 words$word)))   
(write_regS delayedPCC_ref ((capStructToCapReg newPCC  :  257 words$word))))   
(write_regS branchPending_ref (vec_of_bits [B1]  :  1 words$word))))`;


(*val ERETHook : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((ERETHook:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (read_regS C31_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__0 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS nextPCC_ref w__0)
   (read_regS C31_ref  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__1 : cheri_sequential_types$CapReg) .  write_regS delayedPCC_ref w__1))))`;


(*val raise_c2_exception8 : forall 'o. Cheri_sequential_types.CapEx -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.M 'o*)

val _ = Define `
 ((raise_c2_exception8:cheri_sequential_types$CapEx ->(8)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) capEx regnum=  (seqS (seqS   
(set_CapCauseReg_ExcCode CapCause_ref ((CapExCode capEx  :  8 words$word)))   
(set_CapCauseReg_RegNum CapCause_ref regnum))   
(let mipsEx =     
(if ((((((capEx = CapEx_CallTrap))) \/ (((capEx = CapEx_ReturnTrap)))))) then C2Trap
     else C2E) in
   SignalException mipsEx)))`;


(*val raise_c2_exception : forall 'o. Cheri_sequential_types.CapEx -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M 'o*)

val _ = Define `
 ((raise_c2_exception:cheri_sequential_types$CapEx ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) capEx regnum=   
 (let reg8 = ((concat_vec (vec_of_bits [B0;B0;B0]  :  3 words$word) regnum  :  8 words$word)) in
   if ((((((capEx = CapEx_AccessSystemRegsViolation))) /\ (((regnum = IDC)))))) then
     raise_c2_exception8 CapEx_AccessCCallIDCViolation reg8
   else raise_c2_exception8 capEx reg8))`;


(*val raise_c2_exception_noreg : forall 'o. Cheri_sequential_types.CapEx -> Cheri_sequential_types.M 'o*)

val _ = Define `
 ((raise_c2_exception_noreg:cheri_sequential_types$CapEx ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(('o,(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) capEx=   
 (raise_c2_exception8 capEx (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1]  :  8 words$word)))`;


(*val pcc_access_system_regs : unit -> Cheri_sequential_types.M bool*)

val _ = Define `
 ((pcc_access_system_regs:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__0 :  257 words$word) . 
   let pcc = (capRegToCapStruct w__0) in
   returnS pcc.CapStruct_access_system_regs)))`;


(*val register_inaccessible : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M bool*)

val _ = Define `
 ((register_inaccessible:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) r=  (bindS
   (read_regS inCCallDelay_ref  : ( 1 words$word) cheri_sequential_types$M) (\ (w__0 :  1 words$word) . 
   if ((((((r = IDC))) /\ ((bits_to_bool w__0))))) then returnS T
   else
     let b__0 = r in
     let (is_sys_reg : bool) =       
(if (((b__0 = (vec_of_bits [B1;B1;B0;B1;B1]  :  5 words$word)))) then T
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B0;B0]  :  5 words$word)))) then T
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))) then T
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B0]  :  5 words$word)))) then T
       else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word)))) then T
       else F) in
     if is_sys_reg then bindS (pcc_access_system_regs () ) (\ (w__1 : bool) .  returnS ((~ w__1)))
     else returnS F)))`;


(*val MEMr_tagged : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M (bool * Machine_word.mword Machine_word.ty256)*)

val _ = Define `
 ((MEMr_tagged:(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool#(256)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr=  (bindS (seqS   
(assert_expS (((((hardware_mod ((lem$w2ui addr)) cap_size)) = (( 0 : int):sail_values$ii)))) "")   
(read_tag_bool instance_Sail_values_Bitvector_Machine_word_mword_dict addr)) (\ tag .  bindS
   (MEMr instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size  : ( 256 words$word) cheri_sequential_types$M) (\ data . 
   let ((cast_0 : bool), (cast_1 :  256 words$word)) = (tag, (reverse_endianness data  :  256 words$word)) in
   returnS (cast_0, (words$w2w cast_1  :  256 words$word))))))`;


(*val MEMr_tagged_reserve : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M (bool * Machine_word.mword Machine_word.ty256)*)

val _ = Define `
 ((MEMr_tagged_reserve:(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool#(256)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr=  (bindS (seqS   
(assert_expS (((((hardware_mod ((lem$w2ui addr)) cap_size)) = (( 0 : int):sail_values$ii)))) "")   
(read_tag_bool instance_Sail_values_Bitvector_Machine_word_mword_dict addr)) (\ tag .  bindS
   (MEMr_reserve instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size  : ( 256 words$word) cheri_sequential_types$M) (\ data . 
   let ((cast_0 : bool), (cast_1 :  256 words$word)) = (tag, (reverse_endianness data  :  256 words$word)) in
   returnS (cast_0, (words$w2w cast_1  :  256 words$word))))))`;


(*val MEMw_tagged : Machine_word.mword Machine_word.ty64 -> bool -> Machine_word.mword Machine_word.ty256 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((MEMw_tagged:(64)words$word -> bool ->(256)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr tag data=  (seqS (seqS (seqS   
(assert_expS (((((hardware_mod ((lem$w2ui addr)) cap_size)) = (( 0 : int):sail_values$ii)))) "")   
(MEMea instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size))   
(MEMval instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size ((reverse_endianness data  :  256 words$word)))) (write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr tag)))`;


(*val MEMw_tagged_conditional : Machine_word.mword Machine_word.ty64 -> bool -> Machine_word.mword Machine_word.ty256 -> Cheri_sequential_types.M bool*)

val _ = Define `
 ((MEMw_tagged_conditional:(64)words$word -> bool ->(256)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr tag data=  (bindS (seqS (seqS   
(assert_expS (((((hardware_mod ((lem$w2ui addr)) cap_size)) = (( 0 : int):sail_values$ii)))) "")   
(MEMea_conditional instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size))   
(MEMval_conditional instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr cap_size ((reverse_endianness data  :  256 words$word)))) (\ success .  seqS
   (if success then write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict addr tag else returnS () ) (returnS success))))`;


val _ = Define `
 ((cap_addr_mask:(64)words$word)=  
 ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((((pow2 (( 64 : int):sail_values$ii))) - cap_size))
    :  64 words$word)))`;


(*val MEMw_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Machine_word.mword 'p8_times_n_ -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((MEMw_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr size1 data=   
 (let ledata = ((reverse_endianness data  :  'p8_times_n_ words$word)) in
   if (((addr = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0]
            :  64 words$word)))) then seqS     
(write_regS UART_WDATA_ref ((subrange_vec_dec ledata (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word)))     
(write_regS UART_WRITTEN_ref (vec_of_bits [B1]  :  1 words$word))
   else seqS (seqS (seqS     
(assert_expS (((((and_vec addr cap_addr_mask  :  64 words$word)) = ((and_vec
                         ((add_vec addr
                             ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
                                 ((size1 - (( 1 : int):sail_values$ii)))
                                :  64 words$word))
                            :  64 words$word)) cap_addr_mask
                        :  64 words$word))))) "")     
(MEMea instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1))     
(MEMval instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1 ledata)) (write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict ((and_vec addr cap_addr_mask  :  64 words$word)) F)))`;


(*val MEMw_conditional_wrapper : forall   'p8_times_n_ . Size 'p8_times_n_ => Machine_word.mword Machine_word.ty64 -> Num.integer -> Machine_word.mword 'p8_times_n_ -> Cheri_sequential_types.M bool*)

val _ = Define `
 ((MEMw_conditional_wrapper:(64)words$word -> int -> 'p8_times_n_ words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((bool),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr size1 data=  (bindS (seqS (seqS   
(assert_expS (((((and_vec addr cap_addr_mask  :  64 words$word)) = ((and_vec
                       ((add_vec addr
                           ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
                               ((size1 - (( 1 : int):sail_values$ii)))
                              :  64 words$word))
                          :  64 words$word)) cap_addr_mask
                      :  64 words$word))))) "")   
(MEMea_conditional instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1))   
(MEMval_conditional instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict addr size1 ((reverse_endianness data  :  'p8_times_n_ words$word)))) (\ success .  seqS
   (if success then write_tag_bool 
  instance_Sail_values_Bitvector_Machine_word_mword_dict ((and_vec addr cap_addr_mask  :  64 words$word)) F
    else returnS () )   
(returnS success))))`;


(*val addrWrapper : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.MemAccessType -> Cheri_sequential_types.WordType -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64)*)

val _ = Define `
 ((addrWrapper:(64)words$word -> cheri_sequential_types$MemAccessType -> cheri_sequential_types$WordType ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) addr accessType width=   
 (let capno = ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)) in bindS   
(readCapReg capno) (\ cap .  seqS (seqS
   (if ((~ cap.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation capno
    else if cap.CapStruct_sealed then raise_c2_exception CapEx_SealViolation capno
    else returnS () )
   (case accessType of
     Instruction =>
      if ((~ cap.CapStruct_permit_execute)) then
        raise_c2_exception CapEx_PermitExecuteViolation capno
      else returnS () 
   | LoadData =>
      if ((~ cap.CapStruct_permit_load)) then raise_c2_exception CapEx_PermitLoadViolation capno
      else returnS () 
   | StoreData =>
      if ((~ cap.CapStruct_permit_store)) then raise_c2_exception CapEx_PermitStoreViolation capno
      else returnS () 
   ))   
(let cursor = (getCapCursor cap) in
   let vAddr = (hardware_mod ((cursor + ((lem$w2ui addr)))) ((pow2 (( 64 : int):sail_values$ii)))) in
   let size1 = (wordWidthBytes width) in
   let base = (getCapBase cap) in
   let top = (getCapTop cap) in
   if ((((vAddr + size1)) > top)) then
     (raise_c2_exception CapEx_LengthViolation capno  : ( 64 words$word) cheri_sequential_types$M)
   else if ((vAddr < base)) then (raise_c2_exception CapEx_LengthViolation capno  : ( 64 words$word) cheri_sequential_types$M)
   else returnS ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word))))))`;


(*val TranslatePC : Machine_word.mword Machine_word.ty64 -> Cheri_sequential_types.M (Machine_word.mword Machine_word.ty64)*)

val _ = Define `
 ((TranslatePC:(64)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->((((64)words$word),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) vAddr=  (bindS (seqS   
(incrementCP0Count () )
   (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__0 :  257 words$word) . 
   let pcc = (capRegToCapStruct w__0) in
   let base = (getCapBase pcc) in
   let top = (getCapTop pcc) in
   let absPC = (base + ((lem$w2ui vAddr))) in
   if (((((absPC % (( 4 : int):sail_values$ii))) <> (( 0 : int):sail_values$ii)))) then
     (SignalExceptionBadAddr AdEL
        ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) absPC  :  64 words$word))
       : ( 64 words$word) cheri_sequential_types$M)
   else if ((~ pcc.CapStruct_tag)) then
     (raise_c2_exception_noreg CapEx_TagViolation  : ( 64 words$word) cheri_sequential_types$M)
   else if ((((absPC + (( 4 : int):sail_values$ii))) > top)) then
     (raise_c2_exception_noreg CapEx_LengthViolation  : ( 64 words$word) cheri_sequential_types$M)
   else
     (TLBTranslate ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) absPC  :  64 words$word))
        Instruction
       : ( 64 words$word) cheri_sequential_types$M))))`;


(*val checkCP2usable : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((checkCP2usable:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   if ((~ ((bit_to_bool ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 2 : int):sail_values$ii))))))) then seqS     
(set_CauseReg_CE CP0Cause_ref (vec_of_bits [B1;B0]  :  2 words$word)) (SignalException CpU)
   else returnS () )))`;


val _ = Define `
 ((init_cp2_state:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =   
 (let defaultBits = ((capStructToCapReg default_cap  :  257 words$word)) in seqS (seqS (seqS   
(write_regS PCC_ref defaultBits)   
(write_regS nextPCC_ref defaultBits))   
(write_regS delayedPCC_ref defaultBits))
   (foreachS (index_list (( 0 : int):sail_values$ii) (( 31 : int):sail_values$ii) (( 1 : int):sail_values$ii)) () 
     (\ i unit_var . 
       let idx = ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) i  :  5 words$word)) in
       writeCapReg idx default_cap))))`;


val _ = Define `
 ((cp2_next_pc:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (read_regS nextPCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__0 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS PCC_ref w__0)
   (read_regS inBranchDelay_ref  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__1 :  1 words$word) . 
   if ((bits_to_bool w__1)) then bindS
     (read_regS delayedPCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__2 : cheri_sequential_types$CapReg) . 
     write_regS nextPCC_ref w__2)
   else write_regS inCCallDelay_ref (vec_of_bits [B0]  :  1 words$word)))))`;


(*val capToString : Cheri_sequential_types.CapStruct -> Cheri_sequential_types.M string*)

val _ = Define `
 ((capToString:cheri_sequential_types$CapStruct ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((string),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cap=  (seqS   
(skip () )   
(returnS ((STRCAT " t:"
               ((STRCAT (if cap.CapStruct_tag then "1" else "0")
                   ((STRCAT " s:"
                       ((STRCAT (if cap.CapStruct_sealed then "1" else "0")
                           ((STRCAT " perms:"
                               ((STRCAT
                                   ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                       ((concat_vec (vec_of_bits [B0]  :  1 words$word)
                                           ((getCapPerms cap  :  31 words$word))
                                          :  32 words$word))))
                                   ((STRCAT " type:"
                                       ((STRCAT ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict cap.CapStruct_otype))
                                           ((STRCAT " offset:"
                                               ((STRCAT
                                                   ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                       ((to_bits
                                                           ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
                                                           ((getCapOffset cap))
                                                          :  64 words$word))))
                                                   ((STRCAT " base:"
                                                       ((STRCAT
                                                           ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                               ((to_bits
                                                                   ((make_the_value (( 64 : int):sail_values$ii)
                                                                      :  64 itself))
                                                                   ((getCapBase cap))
                                                                  :  64 words$word))))
                                                           ((STRCAT " length:"
                                                               ((string_of_bits 
  instance_Sail_values_Bitvector_Machine_word_mword_dict
                                                                   ((to_bits
                                                                       ((make_the_value (( 64 : int):sail_values$ii)
                                                                          :  64 itself))
                                                                       ((int_min ((getCapLength cap))
                                                                           ((MAX0 (( 64 : int):sail_values$ii)))))
                                                                      :  64 words$word)))))))))))))))))))))))))))))))))`;


val _ = Define `
 ((dump_cp2_state:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__0 :  257 words$word) .  bindS   
(capToString ((capRegToCapStruct w__0))) (\ (w__1 : string) . 
   let (_ : unit) = (prerr_endline ((STRCAT "DEBUG CAP PCC" w__1))) in
   (foreachS (index_list (( 0 : int):sail_values$ii) (( 31 : int):sail_values$ii) (( 1 : int):sail_values$ii)) () 
     (\ i unit_var .  bindS       
(readCapReg ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) i  :  5 words$word))) (\ (w__2 :
         cheri_sequential_types$CapStruct) .  bindS       
(capToString w__2) (\ (w__3 : string) . 
       returnS (let _ =         
(prerr_endline ((STRCAT "DEBUG CAP REG " ((STRCAT ((string_of_int 
  instance_Show_Show_Num_integer_dict i)) w__3))))) in
       () )))))))))`;


(*val extendLoad : forall 'sz . Size 'sz => Machine_word.mword 'sz -> bool -> Machine_word.mword Machine_word.ty64*)

val _ = Define `
 ((extendLoad:'sz words$word -> bool ->(64)words$word) memResult sign=   
 (if sign then (sign_extend1 (( 64 : int):sail_values$ii) memResult  :  64 words$word)
   else (zero_extend1 (( 64 : int):sail_values$ii) memResult  :  64 words$word)))`;


(*val TLBWriteEntry : Machine_word.mword Machine_word.ty6 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((TLBWriteEntry:(6)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) idx=  (bindS
   (read_regS TLBPageMask_ref  : ( 16 words$word) cheri_sequential_types$M) (\ pagemask . 
   let b__0 = pagemask in seqS
   (if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word))))
    then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else if (((b__0 = (vec_of_bits [B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))) then
      returnS () 
    else SignalException MCheck)   
(let i = (lem$w2ui idx) in
   let entry = (access_list_dec TLBEntries i) in bindS (seqS   
(set_TLBEntry_pagemask entry pagemask)   
(read_regS TLBEntryHi_ref)) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) .  bindS (seqS   
(set_TLBEntry_r entry ((get_TLBEntryHiReg_R w__0  :  2 words$word)))   
(read_regS TLBEntryHi_ref)) (\ (w__1 : cheri_sequential_types$TLBEntryHiReg) .  bindS (seqS   
(set_TLBEntry_vpn2 entry ((get_TLBEntryHiReg_VPN2 w__1  :  27 words$word)))   
(read_regS TLBEntryHi_ref)) (\ (w__2 : cheri_sequential_types$TLBEntryHiReg) .  bindS (seqS   
(set_TLBEntry_asid entry ((get_TLBEntryHiReg_ASID w__2  :  8 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__3 : cheri_sequential_types$TLBEntryLoReg) .  bindS   
(read_regS TLBEntryLo1_ref) (\ (w__4 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS (seqS   
(set_TLBEntry_g entry
     ((bool_to_bits
         (((((bits_to_bool ((get_TLBEntryLoReg_G w__3  :  1 words$word)))) /\ ((bits_to_bool ((get_TLBEntryLoReg_G w__4  :  1 words$word)))))))
        :  1 words$word)))   
(set_TLBEntry_valid entry ((cast_unit_vec0 B1  :  1 words$word))))   
(read_regS TLBEntryLo0_ref)) (\ (w__5 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_caps0 entry ((get_TLBEntryLoReg_CapS w__5  :  1 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__6 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_capl0 entry ((get_TLBEntryLoReg_CapL w__6  :  1 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__7 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_pfn0 entry ((get_TLBEntryLoReg_PFN w__7  :  24 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__8 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_c0 entry ((get_TLBEntryLoReg_C w__8  :  3 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__9 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_d0 entry ((get_TLBEntryLoReg_D w__9  :  1 words$word)))   
(read_regS TLBEntryLo0_ref)) (\ (w__10 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_v0 entry ((get_TLBEntryLoReg_V w__10  :  1 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__11 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_caps1 entry ((get_TLBEntryLoReg_CapS w__11  :  1 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__12 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_capl1 entry ((get_TLBEntryLoReg_CapL w__12  :  1 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__13 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_pfn1 entry ((get_TLBEntryLoReg_PFN w__13  :  24 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__14 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_c1 entry ((get_TLBEntryLoReg_C w__14  :  3 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__15 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(set_TLBEntry_d1 entry ((get_TLBEntryLoReg_D w__15  :  1 words$word)))   
(read_regS TLBEntryLo1_ref)) (\ (w__16 : cheri_sequential_types$TLBEntryLoReg) . 
   set_TLBEntry_v1 entry ((get_TLBEntryLoReg_V w__16  :  1 words$word)))))))))))))))))))))))`;


val _ = Define `
 ((decode:(32)words$word ->(cheri_sequential_types$ast)option) v__0=   
 (if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (DADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (DADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DADD (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (ADD (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ADDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (ADDU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ADDIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSUB (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SUB0 (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SUBU (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (AND (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ANDI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (OR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ORI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (NOR (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (XOR (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (XORI (rs,rt,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (LUI (rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSLL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRA32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : 5 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRL32 (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DSRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SLL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SLLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SRA (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SRAV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sa : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SRL (rt,rd,sa))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SRLV (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SLT (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SLTI (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (SLTU (rs,rt,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SLTIU (rs,rt,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MOVN (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MOVZ (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MFHI rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MFLO rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B1]
                     :  21 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MTHI rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B1;B1]
                     :  21 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MTLO rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MUL (rs,rt,rd))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DMULT (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DMULTU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MADD (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MADDU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MSUB (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (MSUBU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DIV0 (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DIVU (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B0]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DDIV (rs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (DDIVU (rs,rt))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (offset : 26 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  26 words$word)) in
     SOME (J offset)
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (offset : 26 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  26 words$word)) in
     SOME (JAL offset)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  10 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  10 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word)))))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     SOME (JR rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word)))))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (JALR (rs,rd))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,F,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1]  :  6 words$word)))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BEQ (rs,rt,imm,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LT',T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GE,T,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,GT',F,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (BCMPZ (rs,imm,LE,F,T))
   else if (((v__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;
                             B1;B1;B1;B1;B1;B0;B0;B1;B1;B0;B0]
                 :  32 words$word)))) then
     SOME (SYSCALL_THREAD_START () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word))))))) then
     SOME (SYSCALL () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word))))))) then
     SOME (BREAK () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (WAIT () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,LTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (TRAPREG (rs,rt,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,EQ'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,NE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,GEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LT'))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1]  :  5 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (TRAPIMM (rs,imm,LTU))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (B,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (B,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (H,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B0;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (H,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (W0,T,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (W0,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (D,F,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (W0,T,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Load (D,F,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (B,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B0;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (H,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (W0,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (D,F,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (W0,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (Store (D,T,base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B1;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (LWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B1;B1;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (LWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SWL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SWR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (LDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (LDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B0]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SDL (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B0;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (SDR (base,rt,offset))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (op : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (CACHE (base,op,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B1]  :  6 words$word)))) then
     let (base : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (op : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : cheri_sequential_types$imm16) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (PREF (base,op,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  21 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  21 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1]  :  6 words$word))))))) then
     SOME (SYNC () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : 3 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : 3 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
     SOME (MFC0 (rt,rd,sel,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B1;B0;B1;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B1;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))))))
   then
     SOME (HCF () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : 3 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]  :  8 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : 3 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
     SOME (MTC0 (rt,rd,sel,T))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWI () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]
                 :  32 words$word)))) then
     SOME (TLBWR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]
                 :  32 words$word)))) then
     SOME (TLBR () )
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (TLBP () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (RDHWR (rt,rd))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B1;B1;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (ERET () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetPerm (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetType (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetBase (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetLen (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetTag (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetSealed (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0]  :  16 words$word)))))))
   then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetCause rd)
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                 :  32 words$word)))) then
     SOME (CReturn () )
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetOffset (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  21 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                     :  21 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetCause rt)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CAndPerm (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CToPtr (rd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CNE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLT))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CLEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,ct,CNEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CIncOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetBounds (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CClearTag (cd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CFromPtr (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B1]  :  11 words$word)))) /\ ((((((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word)))))))))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCheckPerm (cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1]  :  11 words$word))))))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCheckType (cs,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B1;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CUnseal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B1;B1]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CJALR (cd,cb,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word))))))) then
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CJALR ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),cb,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetCause rd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetCause rs)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetPCC cd)
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  16 words$word)))))))
   then
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CJALR ((vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),cb,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCheckPerm (cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCheckType (cs,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CClearTag (cd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CJALR (cd,cb,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetPerm (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetType (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetBase (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetLen (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetTag (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetSealed (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetOffset (rd,cb))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetPCCSetOffset (cd,rs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CReadHwr (cd,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CWriteHwr (cb,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (sel : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CGetAddr (cb,sel))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CUnseal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B0;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CAndPerm (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetOffset (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetBounds (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSetBoundsExact (cd,cs,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CIncOffset (cd,cb,rt))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CBuildCap (cd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCopyType (cd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CCSeal (cd,cs,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CToPtr (rd,cb,ct))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CFromPtr (cd,cb,rs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSub (rt,cb,cs))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B1]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,rs,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B1;B0;B0]  :  6 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CMOVX (cd,cs,rs,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B0;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CNE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLT))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLE))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLTU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CLEU))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B1;B1;B0;B1;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CPtrCmp (rd,cb,cs,CNEXEQ))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (ct : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CTestSubset (rd,cb,ct))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B0;B1]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (CBX (cd,imm,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B0;B1;B0]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (CBX (cd,imm,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B1]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (CBZ (cd,imm,F))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B1;B0]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (CBZ (cd,imm,T))
   else if (((v__0 = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                             B1;B1;B1;B1;B1;B1;B1;B1;B1;B1;B1]
                 :  32 words$word)))) then
     SOME (CReturn () )
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B1]  :  11 words$word)))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (selector : 11 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) in
     SOME (CCall (cs,cb,selector))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B0]  :  16 words$word)))) then
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ClearRegs (GPLo,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B0;B1]  :  16 words$word)))) then
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ClearRegs (GPHi,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B1;B0]  :  16 words$word)))) then
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ClearRegs (CLo,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B1;B1;B1;B1;B0;B0;B0;B1;B1]  :  16 words$word)))) then
     let (imm : 16 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) in
     SOME (ClearRegs (CHi,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B1;B1]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 11 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) in
     SOME (CIncOffsetImmediate (cd,cb,imm))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B1;B0;B0]  :  11 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (imm : 11 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) in
     SOME (CSetBoundsImmediate (cd,cb,imm))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B0]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B1;B0;B1]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B1;B1;B0]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,T,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CLoad (rd,cb,rt,offset,F,D,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),F,B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),T,B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),F,H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B0;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),T,H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),F,W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B0]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),T,W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B0;B1;B1]  :  11 words$word))))))) then
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLoad (rd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                      :  8 words$word),F,D,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B0]  :  3 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,B,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B0;B1]  :  3 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,H,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B0]  :  3 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,W0,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B0;B1;B0]  :  6 words$word)))) /\ (((((subrange_vec_dec v__0 (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) = (vec_of_bits [B0;B1;B1]  :  3 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 8 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  8 words$word)) in
     SOME (CStore (rs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,D,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                          :  8 words$word),B,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B1]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                          :  8 words$word),H,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B0]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                          :  8 words$word),W0,T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B0;B1;B1]  :  6 words$word))))))) then
     let (rs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CStore (rs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0]
                                                                          :  8 words$word),D,T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B1;B1;B1;B0]  :  6 words$word)))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 11 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) in
     SOME (CSC (cs,cb,rt,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),offset,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B0;B0;B0;B1;B1;B1]  :  6 words$word))))))) then
     let (cs : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (rd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 6 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CSC (cs,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),rd,(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                                                       :  11 words$word),T))
   else if (((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 26 : int):sail_values$ii)  :  6 words$word)) = (vec_of_bits [B1;B1;B0;B1;B1;B0]  :  6 words$word)))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 25 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     let (offset : 11 cheri_sequential_types$bits) = ((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) in
     SOME (CLC (cd,cb,rt,offset,F))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B1;B0;B0;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 10 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B1;B1;B1;B1]  :  11 words$word))))))) then
     let (cd : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     let (cb : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 11 : int):sail_values$ii)  :  5 words$word)) in
     SOME (CLC (cd,cb,(vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word),(vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                                                    :  11 words$word),T))
   else if ((((((((subrange_vec_dec v__0 (( 31 : int):sail_values$ii) (( 21 : int):sail_values$ii)  :  11 words$word)) = (vec_of_bits [B0;B1;B0;B0;B1;B0;B0;B0;B1;B0;B0]  :  11 words$word)))) /\ (((((subrange_vec_dec v__0 (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word)) = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B1;B1;B0]  :  16 words$word)))))))
   then
     let (rt : cheri_sequential_types$regno) = ((subrange_vec_dec v__0 (( 20 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  5 words$word)) in
     SOME (C2Dump rt)
   else SOME (RI () )))`;


(*val execute_XORI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_XORI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((xor_vec w__0 ((zero_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_XOR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_XOR:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((xor_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_WAIT : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_WAIT:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__120=  (bindS
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) .  write_regS nextPC_ref w__0)))`;


(*val execute_TRAPREG : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.Comparison -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TRAPREG:(5)words$word ->(5)words$word -> cheri_sequential_types$Comparison ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt cmp=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val . 
   let condition = (compare cmp rs_val rt_val) in
   if condition then SignalException Tr
   else returnS () ))))`;


(*val execute_TRAPIMM : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.Comparison -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TRAPIMM:(5)words$word ->(16)words$word -> cheri_sequential_types$Comparison ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs imm cmp=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val . 
   let (imm_val : 64 cheri_sequential_types$bits) = ((sign_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word)) in
   let condition = (compare cmp rs_val imm_val) in
   if condition then SignalException Tr
   else returnS () )))`;


(*val execute_TLBWR : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TLBWR:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__124=  (bindS (seqS   
(checkCP0Access () )
   (read_regS TLBRandom_ref  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBWI : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TLBWI:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__123=  (bindS (seqS   
(checkCP0Access () )
   (read_regS TLBIndex_ref  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__0 :  6 words$word) .  TLBWriteEntry w__0)))`;


(*val execute_TLBR : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TLBR:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__125=  (bindS (seqS   
(checkCP0Access () )
   (read_regS TLBIndex_ref  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__0 : cheri_sequential_types$TLBIndexT) . 
   let i = (lem$w2ui w__0) in bindS   
(read_regS ((access_list_dec TLBEntries i))) (\ entry .  seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS (seqS   
(write_regS TLBPageMask_ref ((get_TLBEntry_pagemask entry  :  16 words$word)))   
(set_TLBEntryHiReg_R TLBEntryHi_ref ((get_TLBEntry_r entry  :  2 words$word))))   
(set_TLBEntryHiReg_VPN2 TLBEntryHi_ref ((get_TLBEntry_vpn2 entry  :  27 words$word))))   
(set_TLBEntryHiReg_ASID TLBEntryHi_ref ((get_TLBEntry_asid entry  :  8 words$word))))   
(set_TLBEntryLoReg_CapS TLBEntryLo0_ref ((get_TLBEntry_caps0 entry  :  1 words$word))))   
(set_TLBEntryLoReg_CapL TLBEntryLo0_ref ((get_TLBEntry_capl0 entry  :  1 words$word))))   
(set_TLBEntryLoReg_PFN TLBEntryLo0_ref ((get_TLBEntry_pfn0 entry  :  24 words$word))))   
(set_TLBEntryLoReg_C TLBEntryLo0_ref ((get_TLBEntry_c0 entry  :  3 words$word))))   
(set_TLBEntryLoReg_D TLBEntryLo0_ref ((get_TLBEntry_d0 entry  :  1 words$word))))   
(set_TLBEntryLoReg_V TLBEntryLo0_ref ((get_TLBEntry_v0 entry  :  1 words$word))))   
(set_TLBEntryLoReg_G TLBEntryLo0_ref ((get_TLBEntry_g entry  :  1 words$word))))   
(set_TLBEntryLoReg_CapS TLBEntryLo1_ref ((get_TLBEntry_caps1 entry  :  1 words$word))))   
(set_TLBEntryLoReg_CapL TLBEntryLo1_ref ((get_TLBEntry_capl1 entry  :  1 words$word))))   
(set_TLBEntryLoReg_PFN TLBEntryLo1_ref ((get_TLBEntry_pfn1 entry  :  24 words$word))))   
(set_TLBEntryLoReg_C TLBEntryLo1_ref ((get_TLBEntry_c1 entry  :  3 words$word))))   
(set_TLBEntryLoReg_D TLBEntryLo1_ref ((get_TLBEntry_d1 entry  :  1 words$word))))   
(set_TLBEntryLoReg_V TLBEntryLo1_ref ((get_TLBEntry_v1 entry  :  1 words$word))))   
(set_TLBEntryLoReg_G TLBEntryLo1_ref ((get_TLBEntry_g entry  :  1 words$word)))))))`;


(*val execute_TLBP : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_TLBP:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__126=  (bindS (seqS   
(checkCP0Access () )   
(read_regS TLBEntryHi_ref)) (\ (w__0 : cheri_sequential_types$TLBEntryHiReg) .  bindS
   (tlbSearch ((get_TLBEntryHiReg w__0  :  64 words$word))  : ( ( 6 words$word)option) cheri_sequential_types$M) (\ result . 
   (case result of
     SOME (idx) => seqS      
(write_regS TLBProbe_ref (vec_of_bits [B0]  :  1 words$word)) (write_regS TLBIndex_ref idx)
   | NONE => seqS      
(write_regS TLBProbe_ref (vec_of_bits [B1]  :  1 words$word))      
(write_regS TLBIndex_ref (vec_of_bits [B0;B0;B0;B0;B0;B0]  :  6 words$word))
   )))))`;


(*val execute_Store : Cheri_sequential_types.WordType -> bool -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_Store:cheri_sequential_types$WordType -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) width conditional base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData width
     : ( 64 words$word) cheri_sequential_types$M) (\ (vAddr : 64 cheri_sequential_types$bits) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val . 
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdES vAddr
   else bindS
     (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr . 
     if conditional then bindS
       (read_regS CP0LLBit_ref  : ( 1 words$word) cheri_sequential_types$M) (\ (w__1 : 1 cheri_sequential_types$bits) .  bindS
       (if ((bit_to_bool ((access_vec_dec w__1 (( 0 : int):sail_values$ii))))) then
          (case width of
            B =>
             MEMw_conditional_wrapper pAddr (( 1 : int):sail_values$ii)
               ((subrange_vec_dec rt_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
          | H =>
             MEMw_conditional_wrapper pAddr (( 2 : int):sail_values$ii)
               ((subrange_vec_dec rt_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
          | W0 =>
             MEMw_conditional_wrapper pAddr (( 4 : int):sail_values$ii)
               ((subrange_vec_dec rt_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
          | D => MEMw_conditional_wrapper pAddr (( 8 : int):sail_values$ii) rt_val
          )
        else returnS F) (\ (success : bool) . 
       wGPR rt ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
     else
       (case width of
         B => MEMw_wrapper pAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec rt_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
       | H => MEMw_wrapper pAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec rt_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
       | W0 => MEMw_wrapper pAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec rt_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
       | D => MEMw_wrapper pAddr (( 8 : int):sail_values$ii) rt_val
       )))))))`;


(*val execute_SYSCALL_THREAD_START : unit -> unit*)

val _ = Define `
 ((execute_SYSCALL_THREAD_START:unit -> unit) g__116=  () )`;


(*val execute_SYSCALL : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SYSCALL:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__118=  (SignalException Sys))`;


(*val execute_SYNC : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SYNC:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__121=  (MEM_sync () ))`;


(*val execute_SWR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SWR:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData W0
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr . 
   let wordAddr =     
((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  62 words$word))
        (vec_of_bits [B0;B0]  :  2 words$word)
       :  64 words$word)) in bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__12 = ((subrange_vec_dec vAddr (( 1 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  2 words$word)) in
   if (((b__12 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
   else if (((b__12 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
   else if (((b__12 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
   else MEMw_wrapper wordAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))))))))`;


(*val execute_SWL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SWL:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData W0
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__8 = ((subrange_vec_dec vAddr (( 1 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  2 words$word)) in
   if (((b__8 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
   else if (((b__8 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  24 words$word))
   else if (((b__8 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  8 words$word))))))))`;


(*val execute_SUBU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SUBU:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ opA .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((sign_extend1 (( 64 : int):sail_values$ii)
           ((sub_vec ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_SUB : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SUB:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ opA .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (temp33 : 33 cheri_sequential_types$bits) =       
((sub_vec
          ((sign_extend1 (( 33 : int):sail_values$ii) ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):sail_values$ii) ((subrange_vec_dec opB (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec temp33 (( 32 : int):sail_values$ii)))))
            ((bit_to_bool ((access_vec_dec temp33 (( 31 : int):sail_values$ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec temp33 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            :  64 words$word))))))`;


(*val execute_SRLV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SRLV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
     (shift_bits_right 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__2  :  64 words$word)))))))`;


(*val execute_SRL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SRL:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp . 
   if ((NotWordVal temp)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
     (shift_bits_right 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__1  :  64 words$word))))))`;


(*val execute_SRAV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SRAV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  5 words$word)) in
   if ((NotWordVal temp)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
     (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__2 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__2  :  64 words$word)))))))`;


(*val execute_SRA : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SRA:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp . 
   if ((NotWordVal temp)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let rt32 = ((subrange_vec_dec temp (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
     (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 :  32 words$word) . 
     wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__1  :  64 words$word))))))`;


(*val execute_SLTU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLTU:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val . 
   wGPR rd
     ((zero_extend1 (( 64 : int):sail_values$ii)
         (if ((((lem$w2ui rs_val) < (lem$w2ui rt_val)))) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLTIU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLTIU:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val . 
   let (immext : 64 cheri_sequential_types$bits) = ((sign_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word)) in
   wGPR rt
     ((zero_extend1 (( 64 : int):sail_values$ii)
         (if ((((lem$w2ui rs_val) < (lem$w2ui immext)))) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLTI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLTI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=   
 (let imm_val = (integer_word$w2i imm) in bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rs_val = (integer_word$w2i w__0) in
   wGPR rt
     ((zero_extend1 (( 64 : int):sail_values$ii)
         (if ((rs_val < imm_val)) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word)))))`;


(*val execute_SLT : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLT:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd
     ((zero_extend1 (( 64 : int):sail_values$ii)
         (if ((((integer_word$w2i w__0) < (integer_word$w2i w__1)))) then (vec_of_bits [B1]  :  1 words$word)
          else (vec_of_bits [B0]  :  1 words$word))
        :  64 words$word))))))`;


(*val execute_SLLV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLLV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 4 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  5 words$word)) in bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__1 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__2 :  32 words$word) . 
   wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__2  :  64 words$word)))))))`;


(*val execute_SLL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SLL:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rt32 = ((subrange_vec_dec w__0 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word)) in bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict rt32 sa  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 :  32 words$word) . 
   wGPR rd ((sign_extend1 (( 64 : int):sail_values$ii) w__1  :  64 words$word))))))`;


(*val execute_SDR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SDR:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData D
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let wordAddr =     
((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  61 words$word))
        (vec_of_bits [B0;B0;B0]  :  3 words$word)
       :  64 words$word)) in
   let b__40 = ((subrange_vec_dec vAddr (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
   if (((b__40 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
   else if (((b__40 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 3 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
   else if (((b__40 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 5 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 39 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  40 words$word))
   else if (((b__40 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 6 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 47 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  48 words$word))
   else if (((b__40 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper wordAddr (( 7 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 55 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  56 words$word))
   else MEMw_wrapper wordAddr (( 8 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word))))))))`;


(*val execute_SDL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_SDL:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word))
      StoreData D
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__32 = ((subrange_vec_dec vAddr (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
   if (((b__32 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 8 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word))
   else if (((b__32 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 7 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  56 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 6 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  48 words$word))
   else if (((b__32 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 5 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  40 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))
   else if (((b__32 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 3 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 40 : int):sail_values$ii)  :  24 words$word))
   else if (((b__32 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
     MEMw_wrapper pAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 48 : int):sail_values$ii)  :  16 words$word))
   else MEMw_wrapper pAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 56 : int):sail_values$ii)  :  8 words$word))))))))`;


(*val execute_RI : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_RI:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__129=  (SignalException ResI))`;


(*val execute_RDHWR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_RDHWR:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd=  (bindS   
(getAccessLevel () ) (\ accessLevel . 
   let (haveAccessLevel : bool) = (accessLevel = Kernel) in bindS   
(read_regS CP0Status_ref) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   let (haveCU0 : bool) = (B1 = ((access_vec_dec ((get_StatusReg_CU w__0  :  4 words$word)) (( 0 : int):sail_values$ii)))) in
   let rdi = (lem$w2ui rd) in bindS
   (read_regS CP0HWREna_ref  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 : 32 cheri_sequential_types$bits) . 
   let (haveHWREna : bool) = (B1 = ((access_vec_dec w__1 rdi))) in seqS
   (if ((~ (((haveAccessLevel \/ (((haveCU0 \/ haveHWREna)))))))) then SignalException ResI
    else returnS () )   
(let b__146 = rd in bindS
   (if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) then
      returnS ((zero_extend1 (( 64 : int):sail_values$ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B0;B1]  :  5 words$word)))) then
      returnS ((zero_extend1 (( 64 : int):sail_values$ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B0]  :  5 words$word)))) then bindS
      (read_regS CP0Count_ref  : ( 32 words$word) cheri_sequential_types$M) (\ (w__2 : 32 cheri_sequential_types$bits) . 
      returnS ((zero_extend1 (( 64 : int):sail_values$ii) w__2  :  64 words$word)))
    else if (((b__146 = (vec_of_bits [B0;B0;B0;B1;B1]  :  5 words$word)))) then
      returnS ((zero_extend1 (( 64 : int):sail_values$ii) (vec_of_bits [B1]  :  1 words$word)  :  64 words$word))
    else if (((b__146 = (vec_of_bits [B1;B1;B1;B0;B1]  :  5 words$word)))) then
      (read_regS CP0UserLocal_ref  : ( 64 words$word) cheri_sequential_types$M)
    else (SignalException ResI  : ( 64 words$word) cheri_sequential_types$M)) (\ (temp : 64 cheri_sequential_types$bits) . 
   wGPR rt temp)))))))`;


(*val execute_PREF : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> unit*)

val _ = Define `
 ((execute_PREF:(5)words$word ->(5)words$word ->(16)words$word -> unit) base op imm=  () )`;


(*val execute_ORI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ORI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((or_vec w__0 ((zero_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_OR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_OR:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((or_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_NOR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_NOR:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((not_vec ((or_vec w__0 w__1  :  64 words$word))  :  64 words$word))))))`;


(*val execute_MULTU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MULTU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (result : 64 cheri_sequential_types$bits) .  seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))`;


(*val execute_MULT : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MULT:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (result : 64 cheri_sequential_types$bits) .  seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))`;


(*val execute_MUL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MUL:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal . 
   let (result : 64 cheri_sequential_types$bits) =     
((sign_extend1 (( 64 : int):sail_values$ii)
        ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1)))))`;


(*val execute_MTLO : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MTLO:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) .  write_regS LO_ref w__0)))`;


(*val execute_MTHI : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MTHI:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) .  write_regS HI_ref w__0)))`;


(*val execute_MTC0 : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty3 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MTC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sel double=  (bindS (seqS   
(checkCP0Access () )
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M)) (\ reg_val .  
  (case (rd, sel) of
        (b__108, b__109) =>
  if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B0] : 5 words$word)))) /\
          (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
    write_regS TLBIndex_ref
      ((mask (( 6 : int): sail_values$ii) reg_val : 6 words$word)) else
    if ((((((b__108 = (vec_of_bits [B0;B0;B0;B0;B1] : 5 words$word)))) /\
            (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
      returnS ()  else
      if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B0] : 5 words$word)))) /\
              (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
        set_TLBEntryLoReg TLBEntryLo0_ref reg_val else
        if ((((((b__108 = (vec_of_bits [B0;B0;B0;B1;B1] : 5 words$word)))) /\
                (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
          set_TLBEntryLoReg TLBEntryLo1_ref reg_val else
          if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                  /\ (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
            set_ContextReg_PTEBase TLBContext_ref
              ((subrange_vec_dec reg_val (( 63 : int): sail_values$ii)
                  (( 23 : int): sail_values$ii) : 41 words$word)) else
            if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                    /\ (((b__109 = (vec_of_bits [B0;B1;B0] : 3 words$word))))))) then
              write_regS CP0UserLocal_ref reg_val else
              if ((((((b__108 = (vec_of_bits [B0;B0;B1;B0;B1] : 5 words$word))))
                      /\
                      (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                write_regS TLBPageMask_ref
                  ((subrange_vec_dec reg_val (( 28 : int): sail_values$ii)
                      (( 13 : int): sail_values$ii) : 16 words$word)) else
                if ((((((b__108 =
                           (vec_of_bits [B0;B0;B1;B1;B0] : 5 words$word))))
                        /\
                        (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                  seqS
                    (write_regS TLBWired_ref
                       ((mask (( 6 : int): sail_values$ii) reg_val : 6 words$word)))
                    (write_regS TLBRandom_ref TLBIndexMax) else
                  if ((((((b__108 =
                             (vec_of_bits [B0;B0;B1;B1;B1] : 5 words$word))))
                          /\
                          (((b__109 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                    write_regS CP0HWREna_ref
                      ((concat_vec
                          ((subrange_vec_dec reg_val
                              (( 31 : int): sail_values$ii)
                              (( 29 : int): sail_values$ii) : 3 words$word))
                          ((concat_vec
                              (vec_of_bits
                                 [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0] : 25 words$word)
                              ((subrange_vec_dec reg_val
                                  (( 3 : int): sail_values$ii)
                                  (( 0 : int): sail_values$ii) : 4 words$word))
                           : 29 words$word)) : 32 words$word)) else
                    if ((((((b__108 =
                               (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                            /\
                            (((b__109 =
                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                      returnS ()  else
                      if ((((((b__108 =
                                 (vec_of_bits [B0;B1;B0;B0;B1] : 5 words$word))))
                              /\
                              (((b__109 =
                                   (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                        write_regS CP0Count_ref
                          ((subrange_vec_dec reg_val
                              (( 31 : int): sail_values$ii)
                              (( 0 : int): sail_values$ii) : 32 words$word))
                      else
                        if ((((((b__108 =
                                   (vec_of_bits [B0;B1;B0;B1;B0] : 5 words$word))))
                                /\
                                (((b__109 =
                                     (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                          seqS
                            (seqS
                               (set_TLBEntryHiReg_R TLBEntryHi_ref
                                  ((subrange_vec_dec reg_val
                                      (( 63 : int): sail_values$ii)
                                      (( 62 : int): sail_values$ii) : 2 words$word)))
                               (set_TLBEntryHiReg_VPN2 TLBEntryHi_ref
                                  ((subrange_vec_dec reg_val
                                      (( 39 : int): sail_values$ii)
                                      (( 13 : int): sail_values$ii) : 27 words$word))))
                            (set_TLBEntryHiReg_ASID TLBEntryHi_ref
                               ((subrange_vec_dec reg_val
                                   (( 7 : int): sail_values$ii)
                                   (( 0 : int): sail_values$ii) : 8 words$word)))
                        else
                          if ((((((b__108 =
                                     (vec_of_bits [B0;B1;B0;B1;B1] : 5 words$word))))
                                  /\
                                  (((b__109 =
                                       (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                            bindS
                              (seqS
                                 (write_regS CP0Compare_ref
                                    ((subrange_vec_dec reg_val
                                        (( 31 : int): sail_values$ii)
                                        (( 0 : int): sail_values$ii) : 32 words$word)))
                                 (read_regS CP0Cause_ref))
                              (\ (w__0 : cheri_sequential_types$CauseReg) . 
                               set_CauseReg_IP CP0Cause_ref
                                 ((and_vec
                                     ((get_CauseReg_IP w__0 : 8 words$word))
                                     (vec_of_bits [B0;B1;B1;B1;B1;B1;B1;B1] : 8 words$word)
                                  : 8 words$word))) else
                            if ((((((b__108 =
                                       (vec_of_bits [B0;B1;B1;B0;B0] : 5 words$word))))
                                    /\
                                    (((b__109 =
                                         (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                              seqS
                                (seqS
                                   (seqS
                                      (seqS
                                         (seqS
                                            (seqS
                                               (seqS
                                                  (seqS
                                                     (seqS
                                                        (set_StatusReg_CU
                                                           CP0Status_ref
                                                           ((subrange_vec_dec
                                                               reg_val
                                                               (( 31 : int): sail_values$ii)
                                                               (( 28 : int): sail_values$ii) : 4 words$word)))
                                                        (set_StatusReg_BEV
                                                           CP0Status_ref
                                                           ((cast_unit_vec0
                                                               ((access_vec_dec
                                                                   reg_val
                                                                   ((
                                                                     22 : int): sail_values$ii))) : 1 words$word))))
                                                     (set_StatusReg_IM
                                                        CP0Status_ref
                                                        ((subrange_vec_dec
                                                            reg_val
                                                            (( 15 : int): sail_values$ii)
                                                            (( 8 : int): sail_values$ii) : 8 words$word))))
                                                  (set_StatusReg_KX
                                                     CP0Status_ref
                                                     ((cast_unit_vec0
                                                         ((access_vec_dec
                                                             reg_val
                                                             (( 7 : int): sail_values$ii))) : 1 words$word))))
                                               (set_StatusReg_SX
                                                  CP0Status_ref
                                                  ((cast_unit_vec0
                                                      ((access_vec_dec
                                                          reg_val
                                                          (( 6 : int): sail_values$ii))) : 1 words$word))))
                                            (set_StatusReg_UX CP0Status_ref
                                               ((cast_unit_vec0
                                                   ((access_vec_dec reg_val
                                                       (( 5 : int): sail_values$ii))) : 1 words$word))))
                                         (set_StatusReg_KSU CP0Status_ref
                                            ((subrange_vec_dec reg_val
                                                (( 4 : int): sail_values$ii)
                                                (( 3 : int): sail_values$ii) : 2 words$word))))
                                      (set_StatusReg_ERL CP0Status_ref
                                         ((cast_unit_vec0
                                             ((access_vec_dec reg_val
                                                 (( 2 : int): sail_values$ii))) : 1 words$word))))
                                   (set_StatusReg_EXL CP0Status_ref
                                      ((cast_unit_vec0
                                          ((access_vec_dec reg_val
                                              (( 1 : int): sail_values$ii))) : 1 words$word))))
                                (set_StatusReg_IE CP0Status_ref
                                   ((cast_unit_vec0
                                       ((access_vec_dec reg_val
                                           (( 0 : int): sail_values$ii))) : 1 words$word)))
                            else
                              if ((((((b__108 =
                                         (vec_of_bits [B0;B1;B1;B0;B1] : 5 words$word))))
                                      /\
                                      (((b__109 =
                                           (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                bindS
                                  (seqS
                                     (set_CauseReg_IV CP0Cause_ref
                                        ((cast_unit_vec0
                                            ((access_vec_dec reg_val
                                                (( 23 : int): sail_values$ii))) : 1 words$word)))
                                     (read_regS CP0Cause_ref))
                                  (\ (w__1 : cheri_sequential_types$CauseReg) . 
                                   let ip = ((get_CauseReg_IP w__1 : 8 words$word)) in
                                   set_CauseReg_IP CP0Cause_ref
                                     ((concat_vec
                                         ((subrange_vec_dec ip
                                             (( 7 : int): sail_values$ii)
                                             (( 2 : int): sail_values$ii) : 6 words$word))
                                         ((subrange_vec_dec reg_val
                                             (( 9 : int): sail_values$ii)
                                             (( 8 : int): sail_values$ii) : 2 words$word))
                                      : 8 words$word))) else
                                if ((((((b__108 =
                                           (vec_of_bits [B0;B1;B1;B1;B0] : 5 words$word))))
                                        /\
                                        (((b__109 =
                                             (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                  write_regS CP0EPC_ref reg_val else
                                  if ((((((b__108 =
                                             (vec_of_bits [B1;B0;B0;B0;B0] : 5 words$word))))
                                          /\
                                          (((b__109 =
                                               (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                    returnS ()  else
                                    if ((((((b__108 =
                                               (vec_of_bits [B1;B0;B1;B0;B0] : 5 words$word))))
                                            /\
                                            (((b__109 =
                                                 (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                      set_XContextReg_XPTEBase
                                        TLBXContext_ref
                                        ((subrange_vec_dec reg_val
                                            (( 63 : int): sail_values$ii)
                                            (( 33 : int): sail_values$ii) : 31 words$word))
                                    else write_regS CP0ErrorEPC_ref reg_val
  ))))`;


(*val execute_MSUBU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MSUBU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (mul_result : 64 cheri_sequential_types$bits) .  bindS
   (read_regS HI_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 : 64 cheri_sequential_types$bits) .  bindS
   (read_regS LO_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) . 
   let result =     
((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MSUB : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MSUB:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (mul_result : 64 cheri_sequential_types$bits) .  bindS
   (read_regS HI_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 : 64 cheri_sequential_types$bits) .  bindS
   (read_regS LO_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) . 
   let result =     
((sub_vec
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           :  64 words$word)) mul_result
       :  64 words$word)) in seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MOVZ : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MOVZ:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   if (((w__0 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0]
            :  64 words$word)))) then bindS
     (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else returnS () )))`;


(*val execute_MOVN : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MOVN:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   if (((w__0 <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                        B0]
            :  64 words$word)))) then bindS
     (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)
   else returnS () )))`;


(*val execute_MFLO : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MFLO:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd=  (bindS
   (read_regS LO_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFHI : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MFHI:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd=  (bindS
   (read_regS HI_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)))`;


(*val execute_MFC0 : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty3 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MFC0:(5)words$word ->(5)words$word ->(3)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sel double=  (bindS (seqS   
(checkCP0Access () ) (case (rd, sel) of
       (b__48, b__49) =>
 if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B0] : 5 words$word)))) /\
         (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
   bindS (read_regS TLBIndex_ref : ( 6 words$word) cheri_sequential_types$M)
     (\ (w__0 : cheri_sequential_types$TLBIndexT) . 
      let (idx : 31 cheri_sequential_types$bits) = ((zero_extend1
                                                       (( 31 : int): sail_values$ii)
                                                       w__0 : 31 words$word)) in
      bindS
        (read_regS TLBProbe_ref : ( 1 words$word) cheri_sequential_types$M)
        (\ (w__1 : 1 cheri_sequential_types$bits) . 
         returnS
           ((concat_vec
               (vec_of_bits
                  [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                  B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0] : 32 words$word)
               ((concat_vec w__1 idx : 32 words$word)) : 64 words$word))))
 else
   if ((((((b__48 = (vec_of_bits [B0;B0;B0;B0;B1] : 5 words$word)))) /\
           (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
     bindS
       (read_regS TLBRandom_ref : ( 6 words$word) cheri_sequential_types$M)
       (\ (w__2 : cheri_sequential_types$TLBIndexT) . 
        returnS
          ((zero_extend1 (( 64 : int): sail_values$ii) w__2 : 64 words$word)))
   else
     if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B0] : 5 words$word)))) /\
             (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
       bindS (read_regS TLBEntryLo0_ref)
         (\ (w__3 : cheri_sequential_types$TLBEntryLoReg) . 
          returnS ((get_TLBEntryLoReg w__3 : 64 words$word))) else
       if ((((((b__48 = (vec_of_bits [B0;B0;B0;B1;B1] : 5 words$word)))) /\
               (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
         bindS (read_regS TLBEntryLo1_ref)
           (\ (w__4 : cheri_sequential_types$TLBEntryLoReg) . 
            returnS ((get_TLBEntryLoReg w__4 : 64 words$word))) else
         if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word)))) /\
                 (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
           bindS (read_regS TLBContext_ref)
             (\ (w__5 : cheri_sequential_types$ContextReg) . 
              returnS ((get_ContextReg w__5 : 64 words$word))) else
           if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B0] : 5 words$word))))
                   /\ (((b__49 = (vec_of_bits [B0;B1;B0] : 3 words$word))))))) then
             (read_regS CP0UserLocal_ref : ( 64 words$word) cheri_sequential_types$M)
           else
             if ((((((b__48 = (vec_of_bits [B0;B0;B1;B0;B1] : 5 words$word))))
                     /\ (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
               bindS
                 (read_regS TLBPageMask_ref : ( 16 words$word) cheri_sequential_types$M)
                 (\ (w__7 : 16 cheri_sequential_types$bits) . 
                  returnS
                    ((zero_extend1 (( 64 : int): sail_values$ii)
                        ((concat_vec w__7
                            (vec_of_bits
                               [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0] : 12 words$word)
                         : 28 words$word)) : 64 words$word))) else
               if ((((((b__48 = (vec_of_bits [B0;B0;B1;B1;B0] : 5 words$word))))
                       /\
                       (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                 bindS
                   (read_regS TLBWired_ref : ( 6 words$word) cheri_sequential_types$M)
                   (\ (w__8 : cheri_sequential_types$TLBIndexT) . 
                    returnS
                      ((zero_extend1 (( 64 : int): sail_values$ii) w__8 : 64 words$word)))
               else
                 if ((((((b__48 =
                            (vec_of_bits [B0;B0;B1;B1;B1] : 5 words$word))))
                         /\
                         (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                   bindS
                     (read_regS CP0HWREna_ref : ( 32 words$word) cheri_sequential_types$M)
                     (\ (w__9 : 32 cheri_sequential_types$bits) . 
                      returnS
                        ((zero_extend1 (( 64 : int): sail_values$ii) w__9 : 64 words$word)))
                 else
                   if ((((((b__48 =
                              (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                           /\
                           (((b__49 = (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                     (read_regS CP0BadVAddr_ref : ( 64 words$word) cheri_sequential_types$M)
                   else
                     if ((((((b__48 =
                                (vec_of_bits [B0;B1;B0;B0;B0] : 5 words$word))))
                             /\
                             (((b__49 =
                                  (vec_of_bits [B0;B0;B1] : 3 words$word))))))) then
                       returnS
                         ((zero_extend1 (( 64 : int): sail_values$ii)
                             (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                     else
                       if ((((((b__48 =
                                  (vec_of_bits [B0;B1;B0;B0;B1] : 5 words$word))))
                               /\
                               (((b__49 =
                                    (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                         bindS
                           (read_regS CP0Count_ref : ( 32 words$word) cheri_sequential_types$M)
                           (\ (w__11 : 32 cheri_sequential_types$bits) . 
                            returnS
                              ((zero_extend1 (( 64 : int): sail_values$ii)
                                  w__11 : 64 words$word))) else
                         if ((((((b__48 =
                                    (vec_of_bits [B0;B1;B0;B1;B0] : 5 words$word))))
                                 /\
                                 (((b__49 =
                                      (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                           bindS (read_regS TLBEntryHi_ref)
                             (\ (w__12 : cheri_sequential_types$TLBEntryHiReg) . 
                              returnS
                                ((get_TLBEntryHiReg w__12 : 64 words$word)))
                         else
                           if ((((((b__48 =
                                      (vec_of_bits [B0;B1;B0;B1;B1] : 5 words$word))))
                                   /\
                                   (((b__49 =
                                        (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                             bindS
                               (read_regS CP0Compare_ref : ( 32 words$word) cheri_sequential_types$M)
                               (\ (w__13 : 32 cheri_sequential_types$bits) . 
                                returnS
                                  ((zero_extend1
                                      (( 64 : int): sail_values$ii) w__13 : 64 words$word)))
                           else
                             if ((((((b__48 =
                                        (vec_of_bits [B0;B1;B1;B0;B0] : 5 words$word))))
                                     /\
                                     (((b__49 =
                                          (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                               bindS (read_regS CP0Status_ref)
                                 (\ (w__14 : cheri_sequential_types$StatusReg) . 
                                  returnS
                                    ((zero_extend1
                                        (( 64 : int): sail_values$ii)
                                        ((get_StatusReg w__14 : 32 words$word)) : 64 words$word)))
                             else
                               if ((((((b__48 =
                                          (vec_of_bits [B0;B1;B1;B0;B1] : 5 words$word))))
                                       /\
                                       (((b__49 =
                                            (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                 bindS (read_regS CP0Cause_ref)
                                   (\ (w__15 : cheri_sequential_types$CauseReg) . 
                                    returnS
                                      ((zero_extend1
                                          (( 64 : int): sail_values$ii)
                                          ((get_CauseReg w__15 : 32 words$word)) : 64 words$word)))
                               else
                                 if ((((((b__48 =
                                            (vec_of_bits [B0;B1;B1;B1;B0] : 5 words$word))))
                                         /\
                                         (((b__49 =
                                              (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                   (read_regS CP0EPC_ref : ( 64 words$word) cheri_sequential_types$M)
                                 else
                                   if ((((((b__48 =
                                              (vec_of_bits [B0;B1;B1;B1;B1] : 5 words$word))))
                                           /\
                                           (((b__49 =
                                                (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                     returnS
                                       ((zero_extend1
                                           (( 64 : int): sail_values$ii)
                                           (vec_of_bits
                                              [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                              B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                           : 32 words$word) : 64 words$word))
                                   else
                                     if ((((((b__48 =
                                                (vec_of_bits [B0;B1;B1;B1;B1] : 5 words$word))))
                                             /\
                                             (((b__49 =
                                                  (vec_of_bits [B1;B1;B0] : 3 words$word))))))) then
                                       returnS
                                         ((zero_extend1
                                             (( 64 : int): sail_values$ii)
                                             (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                                     else
                                       if ((((((b__48 =
                                                  (vec_of_bits
                                                     [B0;B1;B1;B1;B1] : 5 words$word))))
                                               /\
                                               (((b__49 =
                                                    (vec_of_bits [B1;B1;B1] : 3 words$word))))))) then
                                         returnS
                                           ((zero_extend1
                                               (( 64 : int): sail_values$ii)
                                               (vec_of_bits [B0] : 1 words$word) : 64 words$word))
                                       else
                                         if ((((((b__48 =
                                                    (vec_of_bits
                                                       [B1;B0;B0;B0;B0] : 5 words$word))))
                                                 /\
                                                 (((b__49 =
                                                      (vec_of_bits [B0;B0;B0] : 3 words$word))))))) then
                                           returnS
                                             ((zero_extend1
                                                 (( 64 : int): sail_values$ii)
                                                 ((concat_vec
                                                     (vec_of_bits [B1] : 1 words$word)
                                                     ((concat_vec
                                                         (vec_of_bits
                                                            [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]
                                                         : 15 words$word)
                                                         ((concat_vec
                                                             (vec_of_bits
                                                                [B1] : 1 words$word)
                                                             ((concat_vec
                                                                 (vec_of_bits
                                                                    [B1;B0] : 2 words$word)
                                                                 ((concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B1] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    : 7 words$word))
                                                                    : 10 words$word))
                                                                  : 13 words$word))
                                                              : 15 words$word))
                                                          : 16 words$word))
                                                      : 31 words$word))
                                                  : 32 words$word))
                                              : 64 words$word)) else
                                           if ((((((b__48 =
                                                      (vec_of_bits
                                                         [B1;B0;B0;B0;B0] : 5 words$word))))
                                                   /\
                                                   (((b__49 =
                                                        (vec_of_bits
                                                           [B0;B0;B1] : 3 words$word))))))) then
                                             returnS
                                               ((zero_extend1
                                                   (( 64 : int): sail_values$ii)
                                                   ((concat_vec
                                                       (vec_of_bits [B1] : 1 words$word)
                                                       ((concat_vec
                                                           TLBIndexMax
                                                           ((concat_vec
                                                               (vec_of_bits
                                                                  [B0;B0;B0] : 3 words$word)
                                                               ((concat_vec
                                                                   (vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                   ((
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    (
                                                                    bool_to_bits
                                                                    have_cp2 : 1 words$word))
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0] : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0]
                                                                    : 1 words$word)
                                                                    : 2 words$word))
                                                                    : 3 words$word))
                                                                    : 4 words$word))
                                                                    : 5 words$word))
                                                                    : 6 words$word))
                                                                    : 7 words$word))
                                                                    : 10 words$word))
                                                                    : 13 words$word))
                                                                    : 16 words$word))
                                                                    : 19 words$word))
                                                                : 22 words$word))
                                                            : 25 words$word))
                                                        : 31 words$word))
                                                    : 32 words$word))
                                                : 64 words$word)) else
                                             if ((((((b__48 =
                                                        (vec_of_bits
                                                           [B1;B0;B0;B0;B0] : 5 words$word))))
                                                     /\
                                                     (((b__49 =
                                                          (vec_of_bits
                                                             [B0;B1;B0] : 3 words$word))))))) then
                                               returnS
                                                 ((zero_extend1
                                                     (( 64 : int): sail_values$ii)
                                                     ((concat_vec
                                                         (vec_of_bits [B1] : 1 words$word)
                                                         ((concat_vec
                                                             (vec_of_bits
                                                                [B0;B0;B0] : 3 words$word)
                                                             ((concat_vec
                                                                 (vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                 ((concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    (
                                                                    concat_vec
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0;B0] : 4 words$word)
                                                                    : 8 words$word))
                                                                    : 12 words$word))
                                                                    : 16 words$word))
                                                                    : 20 words$word))
                                                                  : 24 words$word))
                                                              : 28 words$word))
                                                          : 31 words$word))
                                                      : 32 words$word))
                                                  : 64 words$word)) else
                                               if ((((((b__48 =
                                                          (vec_of_bits
                                                             [B1;B0;B0;B0;B0] : 5 words$word))))
                                                       /\
                                                       (((b__49 =
                                                            (vec_of_bits
                                                               [B0;B1;B1] : 3 words$word))))))) then
                                                 returnS
                                                   (vec_of_bits
                                                      [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                      B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                      B0;B0;B0;B0;B0;B0;B0;B0;B1;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                      B0] : 64 words$word)
                                               else
                                                 if ((((((b__48 =
                                                            (vec_of_bits
                                                               [B1;B0;B0;B0;B0] : 5 words$word))))
                                                         /\
                                                         (((b__49 =
                                                              (vec_of_bits
                                                                 [B1;B0;B1] : 3 words$word))))))) then
                                                   returnS
                                                     (vec_of_bits
                                                        [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                        B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                                        B0] : 64 words$word)
                                                 else
                                                   if ((((((b__48 =
                                                              (vec_of_bits
                                                                 [B1;B0;B0;B0;B1] : 5 words$word))))
                                                           /\
                                                           (((b__49 =
                                                                (vec_of_bits
                                                                   [B0;B0;B0] : 3 words$word))))))) then
                                                     (read_regS CP0LLAddr_ref : ( 64 words$word) cheri_sequential_types$M)
                                                   else
                                                     if ((((((b__48 =
                                                                (vec_of_bits
                                                                   [B1;B0;B0;B1;B0] : 5 words$word))))
                                                             /\
                                                             (((b__49 =
                                                                  (vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                       returnS
                                                         ((zero_extend1
                                                             (( 64 : int): sail_values$ii)
                                                             (vec_of_bits
                                                                [B0] : 1 words$word) : 64 words$word))
                                                     else
                                                       if ((((((b__48 =
                                                                  (vec_of_bits
                                                                    [B1;B0;B0;B1;B1] : 5 words$word))))
                                                               /\
                                                               (((b__49 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                         returnS
                                                           ((zero_extend1
                                                               (( 64 : int): sail_values$ii)
                                                               (vec_of_bits
                                                                  [B0] : 1 words$word) : 64 words$word))
                                                       else
                                                         if ((((((b__48 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B1;B0;B1;B0;B0] : 5 words$word))))
                                                                 /\
                                                                 (((b__49 =
                                                                    (
                                                                    vec_of_bits
                                                                    [B0;B0;B0] : 3 words$word))))))) then
                                                           bindS
                                                             (read_regS
                                                                TLBXContext_ref)
                                                             (\ (w__18 : cheri_sequential_types$XContextReg) . 
                                                              returnS
                                                                ((get_XContextReg
                                                                    w__18 : 64 words$word)))
                                                         else
                                                           (read_regS
                                                              CP0ErrorEPC_ref : ( 64 words$word) cheri_sequential_types$M)
 )) (\ (result : 64 cheri_sequential_types$bits) . 
   wGPR rt
     (if double then result
      else
        (sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))))`;


(*val execute_MADDU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MADDU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mult_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (mul_result : 64 cheri_sequential_types$bits) .  bindS
   (read_regS HI_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 : 64 cheri_sequential_types$bits) .  bindS
   (read_regS LO_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) . 
   let result =     
((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_MADD : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_MADD:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ ((NotWordVal rtVal))))) then
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)
    else
      returnS ((mults_vec ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                  ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
                 :  64 words$word))) (\ (mul_result : 64 cheri_sequential_types$bits) .  bindS
   (read_regS HI_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 : 64 cheri_sequential_types$bits) .  bindS
   (read_regS LO_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) . 
   let result =     
((add_vec mul_result
        ((concat_vec ((subrange_vec_dec w__1 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            ((subrange_vec_dec w__2 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           :  64 words$word))
       :  64 words$word)) in seqS   
(write_regS
     HI_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))   
(write_regS
     LO_ref
     ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec result (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))))))`;


(*val execute_Load : Cheri_sequential_types.WordType -> bool -> bool -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_Load:cheri_sequential_types$WordType -> bool -> bool ->(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) width sign linked base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      width
     : ( 64 words$word) cheri_sequential_types$M) (\ (vAddr : 64 cheri_sequential_types$bits) . 
   if ((~ ((isAddressAligned vAddr width)))) then SignalExceptionBadAddr AdEL vAddr
   else bindS
     (TLBTranslate vAddr LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
     (if linked then seqS (seqS        
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))        
(write_regS CP0LLAddr_ref pAddr))
        (case width of
          B => bindS
           (MEMr_reserve_wrapper pAddr (( 1 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__1 :  8 words$word) . 
           returnS ((extendLoad w__1 sign  :  64 words$word)))
        | H => bindS
           (MEMr_reserve_wrapper pAddr (( 2 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__2 :  16 words$word) . 
           returnS ((extendLoad w__2 sign  :  64 words$word)))
        | W0 => bindS
           (MEMr_reserve_wrapper pAddr (( 4 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__3 :  32 words$word) . 
           returnS ((extendLoad w__3 sign  :  64 words$word)))
        | D => bindS
           (MEMr_reserve_wrapper pAddr (( 8 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__4 :  64 words$word) . 
           returnS ((extendLoad w__4 sign  :  64 words$word)))
        )
      else
        (case width of
          B => bindS
           (MEMr_wrapper pAddr (( 1 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__6 :  8 words$word) . 
           returnS ((extendLoad w__6 sign  :  64 words$word)))
        | H => bindS
           (MEMr_wrapper pAddr (( 2 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__7 :  16 words$word) . 
           returnS ((extendLoad w__7 sign  :  64 words$word)))
        | W0 => bindS
           (MEMr_wrapper pAddr (( 4 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__8 :  32 words$word) . 
           returnS ((extendLoad w__8 sign  :  64 words$word)))
        | D => bindS
           (MEMr_wrapper pAddr (( 8 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__9 :  64 words$word) . 
           returnS ((extendLoad w__9 sign  :  64 words$word)))
        )) (\ (memResult : 64 cheri_sequential_types$bits) . 
     wGPR rt memResult))))))`;


(*val execute_LWR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_LWR:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      W0
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (MEMr_wrapper
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):sail_values$ii)
     : ( 32 words$word) cheri_sequential_types$M) (\ mem_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__4 = ((subrange_vec_dec vAddr (( 1 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  2 words$word)) in
   let (result : 32 cheri_sequential_types$bits) =     
(if (((b__4 = (vec_of_bits [B0;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  24 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  16 words$word))
         :  32 words$word)
     else if (((b__4 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  8 words$word))
          ((subrange_vec_dec mem_val (( 31 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  24 words$word))
         :  32 words$word)
     else mem_val) in
   wGPR rt ((sign_extend1 (( 64 : int):sail_values$ii) result  :  64 words$word)))))))))`;


(*val execute_LWL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_LWL:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      W0
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (MEMr_wrapper
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 2 : int):sail_values$ii)  :  62 words$word))
          (vec_of_bits [B0;B0]  :  2 words$word)
         :  64 words$word)) (( 4 : int):sail_values$ii)
     : ( 32 words$word) cheri_sequential_types$M) (\ mem_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__0 = ((subrange_vec_dec vAddr (( 1 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  2 words$word)) in
   let (result : 32 cheri_sequential_types$bits) =     
(if (((b__0 = (vec_of_bits [B0;B0]  :  2 words$word)))) then mem_val
     else if (((b__0 = (vec_of_bits [B0;B1]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
          ((subrange_vec_dec reg_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
         :  32 words$word)
     else if (((b__0 = (vec_of_bits [B1;B0]  :  2 words$word)))) then
       (concat_vec ((subrange_vec_dec mem_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
          ((subrange_vec_dec reg_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
         :  32 words$word)
     else
       (concat_vec ((subrange_vec_dec mem_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
          ((subrange_vec_dec reg_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
         :  32 words$word)) in
   wGPR rt ((sign_extend1 (( 64 : int):sail_values$ii) result  :  64 words$word)))))))))`;


(*val execute_LUI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_LUI:(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt imm=   
 (wGPR rt
     ((sign_extend1 (( 64 : int):sail_values$ii)
         ((concat_vec imm
             (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  16 words$word)
            :  32 words$word))
        :  64 words$word))))`;


(*val execute_LDR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_LDR:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      D
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (MEMr_wrapper
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):sail_values$ii)
     : ( 64 words$word) cheri_sequential_types$M) (\ mem_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__24 = ((subrange_vec_dec vAddr (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__24 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  56 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 56 : int):sail_values$ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  48 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 48 : int):sail_values$ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  40 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 40 : int):sail_values$ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 32 : int):sail_values$ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 40 : int):sail_values$ii)  :  24 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 24 : int):sail_values$ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 48 : int):sail_values$ii)  :  16 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 16 : int):sail_values$ii)  :  48 words$word))
          :  64 words$word)
      else if (((b__24 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec reg_val (( 63 : int):sail_values$ii) (( 56 : int):sail_values$ii)  :  8 words$word))
           ((subrange_vec_dec mem_val (( 63 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  56 words$word))
          :  64 words$word)
      else mem_val))))))))`;


(*val execute_LDL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_LDL:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base rt offset=  (bindS
   (rGPR base  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (addrWrapper ((add_vec ((sign_extend1 (( 64 : int):sail_values$ii) offset  :  64 words$word)) w__0  :  64 words$word)) LoadData
      D
     : ( 64 words$word) cheri_sequential_types$M) (\ vAddr .  bindS
   (TLBTranslate vAddr StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
   (MEMr_wrapper
      ((concat_vec ((subrange_vec_dec pAddr (( 63 : int):sail_values$ii) (( 3 : int):sail_values$ii)  :  61 words$word))
          (vec_of_bits [B0;B0;B0]  :  3 words$word)
         :  64 words$word)) (( 8 : int):sail_values$ii)
     : ( 64 words$word) cheri_sequential_types$M) (\ mem_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ reg_val . 
   let b__16 = ((subrange_vec_dec vAddr (( 2 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  3 words$word)) in
   wGPR rt
     (if (((b__16 = (vec_of_bits [B0;B0;B0]  :  3 words$word)))) then mem_val
      else if (((b__16 = (vec_of_bits [B0;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 55 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  56 words$word))
           ((subrange_vec_dec reg_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 47 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  48 words$word))
           ((subrange_vec_dec reg_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B0;B1;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 39 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  40 words$word))
           ((subrange_vec_dec reg_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
           ((subrange_vec_dec reg_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B0;B1]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 23 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  24 words$word))
           ((subrange_vec_dec reg_val (( 39 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  40 words$word))
          :  64 words$word)
      else if (((b__16 = (vec_of_bits [B1;B1;B0]  :  3 words$word)))) then
        (concat_vec ((subrange_vec_dec mem_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
           ((subrange_vec_dec reg_val (( 47 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  48 words$word))
          :  64 words$word)
      else
        (concat_vec ((subrange_vec_dec mem_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
           ((subrange_vec_dec reg_val (( 55 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  56 words$word))
          :  64 words$word)))))))))`;


(*val execute_JR : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_JR:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs=  (bindS (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  execute_branch w__0)))`;


(*val execute_JALR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_JALR:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS (seqS   
(execute_branch w__0)
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec_int w__1 (( 8 : int):sail_values$ii)  :  64 words$word))))))`;


(*val execute_JAL : Machine_word.mword Machine_word.ty26 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_JAL:(26)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) offset=  (bindS
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):sail_values$ii)  :  64 words$word)) (( 63 : int):sail_values$ii) (( 28 : int):sail_values$ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__1 :  64 words$word) . 
   wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) ((add_vec_int w__1 (( 8 : int):sail_values$ii)  :  64 words$word))))))`;


(*val execute_J : Machine_word.mword Machine_word.ty26 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_J:(26)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) offset=  (bindS
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) . 
   execute_branch
     ((concat_vec
         ((subrange_vec_dec ((add_vec_int w__0 (( 4 : int):sail_values$ii)  :  64 words$word)) (( 63 : int):sail_values$ii) (( 28 : int):sail_values$ii)  :  36 words$word))
         ((concat_vec offset (vec_of_bits [B0;B0]  :  2 words$word)  :  28 words$word))
        :  64 words$word)))))`;


(*val execute_ImplementationDefinedStopFetching : unit -> unit*)

val _ = Define `
 ((execute_ImplementationDefinedStopFetching:unit -> unit) g__117=  () )`;


(*val execute_HCF : unit -> unit*)

val _ = Define `
 ((execute_HCF:unit -> unit) g__122=  () )`;


(*val execute_ERET : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ERET:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__127=  (bindS (seqS (seqS (seqS   
(checkCP0Access () )   
(ERETHook () ))   
(write_regS CP0LLBit_ref (vec_of_bits [B0]  :  1 words$word)))   
(read_regS CP0Status_ref)) (\ (w__0 : cheri_sequential_types$StatusReg) . 
   if (((((bits_to_bool ((get_StatusReg_ERL w__0  :  1 words$word)))) = ((bit_to_bool B1))))) then bindS
     (read_regS CP0ErrorEPC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 : 64 cheri_sequential_types$bits) .  seqS     
(write_regS nextPC_ref w__1) (set_StatusReg_ERL CP0Status_ref (vec_of_bits [B0]  :  1 words$word)))
   else bindS
     (read_regS CP0EPC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) .  seqS     
(write_regS nextPC_ref w__2) (set_StatusReg_EXL CP0Status_ref (vec_of_bits [B0]  :  1 words$word))))))`;


(*val execute_DSUBU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSUBU:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((sub_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DSUB : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSUB:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let (temp65 : 65 cheri_sequential_types$bits) =     
((sub_vec ((sign_extend1 (( 65 : int):sail_values$ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):sail_values$ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec temp65 (( 64 : int):sail_values$ii)))))
          ((bit_to_bool ((access_vec_dec temp65 (( 63 : int):sail_values$ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec temp65 (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word))))))`;


(*val execute_DSRLV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRLV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) in bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRL32 : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRL32:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRL:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (shift_bits_right instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRAV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRAV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let sa = ((subrange_vec_dec w__0 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word)) in bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1)))))`;


(*val execute_DSRA32 : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRA32:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp . 
   let sa32 = ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word)) in bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa32  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSRA : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSRA:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ temp .  bindS
   (shift_bits_right_arith 
  instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict temp sa  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0))))`;


(*val execute_DSLLV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSLLV:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 ((subrange_vec_dec w__1 (( 5 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  6 words$word))  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :
      64 words$word) . 
   wGPR rd w__2)))))`;


(*val execute_DSLL32 : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSLL32:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 ((concat_vec (vec_of_bits [B1]  :  1 words$word) sa  :  6 words$word))
     : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd w__1))))`;


(*val execute_DSLL : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DSLL:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt rd sa=  (bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (shift_bits_left instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict instance_Sail_values_Bitvector_Machine_word_mword_dict w__0 sa  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) .  wGPR rd w__1))))`;


(*val execute_DMULTU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DMULTU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let result = ((mult_vec w__0 w__1  :  128 words$word)) in seqS   
(write_regS HI_ref ((subrange_vec_dec result (( 127 : int):sail_values$ii) (( 64 : int):sail_values$ii)  :  64 words$word)))   
(write_regS LO_ref ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word)))))))`;


(*val execute_DMULT : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DMULT:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let result = ((mults_vec w__0 w__1  :  128 words$word)) in seqS   
(write_regS HI_ref ((subrange_vec_dec result (( 127 : int):sail_values$ii) (( 64 : int):sail_values$ii)  :  64 words$word)))   
(write_regS LO_ref ((subrange_vec_dec result (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word)))))))`;


(*val execute_DIVU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DIVU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0]
                     :  64 words$word)))))))))) then bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__0 : 32 cheri_sequential_types$bits) .  bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 : 32 cheri_sequential_types$bits) . 
      returnS (w__0, w__1)))
    else
      let si = (lem$w2ui ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))) in
      let ti = (lem$w2ui ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (hardware_mod si ti) in
      returnS ((to_bits ((make_the_value (( 32 : int):sail_values$ii)  :  32 itself)) qi  :  32 words$word),
               (to_bits ((make_the_value (( 32 : int):sail_values$ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in seqS   
(write_regS HI_ref ((sign_extend1 (( 64 : int):sail_values$ii) r  :  64 words$word)))   
(write_regS LO_ref ((sign_extend1 (( 64 : int):sail_values$ii) q  :  64 words$word))))))))`;


(*val execute_DIV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DIV:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rsVal .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rtVal .  bindS
   (if (((((NotWordVal rsVal)) \/ (((((NotWordVal rtVal)) \/ (((rtVal = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                 B0]
                     :  64 words$word)))))))))) then bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__0 : 32 cheri_sequential_types$bits) .  bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__1 : 32 cheri_sequential_types$bits) . 
      returnS (w__0, w__1)))
    else
      let si = (integer_word$w2i ((subrange_vec_dec rsVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))) in
      let ti = (integer_word$w2i ((subrange_vec_dec rtVal (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))) in
      let qi = (hardware_quot si ti) in
      let ri = (si - ((ti * qi))) in
      returnS ((to_bits ((make_the_value (( 32 : int):sail_values$ii)  :  32 itself)) qi  :  32 words$word),
               (to_bits ((make_the_value (( 32 : int):sail_values$ii)  :  32 itself)) ri  :  32 words$word))) (\ varstup .  let (q, r) = varstup in seqS   
(write_regS HI_ref ((sign_extend1 (( 64 : int):sail_values$ii) r  :  64 words$word)))   
(write_regS LO_ref ((sign_extend1 (( 64 : int):sail_values$ii) q  :  64 words$word))))))))`;


(*val execute_DDIVU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DDIVU:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rsVal = (lem$w2ui w__0) in bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let rtVal = (lem$w2ui w__1) in bindS
   (if (((rtVal = (( 0 : int):sail_values$ii)))) then bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) .  bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 : 64 cheri_sequential_types$bits) . 
      returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (hardware_mod rsVal rtVal) in
      returnS ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) qi  :  64 words$word),
               (to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in seqS   
(write_regS LO_ref q) (write_regS HI_ref r))))))`;


(*val execute_DDIV : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DDIV:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rsVal = (integer_word$w2i w__0) in bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let rtVal = (integer_word$w2i w__1) in bindS
   (if (((rtVal = (( 0 : int):sail_values$ii)))) then bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 : 64 cheri_sequential_types$bits) .  bindS
      (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 : 64 cheri_sequential_types$bits) . 
      returnS (w__2, w__3)))
    else
      let qi = (hardware_quot rsVal rtVal) in
      let ri = (rsVal - ((qi * rtVal))) in
      returnS ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) qi  :  64 words$word),
               (to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ri  :  64 words$word))) (\ varstup .  let (q, r) = varstup in seqS   
(write_regS LO_ref q) (write_regS HI_ref r))))))`;


(*val execute_DADDU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DADDU:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((add_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_DADDIU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((add_vec w__0 ((sign_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_DADDI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DADDI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let (sum65 : 65 cheri_sequential_types$bits) =     
((add_vec ((sign_extend1 (( 65 : int):sail_values$ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):sail_values$ii) imm  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):sail_values$ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):sail_values$ii))))))) then
     SignalException Ov
   else wGPR rt ((subrange_vec_dec sum65 (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word)))))`;


(*val execute_DADD : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_DADD:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   let (sum65 : 65 cheri_sequential_types$bits) =     
((add_vec ((sign_extend1 (( 65 : int):sail_values$ii) w__0  :  65 words$word)) ((sign_extend1 (( 65 : int):sail_values$ii) w__1  :  65 words$word))
       :  65 words$word)) in
   if ((neq_bool ((bit_to_bool ((access_vec_dec sum65 (( 64 : int):sail_values$ii)))))
          ((bit_to_bool ((access_vec_dec sum65 (( 63 : int):sail_values$ii))))))) then
     SignalException Ov
   else wGPR rd ((subrange_vec_dec sum65 (( 63 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  64 words$word))))))`;


(*val execute_ClearRegs : Cheri_sequential_types.ClearRegSet -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ClearRegs:cheri_sequential_types$ClearRegSet ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) regset m=  (seqS (seqS
   (if ((((((regset = CLo))) \/ (((regset = CHi)))))) then checkCP2usable () 
    else returnS () )
   (if (((regset = CHi))) then
      (foreachS (index_list (( 0 : int):sail_values$ii) (( 15 : int):sail_values$ii) (( 1 : int):sail_values$ii)) () 
        (\ i unit_var . 
          let r =            
((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) ((i + (( 16 : int):sail_values$ii)))  :  5 words$word)) in bindS          
(register_inaccessible r) (\ (w__0 : bool) . 
          if (((((bit_to_bool ((access_vec_dec m i)))) /\ w__0))) then
            raise_c2_exception CapEx_AccessSystemRegsViolation r
          else returnS () )))
    else returnS () ))
   (foreachS (index_list (( 0 : int):sail_values$ii) (( 15 : int):sail_values$ii) (( 1 : int):sail_values$ii)) () 
     (\ i unit_var . 
       if ((bit_to_bool ((access_vec_dec m i)))) then
         (case regset of
           GPLo =>
            wGPR ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) i  :  5 words$word))
              ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word))
         | GPHi =>
            wGPR
              ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) ((i + (( 16 : int):sail_values$ii)))
                 :  5 words$word)) ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word))
         | CLo =>
            writeCapReg ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) i  :  5 words$word)) null_cap
         | CHi =>
            writeCapReg
              ((to_bits ((make_the_value (( 5 : int):sail_values$ii)  :  5 itself)) ((i + (( 16 : int):sail_values$ii)))
                 :  5 words$word)) null_cap
         )
       else returnS () ))))`;


(*val execute_CWriteHwr : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CWriteHwr:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cb sel=  (seqS   
(checkCP2usable () )   
(let l__24 = (lem$w2ui sel) in bindS
   (if (((l__24 = (( 0 : int):sail_values$ii)))) then returnS (F, F)
    else if (((l__24 = (( 1 : int):sail_values$ii)))) then returnS (F, F)
    else if (((l__24 = (( 8 : int):sail_values$ii)))) then returnS (F, T)
    else if (((l__24 = (( 22 : int):sail_values$ii)))) then returnS (T, F)
    else if (((l__24 = (( 23 : int):sail_values$ii)))) then returnS (T, F)
    else if (((l__24 = (( 29 : int):sail_values$ii)))) then returnS (T, T)
    else if (((l__24 = (( 30 : int):sail_values$ii)))) then returnS (T, T)
    else if (((l__24 = (( 31 : int):sail_values$ii)))) then returnS (T, T)
    else SignalException ResI) (\ varstup .  let ((needSup : bool), (needAccessSys : bool)) = varstup in bindS   
(register_inaccessible cb) (\ (w__8 : bool) . 
   if w__8 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(pcc_access_system_regs () ) (\ (w__9 : bool) . 
     if (((needAccessSys /\ ((~ w__9))))) then
       raise_c2_exception CapEx_AccessSystemRegsViolation sel
     else bindS       
(getAccessLevel () ) (\ (w__10 : cheri_sequential_types$AccessLevel) . 
       if (((needSup /\ ((~ ((grantsAccess w__10 Supervisor))))))) then
         raise_c2_exception CapEx_AccessSystemRegsViolation sel
       else bindS         
(readCapReg cb) (\ capVal . 
         let l__16 = (lem$w2ui sel) in
         if (((l__16 = (( 0 : int):sail_values$ii)))) then writeCapReg DDC capVal
         else if (((l__16 = (( 1 : int):sail_values$ii)))) then
           write_regS CTLSU_ref ((capStructToCapReg capVal  :  257 words$word))
         else if (((l__16 = (( 8 : int):sail_values$ii)))) then
           write_regS CTLSP_ref ((capStructToCapReg capVal  :  257 words$word))
         else if (((l__16 = (( 22 : int):sail_values$ii)))) then writeCapReg KR1C capVal
         else if (((l__16 = (( 23 : int):sail_values$ii)))) then writeCapReg KR2C capVal
         else if (((l__16 = (( 29 : int):sail_values$ii)))) then writeCapReg KCC capVal
         else if (((l__16 = (( 30 : int):sail_values$ii)))) then writeCapReg KDC capVal
         else if (((l__16 = (( 31 : int):sail_values$ii)))) then writeCapReg EPCC capVal
         else assert_expS F "should be unreachable code"))))))))`;


(*val execute_CUnseal : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CUnseal:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cs ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else bindS       
(register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if (((ct_cursor <> ((lem$w2ui cs_val.CapStruct_otype))))) then
         raise_c2_exception CapEx_TypeViolation ct
       else if ((~ ct_val.CapStruct_permit_unseal)) then
         raise_c2_exception CapEx_PermitUnsealViolation ct
       else if ((ct_cursor < ((getCapBase ct_val)))) then
         raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ((getCapTop ct_val)))) then
         raise_c2_exception CapEx_LengthViolation ct
       else
         writeCapReg cd
           (cs_val with<|
             CapStruct_sealed := F; CapStruct_otype := ((zeros (( 24 : int):sail_values$ii) ()   :  24 words$word)); CapStruct_global :=
               (((cs_val.CapStruct_global /\ ct_val.CapStruct_global)))|>))))))))`;


(*val execute_CToPtr : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CToPtr:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg ct)) (\ ct_val .  bindS   
(readCapReg cb) (\ cb_val .  bindS   
(register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let cbBase = (getCapBase cb_val) in
       let cbTop = (getCapTop cb_val) in
       let ctBase = (getCapBase ct_val) in
       let ctTop = (getCapTop ct_val) in
       wGPR rd
         (if (((((~ cb_val.CapStruct_tag)) \/ (((((cbBase < ctBase)) \/ ((cbTop > ctTop)))))))) then
            (zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)
          else
            (to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
               ((((getCapCursor cb_val)) - ctBase))
              :  64 words$word))))))))`;


(*val execute_CTestSubset : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CTestSubset:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in
   let ct_perms = ((getCapPerms ct_val  :  31 words$word)) in
   let cb_top = (getCapTop cb_val) in
   let cb_base = (getCapBase cb_val) in
   let cb_perms = ((getCapPerms cb_val  :  31 words$word)) in bindS   
(register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else
       let (result : 1 cheri_sequential_types$bits) =         
(if ((neq_bool cb_val.CapStruct_tag ct_val.CapStruct_tag)) then
           (vec_of_bits [B0]  :  1 words$word)
         else if ((ct_base < cb_base)) then (vec_of_bits [B0]  :  1 words$word)
         else if ((ct_top > cb_top)) then (vec_of_bits [B0]  :  1 words$word)
         else if (((((and_vec ct_perms cb_perms  :  31 words$word)) <> ct_perms))) then
           (vec_of_bits [B0]  :  1 words$word)
         else (vec_of_bits [B1]  :  1 words$word)) in
       wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) result  :  64 words$word))))))))`;


(*val execute_CSub : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSub:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg ct)) (\ ct_val .  bindS   
(readCapReg cb) (\ cb_val .  bindS   
(register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else
       wGPR rd
         ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
             ((((getCapCursor cb_val)) - ((getCapCursor ct_val))))
            :  64 words$word))))))))`;


(*val execute_CStore : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty8 -> Cheri_sequential_types.WordType -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CStore:(5)words$word ->(5)words$word ->(5)words$word ->(5)words$word ->(8)words$word -> cheri_sequential_types$WordType -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs cb rt rd offset width conditional=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS   
(register_inaccessible cb) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
   else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
   else if ((~ cb_val.CapStruct_permit_store)) then
     raise_c2_exception CapEx_PermitStoreViolation cb
   else
     let size1 = (wordWidthBytes width) in
     let cursor = (getCapCursor cb_val) in bindS
     (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
     let vAddr =       
(hardware_mod
         ((((cursor + ((lem$w2ui w__1)))) + ((size1 * ((integer_word$w2i offset))))))
         ((pow2 (( 64 : int):sail_values$ii)))) in
     let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
     if ((((vAddr + size1)) > ((getCapTop cb_val)))) then
       raise_c2_exception CapEx_LengthViolation cb
     else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
     else if ((~ ((isAddressAligned vAddr64 width)))) then SignalExceptionBadAddr AdES vAddr64
     else bindS
       (TLBTranslate vAddr64 StoreData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
       (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val . 
       if conditional then bindS
         (read_regS CP0LLBit_ref  : ( 1 words$word) cheri_sequential_types$M) (\ (w__2 : 1 cheri_sequential_types$bits) .  bindS
         (if ((bit_to_bool ((access_vec_dec w__2 (( 0 : int):sail_values$ii))))) then
            (case width of
              B =>
               MEMw_conditional_wrapper pAddr (( 1 : int):sail_values$ii)
                 ((subrange_vec_dec rs_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
            | H =>
               MEMw_conditional_wrapper pAddr (( 2 : int):sail_values$ii)
                 ((subrange_vec_dec rs_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
            | W0 =>
               MEMw_conditional_wrapper pAddr (( 4 : int):sail_values$ii)
                 ((subrange_vec_dec rs_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
            | D => MEMw_conditional_wrapper pAddr (( 8 : int):sail_values$ii) rs_val
            )
          else returnS F) (\ (success : bool) . 
         wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
       else
         (case width of
           B => MEMw_wrapper pAddr (( 1 : int):sail_values$ii) ((subrange_vec_dec rs_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word))
         | H => MEMw_wrapper pAddr (( 2 : int):sail_values$ii) ((subrange_vec_dec rs_val (( 15 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  16 words$word))
         | W0 => MEMw_wrapper pAddr (( 4 : int):sail_values$ii) ((subrange_vec_dec rs_val (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
         | D => MEMw_wrapper pAddr (( 8 : int):sail_values$ii) rs_val
         ))))))))`;


(*val execute_CSetOffset : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSetOffset:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val .  bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (setCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CSetCause : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSetCause:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rt=  (bindS (seqS   
(checkCP2usable () )   
(pcc_access_system_regs () )) (\ (w__0 : bool) . 
   if ((~ w__0)) then raise_c2_exception_noreg CapEx_AccessSystemRegsViolation
   else bindS
     (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val .  seqS     
(set_CapCauseReg_ExcCode CapCause_ref ((subrange_vec_dec rt_val (( 15 : int):sail_values$ii) (( 8 : int):sail_values$ii)  :  8 words$word)))     
(set_CapCauseReg_RegNum CapCause_ref ((subrange_vec_dec rt_val (( 7 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  8 words$word)))))))`;


(*val execute_CSetBoundsImmediate : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty11 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSetBoundsImmediate:(5)words$word ->(5)words$word ->(11)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb imm=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val . 
   let immU = (lem$w2ui imm) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + immU) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else  (case
 setCapBounds cb_val
   ((to_bits ((make_the_value (( 64 : int): sail_values$ii) : 64 itself))
       cursor : 64 words$word))
   ((to_bits ((make_the_value (( 65 : int): sail_values$ii) : 65 itself))
       newTop : 65 words$word)) of
     (_, newCap) =>
 writeCapReg cd newCap
 ))))))`;


(*val execute_CSetBoundsExact : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSetBoundsExact:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rt_val = (lem$w2ui w__0) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + rt_val) in bindS   
(register_inaccessible cd) (\ (w__1 : bool) . 
   if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else
       let (exact, newCap) =         
(setCapBounds cb_val
           ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) cursor  :  64 words$word))
           ((to_bits ((make_the_value (( 65 : int):sail_values$ii)  :  65 itself)) newTop  :  65 words$word))) in
       if ((~ exact)) then raise_c2_exception CapEx_InexactBounds cb
       else writeCapReg cd newCap))))))`;


(*val execute_CSetBounds : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSetBounds:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   let rt_val = (lem$w2ui w__0) in
   let cursor = (getCapCursor cb_val) in
   let base = (getCapBase cb_val) in
   let top = (getCapTop cb_val) in
   let newTop = (cursor + rt_val) in bindS   
(register_inaccessible cd) (\ (w__1 : bool) . 
   if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((cursor < base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((newTop > top)) then raise_c2_exception CapEx_LengthViolation cb
     else  (case
 setCapBounds cb_val
   ((to_bits ((make_the_value (( 64 : int): sail_values$ii) : 64 itself))
       cursor : 64 words$word))
   ((to_bits ((make_the_value (( 65 : int): sail_values$ii) : 65 itself))
       newTop : 65 words$word)) of
     (_, newCap) =>
 writeCapReg cd newCap
 )))))))`;


(*val execute_CSeal : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSeal:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cs ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else bindS       
(register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ ct_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation ct
       else if cs_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if ((~ ct_val.CapStruct_permit_seal)) then
         raise_c2_exception CapEx_PermitSealViolation ct
       else if ((ct_cursor < ct_base)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor > max_otype)) then raise_c2_exception CapEx_LengthViolation ct
       else
         let (success, newCap) =           
(sealCap cs_val
             ((to_bits ((make_the_value (( 24 : int):sail_values$ii)  :  24 itself)) ct_cursor  :  24 words$word))) in
         if ((~ success)) then raise_c2_exception CapEx_InexactBounds cs
         else writeCapReg cd newCap)))))))`;


(*val execute_CSC : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty11 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CSC:(5)words$word ->(5)words$word ->(5)words$word ->(5)words$word ->(11)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cs cb rt rd offset conditional=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val .  bindS   
(readCapReg cb) (\ cb_val .  bindS   
(register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_store)) then
       raise_c2_exception CapEx_PermitStoreViolation cb
     else if ((~ cb_val.CapStruct_permit_store_cap)) then
       raise_c2_exception CapEx_PermitStoreCapViolation cb
     else if (((((~ cb_val.CapStruct_permit_store_local_cap)) /\ (((cs_val.CapStruct_tag /\ ((~ cs_val.CapStruct_global)))))))) then
       raise_c2_exception CapEx_PermitStoreLocalCapViolation cb
     else
       let cursor = (getCapCursor cb_val) in bindS
       (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
       let vAddr =         
(hardware_mod
           ((((cursor + ((lem$w2ui w__2)))) + (((( 16 : int):sail_values$ii) * ((integer_word$w2i offset))))))
           ((pow2 (( 64 : int):sail_values$ii)))) in
       let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
       if ((((vAddr + cap_size)) > ((getCapTop cb_val)))) then
         raise_c2_exception CapEx_LengthViolation cb
       else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
       else if (((((hardware_mod vAddr cap_size)) <> (( 0 : int):sail_values$ii)))) then
         SignalExceptionBadAddr AdES vAddr64
       else bindS
         (TLBTranslateC vAddr64 StoreData  : (( 64 words$word # bool)) cheri_sequential_types$M) (\ varstup .  let (pAddr, noStoreCap) = varstup in
         if (((cs_val.CapStruct_tag /\ noStoreCap))) then
           raise_c2_exception CapEx_TLBNoStoreCap cs
         else if conditional then bindS
           (read_regS CP0LLBit_ref  : ( 1 words$word) cheri_sequential_types$M) (\ (w__3 : 1 cheri_sequential_types$bits) .  bindS
           (if ((bit_to_bool ((access_vec_dec w__3 (( 0 : int):sail_values$ii))))) then
              MEMw_tagged_conditional pAddr cs_val.CapStruct_tag
                ((capStructToMemBits cs_val  :  256 words$word))
            else returnS F) (\ success . 
           wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits success  :  1 words$word))  :  64 words$word))))
         else MEMw_tagged pAddr cs_val.CapStruct_tag ((capStructToMemBits cs_val  :  256 words$word))))))))))`;


(*val execute_CReturn : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CReturn:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__128=  (seqS (checkCP2usable () ) (raise_c2_exception_noreg CapEx_ReturnTrap)))`;


(*val execute_CReadHwr : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CReadHwr:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd sel=  (seqS   
(checkCP2usable () )   
(let l__8 = (lem$w2ui sel) in bindS
   (if (((l__8 = (( 0 : int):sail_values$ii)))) then returnS (F, F)
    else if (((l__8 = (( 1 : int):sail_values$ii)))) then returnS (F, F)
    else if (((l__8 = (( 8 : int):sail_values$ii)))) then returnS (F, T)
    else if (((l__8 = (( 22 : int):sail_values$ii)))) then returnS (T, F)
    else if (((l__8 = (( 23 : int):sail_values$ii)))) then returnS (T, F)
    else if (((l__8 = (( 29 : int):sail_values$ii)))) then returnS (T, T)
    else if (((l__8 = (( 30 : int):sail_values$ii)))) then returnS (T, T)
    else if (((l__8 = (( 31 : int):sail_values$ii)))) then returnS (T, T)
    else SignalException ResI) (\ varstup .  let ((needSup : bool), (needAccessSys : bool)) = varstup in bindS   
(register_inaccessible cd) (\ (w__8 : bool) . 
   if w__8 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(pcc_access_system_regs () ) (\ (w__9 : bool) . 
     if (((needAccessSys /\ ((~ w__9))))) then
       raise_c2_exception CapEx_AccessSystemRegsViolation sel
     else bindS       
(getAccessLevel () ) (\ (w__10 : cheri_sequential_types$AccessLevel) . 
       if (((needSup /\ ((~ ((grantsAccess w__10 Supervisor))))))) then
         raise_c2_exception CapEx_AccessSystemRegsViolation sel
       else
         let l__0 = (lem$w2ui sel) in bindS
         (if (((l__0 = (( 0 : int):sail_values$ii)))) then readCapReg DDC
          else if (((l__0 = (( 1 : int):sail_values$ii)))) then bindS
            (read_regS CTLSU_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__12 :  257 words$word) . 
            returnS ((capRegToCapStruct w__12)))
          else if (((l__0 = (( 8 : int):sail_values$ii)))) then bindS
            (read_regS CTLSP_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__13 :  257 words$word) . 
            returnS ((capRegToCapStruct w__13)))
          else if (((l__0 = (( 22 : int):sail_values$ii)))) then readCapReg KR1C
          else if (((l__0 = (( 23 : int):sail_values$ii)))) then readCapReg KR2C
          else if (((l__0 = (( 29 : int):sail_values$ii)))) then readCapReg KCC
          else if (((l__0 = (( 30 : int):sail_values$ii)))) then readCapReg KDC
          else if (((l__0 = (( 31 : int):sail_values$ii)))) then readCapReg EPCC
          else seqS (assert_expS F "should be unreachable code") (undefined_CapStruct () )) (\ (capVal :
           cheri_sequential_types$CapStruct) . 
         writeCapReg cd capVal))))))))`;


(*val execute_CPtrCmp : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.CPtrCmpOp -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CPtrCmp:(5)words$word ->(5)words$word ->(5)words$word -> cheri_sequential_types$CPtrCmpOp ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb ct op=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(register_inaccessible ct) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
     else bindS       
(readCapReg cb) (\ cb_val .  bindS       
(readCapReg ct) (\ ct_val . 
       let equal = F in
       let ltu = F in
       let lts = F in
       let ((equal : bool), (lts : bool), (ltu : bool)) =         
(if ((neq_bool cb_val.CapStruct_tag ct_val.CapStruct_tag)) then
           let ((lts : bool), (ltu : bool)) =             
(if ((~ cb_val.CapStruct_tag)) then
               let (ltu : bool) = T in
               let (lts : bool) = T in
               (lts, ltu)
             else (lts, ltu)) in
           (equal, lts, ltu)
         else
           let cursor1 = (getCapCursor cb_val) in
           let cursor2 = (getCapCursor ct_val) in
           let (equal : bool) = (cursor1 = cursor2) in
           let (ltu : bool) = (cursor1 < cursor2) in
           let (lts : bool) =             
((integer_word$w2i ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) cursor1  :  64 words$word))) < (integer_word$w2i ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) cursor2  :  64 words$word)))) in
           (equal, lts, ltu)) in
       let (cmp : bool) =         
((case op of
           CEQ => equal
         | CNE => ~ equal
         | CLT => lts
         | CLE => (lts \/ equal)
         | CLTU => ltu
         | CLEU => (ltu \/ equal)
         | CEXEQ => (cb_val = ct_val)
         | CNEXEQ => (cb_val <> ct_val)
         )) in
       wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits cmp  :  1 words$word))  :  64 words$word))))))))`;


(*val execute_CMOVX : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CMOVX:(5)words$word ->(5)words$word ->(5)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt ismovn=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else bindS
       (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
       if ((bits_to_bool
              ((xor_vec
                  ((bool_to_bits (((w__2 = ((zeros (( 64 : int):sail_values$ii) ()   :  64 words$word)))))  :  1 words$word))
                  ((bool_to_bits ismovn  :  1 words$word))
                 :  1 words$word)))) then bindS         
(readCapReg cb) (\ (w__3 : cheri_sequential_types$CapStruct) .  writeCapReg cd w__3)
       else returnS () )))))`;


(*val execute_CLoad : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty8 -> bool -> Cheri_sequential_types.WordType -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CLoad:(5)words$word ->(5)words$word ->(5)words$word ->(8)words$word -> bool -> cheri_sequential_types$WordType -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) arg0 arg1 arg2 arg3 arg4 arg5 arg6=   
 (let merge_var = (arg0, arg1, arg2, arg3, arg4, arg5, arg6) in
   (case merge_var of
     (rd, cb, rt, offset, signext, B, linked) => bindS (seqS      
(checkCP2usable () )      
(readCapReg cb)) (\ cb_val .  bindS      
(register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in bindS
        (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
        let vAddr =          
(hardware_mod
            ((((cursor + ((lem$w2ui w__1)))) + (((( 1 : int):sail_values$ii) * ((integer_word$w2i offset))))))
            ((pow2 (( 64 : int):sail_values$ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 1 : int):sail_values$ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 B)))) then SignalExceptionBadAddr AdEL vAddr64
        else bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
          (if linked then bindS (seqS (seqS             
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))             
(write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 1 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M)) (\ (w__2 :  8 words$word) . 
             returnS ((extendLoad w__2 signext  :  64 words$word)))
           else bindS
             (MEMr_wrapper pAddr (( 1 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M) (\ (w__3 :  8 words$word) . 
             returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 cheri_sequential_types$bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, D, linked) => bindS (seqS      
(checkCP2usable () )      
(readCapReg cb)) (\ cb_val .  bindS      
(register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in bindS
        (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
        let vAddr =          
(hardware_mod
            ((((cursor + ((lem$w2ui w__1)))) + (((( 8 : int):sail_values$ii) * ((integer_word$w2i offset))))))
            ((pow2 (( 64 : int):sail_values$ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 8 : int):sail_values$ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 D)))) then SignalExceptionBadAddr AdEL vAddr64
        else bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
          (if linked then bindS (seqS (seqS             
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))             
(write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 8 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__2 :  64 words$word) . 
             returnS ((extendLoad w__2 signext  :  64 words$word)))
           else bindS
             (MEMr_wrapper pAddr (( 8 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 :  64 words$word) . 
             returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 cheri_sequential_types$bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, H, linked) => bindS (seqS      
(checkCP2usable () )      
(readCapReg cb)) (\ cb_val .  bindS      
(register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in bindS
        (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
        let vAddr =          
(hardware_mod
            ((((cursor + ((lem$w2ui w__1)))) + (((( 2 : int):sail_values$ii) * ((integer_word$w2i offset))))))
            ((pow2 (( 64 : int):sail_values$ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 2 : int):sail_values$ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 H)))) then SignalExceptionBadAddr AdEL vAddr64
        else bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
          (if linked then bindS (seqS (seqS             
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))             
(write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 2 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M)) (\ (w__2 :  16 words$word) . 
             returnS ((extendLoad w__2 signext  :  64 words$word)))
           else bindS
             (MEMr_wrapper pAddr (( 2 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M) (\ (w__3 :  16 words$word) . 
             returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 cheri_sequential_types$bits) . 
          wGPR rd memResult)))))
   | (rd, cb, rt, offset, signext, W0, linked) => bindS (seqS      
(checkCP2usable () )      
(readCapReg cb)) (\ cb_val .  bindS      
(register_inaccessible cb) (\ (w__0 : bool) . 
      if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
      else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
      else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
      else if ((~ cb_val.CapStruct_permit_load)) then
        raise_c2_exception CapEx_PermitLoadViolation cb
      else
        let cursor = (getCapCursor cb_val) in bindS
        (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
        let vAddr =          
(hardware_mod
            ((((cursor + ((lem$w2ui w__1)))) + (((( 4 : int):sail_values$ii) * ((integer_word$w2i offset))))))
            ((pow2 (( 64 : int):sail_values$ii)))) in
        let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
        if ((((vAddr + (( 4 : int):sail_values$ii))) > ((getCapTop cb_val)))) then
          raise_c2_exception CapEx_LengthViolation cb
        else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
        else if ((~ ((isAddressAligned vAddr64 W0)))) then SignalExceptionBadAddr AdEL vAddr64
        else bindS
          (TLBTranslate vAddr64 LoadData  : ( 64 words$word) cheri_sequential_types$M) (\ pAddr .  bindS
          (if linked then bindS (seqS (seqS             
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))             
(write_regS CP0LLAddr_ref pAddr))
             (MEMr_reserve_wrapper pAddr (( 4 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__2 :  32 words$word) . 
             returnS ((extendLoad w__2 signext  :  64 words$word)))
           else bindS
             (MEMr_wrapper pAddr (( 4 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M) (\ (w__3 :  32 words$word) . 
             returnS ((extendLoad w__3 signext  :  64 words$word)))) (\ (memResult : 64 cheri_sequential_types$bits) . 
          wGPR rd memResult)))))
   )))`;


(*val execute_CLC : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty11 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CLC:(5)words$word ->(5)words$word ->(5)words$word ->(11)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt offset linked=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_load)) then
       raise_c2_exception CapEx_PermitLoadViolation cb
     else
       let cursor = (getCapCursor cb_val) in bindS
       (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
       let vAddr =         
(hardware_mod
           ((((cursor + ((lem$w2ui w__2)))) + (((( 16 : int):sail_values$ii) * ((integer_word$w2i offset))))))
           ((pow2 (( 64 : int):sail_values$ii)))) in
       let vAddr64 = ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) vAddr  :  64 words$word)) in
       if ((((vAddr + cap_size)) > ((getCapTop cb_val)))) then
         raise_c2_exception CapEx_LengthViolation cb
       else if ((vAddr < ((getCapBase cb_val)))) then raise_c2_exception CapEx_LengthViolation cb
       else if (((((hardware_mod vAddr cap_size)) <> (( 0 : int):sail_values$ii)))) then
         SignalExceptionBadAddr AdEL vAddr64
       else bindS
         (TLBTranslateC vAddr64 LoadData  : (( 64 words$word # bool)) cheri_sequential_types$M) (\ varstup .  let (pAddr, suppressTag) = varstup in
         let cd = (lem$w2ui cd) in
         if linked then bindS (seqS (seqS           
(write_regS CP0LLBit_ref (vec_of_bits [B1]  :  1 words$word))           
(write_regS CP0LLAddr_ref pAddr))
           (MEMr_tagged_reserve pAddr  : ((bool #  256 words$word)) cheri_sequential_types$M)) (\ varstup .  let (tag, mem) = varstup in
           write_regS
             ((access_list_dec CapRegs cd  : (cheri_sequential_types$regstate, cheri_sequential_types$register_value, ( 257 words$word)) sail_values$register_ref))
             ((memBitsToCapBits
                 (((tag /\ (((cb_val.CapStruct_permit_load_cap /\ ((~ suppressTag))))))))
                 mem
                :  257 words$word)))
         else bindS
           (MEMr_tagged pAddr  : ((bool #  256 words$word)) cheri_sequential_types$M) (\ varstup .  let (tag, mem) = varstup in
           write_regS
             ((access_list_dec CapRegs cd  : (cheri_sequential_types$regstate, cheri_sequential_types$register_value, ( 257 words$word)) sail_values$register_ref))
             ((memBitsToCapBits
                 (((tag /\ (((cb_val.CapStruct_permit_load_cap /\ ((~ suppressTag))))))))
                 mem
                :  257 words$word))))))))))`;


(*val execute_CJALR : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CJALR:(5)words$word ->(5)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb link=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val . 
   let cb_ptr = (getCapCursor cb_val) in
   let cb_top = (getCapTop cb_val) in
   let cb_base = (getCapBase cb_val) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if (((link /\ w__0))) then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else if ((~ cb_val.CapStruct_permit_execute)) then
       raise_c2_exception CapEx_PermitExecuteViolation cb
     else if ((cb_ptr < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
     else if ((((cb_ptr + (( 4 : int):sail_values$ii))) > cb_top)) then
       raise_c2_exception CapEx_LengthViolation cb
     else if (((((hardware_mod cb_ptr (( 4 : int):sail_values$ii))) <> (( 0 : int):sail_values$ii)))) then SignalException AdEL
     else seqS
       (if link then bindS
          (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__2 :  257 words$word) . 
          let pcc = (capRegToCapStruct w__2) in bindS
          (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 :  64 words$word) . 
          let (success, linkCap) = (setCapOffset pcc ((add_vec_int w__3 (( 8 : int):sail_values$ii)  :  64 words$word))) in
          if success then writeCapReg cd linkCap
          else assert_expS F ""))
        else returnS () )       
(execute_branch_pcc cb_val))))))`;


(*val execute_CIncOffsetImmediate : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty11 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CIncOffsetImmediate:(5)words$word ->(5)words$word ->(11)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb imm=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val . 
   let (imm64 : 64 cheri_sequential_types$bits) = ((sign_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word)) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ cb_val.CapStruct_sealed))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (incCapOffset cb_val imm64) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) imm64
                  :  64 words$word)))))))))`;


(*val execute_CIncOffset : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CIncOffset:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val .  bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((cb_val.CapStruct_tag /\ (((cb_val.CapStruct_sealed /\ (((rt_val <> (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;
                                       B0]
                           :  64 words$word)))))))))) then
       raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (incCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CGetType : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetType:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       (if capVal.CapStruct_sealed then (zero_extend1 (( 64 : int):sail_values$ii) capVal.CapStruct_otype  :  64 words$word)
        else (replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):sail_values$ii)  :  64 words$word))))))`;


(*val execute_CGetTag : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetTag:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits capVal.CapStruct_tag  :  1 words$word))  :  64 words$word))))))`;


(*val execute_CGetSealed : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetSealed:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       ((zero_extend1 (( 64 : int):sail_values$ii) ((bool_to_bits capVal.CapStruct_sealed  :  1 words$word))  :  64 words$word))))))`;


(*val execute_CGetPerm : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetPerm:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) ((getCapPerms capVal  :  31 words$word))  :  64 words$word))))))`;


(*val execute_CGetPCCSetOffset : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetPCCSetOffset:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd rs=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS
     (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__1 :  257 words$word) . 
     let pcc = (capRegToCapStruct w__1) in bindS
     (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ rs_val . 
     let (success, newPCC) = (setCapOffset pcc rs_val) in
     if success then writeCapReg cd newPCC
     else writeCapReg cd ((int_to_cap rs_val)))))))`;


(*val execute_CGetPCC : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetPCC:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS
     (read_regS PCC_ref  : ( 257 words$word) cheri_sequential_types$M) (\ (w__1 :  257 words$word) . 
     let pcc = (capRegToCapStruct w__1) in bindS
     (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
     let (success, pcc2) = (setCapOffset pcc w__2) in seqS     
(assert_expS success "") (writeCapReg cd pcc2))))))`;


(*val execute_CGetOffset : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetOffset:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapOffset capVal))  :  64 words$word))))))`;


(*val execute_CGetLen : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetLen:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     let len65 = (getCapLength capVal) in
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself))
           (if ((len65 > MAX_U64)) then MAX_U64
            else len65)
          :  64 words$word))))))`;


(*val execute_CGetCause : Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetCause:(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd=  (bindS (seqS   
(checkCP2usable () )   
(pcc_access_system_regs () )) (\ (w__0 : bool) . 
   if ((~ w__0)) then raise_c2_exception_noreg CapEx_AccessSystemRegsViolation
   else bindS     
(read_regS CapCause_ref) (\ (w__1 : cheri_sequential_types$CapCauseReg) . 
     wGPR rd ((zero_extend1 (( 64 : int):sail_values$ii) ((get_CapCauseReg w__1  :  16 words$word))  :  64 words$word))))))`;


(*val execute_CGetBase : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetBase:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase capVal))  :  64 words$word))))))`;


(*val execute_CGetAddr : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CGetAddr:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ capVal . 
     wGPR rd
       ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapCursor capVal))  :  64 words$word))))))`;


(*val execute_CFromPtr : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CFromPtr:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val .  bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if (((rt = (vec_of_bits [B0;B0;B0;B0;B0]  :  5 words$word)))) then writeCapReg cd null_cap
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else
       let (success, newCap) = (setCapOffset cb_val rt_val) in
       if success then writeCapReg cd newCap
       else
         writeCapReg cd
           ((int_to_cap
               ((add_vec
                   ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((getCapBase cb_val))
                      :  64 words$word)) rt_val
                  :  64 words$word))))))))))`;


(*val execute_CCopyType : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CCopyType:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let cb_base = (getCapBase cb_val) in
   let cb_top = (getCapTop cb_val) in
   let ct_otype = (lem$w2ui ct_val.CapStruct_otype) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else bindS       
(register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
       else if ct_val.CapStruct_sealed then
         if ((ct_otype < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
         else if ((ct_otype >= cb_top)) then raise_c2_exception CapEx_LengthViolation cb
         else
           let (success, cap) =             
(setCapOffset cb_val
               ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ((ct_otype - cb_base))
                  :  64 words$word))) in seqS           
(assert_expS success "") (writeCapReg cd cap)
       else
         writeCapReg cd
           ((int_to_cap ((replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):sail_values$ii)  :  64 words$word)))))))))))`;


(*val execute_CClearTag : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CClearTag:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cd)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else bindS (readCapReg cb) (\ cb_val .  writeCapReg cd (cb_val with<| CapStruct_tag := F|>))))))`;


(*val execute_CCheckType : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CCheckType:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cs cb=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val .  bindS   
(readCapReg cb) (\ cb_val .  bindS   
(register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
     else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
     else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
       raise_c2_exception CapEx_TypeViolation cs
     else returnS () ))))))`;


(*val execute_CCheckPerm : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CCheckPerm:(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cs rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val . 
   let (cs_perms : 64 cheri_sequential_types$bits) =     
((zero_extend1 (( 64 : int):sail_values$ii) ((getCapPerms cs_val  :  31 words$word))  :  64 words$word)) in bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_perms .  bindS   
(register_inaccessible cs) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
   else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
   else if (((((and_vec cs_perms rt_perms  :  64 words$word)) <> rt_perms))) then
     raise_c2_exception CapEx_UserDefViolation cs
   else returnS () )))))`;


(*val execute_CCall : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty11 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CCall:(5)words$word ->(5)words$word ->(11)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cs cb b__151=   
 (if (((b__151 = (vec_of_bits [B0;B0;B0;B0;B0;B0;B0;B0;B0;B0;B0]  :  11 words$word)))) then bindS (seqS     
(checkCP2usable () )     
(readCapReg cs)) (\ cs_val .  bindS     
(readCapReg cb) (\ cb_val . 
     let cs_cursor = (getCapCursor cs_val) in bindS     
(register_inaccessible cs) (\ (w__0 : bool) . 
     if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else bindS       
(register_inaccessible cb) (\ (w__1 : bool) . 
       if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
       else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
         raise_c2_exception CapEx_TypeViolation cs
       else if ((~ cs_val.CapStruct_permit_execute)) then
         raise_c2_exception CapEx_PermitExecuteViolation cs
       else if cb_val.CapStruct_permit_execute then
         raise_c2_exception CapEx_PermitExecuteViolation cb
       else if ((cs_cursor < ((getCapBase cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else if ((cs_cursor >= ((getCapTop cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else raise_c2_exception CapEx_CallTrap cs))))
   else bindS (seqS     
(checkCP2usable () )     
(readCapReg cs)) (\ cs_val .  bindS     
(readCapReg cb) (\ cb_val . 
     let cs_cursor = (getCapCursor cs_val) in bindS     
(register_inaccessible cs) (\ (w__2 : bool) . 
     if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else bindS       
(register_inaccessible cb) (\ (w__3 : bool) . 
       if w__3 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if ((~ cs_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cs
       else if ((~ cb_val.CapStruct_sealed)) then raise_c2_exception CapEx_SealViolation cb
       else if (((cs_val.CapStruct_otype <> cb_val.CapStruct_otype))) then
         raise_c2_exception CapEx_TypeViolation cs
       else if ((~ cs_val.CapStruct_permit_ccall)) then
         raise_c2_exception CapEx_PermitCCallViolation cs
       else if ((~ cb_val.CapStruct_permit_ccall)) then
         raise_c2_exception CapEx_PermitCCallViolation cb
       else if ((~ cs_val.CapStruct_permit_execute)) then
         raise_c2_exception CapEx_PermitExecuteViolation cs
       else if cb_val.CapStruct_permit_execute then
         raise_c2_exception CapEx_PermitExecuteViolation cb
       else if ((cs_cursor < ((getCapBase cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else if ((cs_cursor >= ((getCapTop cs_val)))) then
         raise_c2_exception CapEx_LengthViolation cs
       else seqS (seqS         
(execute_branch_pcc
           (cs_val with<|
             CapStruct_sealed := F; CapStruct_otype := ((zeros (( 24 : int):sail_values$ii) ()   :  24 words$word))|>))         
(write_regS inCCallDelay_ref (vec_of_bits [B1]  :  1 words$word)))         
(write_regS
           C26_ref
           ((capStructToCapReg
               (cb_val with<|
                 CapStruct_sealed := F; CapStruct_otype := ((zeros (( 24 : int):sail_values$ii) ()   :  24 words$word))|>)
              :  257 words$word)))))))))`;


(*val execute_CCSeal : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CCSeal:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cs ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cs)) (\ cs_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let ct_cursor = (getCapCursor ct_val) in
   let ct_top = (getCapTop ct_val) in
   let ct_base = (getCapBase ct_val) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cs) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cs
     else bindS       
(register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cs_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cs
       else if (((((~ ct_val.CapStruct_tag)) \/ (((((getCapCursor ct_val)) = ((lem$w2ui ((replicate_bits ((cast_unit_vec0 B1  :  1 words$word)) (( 64 : int):sail_values$ii)  :  64 words$word))))))))))
       then
         writeCapReg cd cs_val
       else if cs_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cs
       else if ct_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation ct
       else if ((~ ct_val.CapStruct_permit_seal)) then
         raise_c2_exception CapEx_PermitSealViolation ct
       else if ((ct_cursor < ct_base)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor >= ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if ((ct_cursor > max_otype)) then raise_c2_exception CapEx_LengthViolation ct
       else
         let (success, newCap) =           
(sealCap cs_val
             ((to_bits ((make_the_value (( 24 : int):sail_values$ii)  :  24 itself)) ct_cursor  :  24 words$word))) in
         if ((~ success)) then raise_c2_exception CapEx_InexactBounds cs
         else writeCapReg cd newCap)))))))`;


(*val execute_CBuildCap : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CBuildCap:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb ct=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS   
(readCapReg ct) (\ ct_val . 
   let cb_base = (getCapBase cb_val) in
   let ct_base = (getCapBase ct_val) in
   let cb_top = (getCapTop cb_val) in
   let ct_top = (getCapTop ct_val) in
   let cb_perms = ((getCapPerms cb_val  :  31 words$word)) in
   let ct_perms = ((getCapPerms ct_val  :  31 words$word)) in
   let ct_offset = (getCapOffset ct_val) in bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else bindS       
(register_inaccessible ct) (\ (w__2 : bool) . 
       if w__2 then raise_c2_exception CapEx_AccessSystemRegsViolation ct
       else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
       else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
       else if ((ct_base < cb_base)) then raise_c2_exception CapEx_LengthViolation cb
       else if ((ct_top > cb_top)) then raise_c2_exception CapEx_LengthViolation cb
       else if ((ct_base > ct_top)) then raise_c2_exception CapEx_LengthViolation ct
       else if (((((and_vec ct_perms cb_perms  :  31 words$word)) <> ct_perms))) then
         raise_c2_exception CapEx_UserDefViolation cb
       else
         let (exact, cd1) =           
(setCapBounds cb_val
             ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ct_base  :  64 words$word))
             ((to_bits ((make_the_value (( 65 : int):sail_values$ii)  :  65 itself)) ct_top  :  65 words$word))) in
         let (representable, cd2) =           
(setCapOffset cd1
             ((to_bits ((make_the_value (( 64 : int):sail_values$ii)  :  64 itself)) ct_offset  :  64 words$word))) in
         let cd3 = (setCapPerms cd2 ct_perms) in seqS (seqS         
(assert_expS exact "") (assert_expS representable "")) (writeCapReg cd cd3))))))))`;


(*val execute_CBZ : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CBZ:(5)words$word ->(16)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cb imm notzero=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ (w__1 : cheri_sequential_types$CapStruct) . 
     if ((bits_to_bool
            ((xor_vec ((bool_to_bits (((w__1 = null_cap)))  :  1 words$word))
                ((bool_to_bits notzero  :  1 words$word))
               :  1 words$word)))) then
       let (offset : 64 cheri_sequential_types$bits) =         
((add_vec_int
            ((sign_extend1 (( 64 : int):sail_values$ii)
                ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
               :  64 words$word)) (( 4 : int):sail_values$ii)
           :  64 words$word)) in bindS
       (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
       execute_branch ((add_vec w__2 offset  :  64 words$word)))
     else returnS () ))))`;


(*val execute_CBX : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CBX:(5)words$word ->(16)words$word -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cb imm notset=  (bindS (seqS   
(checkCP2usable () )   
(register_inaccessible cb)) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
   else bindS     
(readCapReg cb) (\ (w__1 : cheri_sequential_types$CapStruct) . 
     if ((bits_to_bool
            ((xor_vec ((bool_to_bits w__1.CapStruct_tag  :  1 words$word))
                ((bool_to_bits notset  :  1 words$word))
               :  1 words$word)))) then
       let (offset : 64 cheri_sequential_types$bits) =         
((add_vec_int
            ((sign_extend1 (( 64 : int):sail_values$ii)
                ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
               :  64 words$word)) (( 4 : int):sail_values$ii)
           :  64 words$word)) in bindS
       (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
       execute_branch ((add_vec w__2 offset  :  64 words$word)))
     else returnS () ))))`;


(*val execute_CAndPerm : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CAndPerm:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) cd cb rt=  (bindS (seqS   
(checkCP2usable () )   
(readCapReg cb)) (\ cb_val .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ rt_val .  bindS   
(register_inaccessible cd) (\ (w__0 : bool) . 
   if w__0 then raise_c2_exception CapEx_AccessSystemRegsViolation cd
   else bindS     
(register_inaccessible cb) (\ (w__1 : bool) . 
     if w__1 then raise_c2_exception CapEx_AccessSystemRegsViolation cb
     else if ((~ cb_val.CapStruct_tag)) then raise_c2_exception CapEx_TagViolation cb
     else if cb_val.CapStruct_sealed then raise_c2_exception CapEx_SealViolation cb
     else
       let perms = ((getCapPerms cb_val  :  31 words$word)) in
       let newCap =         
(setCapPerms cb_val
           ((and_vec perms ((subrange_vec_dec rt_val (( 30 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  31 words$word))  :  31 words$word))) in
       writeCapReg cd newCap))))))`;


(*val execute_CACHE : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_CACHE:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) base op imm=  (checkCP0Access () ))`;


(*val execute_C2Dump : Machine_word.mword Machine_word.ty5 -> unit*)

val _ = Define `
 ((execute_C2Dump:(5)words$word -> unit) rt=  () )`;


(*val execute_BREAK : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_BREAK:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) g__119=  (SignalException Bp))`;


(*val execute_BEQ : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> bool -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_BEQ:(5)words$word ->(5)words$word ->(16)words$word -> bool -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rd imm ne likely=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rd  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   if ((bits_to_bool
          ((xor_vec ((bool_to_bits (((w__0 = w__1)))  :  1 words$word))
              ((bool_to_bits ne  :  1 words$word))
             :  1 words$word)))) then
     let (offset : 64 cheri_sequential_types$bits) =       
((add_vec_int
          ((sign_extend1 (( 64 : int):sail_values$ii) ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
             :  64 words$word)) (( 4 : int):sail_values$ii)
         :  64 words$word)) in bindS
     (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
     execute_branch ((add_vec w__2 offset  :  64 words$word)))
   else if likely then bindS
     (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__3 :  64 words$word) . 
     write_regS nextPC_ref ((add_vec_int w__3 (( 8 : int):sail_values$ii)  :  64 words$word)))
   else returnS () ))))`;


(*val execute_BCMPZ : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.Comparison -> bool -> bool -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_BCMPZ:(5)words$word ->(16)words$word -> cheri_sequential_types$Comparison -> bool -> bool ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs imm cmp link likely=  (bindS
   (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) . 
   let linkVal = ((add_vec_int w__0 (( 8 : int):sail_values$ii)  :  64 words$word)) in bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ regVal . 
   let condition =     
(compare cmp regVal ((zero_extend1 (( 64 : int):sail_values$ii) (vec_of_bits [B0]  :  1 words$word)  :  64 words$word))) in seqS
   (if condition then
      let (offset : 64 cheri_sequential_types$bits) =        
((add_vec_int
           ((sign_extend1 (( 64 : int):sail_values$ii) ((concat_vec imm (vec_of_bits [B0;B0]  :  2 words$word)  :  18 words$word))
              :  64 words$word)) (( 4 : int):sail_values$ii)
          :  64 words$word)) in bindS
      (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
      execute_branch ((add_vec w__1 offset  :  64 words$word)))
    else if likely then bindS
      (read_regS PC_ref  : ( 64 words$word) cheri_sequential_types$M) (\ (w__2 :  64 words$word) . 
      write_regS nextPC_ref ((add_vec_int w__2 (( 8 : int):sail_values$ii)  :  64 words$word)))
    else returnS () )   
(if link then wGPR (vec_of_bits [B1;B1;B1;B1;B1]  :  5 words$word) linkVal
   else returnS () )))))`;


(*val execute_ANDI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ANDI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) . 
   wGPR rt ((and_vec w__0 ((zero_extend1 (( 64 : int):sail_values$ii) imm  :  64 words$word))  :  64 words$word)))))`;


(*val execute_AND : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_AND:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (w__1 :  64 words$word) . 
   wGPR rd ((and_vec w__0 w__1  :  64 words$word))))))`;


(*val execute_ADDU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ADDU:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ opA .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ opB . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     wGPR rd
       ((sign_extend1 (( 64 : int):sail_values$ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
               ((subrange_vec_dec opB (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
              :  32 words$word))
          :  64 words$word))))))`;


(*val execute_ADDIU : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ADDIU:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ opA . 
   if ((NotWordVal opA)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     wGPR rt
       ((sign_extend1 (( 64 : int):sail_values$ii)
           ((add_vec ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))
               ((sign_extend1 (( 32 : int):sail_values$ii) imm  :  32 words$word))
              :  32 words$word))
          :  64 words$word)))))`;


(*val execute_ADDI : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty16 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ADDI:(5)words$word ->(5)words$word ->(16)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt imm=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ opA . 
   if ((NotWordVal opA)) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rt w__0)
   else
     let (sum33 : 33 cheri_sequential_types$bits) =       
((add_vec
          ((sign_extend1 (( 33 : int):sail_values$ii) ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):sail_values$ii) imm  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):sail_values$ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):sail_values$ii))))))) then
       SignalException Ov
     else
       wGPR rt
         ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec sum33 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word)))))`;


(*val execute_ADD : Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Machine_word.mword Machine_word.ty5 -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((execute_ADD:(5)words$word ->(5)words$word ->(5)words$word ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) rs rt rd=  (bindS
   (rGPR rs  : ( 64 words$word) cheri_sequential_types$M) (\ (opA : 64 cheri_sequential_types$bits) .  bindS
   (rGPR rt  : ( 64 words$word) cheri_sequential_types$M) (\ (opB : 64 cheri_sequential_types$bits) . 
   if (((((NotWordVal opA)) \/ ((NotWordVal opB))))) then bindS
     (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 :  64 words$word) .  wGPR rd w__0)
   else
     let (sum33 : 33 cheri_sequential_types$bits) =       
((add_vec
          ((sign_extend1 (( 33 : int):sail_values$ii) ((subrange_vec_dec opA (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  33 words$word))
          ((sign_extend1 (( 33 : int):sail_values$ii) ((subrange_vec_dec opB (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  33 words$word))
         :  33 words$word)) in
     if ((neq_bool ((bit_to_bool ((access_vec_dec sum33 (( 32 : int):sail_values$ii)))))
            ((bit_to_bool ((access_vec_dec sum33 (( 31 : int):sail_values$ii))))))) then
       SignalException Ov
     else
       wGPR rd
         ((sign_extend1 (( 64 : int):sail_values$ii) ((subrange_vec_dec sum33 (( 31 : int):sail_values$ii) (( 0 : int):sail_values$ii)  :  32 words$word))  :  64 words$word))))))`;


val _ = Define `
 ((execute:cheri_sequential_types$ast ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) merge_var=   
 ((case merge_var of
     DADDIU (rs,rt,imm) => execute_DADDIU rs rt imm
   | DADDU (rs,rt,rd) => execute_DADDU rs rt rd
   | DADDI (rs,rt,imm) => execute_DADDI rs rt imm
   | DADD (rs,rt,rd) => execute_DADD rs rt rd
   | ADD (rs,rt,rd) => execute_ADD rs rt rd
   | ADDI (rs,rt,imm) => execute_ADDI rs rt imm
   | ADDU (rs,rt,rd) => execute_ADDU rs rt rd
   | ADDIU (rs,rt,imm) => execute_ADDIU rs rt imm
   | DSUBU (rs,rt,rd) => execute_DSUBU rs rt rd
   | DSUB (rs,rt,rd) => execute_DSUB rs rt rd
   | SUB0 (rs,rt,rd) => execute_SUB rs rt rd
   | SUBU (rs,rt,rd) => execute_SUBU rs rt rd
   | AND (rs,rt,rd) => execute_AND rs rt rd
   | ANDI (rs,rt,imm) => execute_ANDI rs rt imm
   | OR (rs,rt,rd) => execute_OR rs rt rd
   | ORI (rs,rt,imm) => execute_ORI rs rt imm
   | NOR (rs,rt,rd) => execute_NOR rs rt rd
   | XOR (rs,rt,rd) => execute_XOR rs rt rd
   | XORI (rs,rt,imm) => execute_XORI rs rt imm
   | LUI (rt,imm) => execute_LUI rt imm
   | DSLL (rt,rd,sa) => execute_DSLL rt rd sa
   | DSLL32 (rt,rd,sa) => execute_DSLL32 rt rd sa
   | DSLLV (rs,rt,rd) => execute_DSLLV rs rt rd
   | DSRA (rt,rd,sa) => execute_DSRA rt rd sa
   | DSRA32 (rt,rd,sa) => execute_DSRA32 rt rd sa
   | DSRAV (rs,rt,rd) => execute_DSRAV rs rt rd
   | DSRL (rt,rd,sa) => execute_DSRL rt rd sa
   | DSRL32 (rt,rd,sa) => execute_DSRL32 rt rd sa
   | DSRLV (rs,rt,rd) => execute_DSRLV rs rt rd
   | SLL (rt,rd,sa) => execute_SLL rt rd sa
   | SLLV (rs,rt,rd) => execute_SLLV rs rt rd
   | SRA (rt,rd,sa) => execute_SRA rt rd sa
   | SRAV (rs,rt,rd) => execute_SRAV rs rt rd
   | SRL (rt,rd,sa) => execute_SRL rt rd sa
   | SRLV (rs,rt,rd) => execute_SRLV rs rt rd
   | SLT (rs,rt,rd) => execute_SLT rs rt rd
   | SLTI (rs,rt,imm) => execute_SLTI rs rt imm
   | SLTU (rs,rt,rd) => execute_SLTU rs rt rd
   | SLTIU (rs,rt,imm) => execute_SLTIU rs rt imm
   | MOVN (rs,rt,rd) => execute_MOVN rs rt rd
   | MOVZ (rs,rt,rd) => execute_MOVZ rs rt rd
   | MFHI (rd) => execute_MFHI rd
   | MFLO (rd) => execute_MFLO rd
   | MTHI (rs) => execute_MTHI rs
   | MTLO (rs) => execute_MTLO rs
   | MUL (rs,rt,rd) => execute_MUL rs rt rd
   | MULT (rs,rt) => execute_MULT rs rt
   | MULTU (rs,rt) => execute_MULTU rs rt
   | DMULT (rs,rt) => execute_DMULT rs rt
   | DMULTU (rs,rt) => execute_DMULTU rs rt
   | MADD (rs,rt) => execute_MADD rs rt
   | MADDU (rs,rt) => execute_MADDU rs rt
   | MSUB (rs,rt) => execute_MSUB rs rt
   | MSUBU (rs,rt) => execute_MSUBU rs rt
   | DIV0 (rs,rt) => execute_DIV rs rt
   | DIVU (rs,rt) => execute_DIVU rs rt
   | DDIV (rs,rt) => execute_DDIV rs rt
   | DDIVU (rs,rt) => execute_DDIVU rs rt
   | J (offset) => execute_J offset
   | JAL (offset) => execute_JAL offset
   | JR (rs) => execute_JR rs
   | JALR (rs,rd) => execute_JALR rs rd
   | BEQ (rs,rd,imm,ne,likely) => execute_BEQ rs rd imm ne likely
   | BCMPZ (rs,imm,cmp,link,likely) => execute_BCMPZ rs imm cmp link likely
   | SYSCALL_THREAD_START (g__116) => returnS ((execute_SYSCALL_THREAD_START g__116))
   | ImplementationDefinedStopFetching (g__117) =>
      returnS ((execute_ImplementationDefinedStopFetching g__117))
   | SYSCALL (g__118) => execute_SYSCALL g__118
   | BREAK (g__119) => execute_BREAK g__119
   | WAIT (g__120) => execute_WAIT g__120
   | TRAPREG (rs,rt,cmp) => execute_TRAPREG rs rt cmp
   | TRAPIMM (rs,imm,cmp) => execute_TRAPIMM rs imm cmp
   | Load (width,sign,linked,base,rt,offset) => execute_Load width sign linked base rt offset
   | Store (width,conditional,base,rt,offset) => execute_Store width conditional base rt offset
   | LWL (base,rt,offset) => execute_LWL base rt offset
   | LWR (base,rt,offset) => execute_LWR base rt offset
   | SWL (base,rt,offset) => execute_SWL base rt offset
   | SWR (base,rt,offset) => execute_SWR base rt offset
   | LDL (base,rt,offset) => execute_LDL base rt offset
   | LDR (base,rt,offset) => execute_LDR base rt offset
   | SDL (base,rt,offset) => execute_SDL base rt offset
   | SDR (base,rt,offset) => execute_SDR base rt offset
   | CACHE (base,op,imm) => execute_CACHE base op imm
   | PREF (base,op,imm) => returnS ((execute_PREF base op imm))
   | SYNC (g__121) => execute_SYNC g__121
   | MFC0 (rt,rd,sel,double) => execute_MFC0 rt rd sel double
   | HCF (g__122) => returnS ((execute_HCF g__122))
   | MTC0 (rt,rd,sel,double) => execute_MTC0 rt rd sel double
   | TLBWI (g__123) => execute_TLBWI g__123
   | TLBWR (g__124) => execute_TLBWR g__124
   | TLBR (g__125) => execute_TLBR g__125
   | TLBP (g__126) => execute_TLBP g__126
   | RDHWR (rt,rd) => execute_RDHWR rt rd
   | ERET (g__127) => execute_ERET g__127
   | CGetPerm (rd,cb) => execute_CGetPerm rd cb
   | CGetType (rd,cb) => execute_CGetType rd cb
   | CGetBase (rd,cb) => execute_CGetBase rd cb
   | CGetOffset (rd,cb) => execute_CGetOffset rd cb
   | CGetLen (rd,cb) => execute_CGetLen rd cb
   | CGetTag (rd,cb) => execute_CGetTag rd cb
   | CGetSealed (rd,cb) => execute_CGetSealed rd cb
   | CGetAddr (rd,cb) => execute_CGetAddr rd cb
   | CGetPCC (cd) => execute_CGetPCC cd
   | CGetPCCSetOffset (cd,rs) => execute_CGetPCCSetOffset cd rs
   | CGetCause (rd) => execute_CGetCause rd
   | CSetCause (rt) => execute_CSetCause rt
   | CReadHwr (cd,sel) => execute_CReadHwr cd sel
   | CWriteHwr (cb,sel) => execute_CWriteHwr cb sel
   | CAndPerm (cd,cb,rt) => execute_CAndPerm cd cb rt
   | CToPtr (rd,cb,ct) => execute_CToPtr rd cb ct
   | CSub (rd,cb,ct) => execute_CSub rd cb ct
   | CPtrCmp (rd,cb,ct,op) => execute_CPtrCmp rd cb ct op
   | CIncOffset (cd,cb,rt) => execute_CIncOffset cd cb rt
   | CIncOffsetImmediate (cd,cb,imm) => execute_CIncOffsetImmediate cd cb imm
   | CSetOffset (cd,cb,rt) => execute_CSetOffset cd cb rt
   | CSetBounds (cd,cb,rt) => execute_CSetBounds cd cb rt
   | CSetBoundsImmediate (cd,cb,imm) => execute_CSetBoundsImmediate cd cb imm
   | CSetBoundsExact (cd,cb,rt) => execute_CSetBoundsExact cd cb rt
   | CClearTag (cd,cb) => execute_CClearTag cd cb
   | CMOVX (cd,cb,rt,ismovn) => execute_CMOVX cd cb rt ismovn
   | ClearRegs (regset,m) => execute_ClearRegs regset m
   | CFromPtr (cd,cb,rt) => execute_CFromPtr cd cb rt
   | CBuildCap (cd,cb,ct) => execute_CBuildCap cd cb ct
   | CCopyType (cd,cb,ct) => execute_CCopyType cd cb ct
   | CCheckPerm (cs,rt) => execute_CCheckPerm cs rt
   | CCheckType (cs,cb) => execute_CCheckType cs cb
   | CTestSubset (rd,cb,ct) => execute_CTestSubset rd cb ct
   | CSeal (cd,cs,ct) => execute_CSeal cd cs ct
   | CCSeal (cd,cs,ct) => execute_CCSeal cd cs ct
   | CUnseal (cd,cs,ct) => execute_CUnseal cd cs ct
   | CCall (cs,cb,b__151) => execute_CCall cs cb b__151
   | CReturn (g__128) => execute_CReturn g__128
   | CBX (cb,imm,notset) => execute_CBX cb imm notset
   | CBZ (cb,imm,notzero) => execute_CBZ cb imm notzero
   | CJALR (cd,cb,link) => execute_CJALR cd cb link
   | CLoad (rd,cb,rt,offset,signext,arg5,linked) =>
      execute_CLoad rd cb rt offset signext arg5 linked
   | CStore (rs,cb,rt,rd,offset,width,conditional) =>
      execute_CStore rs cb rt rd offset width conditional
   | CSC (cs,cb,rt,rd,offset,conditional) => execute_CSC cs cb rt rd offset conditional
   | CLC (cd,cb,rt,offset,linked) => execute_CLC cd cb rt offset linked
   | C2Dump (rt) => returnS ((execute_C2Dump rt))
   | RI (g__129) => execute_RI g__129
   )))`;


(*val supported_instructions : Cheri_sequential_types.ast -> Maybe.maybe Cheri_sequential_types.ast*)

val _ = Define `
 ((supported_instructions:cheri_sequential_types$ast ->(cheri_sequential_types$ast)option) instr=  (SOME instr))`;


(*val initialize_registers : unit -> Cheri_sequential_types.M unit*)

val _ = Define `
 ((initialize_registers:unit ->(cheri_sequential_types$regstate)state_monad$sequential_state ->(((unit),(cheri_sequential_types$exception))state_monad$result#(cheri_sequential_types$regstate)state_monad$sequential_state)set) () =  (bindS
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M) (\ (w__0 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS PC_ref w__0)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__1 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS nextPC_ref w__1)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__2 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS TLBProbe_ref w__2)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):sail_values$ii)  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__3 : cheri_sequential_types$TLBIndexT) .  bindS (seqS   
(write_regS TLBIndex_ref w__3)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):sail_values$ii)  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__4 : cheri_sequential_types$TLBIndexT) .  bindS (seqS   
(write_regS TLBRandom_ref w__4)   
(undefined_TLBEntryLoReg () )) (\ (w__5 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(write_regS TLBEntryLo0_ref w__5)   
(undefined_TLBEntryLoReg () )) (\ (w__6 : cheri_sequential_types$TLBEntryLoReg) .  bindS (seqS   
(write_regS TLBEntryLo1_ref w__6)   
(undefined_ContextReg () )) (\ (w__7 : cheri_sequential_types$ContextReg) .  bindS (seqS   
(write_regS TLBContext_ref w__7)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 16 : int):sail_values$ii)  : ( 16 words$word) cheri_sequential_types$M)) (\ (w__8 : 16 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS TLBPageMask_ref w__8)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 6 : int):sail_values$ii)  : ( 6 words$word) cheri_sequential_types$M)) (\ (w__9 : cheri_sequential_types$TLBIndexT) .  bindS (seqS   
(write_regS TLBWired_ref w__9)   
(undefined_TLBEntryHiReg () )) (\ (w__10 : cheri_sequential_types$TLBEntryHiReg) .  bindS (seqS   
(write_regS TLBEntryHi_ref w__10)   
(undefined_XContextReg () )) (\ (w__11 : cheri_sequential_types$XContextReg) .  bindS (seqS   
(write_regS TLBXContext_ref w__11)   
(undefined_TLBEntry () )) (\ (w__12 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry00_ref w__12)   
(undefined_TLBEntry () )) (\ (w__13 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry01_ref w__13)   
(undefined_TLBEntry () )) (\ (w__14 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry02_ref w__14)   
(undefined_TLBEntry () )) (\ (w__15 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry03_ref w__15)   
(undefined_TLBEntry () )) (\ (w__16 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry04_ref w__16)   
(undefined_TLBEntry () )) (\ (w__17 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry05_ref w__17)   
(undefined_TLBEntry () )) (\ (w__18 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry06_ref w__18)   
(undefined_TLBEntry () )) (\ (w__19 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry07_ref w__19)   
(undefined_TLBEntry () )) (\ (w__20 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry08_ref w__20)   
(undefined_TLBEntry () )) (\ (w__21 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry09_ref w__21)   
(undefined_TLBEntry () )) (\ (w__22 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry10_ref w__22)   
(undefined_TLBEntry () )) (\ (w__23 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry11_ref w__23)   
(undefined_TLBEntry () )) (\ (w__24 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry12_ref w__24)   
(undefined_TLBEntry () )) (\ (w__25 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry13_ref w__25)   
(undefined_TLBEntry () )) (\ (w__26 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry14_ref w__26)   
(undefined_TLBEntry () )) (\ (w__27 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry15_ref w__27)   
(undefined_TLBEntry () )) (\ (w__28 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry16_ref w__28)   
(undefined_TLBEntry () )) (\ (w__29 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry17_ref w__29)   
(undefined_TLBEntry () )) (\ (w__30 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry18_ref w__30)   
(undefined_TLBEntry () )) (\ (w__31 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry19_ref w__31)   
(undefined_TLBEntry () )) (\ (w__32 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry20_ref w__32)   
(undefined_TLBEntry () )) (\ (w__33 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry21_ref w__33)   
(undefined_TLBEntry () )) (\ (w__34 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry22_ref w__34)   
(undefined_TLBEntry () )) (\ (w__35 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry23_ref w__35)   
(undefined_TLBEntry () )) (\ (w__36 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry24_ref w__36)   
(undefined_TLBEntry () )) (\ (w__37 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry25_ref w__37)   
(undefined_TLBEntry () )) (\ (w__38 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry26_ref w__38)   
(undefined_TLBEntry () )) (\ (w__39 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry27_ref w__39)   
(undefined_TLBEntry () )) (\ (w__40 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry28_ref w__40)   
(undefined_TLBEntry () )) (\ (w__41 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry29_ref w__41)   
(undefined_TLBEntry () )) (\ (w__42 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry30_ref w__42)   
(undefined_TLBEntry () )) (\ (w__43 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry31_ref w__43)   
(undefined_TLBEntry () )) (\ (w__44 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry32_ref w__44)   
(undefined_TLBEntry () )) (\ (w__45 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry33_ref w__45)   
(undefined_TLBEntry () )) (\ (w__46 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry34_ref w__46)   
(undefined_TLBEntry () )) (\ (w__47 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry35_ref w__47)   
(undefined_TLBEntry () )) (\ (w__48 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry36_ref w__48)   
(undefined_TLBEntry () )) (\ (w__49 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry37_ref w__49)   
(undefined_TLBEntry () )) (\ (w__50 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry38_ref w__50)   
(undefined_TLBEntry () )) (\ (w__51 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry39_ref w__51)   
(undefined_TLBEntry () )) (\ (w__52 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry40_ref w__52)   
(undefined_TLBEntry () )) (\ (w__53 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry41_ref w__53)   
(undefined_TLBEntry () )) (\ (w__54 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry42_ref w__54)   
(undefined_TLBEntry () )) (\ (w__55 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry43_ref w__55)   
(undefined_TLBEntry () )) (\ (w__56 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry44_ref w__56)   
(undefined_TLBEntry () )) (\ (w__57 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry45_ref w__57)   
(undefined_TLBEntry () )) (\ (w__58 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry46_ref w__58)   
(undefined_TLBEntry () )) (\ (w__59 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry47_ref w__59)   
(undefined_TLBEntry () )) (\ (w__60 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry48_ref w__60)   
(undefined_TLBEntry () )) (\ (w__61 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry49_ref w__61)   
(undefined_TLBEntry () )) (\ (w__62 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry50_ref w__62)   
(undefined_TLBEntry () )) (\ (w__63 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry51_ref w__63)   
(undefined_TLBEntry () )) (\ (w__64 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry52_ref w__64)   
(undefined_TLBEntry () )) (\ (w__65 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry53_ref w__65)   
(undefined_TLBEntry () )) (\ (w__66 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry54_ref w__66)   
(undefined_TLBEntry () )) (\ (w__67 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry55_ref w__67)   
(undefined_TLBEntry () )) (\ (w__68 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry56_ref w__68)   
(undefined_TLBEntry () )) (\ (w__69 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry57_ref w__69)   
(undefined_TLBEntry () )) (\ (w__70 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry58_ref w__70)   
(undefined_TLBEntry () )) (\ (w__71 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry59_ref w__71)   
(undefined_TLBEntry () )) (\ (w__72 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry60_ref w__72)   
(undefined_TLBEntry () )) (\ (w__73 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry61_ref w__73)   
(undefined_TLBEntry () )) (\ (w__74 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry62_ref w__74)   
(undefined_TLBEntry () )) (\ (w__75 : cheri_sequential_types$TLBEntry) .  bindS (seqS   
(write_regS TLBEntry63_ref w__75)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__76 : 32 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0Compare_ref w__76)   
(undefined_CauseReg () )) (\ (w__77 : cheri_sequential_types$CauseReg) .  bindS (seqS   
(write_regS CP0Cause_ref w__77)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__78 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0EPC_ref w__78)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__79 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0ErrorEPC_ref w__79)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__80 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0LLBit_ref w__80)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__81 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0LLAddr_ref w__81)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__82 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0BadVAddr_ref w__82)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__83 : 32 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0Count_ref w__83)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 32 : int):sail_values$ii)  : ( 32 words$word) cheri_sequential_types$M)) (\ (w__84 : 32 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0HWREna_ref w__84)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__85 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS CP0UserLocal_ref w__85)   
(undefined_StatusReg () )) (\ (w__86 : cheri_sequential_types$StatusReg) .  bindS (seqS   
(write_regS CP0Status_ref w__86)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__87 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS branchPending_ref w__87)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__88 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS inBranchDelay_ref w__88)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__89 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS delayedPC_ref w__89)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__90 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS HI_ref w__90)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__91 : 64 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS LO_ref w__91)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 64 : int):sail_values$ii)  : ( 64 words$word) cheri_sequential_types$M)) (\ (w__92 :  64 words$word) .  bindS
   (undefined_vector (( 32 : int):sail_values$ii) w__92  : ( ( 64 words$word)list) cheri_sequential_types$M) (\ (w__93 : ( 64 cheri_sequential_types$bits) list) .  bindS (seqS   
(write_regS GPR_ref w__93)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M)) (\ (w__94 : 8 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS UART_WDATA_ref w__94)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__95 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS UART_WRITTEN_ref w__95)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 8 : int):sail_values$ii)  : ( 8 words$word) cheri_sequential_types$M)) (\ (w__96 : 8 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS UART_RDATA_ref w__96)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__97 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS UART_RVALID_ref w__97)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__98 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS PCC_ref w__98)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__99 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS nextPCC_ref w__99)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__100 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS delayedPCC_ref w__100)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 1 : int):sail_values$ii)  : ( 1 words$word) cheri_sequential_types$M)) (\ (w__101 : 1 cheri_sequential_types$bits) .  bindS (seqS   
(write_regS inCCallDelay_ref w__101)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__102 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C00_ref w__102)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__103 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C01_ref w__103)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__104 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C02_ref w__104)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__105 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C03_ref w__105)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__106 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C04_ref w__106)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__107 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C05_ref w__107)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__108 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C06_ref w__108)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__109 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C07_ref w__109)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__110 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C08_ref w__110)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__111 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C09_ref w__111)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__112 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C10_ref w__112)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__113 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C11_ref w__113)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__114 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C12_ref w__114)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__115 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C13_ref w__115)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__116 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C14_ref w__116)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__117 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C15_ref w__117)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__118 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C16_ref w__118)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__119 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C17_ref w__119)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__120 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C18_ref w__120)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__121 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C19_ref w__121)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__122 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C20_ref w__122)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__123 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C21_ref w__123)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__124 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C22_ref w__124)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__125 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C23_ref w__125)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__126 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C24_ref w__126)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__127 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C25_ref w__127)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__128 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C26_ref w__128)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__129 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C27_ref w__129)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__130 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C28_ref w__130)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__131 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C29_ref w__131)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__132 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C30_ref w__132)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__133 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS C31_ref w__133)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__134 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS CTLSU_ref w__134)
   (undefined_bitvector 
  instance_Sail_values_Bitvector_Machine_word_mword_dict (( 257 : int):sail_values$ii)  : ( 257 words$word) cheri_sequential_types$M)) (\ (w__135 : cheri_sequential_types$CapReg) .  bindS (seqS   
(write_regS CTLSP_ref w__135)   
(undefined_CapCauseReg () )) (\ (w__136 : cheri_sequential_types$CapCauseReg) .  write_regS CapCause_ref w__136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))`;



val _ = export_theory()

