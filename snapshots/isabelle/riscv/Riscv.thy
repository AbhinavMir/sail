chapter \<open>Generated by Lem from riscv.lem.\<close>

theory "Riscv" 

imports 
 	 Main
	 "Lem_pervasives_extra" 
	 "Sail2_instr_kinds" 
	 "Sail2_values" 
	 "Sail2_operators_mwords" 
	 "Sail2_prompt_monad" 
	 "Sail2_prompt" 
	 "Sail2_string" 
	 "Riscv_types" 
	 "Riscv_extras" 

begin 

(*Generated by Sail from riscv.*)
(*open import Pervasives_extra*)
(*open import Sail2_instr_kinds*)
(*open import Sail2_values*)
(*open import Sail2_string*)
(*open import Sail2_operators_mwords*)
(*open import Sail2_prompt_monad*)
(*open import Sail2_prompt*)
(*open import Riscv_types*)
(*open import Riscv_extras*)

(*val spc_forwards : unit -> string*)

definition spc_forwards  :: " unit \<Rightarrow> string "  where 
     " spc_forwards _ = ( ('' ''))"


(*val spc_backwards : string -> unit*)

definition spc_backwards  :: " string \<Rightarrow> unit "  where 
     " spc_backwards s = ( ()  )"


(*val opt_spc_forwards : unit -> string*)

definition opt_spc_forwards  :: " unit \<Rightarrow> string "  where 
     " opt_spc_forwards _ = ( (''''))"


(*val opt_spc_backwards : string -> unit*)

definition opt_spc_backwards  :: " string \<Rightarrow> unit "  where 
     " opt_spc_backwards s = ( ()  )"


(*val def_spc_forwards : unit -> string*)

definition def_spc_forwards  :: " unit \<Rightarrow> string "  where 
     " def_spc_forwards _ = ( ('' ''))"


(*val def_spc_backwards : string -> unit*)

definition def_spc_backwards  :: " string \<Rightarrow> unit "  where 
     " def_spc_backwards s = ( ()  )"










(*val builtin_and_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val builtin_or_vec : forall 'n. bits 'n -> bits 'n -> bits 'n*)



(*val __raw_SetSlice_int : forall 'w. integer -> ii -> ii -> bits 'w -> ii*)

(*val __GetSlice_int : forall 'n. Size 'n => integer -> ii -> ii -> mword 'n*)

definition GetSlice_int  :: " int \<Rightarrow> int \<Rightarrow> int \<Rightarrow>('n::len)Word.word "  where 
     " GetSlice_int n m o1 = ( (get_slice_int n m o1  :: ( 'n::len)Word.word))"


(*val __raw_SetSlice_bits : forall 'n 'w. integer -> integer -> bits 'n -> ii -> bits 'w -> bits 'n*)

(*val __raw_GetSlice_bits : forall 'n 'w. integer -> integer -> bits 'n -> ii -> bits 'w*)

(*val cast_unit_vec : bitU -> mword ty1*)

fun cast_unit_vec0  :: " bitU \<Rightarrow>(1)Word.word "  where 
     " cast_unit_vec0 B0 = ( (vec_of_bits [B0]  ::  1 Word.word))"
|" cast_unit_vec0 B1 = ( (vec_of_bits [B1]  ::  1 Word.word))"


(*val DecStr : ii -> string*)

(*val HexStr : ii -> string*)

(*val __RISCV_write : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M bool*)

definition RISCV_write  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " RISCV_write addr width data = (
   write_ram (( 64 :: int)::ii) width
     (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                   B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                   B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
       ::  64 Word.word) addr data \<then>
   return True )"


(*val __TraceMemoryWrite : forall 'int8_times_n 'm. integer -> bits 'm -> bits 'int8_times_n -> unit*)

(*val __RISCV_read : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> bool -> bool -> bool -> M (maybe (mword 'int8_times_n))*)

fun RISCV_read  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)option),(exception))monad "  where 
     " RISCV_read addr width False False False = (
      (MEMr (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__0 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__0)))"
|" RISCV_read addr width True False False = (
      (MEMr_acquire (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__1 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__1)))"
|" RISCV_read addr width True True False = (
      (MEMr_strong_acquire (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__2 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__2)))"
|" RISCV_read addr width False False True = (
      (MEMr_reserved (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__3 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__3)))"
|" RISCV_read addr width True False True = (
      (MEMr_reserved_acquire (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__4 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__4)))"
|" RISCV_read addr width True True True = (
      (MEMr_reserved_strong_acquire (( 64 :: int)::ii) width
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word) addr
        :: (( 'int8_times_n::len)Word.word) M) \<bind> (\<lambda> (w__5 :: ( 'int8_times_n::len)Word.word) . 
      return (Some w__5)))"
|" RISCV_read addr width False True False = ( return None )"
|" RISCV_read addr width False True True = ( return None )"


(*val __TraceMemoryRead : forall 'int8_times_n 'm. integer -> bits 'm -> bits 'int8_times_n -> unit*)

(*val ex_nat : ii -> integer*)

definition ex_nat  :: " int \<Rightarrow> int "  where 
     " ex_nat n = ( n )"


(*val ex_int : ii -> integer*)

definition ex_int  :: " int \<Rightarrow> int "  where 
     " ex_int n = ( n )"


(*val coerce_int_nat : ii -> M ii*)

definition coerce_int_nat  :: " int \<Rightarrow>((register_value),(int),(exception))monad "  where 
     " coerce_int_nat x = ( assert_exp True ('''') \<then> return x )"


(*val EXTS : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

(*val EXTZ : forall 'n 'm . Size 'm, Size 'n => integer -> mword 'n -> mword 'm*)

definition EXTS  :: " int \<Rightarrow>('n::len)Word.word \<Rightarrow>('m::len)Word.word "  where 
     " EXTS (m__tv :: int) v = ( (sign_extend v m__tv  :: ( 'm::len)Word.word))"


definition EXTZ  :: " int \<Rightarrow>('n::len)Word.word \<Rightarrow>('m::len)Word.word "  where 
     " EXTZ (m__tv :: int) v = ( (zero_extend v m__tv  :: ( 'm::len)Word.word))"


(*val zopz0zI_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_s : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zI_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zKzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

(*val zopz0zIzJ_u : forall 'n. Size 'n => mword 'n -> mword 'n -> bool*)

definition zopz0zI_s  :: "('n::len)Word.word \<Rightarrow>('n::len)Word.word \<Rightarrow> bool "  where 
     " zopz0zI_s x y = ( ((Word.sint x)) < ((Word.sint y)))"


definition zopz0zKzJ_s  :: "('n::len)Word.word \<Rightarrow>('n::len)Word.word \<Rightarrow> bool "  where 
     " zopz0zKzJ_s x y = ( ((Word.sint x)) \<ge> ((Word.sint y)))"


definition zopz0zI_u  :: "('n::len)Word.word \<Rightarrow>('n::len)Word.word \<Rightarrow> bool "  where 
     " zopz0zI_u x y = ( ((Word.uint x)) < ((Word.uint y)))"


definition zopz0zKzJ_u  :: "('n::len)Word.word \<Rightarrow>('n::len)Word.word \<Rightarrow> bool "  where 
     " zopz0zKzJ_u x y = ( ((Word.uint x)) \<ge> ((Word.uint y)))"


definition zopz0zIzJ_u  :: "('n::len)Word.word \<Rightarrow>('n::len)Word.word \<Rightarrow> bool "  where 
     " zopz0zIzJ_u x y = ( ((Word.uint x)) \<le> ((Word.uint y)))"


(*val bool_to_bits : bool -> mword ty1*)

definition bool_to_bits  :: " bool \<Rightarrow>(1)Word.word "  where 
     " bool_to_bits x = ( if x then (vec_of_bits [B1]  ::  1 Word.word) else (vec_of_bits [B0]  ::  1 Word.word))"


(*val bit_to_bool : bitU -> bool*)

fun bit_to_bool  :: " bitU \<Rightarrow> bool "  where 
     " bit_to_bool B1 = ( True )"
|" bit_to_bool B0 = ( False )"


(*val vector64 : ii -> mword ty64*)

definition vector64  :: " int \<Rightarrow>(64)Word.word "  where 
     " vector64 n = ( (get_slice_int (( 64 :: int)::ii) n (( 0 :: int)::ii)  ::  64 Word.word))"


(*val to_bits : forall 'l. Size 'l => integer -> ii -> mword 'l*)

definition to_bits  :: " int \<Rightarrow> int \<Rightarrow>('l::len)Word.word "  where 
     " to_bits l n = ( (get_slice_int l n (( 0 :: int)::ii)  :: ( 'l::len)Word.word))"


(*val shift_right_arith64 : mword ty64 -> mword ty6 -> mword ty64*)

definition shift_right_arith64  :: "(64)Word.word \<Rightarrow>(6)Word.word \<Rightarrow>(64)Word.word "  where 
     " shift_right_arith64 (v :: 64 bits) (shift :: 6 bits) = (
   (let (v128 :: 128 bits) = ((EXTS (( 128 :: int)::ii) v  ::  128 Word.word)) in
   (subrange_vec_dec ((shift_bits_right v128 shift  ::  128 Word.word)) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)))"


(*val shift_right_arith32 : mword ty32 -> mword ty5 -> mword ty32*)

definition shift_right_arith32  :: "(32)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(32)Word.word "  where 
     " shift_right_arith32 (v :: 32 bits) (shift :: 5 bits) = (
   (let (v64 :: 64 bits) = ((EXTS (( 64 :: int)::ii) v  ::  64 Word.word)) in
   (subrange_vec_dec ((shift_bits_right v64 shift  ::  64 Word.word)) (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)))"


definition xlen  :: " int "  where 
     " xlen = ( (( 64 :: int)::ii))"


definition xlen_max_unsigned  :: " int "  where 
     " xlen_max_unsigned = ( ((pow2 xlen)) - (( 1 :: int)::ii))"


definition xlen_max_signed  :: " int "  where 
     " xlen_max_signed = ( ((pow2 ((xlen - (( 1 :: int)::ii))))) - (( 1 :: int)::ii))"


definition xlen_min_signed  :: " int "  where 
     " xlen_min_signed = ( (( 0 :: int)::ii) - ((pow2 ((xlen - (( 1 :: int)::ii))))))"


(*val regbits_to_regno : mword ty5 -> integer*)

definition regbits_to_regno  :: "(5)Word.word \<Rightarrow> int "  where 
     " regbits_to_regno b = (
   (let r = (Word.uint b) in
   r))"


(*val creg2reg_bits : mword ty3 -> mword ty5*)

definition creg2reg_bits  :: "(3)Word.word \<Rightarrow>(5)Word.word "  where 
     " creg2reg_bits creg = ( (concat_vec (vec_of_bits [B0,B1]  ::  2 Word.word) creg  ::  5 Word.word))"


definition zreg  :: "(5)Word.word "  where 
     " zreg = ( (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))"


definition ra  :: "(5)Word.word "  where 
     " ra = ( (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word))"


definition sp  :: "(5)Word.word "  where 
     " sp = ( (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))"


(*val rX : integer -> M (mword ty64)*)

definition rX  :: " int \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " rX r = (
   (let p00 = r in
   if (((p00 = (( 0 :: int)::ii)))) then
     return (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                          B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                          B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
              ::  64 Word.word)
   else if (((p00 = (( 1 :: int)::ii)))) then (read_reg x1_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 2 :: int)::ii)))) then (read_reg x2_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 3 :: int)::ii)))) then (read_reg x3_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 4 :: int)::ii)))) then (read_reg x4_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 5 :: int)::ii)))) then (read_reg x5_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 6 :: int)::ii)))) then (read_reg x6_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 7 :: int)::ii)))) then (read_reg x7_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 8 :: int)::ii)))) then (read_reg x8_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 9 :: int)::ii)))) then (read_reg x9_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 10 :: int)::ii)))) then (read_reg x10_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 11 :: int)::ii)))) then (read_reg x11_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 12 :: int)::ii)))) then (read_reg x12_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 13 :: int)::ii)))) then (read_reg x13_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 14 :: int)::ii)))) then (read_reg x14_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 15 :: int)::ii)))) then (read_reg x15_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 16 :: int)::ii)))) then (read_reg x16_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 17 :: int)::ii)))) then (read_reg x17_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 18 :: int)::ii)))) then (read_reg x18_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 19 :: int)::ii)))) then (read_reg x19_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 20 :: int)::ii)))) then (read_reg x20_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 21 :: int)::ii)))) then (read_reg x21_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 22 :: int)::ii)))) then (read_reg x22_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 23 :: int)::ii)))) then (read_reg x23_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 24 :: int)::ii)))) then (read_reg x24_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 25 :: int)::ii)))) then (read_reg x25_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 26 :: int)::ii)))) then (read_reg x26_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 27 :: int)::ii)))) then (read_reg x27_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 28 :: int)::ii)))) then (read_reg x28_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 29 :: int)::ii)))) then (read_reg x29_ref  :: ( 64 Word.word) M)
   else if (((p00 = (( 30 :: int)::ii)))) then (read_reg x30_ref  :: ( 64 Word.word) M)
   else (read_reg x31_ref  :: ( 64 Word.word) M)))"


(*val wX : integer -> mword ty64 -> M unit*)

definition wX  :: " int \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " wX r v = (
   (let p00 = r in
   (if (((p00 = (( 0 :: int)::ii)))) then return () 
    else if (((p00 = (( 1 :: int)::ii)))) then write_reg x1_ref v
    else if (((p00 = (( 2 :: int)::ii)))) then write_reg x2_ref v
    else if (((p00 = (( 3 :: int)::ii)))) then write_reg x3_ref v
    else if (((p00 = (( 4 :: int)::ii)))) then write_reg x4_ref v
    else if (((p00 = (( 5 :: int)::ii)))) then write_reg x5_ref v
    else if (((p00 = (( 6 :: int)::ii)))) then write_reg x6_ref v
    else if (((p00 = (( 7 :: int)::ii)))) then write_reg x7_ref v
    else if (((p00 = (( 8 :: int)::ii)))) then write_reg x8_ref v
    else if (((p00 = (( 9 :: int)::ii)))) then write_reg x9_ref v
    else if (((p00 = (( 10 :: int)::ii)))) then write_reg x10_ref v
    else if (((p00 = (( 11 :: int)::ii)))) then write_reg x11_ref v
    else if (((p00 = (( 12 :: int)::ii)))) then write_reg x12_ref v
    else if (((p00 = (( 13 :: int)::ii)))) then write_reg x13_ref v
    else if (((p00 = (( 14 :: int)::ii)))) then write_reg x14_ref v
    else if (((p00 = (( 15 :: int)::ii)))) then write_reg x15_ref v
    else if (((p00 = (( 16 :: int)::ii)))) then write_reg x16_ref v
    else if (((p00 = (( 17 :: int)::ii)))) then write_reg x17_ref v
    else if (((p00 = (( 18 :: int)::ii)))) then write_reg x18_ref v
    else if (((p00 = (( 19 :: int)::ii)))) then write_reg x19_ref v
    else if (((p00 = (( 20 :: int)::ii)))) then write_reg x20_ref v
    else if (((p00 = (( 21 :: int)::ii)))) then write_reg x21_ref v
    else if (((p00 = (( 22 :: int)::ii)))) then write_reg x22_ref v
    else if (((p00 = (( 23 :: int)::ii)))) then write_reg x23_ref v
    else if (((p00 = (( 24 :: int)::ii)))) then write_reg x24_ref v
    else if (((p00 = (( 25 :: int)::ii)))) then write_reg x25_ref v
    else if (((p00 = (( 26 :: int)::ii)))) then write_reg x26_ref v
    else if (((p00 = (( 27 :: int)::ii)))) then write_reg x27_ref v
    else if (((p00 = (( 28 :: int)::ii)))) then write_reg x28_ref v
    else if (((p00 = (( 29 :: int)::ii)))) then write_reg x29_ref v
    else if (((p00 = (( 30 :: int)::ii)))) then write_reg x30_ref v
    else write_reg x31_ref v) \<then>
   return (if (((r \<noteq> (( 0 :: int)::ii)))) then
             print_endline
               (((op@) (''x'')
                   (((op@) ((stringFromInteger r))
                       (((op@) ('' <- '') ((string_of_bits v))))))))
           else () )))"


(*val reg_name_abi : mword ty5 -> string*)

definition reg_name_abi  :: "(5)Word.word \<Rightarrow> string "  where 
     " reg_name_abi r = (
   (let b__0 = r in
   if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     (''zero'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     (''ra'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     (''sp'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     (''gp'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     (''tp'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     (''t0'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     (''t1'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     (''t2'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     (''fp'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     (''s1'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     (''a0'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     (''a1'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     (''a2'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     (''a3'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     (''a4'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B1]  ::  5 Word.word)))))) then
     (''a5'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     (''a6'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     (''a7'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     (''s2'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     (''s3'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     (''s4'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     (''s5'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     (''s6'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     (''s7'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     (''s8'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     (''s9'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     (''s10'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     (''s11'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     (''t3'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     (''t4'')
   else if (((((regbits_to_regno b__0)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     (''t5'')
   else (''t6'')))"


(*val Architecture_of_num : integer -> Architecture*)

definition Architecture_of_num  :: " int \<Rightarrow> Architecture "  where 
     " Architecture_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RV32
   else if (((p00 = (( 1 :: int)::ii)))) then RV64
   else RV128))"


(*val num_of_Architecture : Architecture -> integer*)

fun num_of_Architecture  :: " Architecture \<Rightarrow> int "  where 
     " num_of_Architecture RV32 = ( (( 0 :: int)::ii))"
|" num_of_Architecture RV64 = ( (( 1 :: int)::ii))"
|" num_of_Architecture RV128 = ( (( 2 :: int)::ii))"


(*val architecture : mword ty2 -> maybe Architecture*)

definition architecture  :: "(2)Word.word \<Rightarrow>(Architecture)option "  where 
     " architecture a = (
   (let b__0 = a in
   if (((b__0 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then Some RV32
   else if (((b__0 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then Some RV64
   else if (((b__0 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) then Some RV128
   else None))"


(*val arch_to_bits : Architecture -> mword ty2*)

fun arch_to_bits  :: " Architecture \<Rightarrow>(2)Word.word "  where 
     " arch_to_bits RV32 = ( (vec_of_bits [B0,B1]  ::  2 Word.word))"
|" arch_to_bits RV64 = ( (vec_of_bits [B1,B0]  ::  2 Word.word))"
|" arch_to_bits RV128 = ( (vec_of_bits [B1,B1]  ::  2 Word.word))"


(*val Privilege_of_num : integer -> Privilege*)

definition Privilege_of_num  :: " int \<Rightarrow> Privilege "  where 
     " Privilege_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then User
   else if (((p00 = (( 1 :: int)::ii)))) then Supervisor
   else Machine))"


(*val num_of_Privilege : Privilege -> integer*)

fun num_of_Privilege  :: " Privilege \<Rightarrow> int "  where 
     " num_of_Privilege User = ( (( 0 :: int)::ii))"
|" num_of_Privilege Supervisor = ( (( 1 :: int)::ii))"
|" num_of_Privilege Machine = ( (( 2 :: int)::ii))"


(*val privLevel_to_bits : Privilege -> mword ty2*)

fun privLevel_to_bits  :: " Privilege \<Rightarrow>(2)Word.word "  where 
     " privLevel_to_bits User = ( (vec_of_bits [B0,B0]  ::  2 Word.word))"
|" privLevel_to_bits Supervisor = ( (vec_of_bits [B0,B1]  ::  2 Word.word))"
|" privLevel_to_bits Machine = ( (vec_of_bits [B1,B1]  ::  2 Word.word))"


(*val privLevel_of_bits : mword ty2 -> Privilege*)

definition privLevel_of_bits  :: "(2)Word.word \<Rightarrow> Privilege "  where 
     " privLevel_of_bits p = (
   (let b__0 = p in
   if (((b__0 = (vec_of_bits [B0,B0]  ::  2 Word.word)))) then User
   else if (((b__0 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then Supervisor
   else Machine))"


(*val privLevel_to_str : Privilege -> string*)

fun privLevel_to_str  :: " Privilege \<Rightarrow> string "  where 
     " privLevel_to_str User = ( (''U''))"
|" privLevel_to_str Supervisor = ( (''S''))"
|" privLevel_to_str Machine = ( (''M''))"


(*val AccessType_of_num : integer -> AccessType*)

definition AccessType_of_num  :: " int \<Rightarrow> AccessType "  where 
     " AccessType_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Read
   else if (((p00 = (( 1 :: int)::ii)))) then Write
   else if (((p00 = (( 2 :: int)::ii)))) then ReadWrite
   else Execute))"


(*val num_of_AccessType : AccessType -> integer*)

fun num_of_AccessType  :: " AccessType \<Rightarrow> int "  where 
     " num_of_AccessType Read = ( (( 0 :: int)::ii))"
|" num_of_AccessType Write = ( (( 1 :: int)::ii))"
|" num_of_AccessType ReadWrite = ( (( 2 :: int)::ii))"
|" num_of_AccessType Execute = ( (( 3 :: int)::ii))"


(*val accessType_to_str : AccessType -> string*)

fun accessType_to_str  :: " AccessType \<Rightarrow> string "  where 
     " accessType_to_str Read = ( (''R''))"
|" accessType_to_str Write = ( (''W''))"
|" accessType_to_str ReadWrite = ( (''RW''))"
|" accessType_to_str Execute = ( (''X''))"


(*val ReadType_of_num : integer -> ReadType*)

definition ReadType_of_num  :: " int \<Rightarrow> ReadType "  where 
     " ReadType_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Instruction
   else Data))"


(*val num_of_ReadType : ReadType -> integer*)

fun num_of_ReadType  :: " ReadType \<Rightarrow> int "  where 
     " num_of_ReadType Instruction = ( (( 0 :: int)::ii))"
|" num_of_ReadType Data = ( (( 1 :: int)::ii))"


(*val readType_to_str : ReadType -> string*)

fun readType_to_str  :: " ReadType \<Rightarrow> string "  where 
     " readType_to_str Instruction = ( (''I''))"
|" readType_to_str Data = ( (''D''))"


(*val ExceptionType_of_num : integer -> ExceptionType*)

definition ExceptionType_of_num  :: " int \<Rightarrow> ExceptionType "  where 
     " ExceptionType_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then E_Fetch_Addr_Align
   else if (((p00 = (( 1 :: int)::ii)))) then E_Fetch_Access_Fault
   else if (((p00 = (( 2 :: int)::ii)))) then E_Illegal_Instr
   else if (((p00 = (( 3 :: int)::ii)))) then E_Breakpoint
   else if (((p00 = (( 4 :: int)::ii)))) then E_Load_Addr_Align
   else if (((p00 = (( 5 :: int)::ii)))) then E_Load_Access_Fault
   else if (((p00 = (( 6 :: int)::ii)))) then E_SAMO_Addr_Align
   else if (((p00 = (( 7 :: int)::ii)))) then E_SAMO_Access_Fault
   else if (((p00 = (( 8 :: int)::ii)))) then E_U_EnvCall
   else if (((p00 = (( 9 :: int)::ii)))) then E_S_EnvCall
   else if (((p00 = (( 10 :: int)::ii)))) then E_Reserved_10
   else if (((p00 = (( 11 :: int)::ii)))) then E_M_EnvCall
   else if (((p00 = (( 12 :: int)::ii)))) then E_Fetch_Page_Fault
   else if (((p00 = (( 13 :: int)::ii)))) then E_Load_Page_Fault
   else if (((p00 = (( 14 :: int)::ii)))) then E_Reserved_14
   else E_SAMO_Page_Fault))"


(*val num_of_ExceptionType : ExceptionType -> integer*)

fun num_of_ExceptionType  :: " ExceptionType \<Rightarrow> int "  where 
     " num_of_ExceptionType E_Fetch_Addr_Align = ( (( 0 :: int)::ii))"
|" num_of_ExceptionType E_Fetch_Access_Fault = ( (( 1 :: int)::ii))"
|" num_of_ExceptionType E_Illegal_Instr = ( (( 2 :: int)::ii))"
|" num_of_ExceptionType E_Breakpoint = ( (( 3 :: int)::ii))"
|" num_of_ExceptionType E_Load_Addr_Align = ( (( 4 :: int)::ii))"
|" num_of_ExceptionType E_Load_Access_Fault = ( (( 5 :: int)::ii))"
|" num_of_ExceptionType E_SAMO_Addr_Align = ( (( 6 :: int)::ii))"
|" num_of_ExceptionType E_SAMO_Access_Fault = ( (( 7 :: int)::ii))"
|" num_of_ExceptionType E_U_EnvCall = ( (( 8 :: int)::ii))"
|" num_of_ExceptionType E_S_EnvCall = ( (( 9 :: int)::ii))"
|" num_of_ExceptionType E_Reserved_10 = ( (( 10 :: int)::ii))"
|" num_of_ExceptionType E_M_EnvCall = ( (( 11 :: int)::ii))"
|" num_of_ExceptionType E_Fetch_Page_Fault = ( (( 12 :: int)::ii))"
|" num_of_ExceptionType E_Load_Page_Fault = ( (( 13 :: int)::ii))"
|" num_of_ExceptionType E_Reserved_14 = ( (( 14 :: int)::ii))"
|" num_of_ExceptionType E_SAMO_Page_Fault = ( (( 15 :: int)::ii))"


(*val exceptionType_to_bits : ExceptionType -> mword ty4*)

fun exceptionType_to_bits  :: " ExceptionType \<Rightarrow>(4)Word.word "  where 
     " exceptionType_to_bits E_Fetch_Addr_Align = ( (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_Fetch_Access_Fault = ( (vec_of_bits [B0,B0,B0,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_Illegal_Instr = ( (vec_of_bits [B0,B0,B1,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_Breakpoint = ( (vec_of_bits [B0,B0,B1,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_Load_Addr_Align = ( (vec_of_bits [B0,B1,B0,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_Load_Access_Fault = ( (vec_of_bits [B0,B1,B0,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_SAMO_Addr_Align = ( (vec_of_bits [B0,B1,B1,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_SAMO_Access_Fault = ( (vec_of_bits [B0,B1,B1,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_U_EnvCall = ( (vec_of_bits [B1,B0,B0,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_S_EnvCall = ( (vec_of_bits [B1,B0,B0,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_Reserved_10 = ( (vec_of_bits [B1,B0,B1,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_M_EnvCall = ( (vec_of_bits [B1,B0,B1,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_Fetch_Page_Fault = ( (vec_of_bits [B1,B1,B0,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_Load_Page_Fault = ( (vec_of_bits [B1,B1,B0,B1]  ::  4 Word.word))"
|" exceptionType_to_bits E_Reserved_14 = ( (vec_of_bits [B1,B1,B1,B0]  ::  4 Word.word))"
|" exceptionType_to_bits E_SAMO_Page_Fault = ( (vec_of_bits [B1,B1,B1,B1]  ::  4 Word.word))"


(*val exceptionType_to_str : ExceptionType -> string*)

fun exceptionType_to_str  :: " ExceptionType \<Rightarrow> string "  where 
     " exceptionType_to_str E_Fetch_Addr_Align = ( (''misaligned-fetch''))"
|" exceptionType_to_str E_Fetch_Access_Fault = ( (''fetch-access-fault''))"
|" exceptionType_to_str E_Illegal_Instr = ( (''illegal-instruction''))"
|" exceptionType_to_str E_Breakpoint = ( (''breakpoint''))"
|" exceptionType_to_str E_Load_Addr_Align = ( (''misaligned-load''))"
|" exceptionType_to_str E_Load_Access_Fault = ( (''load-access-fault''))"
|" exceptionType_to_str E_SAMO_Addr_Align = ( (''misaliged-store/amo''))"
|" exceptionType_to_str E_SAMO_Access_Fault = ( (''store/amo-access-fault''))"
|" exceptionType_to_str E_U_EnvCall = ( (''u-call''))"
|" exceptionType_to_str E_S_EnvCall = ( (''s-call''))"
|" exceptionType_to_str E_Reserved_10 = ( (''reserved-0''))"
|" exceptionType_to_str E_M_EnvCall = ( (''m-call''))"
|" exceptionType_to_str E_Fetch_Page_Fault = ( (''fetch-page-fault''))"
|" exceptionType_to_str E_Load_Page_Fault = ( (''load-page-fault''))"
|" exceptionType_to_str E_Reserved_14 = ( (''reserved-1''))"
|" exceptionType_to_str E_SAMO_Page_Fault = ( (''store/amo-page-fault''))"


(*val InterruptType_of_num : integer -> InterruptType*)

definition InterruptType_of_num  :: " int \<Rightarrow> InterruptType "  where 
     " InterruptType_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then I_U_Software
   else if (((p00 = (( 1 :: int)::ii)))) then I_S_Software
   else if (((p00 = (( 2 :: int)::ii)))) then I_M_Software
   else if (((p00 = (( 3 :: int)::ii)))) then I_U_Timer
   else if (((p00 = (( 4 :: int)::ii)))) then I_S_Timer
   else if (((p00 = (( 5 :: int)::ii)))) then I_M_Timer
   else if (((p00 = (( 6 :: int)::ii)))) then I_U_External
   else if (((p00 = (( 7 :: int)::ii)))) then I_S_External
   else I_M_External))"


(*val num_of_InterruptType : InterruptType -> integer*)

fun num_of_InterruptType  :: " InterruptType \<Rightarrow> int "  where 
     " num_of_InterruptType I_U_Software = ( (( 0 :: int)::ii))"
|" num_of_InterruptType I_S_Software = ( (( 1 :: int)::ii))"
|" num_of_InterruptType I_M_Software = ( (( 2 :: int)::ii))"
|" num_of_InterruptType I_U_Timer = ( (( 3 :: int)::ii))"
|" num_of_InterruptType I_S_Timer = ( (( 4 :: int)::ii))"
|" num_of_InterruptType I_M_Timer = ( (( 5 :: int)::ii))"
|" num_of_InterruptType I_U_External = ( (( 6 :: int)::ii))"
|" num_of_InterruptType I_S_External = ( (( 7 :: int)::ii))"
|" num_of_InterruptType I_M_External = ( (( 8 :: int)::ii))"


(*val interruptType_to_bits : InterruptType -> mword ty4*)

fun interruptType_to_bits  :: " InterruptType \<Rightarrow>(4)Word.word "  where 
     " interruptType_to_bits I_U_Software = ( (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word))"
|" interruptType_to_bits I_S_Software = ( (vec_of_bits [B0,B0,B0,B1]  ::  4 Word.word))"
|" interruptType_to_bits I_M_Software = ( (vec_of_bits [B0,B0,B1,B1]  ::  4 Word.word))"
|" interruptType_to_bits I_U_Timer = ( (vec_of_bits [B0,B1,B0,B0]  ::  4 Word.word))"
|" interruptType_to_bits I_S_Timer = ( (vec_of_bits [B0,B1,B0,B1]  ::  4 Word.word))"
|" interruptType_to_bits I_M_Timer = ( (vec_of_bits [B0,B1,B1,B1]  ::  4 Word.word))"
|" interruptType_to_bits I_U_External = ( (vec_of_bits [B1,B0,B0,B0]  ::  4 Word.word))"
|" interruptType_to_bits I_S_External = ( (vec_of_bits [B1,B0,B0,B1]  ::  4 Word.word))"
|" interruptType_to_bits I_M_External = ( (vec_of_bits [B1,B0,B1,B1]  ::  4 Word.word))"


(*val TrapVectorMode_of_num : integer -> TrapVectorMode*)

definition TrapVectorMode_of_num  :: " int \<Rightarrow> TrapVectorMode "  where 
     " TrapVectorMode_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then TV_Direct
   else if (((p00 = (( 1 :: int)::ii)))) then TV_Vector
   else TV_Reserved))"


(*val num_of_TrapVectorMode : TrapVectorMode -> integer*)

fun num_of_TrapVectorMode  :: " TrapVectorMode \<Rightarrow> int "  where 
     " num_of_TrapVectorMode TV_Direct = ( (( 0 :: int)::ii))"
|" num_of_TrapVectorMode TV_Vector = ( (( 1 :: int)::ii))"
|" num_of_TrapVectorMode TV_Reserved = ( (( 2 :: int)::ii))"


(*val trapVectorMode_of_bits : mword ty2 -> TrapVectorMode*)

definition trapVectorMode_of_bits  :: "(2)Word.word \<Rightarrow> TrapVectorMode "  where 
     " trapVectorMode_of_bits m = (
   (let b__0 = m in
   if (((b__0 = (vec_of_bits [B0,B0]  ::  2 Word.word)))) then TV_Direct
   else if (((b__0 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then TV_Vector
   else TV_Reserved))"


(*val not_implemented : forall 'a. string -> M 'a*)

definition not_implemented  :: " string \<Rightarrow>((register_value),'a,(exception))monad "  where 
     " not_implemented message = ( throw (Error_not_implemented message))"


(*val internal_error : forall 'a. string -> M 'a*)

definition internal_error  :: " string \<Rightarrow>((register_value),'a,(exception))monad "  where 
     " internal_error s = ( assert_exp False s \<then> throw (Error_internal_error () ))"


(*val ExtStatus_of_num : integer -> ExtStatus*)

definition ExtStatus_of_num  :: " int \<Rightarrow> ExtStatus "  where 
     " ExtStatus_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Off
   else if (((p00 = (( 1 :: int)::ii)))) then Initial
   else if (((p00 = (( 2 :: int)::ii)))) then Clean
   else Dirty))"


(*val num_of_ExtStatus : ExtStatus -> integer*)

fun num_of_ExtStatus  :: " ExtStatus \<Rightarrow> int "  where 
     " num_of_ExtStatus Off = ( (( 0 :: int)::ii))"
|" num_of_ExtStatus Initial = ( (( 1 :: int)::ii))"
|" num_of_ExtStatus Clean = ( (( 2 :: int)::ii))"
|" num_of_ExtStatus Dirty = ( (( 3 :: int)::ii))"


(*val extStatus_to_bits : ExtStatus -> mword ty2*)

fun extStatus_to_bits  :: " ExtStatus \<Rightarrow>(2)Word.word "  where 
     " extStatus_to_bits Off = ( (vec_of_bits [B0,B0]  ::  2 Word.word))"
|" extStatus_to_bits Initial = ( (vec_of_bits [B0,B1]  ::  2 Word.word))"
|" extStatus_to_bits Clean = ( (vec_of_bits [B1,B0]  ::  2 Word.word))"
|" extStatus_to_bits Dirty = ( (vec_of_bits [B1,B1]  ::  2 Word.word))"


(*val extStatus_of_bits : mword ty2 -> ExtStatus*)

definition extStatus_of_bits  :: "(2)Word.word \<Rightarrow> ExtStatus "  where 
     " extStatus_of_bits e = (
   (let b__0 = e in
   if (((b__0 = (vec_of_bits [B0,B0]  ::  2 Word.word)))) then Off
   else if (((b__0 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then Initial
   else if (((b__0 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then Clean
   else Dirty))"


(*val SATPMode_of_num : integer -> SATPMode*)

definition SATPMode_of_num  :: " int \<Rightarrow> SATPMode "  where 
     " SATPMode_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Sbare
   else if (((p00 = (( 1 :: int)::ii)))) then Sv32
   else Sv39))"


(*val num_of_SATPMode : SATPMode -> integer*)

fun num_of_SATPMode  :: " SATPMode \<Rightarrow> int "  where 
     " num_of_SATPMode Sbare = ( (( 0 :: int)::ii))"
|" num_of_SATPMode Sv32 = ( (( 1 :: int)::ii))"
|" num_of_SATPMode Sv39 = ( (( 2 :: int)::ii))"


(*val satpMode_of_bits : Architecture -> mword ty4 -> maybe SATPMode*)

definition satpMode_of_bits  :: " Architecture \<Rightarrow>(4)Word.word \<Rightarrow>(SATPMode)option "  where 
     " satpMode_of_bits (g__33 :: Architecture) (b__0 :: satp_mode) = (
      if (((b__0 = (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word)))) then Some Sbare
      else
        (case  (g__33, b__0) of
          (RV32, b__1) =>
           if (((b__1 = (vec_of_bits [B0,B0,B0,B1]  ::  4 Word.word)))) then Some Sv32
           else (case  (RV32, b__1) of   (g__34, g__35) => None )
        | (RV64, b__2) =>
           if (((b__2 = (vec_of_bits [B1,B0,B0,B0]  ::  4 Word.word)))) then Some Sv39
           else (case  (RV64, b__2) of   (g__34, g__35) => None )
        | (g__34, g__35) => None
        ))"


(*val uop_of_num : integer -> uop*)

definition uop_of_num  :: " int \<Rightarrow> uop "  where 
     " uop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_LUI
   else RISCV_AUIPC))"


(*val num_of_uop : uop -> integer*)

fun num_of_uop  :: " uop \<Rightarrow> int "  where 
     " num_of_uop RISCV_LUI = ( (( 0 :: int)::ii))"
|" num_of_uop RISCV_AUIPC = ( (( 1 :: int)::ii))"


(*val bop_of_num : integer -> bop*)

definition bop_of_num  :: " int \<Rightarrow> bop "  where 
     " bop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_BEQ
   else if (((p00 = (( 1 :: int)::ii)))) then RISCV_BNE
   else if (((p00 = (( 2 :: int)::ii)))) then RISCV_BLT
   else if (((p00 = (( 3 :: int)::ii)))) then RISCV_BGE
   else if (((p00 = (( 4 :: int)::ii)))) then RISCV_BLTU
   else RISCV_BGEU))"


(*val num_of_bop : bop -> integer*)

fun num_of_bop  :: " bop \<Rightarrow> int "  where 
     " num_of_bop RISCV_BEQ = ( (( 0 :: int)::ii))"
|" num_of_bop RISCV_BNE = ( (( 1 :: int)::ii))"
|" num_of_bop RISCV_BLT = ( (( 2 :: int)::ii))"
|" num_of_bop RISCV_BGE = ( (( 3 :: int)::ii))"
|" num_of_bop RISCV_BLTU = ( (( 4 :: int)::ii))"
|" num_of_bop RISCV_BGEU = ( (( 5 :: int)::ii))"


(*val iop_of_num : integer -> iop*)

definition iop_of_num  :: " int \<Rightarrow> iop "  where 
     " iop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_ADDI
   else if (((p00 = (( 1 :: int)::ii)))) then RISCV_SLTI
   else if (((p00 = (( 2 :: int)::ii)))) then RISCV_SLTIU
   else if (((p00 = (( 3 :: int)::ii)))) then RISCV_XORI
   else if (((p00 = (( 4 :: int)::ii)))) then RISCV_ORI
   else RISCV_ANDI))"


(*val num_of_iop : iop -> integer*)

fun num_of_iop  :: " iop \<Rightarrow> int "  where 
     " num_of_iop RISCV_ADDI = ( (( 0 :: int)::ii))"
|" num_of_iop RISCV_SLTI = ( (( 1 :: int)::ii))"
|" num_of_iop RISCV_SLTIU = ( (( 2 :: int)::ii))"
|" num_of_iop RISCV_XORI = ( (( 3 :: int)::ii))"
|" num_of_iop RISCV_ORI = ( (( 4 :: int)::ii))"
|" num_of_iop RISCV_ANDI = ( (( 5 :: int)::ii))"


(*val sop_of_num : integer -> sop*)

definition sop_of_num  :: " int \<Rightarrow> sop "  where 
     " sop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_SLLI
   else if (((p00 = (( 1 :: int)::ii)))) then RISCV_SRLI
   else RISCV_SRAI))"


(*val num_of_sop : sop -> integer*)

fun num_of_sop  :: " sop \<Rightarrow> int "  where 
     " num_of_sop RISCV_SLLI = ( (( 0 :: int)::ii))"
|" num_of_sop RISCV_SRLI = ( (( 1 :: int)::ii))"
|" num_of_sop RISCV_SRAI = ( (( 2 :: int)::ii))"


(*val rop_of_num : integer -> rop*)

definition rop_of_num  :: " int \<Rightarrow> rop "  where 
     " rop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_ADD
   else if (((p00 = (( 1 :: int)::ii)))) then RISCV_SUB
   else if (((p00 = (( 2 :: int)::ii)))) then RISCV_SLL
   else if (((p00 = (( 3 :: int)::ii)))) then RISCV_SLT
   else if (((p00 = (( 4 :: int)::ii)))) then RISCV_SLTU
   else if (((p00 = (( 5 :: int)::ii)))) then RISCV_XOR
   else if (((p00 = (( 6 :: int)::ii)))) then RISCV_SRL
   else if (((p00 = (( 7 :: int)::ii)))) then RISCV_SRA
   else if (((p00 = (( 8 :: int)::ii)))) then RISCV_OR
   else RISCV_AND))"


(*val num_of_rop : rop -> integer*)

fun num_of_rop  :: " rop \<Rightarrow> int "  where 
     " num_of_rop RISCV_ADD = ( (( 0 :: int)::ii))"
|" num_of_rop RISCV_SUB = ( (( 1 :: int)::ii))"
|" num_of_rop RISCV_SLL = ( (( 2 :: int)::ii))"
|" num_of_rop RISCV_SLT = ( (( 3 :: int)::ii))"
|" num_of_rop RISCV_SLTU = ( (( 4 :: int)::ii))"
|" num_of_rop RISCV_XOR = ( (( 5 :: int)::ii))"
|" num_of_rop RISCV_SRL = ( (( 6 :: int)::ii))"
|" num_of_rop RISCV_SRA = ( (( 7 :: int)::ii))"
|" num_of_rop RISCV_OR = ( (( 8 :: int)::ii))"
|" num_of_rop RISCV_AND = ( (( 9 :: int)::ii))"


(*val ropw_of_num : integer -> ropw*)

definition ropw_of_num  :: " int \<Rightarrow> ropw "  where 
     " ropw_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then RISCV_ADDW
   else if (((p00 = (( 1 :: int)::ii)))) then RISCV_SUBW
   else if (((p00 = (( 2 :: int)::ii)))) then RISCV_SLLW
   else if (((p00 = (( 3 :: int)::ii)))) then RISCV_SRLW
   else RISCV_SRAW))"


(*val num_of_ropw : ropw -> integer*)

fun num_of_ropw  :: " ropw \<Rightarrow> int "  where 
     " num_of_ropw RISCV_ADDW = ( (( 0 :: int)::ii))"
|" num_of_ropw RISCV_SUBW = ( (( 1 :: int)::ii))"
|" num_of_ropw RISCV_SLLW = ( (( 2 :: int)::ii))"
|" num_of_ropw RISCV_SRLW = ( (( 3 :: int)::ii))"
|" num_of_ropw RISCV_SRAW = ( (( 4 :: int)::ii))"


(*val amoop_of_num : integer -> amoop*)

definition amoop_of_num  :: " int \<Rightarrow> amoop "  where 
     " amoop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then AMOSWAP
   else if (((p00 = (( 1 :: int)::ii)))) then AMOADD
   else if (((p00 = (( 2 :: int)::ii)))) then AMOXOR
   else if (((p00 = (( 3 :: int)::ii)))) then AMOAND
   else if (((p00 = (( 4 :: int)::ii)))) then AMOOR
   else if (((p00 = (( 5 :: int)::ii)))) then AMOMIN
   else if (((p00 = (( 6 :: int)::ii)))) then AMOMAX
   else if (((p00 = (( 7 :: int)::ii)))) then AMOMINU
   else AMOMAXU))"


(*val num_of_amoop : amoop -> integer*)

fun num_of_amoop  :: " amoop \<Rightarrow> int "  where 
     " num_of_amoop AMOSWAP = ( (( 0 :: int)::ii))"
|" num_of_amoop AMOADD = ( (( 1 :: int)::ii))"
|" num_of_amoop AMOXOR = ( (( 2 :: int)::ii))"
|" num_of_amoop AMOAND = ( (( 3 :: int)::ii))"
|" num_of_amoop AMOOR = ( (( 4 :: int)::ii))"
|" num_of_amoop AMOMIN = ( (( 5 :: int)::ii))"
|" num_of_amoop AMOMAX = ( (( 6 :: int)::ii))"
|" num_of_amoop AMOMINU = ( (( 7 :: int)::ii))"
|" num_of_amoop AMOMAXU = ( (( 8 :: int)::ii))"


(*val csrop_of_num : integer -> csrop*)

definition csrop_of_num  :: " int \<Rightarrow> csrop "  where 
     " csrop_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then CSRRW
   else if (((p00 = (( 1 :: int)::ii)))) then CSRRS
   else CSRRC))"


(*val num_of_csrop : csrop -> integer*)

fun num_of_csrop  :: " csrop \<Rightarrow> int "  where 
     " num_of_csrop CSRRW = ( (( 0 :: int)::ii))"
|" num_of_csrop CSRRS = ( (( 1 :: int)::ii))"
|" num_of_csrop CSRRC = ( (( 2 :: int)::ii))"


(*val word_width_of_num : integer -> word_width*)

definition word_width_of_num  :: " int \<Rightarrow> word_width "  where 
     " word_width_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then BYTE
   else if (((p00 = (( 1 :: int)::ii)))) then HALF
   else if (((p00 = (( 2 :: int)::ii)))) then WORD
   else DOUBLE))"


(*val num_of_word_width : word_width -> integer*)

fun num_of_word_width  :: " word_width \<Rightarrow> int "  where 
     " num_of_word_width BYTE = ( (( 0 :: int)::ii))"
|" num_of_word_width HALF = ( (( 1 :: int)::ii))"
|" num_of_word_width WORD = ( (( 2 :: int)::ii))"
|" num_of_word_width DOUBLE = ( (( 3 :: int)::ii))"


(*val reg_name_forwards : mword ty5 -> string*)

definition reg_name_forwards  :: "(5)Word.word \<Rightarrow> string "  where 
     " reg_name_forwards arg0 = (
   (let p00 = arg0 in
   if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))
   then
     (''zero'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     (''ra'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     (''sp'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     (''gp'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     (''tp'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     (''t0'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     (''t1'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     (''t2'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     (''fp'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     (''s1'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     (''a0'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     (''a1'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     (''a2'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     (''a3'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     (''a4'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B1]  ::  5 Word.word)))))) then
     (''a5'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     (''a6'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     (''a7'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     (''s2'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     (''s3'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     (''s4'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     (''s5'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     (''s6'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     (''s7'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     (''s8'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     (''s9'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     (''s10'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     (''s11'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     (''t3'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     (''t4'')
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     (''t5'')
   else (''t6'')))"


(*val reg_name_backwards : string -> mword ty5*)

definition reg_name_backwards  :: " string \<Rightarrow>(5)Word.word "  where 
     " reg_name_backwards arg0 = ( 
  if(arg0 = (''zero'')) then ((vec_of_bits [B0,B0,B0,B0,B0] :: 5 Word.word))
  else
    (
    if(arg0 = (''ra'')) then ((vec_of_bits [B0,B0,B0,B0,B1] :: 5 Word.word))
    else
      (
      if(arg0 = (''sp'')) then
        ((vec_of_bits [B0,B0,B0,B1,B0] :: 5 Word.word)) else
        (
        if(arg0 = (''gp'')) then
          ((vec_of_bits [B0,B0,B0,B1,B1] :: 5 Word.word)) else
          (
          if(arg0 = (''tp'')) then
            ((vec_of_bits [B0,B0,B1,B0,B0] :: 5 Word.word)) else
            (
            if(arg0 = (''t0'')) then
              ((vec_of_bits [B0,B0,B1,B0,B1] :: 5 Word.word)) else
              (
              if(arg0 = (''t1'')) then
                ((vec_of_bits [B0,B0,B1,B1,B0] :: 5 Word.word)) else
                (
                if(arg0 = (''t2'')) then
                  ((vec_of_bits [B0,B0,B1,B1,B1] :: 5 Word.word)) else
                  (
                  if(arg0 = (''fp'')) then
                    ((vec_of_bits [B0,B1,B0,B0,B0] :: 5 Word.word)) else
                    (
                    if(arg0 = (''s1'')) then
                      ((vec_of_bits [B0,B1,B0,B0,B1] :: 5 Word.word)) else
                      (
                      if(arg0 = (''a0'')) then
                        ((vec_of_bits [B0,B1,B0,B1,B0] :: 5 Word.word)) else
                        (
                        if(arg0 = (''a1'')) then
                          ((vec_of_bits [B0,B1,B0,B1,B1] :: 5 Word.word))
                        else
                          (
                          if(arg0 = (''a2'')) then
                            ((vec_of_bits [B0,B1,B1,B0,B0] :: 5 Word.word))
                          else
                            (
                            if(arg0 = (''a3'')) then
                              ((vec_of_bits [B0,B1,B1,B0,B1] :: 5 Word.word))
                            else
                              (
                              if(arg0 = (''a4'')) then
                                ((vec_of_bits [B0,B1,B1,B1,B0] :: 5 Word.word))
                              else
                                (
                                if(arg0 = (''a5'')) then
                                  ((vec_of_bits [B0,B1,B1,B1,B1] :: 5 Word.word))
                                else
                                  (
                                  if(arg0 = (''a6'')) then
                                    ((vec_of_bits [B1,B0,B0,B0,B0] :: 5 Word.word))
                                  else
                                    (
                                    if(arg0 = (''a7'')) then
                                      ((vec_of_bits [B1,B0,B0,B0,B1] :: 5 Word.word))
                                    else
                                      (
                                      if(arg0 = (''s2'')) then
                                        ((vec_of_bits [B1,B0,B0,B1,B0] :: 5 Word.word))
                                      else
                                        (
                                        if(arg0 = (''s3'')) then
                                          ((vec_of_bits [B1,B0,B0,B1,B1] :: 5 Word.word))
                                        else
                                          (
                                          if(arg0 = (''s4'')) then
                                            ((vec_of_bits [B1,B0,B1,B0,B0] :: 5 Word.word))
                                          else
                                            (
                                            if(arg0 = (''s5'')) then
                                              ((vec_of_bits [B1,B0,B1,B0,B1] :: 5 Word.word))
                                            else
                                              (
                                              if(arg0 = (''s6'')) then
                                                ((vec_of_bits
                                                    [B1,B0,B1,B1,B0] :: 5 Word.word))
                                              else
                                                (
                                                if(arg0 = (''s7'')) then
                                                  ((vec_of_bits
                                                      [B1,B0,B1,B1,B1] :: 5 Word.word))
                                                else
                                                  (
                                                  if(arg0 = (''s8'')) then
                                                    ((vec_of_bits
                                                        [B1,B1,B0,B0,B0] :: 5 Word.word))
                                                  else
                                                    (
                                                    if(arg0 = (''s9'')) then
                                                      ((vec_of_bits
                                                          [B1,B1,B0,B0,B1] :: 5 Word.word))
                                                    else
                                                      (
                                                      if(arg0 = (''s10'')) then
                                                        ((vec_of_bits
                                                            [B1,B1,B0,B1,B0] :: 5 Word.word))
                                                      else
                                                        (
                                                        if(arg0 = (''s11'')) then
                                                          ((vec_of_bits
                                                              [B1,B1,B0,B1,B1] :: 5 Word.word))
                                                        else
                                                          (
                                                          if(arg0 = (''t3'')) then
                                                            ((vec_of_bits
                                                                [B1,B1,B1,B0,B0] :: 5 Word.word))
                                                          else
                                                            (
                                                            if(arg0 =
                                                                 (''t4'')) then
                                                              ((vec_of_bits
                                                                  [B1,B1,B1,B0,B1] :: 5 Word.word))
                                                            else
                                                              (
                                                              if(arg0 =
                                                                   (''t5'')) then
                                                                ((vec_of_bits
                                                                    [B1,B1,B1,B1,B0] :: 5 Word.word))
                                                              else
                                                                (
                                                                if(arg0 =
                                                                    (''t6'')) then
                                                                  ((vec_of_bits
                                                                    [B1,B1,B1,B1,B1] :: 5 Word.word))
                                                                else
                                                                  undefined))))))))))))))))))))))))))))))) )"


(*val reg_name_forwards_matches : mword ty5 -> bool*)

definition reg_name_forwards_matches  :: "(5)Word.word \<Rightarrow> bool "  where 
     " reg_name_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))
   then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B1,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B1]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B1,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B1,B1]  ::  5 Word.word)))))) then
     True
   else False))"


(*val reg_name_backwards_matches : string -> bool*)

definition reg_name_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " reg_name_backwards_matches arg0 = ( 
  if(arg0 = (''zero'')) then True else
    (
    if(arg0 = (''ra'')) then True else
      (
      if(arg0 = (''sp'')) then True else
        (
        if(arg0 = (''gp'')) then True else
          (
          if(arg0 = (''tp'')) then True else
            (
            if(arg0 = (''t0'')) then True else
              (
              if(arg0 = (''t1'')) then True else
                (
                if(arg0 = (''t2'')) then True else
                  (
                  if(arg0 = (''fp'')) then True else
                    (
                    if(arg0 = (''s1'')) then True else
                      (
                      if(arg0 = (''a0'')) then True else
                        (
                        if(arg0 = (''a1'')) then True else
                          (
                          if(arg0 = (''a2'')) then True else
                            (
                            if(arg0 = (''a3'')) then True else
                              (
                              if(arg0 = (''a4'')) then True else
                                (
                                if(arg0 = (''a5'')) then True else
                                  (
                                  if(arg0 = (''a6'')) then True else
                                    (
                                    if(arg0 = (''a7'')) then True else
                                      (
                                      if(arg0 = (''s2'')) then True else
                                        (
                                        if(arg0 = (''s3'')) then True else
                                          (
                                          if(arg0 = (''s4'')) then True else
                                            (
                                            if(arg0 = (''s5'')) then 
                                            True else
                                              (
                                              if(arg0 = (''s6'')) then 
                                              True else
                                                (
                                                if(arg0 = (''s7'')) then 
                                                True else
                                                  (
                                                  if(arg0 = (''s8'')) then
                                                    True else
                                                    (
                                                    if(arg0 = (''s9'')) then
                                                      True else
                                                      (
                                                      if(arg0 = (''s10'')) then
                                                        True else
                                                        (
                                                        if(arg0 = (''s11'')) then
                                                          True else
                                                          (
                                                          if(arg0 = (''t3'')) then
                                                            True else
                                                            (
                                                            if(arg0 =
                                                                 (''t4'')) then
                                                              True else
                                                              (
                                                              if(arg0 =
                                                                   (''t5'')) then
                                                                True else
                                                                (
                                                                if(arg0 =
                                                                    (''t6'')) then
                                                                  True else
                                                                  False))))))))))))))))))))))))))))))) )"


(*val reg_name_matches_prefix : string -> maybe ((mword ty5 * ii))*)

definition reg_name_matches_prefix  :: " string \<Rightarrow>((5)Word.word*int)option "  where 
     " reg_name_matches_prefix arg0 = (
   (let stringappend_18140 = arg0 in
   if (((((string_startswith stringappend_18140 (''zero''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''zero''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''zero''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''ra''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''ra''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''ra''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''sp''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''sp''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''sp''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''gp''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''gp''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''gp''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''tp''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''tp''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''tp''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t0''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t0''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t0''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t1''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t2''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t2''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''fp''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''fp''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''fp''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s1''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B0,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a0''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a0''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a0''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B0,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a1''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B0,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a2''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a2''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a3''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a3''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a4''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a4''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a4''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a5''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a5''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a5''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a6''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a6''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a6''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''a7''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''a7''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''a7''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B0,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s2''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s2''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B0,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s3''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s3''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B0,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s4''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s4''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s4''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s5''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s5''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s5''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s6''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s6''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s6''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s7''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s7''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s7''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s8''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s8''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s8''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s9''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s9''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s9''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s10''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s10''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s10''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''s11''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''s11''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''s11''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t3''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t3''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t4''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t4''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t4''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B0,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t5''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t5''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t5''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B0]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_18140 (''t6''))) \<and> (
  (case  ((string_drop stringappend_18140 ((string_length (''t6''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_18140 ((string_length (''t6''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B1]  ::  5 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val sep_forwards : unit -> string*)

definition sep_forwards  :: " unit \<Rightarrow> string "  where 
     " sep_forwards _ = (
      string_append ((opt_spc_forwards () ))
        ((string_append ('','') ((string_append ((def_spc_forwards () )) (''''))))))"


(*val sep_backwards : string -> unit*)

definition sep_backwards  :: " string \<Rightarrow> unit "  where 
     " sep_backwards arg0 = (
   (let stringappend_18070 = arg0 in  
  (case 
  (case  ((opt_spc_matches_prefix stringappend_18070)) of
        Some (stringappend_18080,stringappend_18090) => (stringappend_18080, stringappend_18090)
  ) of
      (_, stringappend_18090) =>
  (let stringappend_18100 = (string_drop stringappend_18070
                               stringappend_18090) in
  (let stringappend_18110 = (string_drop stringappend_18100
                               ((string_length ('','')))) in
  (case 
  (case  ((opt_spc_matches_prefix stringappend_18110)) of
        Some (stringappend_18120,stringappend_18130) => (stringappend_18120, stringappend_18130)
  ) of
      (_, stringappend_18130) =>
  if(((string_drop stringappend_18110 stringappend_18130)) = ('''')) then 
  ()  else undefined
  )))
  )))"


(*val sep_forwards_matches : unit -> bool*)

definition sep_forwards_matches  :: " unit \<Rightarrow> bool "  where 
     " sep_forwards_matches _ = ( True )"


(*val sep_backwards_matches : string -> bool*)

definition sep_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " sep_backwards_matches arg0 = (
   (let stringappend_18000 = arg0 in
   if ((case  ((opt_spc_matches_prefix stringappend_18000)) of
       Some (stringappend_18010,stringappend_18020) =>
        (let stringappend_18030 = (string_drop stringappend_18000 stringappend_18020) in
        if (((((string_startswith stringappend_18030 ('',''))) \<and> ((let stringappend_18040 = (string_drop stringappend_18030 ((string_length ('','')))) in
               if ((case  ((opt_spc_matches_prefix stringappend_18040)) of
                   Some (stringappend_18050,stringappend_18060) => 
  if(((string_drop stringappend_18040 stringappend_18060)) = ('''')) then
    True else False
                 | None => False
                 )) then
                 True
               else False))))) then
          True
        else False)
     | None => False
     )) then  (case 
 (case  ((opt_spc_matches_prefix stringappend_18000)) of
       Some (stringappend_18010,stringappend_18020) =>
 (stringappend_18010, stringappend_18020)
 ) of
     (_, stringappend_18020) =>
 (let stringappend_18030 = (string_drop stringappend_18000 stringappend_18020) in
 (let stringappend_18040 = (string_drop stringappend_18030
                              ((string_length ('','')))) in
 (case 
 (case  ((opt_spc_matches_prefix stringappend_18040)) of
       Some (stringappend_18050,stringappend_18060) =>
 (stringappend_18050, stringappend_18060)
 ) of
     (_, stringappend_18060) =>
 if(((string_drop stringappend_18040 stringappend_18060)) = ('''')) then 
 True else undefined
 )))
 )
   else False))"


(*val sep_matches_prefix : string -> maybe ((unit * ii))*)

definition sep_matches_prefix  :: " string \<Rightarrow>(unit*int)option "  where 
     " sep_matches_prefix arg0 = (
   (let stringappend_17930 = arg0 in
   if ((case  ((opt_spc_matches_prefix stringappend_17930)) of
       Some (stringappend_17940,stringappend_17950) =>
        (let stringappend_17960 = (string_drop stringappend_17930 stringappend_17950) in
        if (((((string_startswith stringappend_17960 ('',''))) \<and> ((let stringappend_17970 = (string_drop stringappend_17960 ((string_length ('','')))) in
               if ((case  ((opt_spc_matches_prefix stringappend_17970)) of
                   Some (stringappend_17980,stringappend_17990) => 
  (case  ((string_drop stringappend_17970 stringappend_17990)) of
        s0 => True
  )
                 | None => False
                 )) then
                 True
               else False))))) then
          True
        else False)
     | None => False
     )) then  (case 
 (case  ((opt_spc_matches_prefix stringappend_17930)) of
       Some (stringappend_17940,stringappend_17950) =>
 (stringappend_17940, stringappend_17950)
 ) of
     (_, stringappend_17950) =>
 (let stringappend_17960 = (string_drop stringappend_17930 stringappend_17950) in
 (let stringappend_17970 = (string_drop stringappend_17960
                              ((string_length ('','')))) in
 (case 
 (case  ((opt_spc_matches_prefix stringappend_17970)) of
       Some (stringappend_17980,stringappend_17990) =>
 (stringappend_17980, stringappend_17990)
 ) of
     (_, stringappend_17990) =>
 (case  ((string_drop stringappend_17970 stringappend_17990)) of
       s0 => Some (() , ((string_length arg0)) - ((string_length s0)))
 )
 )))
 )
   else None))"


(*val bool_bits_forwards : bool -> mword ty1*)

fun bool_bits_forwards  :: " bool \<Rightarrow>(1)Word.word "  where 
     " bool_bits_forwards True = ( (vec_of_bits [B1]  ::  1 Word.word))"
|" bool_bits_forwards False = ( (vec_of_bits [B0]  ::  1 Word.word))"


(*val bool_bits_backwards : mword ty1 -> bool*)

definition bool_bits_backwards  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bool_bits_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else False))"


(*val bool_bits_forwards_matches : bool -> bool*)

fun bool_bits_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " bool_bits_forwards_matches True = ( True )"
|" bool_bits_forwards_matches False = ( True )"


(*val bool_bits_backwards_matches : mword ty1 -> bool*)

definition bool_bits_backwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bool_bits_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bool_not_bits_forwards : bool -> mword ty1*)

fun bool_not_bits_forwards  :: " bool \<Rightarrow>(1)Word.word "  where 
     " bool_not_bits_forwards True = ( (vec_of_bits [B0]  ::  1 Word.word))"
|" bool_not_bits_forwards False = ( (vec_of_bits [B1]  ::  1 Word.word))"


(*val bool_not_bits_backwards : mword ty1 -> bool*)

definition bool_not_bits_backwards  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bool_not_bits_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bool_not_bits_forwards_matches : bool -> bool*)

fun bool_not_bits_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " bool_not_bits_forwards_matches True = ( True )"
|" bool_not_bits_forwards_matches False = ( True )"


(*val bool_not_bits_backwards_matches : mword ty1 -> bool*)

definition bool_not_bits_backwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bool_not_bits_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else False))"


(*val size_bits_forwards : word_width -> mword ty2*)

fun size_bits_forwards  :: " word_width \<Rightarrow>(2)Word.word "  where 
     " size_bits_forwards BYTE = ( (vec_of_bits [B0,B0]  ::  2 Word.word))"
|" size_bits_forwards HALF = ( (vec_of_bits [B0,B1]  ::  2 Word.word))"
|" size_bits_forwards WORD = ( (vec_of_bits [B1,B0]  ::  2 Word.word))"
|" size_bits_forwards DOUBLE = ( (vec_of_bits [B1,B1]  ::  2 Word.word))"


(*val size_bits_backwards : mword ty2 -> word_width*)

definition size_bits_backwards  :: "(2)Word.word \<Rightarrow> word_width "  where 
     " size_bits_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0]  ::  2 Word.word)))) then BYTE
   else if (((p00 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then HALF
   else if (((p00 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then WORD
   else DOUBLE))"


(*val size_bits_forwards_matches : word_width -> bool*)

fun size_bits_forwards_matches  :: " word_width \<Rightarrow> bool "  where 
     " size_bits_forwards_matches BYTE = ( True )"
|" size_bits_forwards_matches HALF = ( True )"
|" size_bits_forwards_matches WORD = ( True )"
|" size_bits_forwards_matches DOUBLE = ( True )"


(*val size_bits_backwards_matches : mword ty2 -> bool*)

definition size_bits_backwards_matches  :: "(2)Word.word \<Rightarrow> bool "  where 
     " size_bits_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0]  ::  2 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) then True
   else False))"


(*val size_mnemonic_forwards : word_width -> string*)

fun size_mnemonic_forwards  :: " word_width \<Rightarrow> string "  where 
     " size_mnemonic_forwards BYTE = ( (''b''))"
|" size_mnemonic_forwards HALF = ( (''h''))"
|" size_mnemonic_forwards WORD = ( (''w''))"
|" size_mnemonic_forwards DOUBLE = ( (''d''))"


(*val size_mnemonic_backwards : string -> word_width*)

definition size_mnemonic_backwards  :: " string \<Rightarrow> word_width "  where 
     " size_mnemonic_backwards arg0 = ( 
  if(arg0 = (''b'')) then BYTE else
    (
    if(arg0 = (''h'')) then HALF else
      (
      if(arg0 = (''w'')) then WORD else
        (if(arg0 = (''d'')) then DOUBLE else undefined))) )"


(*val size_mnemonic_forwards_matches : word_width -> bool*)

fun size_mnemonic_forwards_matches  :: " word_width \<Rightarrow> bool "  where 
     " size_mnemonic_forwards_matches BYTE = ( True )"
|" size_mnemonic_forwards_matches HALF = ( True )"
|" size_mnemonic_forwards_matches WORD = ( True )"
|" size_mnemonic_forwards_matches DOUBLE = ( True )"


(*val size_mnemonic_backwards_matches : string -> bool*)

definition size_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " size_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''b'')) then True else
    (
    if(arg0 = (''h'')) then True else
      (
      if(arg0 = (''w'')) then True else
        (if(arg0 = (''d'')) then True else False))) )"


(*val size_mnemonic_matches_prefix : string -> maybe ((word_width * ii))*)

definition size_mnemonic_matches_prefix  :: " string \<Rightarrow>(word_width*int)option "  where 
     " size_mnemonic_matches_prefix arg0 = (
   (let stringappend_17890 = arg0 in
   if (((((string_startswith stringappend_17890 (''b''))) \<and> (
  (case  ((string_drop stringappend_17890 ((string_length (''b''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17890 ((string_length (''b''))))) of
       s0 => Some (BYTE, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17890 (''h''))) \<and> (
  (case  ((string_drop stringappend_17890 ((string_length (''h''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17890 ((string_length (''h''))))) of
       s0 => Some (HALF, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17890 (''w''))) \<and> (
  (case  ((string_drop stringappend_17890 ((string_length (''w''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17890 ((string_length (''w''))))) of
       s0 => Some (WORD, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17890 (''d''))) \<and> (
  (case  ((string_drop stringappend_17890 ((string_length (''d''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17890 ((string_length (''d''))))) of
       s0 => Some (DOUBLE, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val Mk_Misa : mword ty64 -> Misa*)

definition Mk_Misa  :: "(64)Word.word \<Rightarrow> Misa "  where 
     " Mk_Misa v = ( (| Misa_Misa_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Misa_bits : Misa -> mword ty64*)

definition get_Misa_bits  :: " Misa \<Rightarrow>(64)Word.word "  where 
     " get_Misa_bits v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Misa_bits : register_ref regstate register_value Misa -> mword ty64 -> M unit*)

definition set_Misa_bits  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_bits : Misa -> mword ty64 -> Misa*)

definition update_Misa_bits  :: " Misa \<Rightarrow>(64)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_bits v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _update_SV39_PTE_bits : SV39_PTE -> mword ty64 -> SV39_PTE*)

(*val _get_SV39_PTE_bits : SV39_PTE -> mword ty64*)

(*val _set_SV39_PTE_bits : register_ref regstate register_value SV39_PTE -> mword ty64 -> M unit*)

(*val _get_Misa_MXL : Misa -> mword ty2*)

definition get_Misa_MXL  :: " Misa \<Rightarrow>(2)Word.word "  where 
     " get_Misa_MXL v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 63 :: int)::ii) (( 62 :: int)::ii)  ::  2 Word.word))"


(*val _set_Misa_MXL : register_ref regstate register_value Misa -> mword ty2 -> M unit*)

definition set_Misa_MXL  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_MXL r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 63 :: int)::ii) (( 62 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_MXL : Misa -> mword ty2 -> Misa*)

definition update_Misa_MXL  :: " Misa \<Rightarrow>(2)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_MXL v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 63 :: int)::ii) (( 62 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_Z : Misa -> mword ty1*)

definition get_Misa_Z  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_Z v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_Z : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_Z  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_Z r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 25 :: int)::ii) (( 25 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_Z : Misa -> mword ty1 -> Misa*)

definition update_Misa_Z  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_Z v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 25 :: int)::ii) (( 25 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_Y : Misa -> mword ty1*)

definition get_Misa_Y  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_Y v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 24 :: int)::ii) (( 24 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_Y : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_Y  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_Y r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 24 :: int)::ii) (( 24 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_Y : Misa -> mword ty1 -> Misa*)

definition update_Misa_Y  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_Y v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 24 :: int)::ii) (( 24 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_X : Misa -> mword ty1*)

definition get_Misa_X  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_X v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 23 :: int)::ii) (( 23 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_X : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_X  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_X r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 23 :: int)::ii) (( 23 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_X : Misa -> mword ty1 -> Misa*)

definition update_Misa_X  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_X v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 23 :: int)::ii) (( 23 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_X : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_X : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_X : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_W : Misa -> mword ty1*)

definition get_Misa_W  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_W v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 22 :: int)::ii) (( 22 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_W : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_W  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_W r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 22 :: int)::ii) (( 22 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_W : Misa -> mword ty1 -> Misa*)

definition update_Misa_W  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_W v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 22 :: int)::ii) (( 22 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_W : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_W : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_W : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_V : Misa -> mword ty1*)

definition get_Misa_V  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_V v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 21 :: int)::ii) (( 21 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_V : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_V  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_V r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 21 :: int)::ii) (( 21 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_V : Misa -> mword ty1 -> Misa*)

definition update_Misa_V  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_V v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 21 :: int)::ii) (( 21 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_V : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_V : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_V : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_U : Misa -> mword ty1*)

definition get_Misa_U  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_U v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 20 :: int)::ii) (( 20 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_U : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_U  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_U r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 20 :: int)::ii) (( 20 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_U : Misa -> mword ty1 -> Misa*)

definition update_Misa_U  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_U v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 20 :: int)::ii) (( 20 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_U : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_U : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_U : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_T : Misa -> mword ty1*)

definition get_Misa_T  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_T v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_T : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_T  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_T r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 19 :: int)::ii) (( 19 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_T : Misa -> mword ty1 -> Misa*)

definition update_Misa_T  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_T v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_S : Misa -> mword ty1*)

definition get_Misa_S  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_S v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_S : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_S  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_S r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 18 :: int)::ii) (( 18 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_S : Misa -> mword ty1 -> Misa*)

definition update_Misa_S  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_S v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_R : Misa -> mword ty1*)

definition get_Misa_R  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_R v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 17 :: int)::ii) (( 17 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_R : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_R  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_R r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 17 :: int)::ii) (( 17 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_R : Misa -> mword ty1 -> Misa*)

definition update_Misa_R  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_R v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 17 :: int)::ii) (( 17 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_R : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_R : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_R : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_Q : Misa -> mword ty1*)

definition get_Misa_Q  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_Q v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 16 :: int)::ii) (( 16 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_Q : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_Q  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_Q r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 16 :: int)::ii) (( 16 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_Q : Misa -> mword ty1 -> Misa*)

definition update_Misa_Q  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_Q v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 16 :: int)::ii) (( 16 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_P : Misa -> mword ty1*)

definition get_Misa_P  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_P v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 15 :: int)::ii) (( 15 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_P : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_P  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_P r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 15 :: int)::ii) (( 15 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_P : Misa -> mword ty1 -> Misa*)

definition update_Misa_P  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_P v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 15 :: int)::ii) (( 15 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_O : Misa -> mword ty1*)

definition get_Misa_O  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_O v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_O : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_O  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_O r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 14 :: int)::ii) (( 14 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_O : Misa -> mword ty1 -> Misa*)

definition update_Misa_O  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_O v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 14 :: int)::ii) (( 14 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_N : Misa -> mword ty1*)

definition get_Misa_N  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_N v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 13 :: int)::ii) (( 13 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_N : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_N  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_N r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 13 :: int)::ii) (( 13 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_N : Misa -> mword ty1 -> Misa*)

definition update_Misa_N  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_N v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 13 :: int)::ii) (( 13 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_M : Misa -> mword ty1*)

definition get_Misa_M  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_M v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_M : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_M  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_M r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 12 :: int)::ii) (( 12 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_M : Misa -> mword ty1 -> Misa*)

definition update_Misa_M  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_M v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 12 :: int)::ii) (( 12 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_L : Misa -> mword ty1*)

definition get_Misa_L  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_L v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 11 :: int)::ii) (( 11 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_L : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_L  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_L r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 11 :: int)::ii) (( 11 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_L : Misa -> mword ty1 -> Misa*)

definition update_Misa_L  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_L v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 11 :: int)::ii) (( 11 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_K : Misa -> mword ty1*)

definition get_Misa_K  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_K v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 10 :: int)::ii) (( 10 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_K : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_K  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_K r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 10 :: int)::ii) (( 10 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_K : Misa -> mword ty1 -> Misa*)

definition update_Misa_K  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_K v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 10 :: int)::ii) (( 10 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_J : Misa -> mword ty1*)

definition get_Misa_J  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_J v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_J : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_J  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_J r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 9 :: int)::ii) (( 9 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_J : Misa -> mword ty1 -> Misa*)

definition update_Misa_J  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_J v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_I : Misa -> mword ty1*)

definition get_Misa_I  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_I v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_I : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_I  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_I r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_I : Misa -> mword ty1 -> Misa*)

definition update_Misa_I  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_I v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_H : Misa -> mword ty1*)

definition get_Misa_H  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_H v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_H : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_H  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_H r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_H : Misa -> mword ty1 -> Misa*)

definition update_Misa_H  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_H v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_G : Misa -> mword ty1*)

definition get_Misa_G  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_G v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_G : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_G  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_G r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 6 :: int)::ii) (( 6 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_G : Misa -> mword ty1 -> Misa*)

definition update_Misa_G  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_G v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_G : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_G : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_G : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_F : Misa -> mword ty1*)

definition get_Misa_F  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_F v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_F : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_F  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_F r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_F : Misa -> mword ty1 -> Misa*)

definition update_Misa_F  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_F v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_E : Misa -> mword ty1*)

definition get_Misa_E  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_E v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_E : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_E  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_E r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_E : Misa -> mword ty1 -> Misa*)

definition update_Misa_E  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_E v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_D : Misa -> mword ty1*)

definition get_Misa_D  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_D v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_D : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_D  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_D r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_D : Misa -> mword ty1 -> Misa*)

definition update_Misa_D  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_D v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_D : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_D : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_D : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val _get_Misa_C : Misa -> mword ty1*)

definition get_Misa_C  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_C v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_C : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_C  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_C r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 2 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_C : Misa -> mword ty1 -> Misa*)

definition update_Misa_C  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_C v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_B : Misa -> mword ty1*)

definition get_Misa_B  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_B v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_B : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_B  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_B r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_B : Misa -> mword ty1 -> Misa*)

definition update_Misa_B  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_B v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Misa_A : Misa -> mword ty1*)

definition get_Misa_A  :: " Misa \<Rightarrow>(1)Word.word "  where 
     " get_Misa_A v = ( (subrange_vec_dec(Misa_Misa_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


(*val _set_Misa_A : register_ref regstate register_value Misa -> mword ty1 -> M unit*)

definition set_Misa_A  :: "((regstate),(register_value),(Misa))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Misa_A r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Misa_Misa_chunk_0 :=
         ((update_subrange_vec_dec(Misa_Misa_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Misa_A : Misa -> mword ty1 -> Misa*)

definition update_Misa_A  :: " Misa \<Rightarrow>(1)Word.word \<Rightarrow> Misa "  where 
     " update_Misa_A v x = (
   (v (|
     Misa_Misa_chunk_0 :=
       ((update_subrange_vec_dec(Misa_Misa_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_PTE_Bits_A : PTE_Bits -> mword ty1 -> PTE_Bits*)

(*val _get_PTE_Bits_A : PTE_Bits -> mword ty1*)

(*val _set_PTE_Bits_A : register_ref regstate register_value PTE_Bits -> mword ty1 -> M unit*)

(*val legalize_misa : Misa -> mword ty64 -> M Misa*)

definition legalize_misa  :: " Misa \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(Misa),(exception))monad "  where 
     " legalize_misa (m :: Misa) (v :: xlenbits) = (
   (let v = (Mk_Misa v) in
   and_boolM (return (((((get_Misa_C v  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))))
     ((read_reg nextPC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
      return (((((cast_unit_vec0 ((access_vec_dec w__0 (( 1 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))) \<bind> (\<lambda> (w__1 :: bool) . 
   return (if w__1 then m
           else update_Misa_C m ((get_Misa_C v  ::  1 Word.word))))))"


(*val Mk_Mstatus : mword ty64 -> Mstatus*)

definition Mk_Mstatus  :: "(64)Word.word \<Rightarrow> Mstatus "  where 
     " Mk_Mstatus v = (
   (| Mstatus_Mstatus_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Mstatus_bits : Mstatus -> mword ty64*)

definition get_Mstatus_bits  :: " Mstatus \<Rightarrow>(64)Word.word "  where 
     " get_Mstatus_bits v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Mstatus_bits : register_ref regstate register_value Mstatus -> mword ty64 -> M unit*)

definition set_Mstatus_bits  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_bits : Mstatus -> mword ty64 -> Mstatus*)

definition update_Mstatus_bits  :: " Mstatus \<Rightarrow>(64)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_bits v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_SD : Mstatus -> mword ty1*)

definition get_Mstatus_SD  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_SD v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_SD : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_SD  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SD r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 63 :: int)::ii) (( 63 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SD : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_SD  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SD v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_SD : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SD : Sstatus -> mword ty1*)

(*val _set_Sstatus_SD : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_SXL : Mstatus -> mword ty2*)

definition get_Mstatus_SXL  :: " Mstatus \<Rightarrow>(2)Word.word "  where 
     " get_Mstatus_SXL v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 35 :: int)::ii) (( 34 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mstatus_SXL : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

definition set_Mstatus_SXL  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SXL r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 35 :: int)::ii) (( 34 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SXL : Mstatus -> mword ty2 -> Mstatus*)

definition update_Mstatus_SXL  :: " Mstatus \<Rightarrow>(2)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SXL v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 35 :: int)::ii) (( 34 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_UXL : Mstatus -> mword ty2*)

definition get_Mstatus_UXL  :: " Mstatus \<Rightarrow>(2)Word.word "  where 
     " get_Mstatus_UXL v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 33 :: int)::ii) (( 32 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mstatus_UXL : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

definition set_Mstatus_UXL  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_UXL r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 33 :: int)::ii) (( 32 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_UXL : Mstatus -> mword ty2 -> Mstatus*)

definition update_Mstatus_UXL  :: " Mstatus \<Rightarrow>(2)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_UXL v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 33 :: int)::ii) (( 32 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_UXL : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_UXL : Sstatus -> mword ty2*)

(*val _set_Sstatus_UXL : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_TSR : Mstatus -> mword ty1*)

definition get_Mstatus_TSR  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_TSR v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 22 :: int)::ii) (( 22 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_TSR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_TSR  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_TSR r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 22 :: int)::ii) (( 22 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_TSR : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_TSR  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_TSR v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 22 :: int)::ii) (( 22 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_TW : Mstatus -> mword ty1*)

definition get_Mstatus_TW  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_TW v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 21 :: int)::ii) (( 21 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_TW : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_TW  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_TW r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 21 :: int)::ii) (( 21 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_TW : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_TW  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_TW v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 21 :: int)::ii) (( 21 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_TVM : Mstatus -> mword ty1*)

definition get_Mstatus_TVM  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_TVM v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 20 :: int)::ii) (( 20 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_TVM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_TVM  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_TVM r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 20 :: int)::ii) (( 20 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_TVM : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_TVM  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_TVM v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 20 :: int)::ii) (( 20 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_MXR : Mstatus -> mword ty1*)

definition get_Mstatus_MXR  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_MXR v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_MXR : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_MXR  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_MXR r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 19 :: int)::ii) (( 19 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_MXR : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_MXR  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_MXR v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_MXR : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_MXR : Sstatus -> mword ty1*)

(*val _set_Sstatus_MXR : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_SUM : Mstatus -> mword ty1*)

definition get_Mstatus_SUM  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_SUM v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_SUM : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_SUM  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SUM r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 18 :: int)::ii) (( 18 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SUM : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_SUM  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SUM v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_SUM : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SUM : Sstatus -> mword ty1*)

(*val _set_Sstatus_SUM : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPRV : Mstatus -> mword ty1*)

definition get_Mstatus_MPRV  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_MPRV v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 17 :: int)::ii) (( 17 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_MPRV : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_MPRV  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_MPRV r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 17 :: int)::ii) (( 17 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_MPRV : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_MPRV  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_MPRV v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 17 :: int)::ii) (( 17 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_XS : Mstatus -> mword ty2*)

definition get_Mstatus_XS  :: " Mstatus \<Rightarrow>(2)Word.word "  where 
     " get_Mstatus_XS v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 16 :: int)::ii) (( 15 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mstatus_XS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

definition set_Mstatus_XS  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_XS r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 16 :: int)::ii) (( 15 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_XS : Mstatus -> mword ty2 -> Mstatus*)

definition update_Mstatus_XS  :: " Mstatus \<Rightarrow>(2)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_XS v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 16 :: int)::ii) (( 15 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_XS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_XS : Sstatus -> mword ty2*)

(*val _set_Sstatus_XS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_FS : Mstatus -> mword ty2*)

definition get_Mstatus_FS  :: " Mstatus \<Rightarrow>(2)Word.word "  where 
     " get_Mstatus_FS v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mstatus_FS : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

definition set_Mstatus_FS  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_FS r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 14 :: int)::ii) (( 13 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_FS : Mstatus -> mword ty2 -> Mstatus*)

definition update_Mstatus_FS  :: " Mstatus \<Rightarrow>(2)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_FS v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 14 :: int)::ii) (( 13 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_FS : Sstatus -> mword ty2 -> Sstatus*)

(*val _get_Sstatus_FS : Sstatus -> mword ty2*)

(*val _set_Sstatus_FS : register_ref regstate register_value Sstatus -> mword ty2 -> M unit*)

(*val _get_Mstatus_MPP : Mstatus -> mword ty2*)

definition get_Mstatus_MPP  :: " Mstatus \<Rightarrow>(2)Word.word "  where 
     " get_Mstatus_MPP v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 12 :: int)::ii) (( 11 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mstatus_MPP : register_ref regstate register_value Mstatus -> mword ty2 -> M unit*)

definition set_Mstatus_MPP  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_MPP r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 12 :: int)::ii) (( 11 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_MPP : Mstatus -> mword ty2 -> Mstatus*)

definition update_Mstatus_MPP  :: " Mstatus \<Rightarrow>(2)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_MPP v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 12 :: int)::ii) (( 11 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_SPP : Mstatus -> mword ty1*)

definition get_Mstatus_SPP  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_SPP v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_SPP : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_SPP  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SPP r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SPP : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_SPP  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SPP v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_SPP : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPP : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPP : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MPIE : Mstatus -> mword ty1*)

definition get_Mstatus_MPIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_MPIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_MPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_MPIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_MPIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_MPIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_MPIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_MPIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_SPIE : Mstatus -> mword ty1*)

definition get_Mstatus_SPIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_SPIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_SPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_SPIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SPIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SPIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_SPIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SPIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_SPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SPIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UPIE : Mstatus -> mword ty1*)

definition get_Mstatus_UPIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_UPIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_UPIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_UPIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_UPIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_UPIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_UPIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_UPIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_UPIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_UPIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_UPIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_MIE : Mstatus -> mword ty1*)

definition get_Mstatus_MIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_MIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_MIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_MIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_MIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_MIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_MIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_MIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mstatus_SIE : Mstatus -> mword ty1*)

definition get_Mstatus_SIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_SIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_SIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_SIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_SIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_SIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_SIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_SIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_SIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_SIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_SIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val _get_Mstatus_UIE : Mstatus -> mword ty1*)

definition get_Mstatus_UIE  :: " Mstatus \<Rightarrow>(1)Word.word "  where 
     " get_Mstatus_UIE v = ( (subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mstatus_UIE : register_ref regstate register_value Mstatus -> mword ty1 -> M unit*)

definition set_Mstatus_UIE  :: "((regstate),(register_value),(Mstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mstatus_UIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mstatus_Mstatus_chunk_0 :=
         ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mstatus_UIE : Mstatus -> mword ty1 -> Mstatus*)

definition update_Mstatus_UIE  :: " Mstatus \<Rightarrow>(1)Word.word \<Rightarrow> Mstatus "  where 
     " update_Mstatus_UIE v x = (
   (v (|
     Mstatus_Mstatus_chunk_0 :=
       ((update_subrange_vec_dec(Mstatus_Mstatus_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sstatus_UIE : Sstatus -> mword ty1 -> Sstatus*)

(*val _get_Sstatus_UIE : Sstatus -> mword ty1*)

(*val _set_Sstatus_UIE : register_ref regstate register_value Sstatus -> mword ty1 -> M unit*)

(*val legalize_mstatus : Mstatus -> mword ty64 -> Mstatus*)

definition legalize_mstatus  :: " Mstatus \<Rightarrow>(64)Word.word \<Rightarrow> Mstatus "  where 
     " legalize_mstatus (o1 :: Mstatus) (v :: xlenbits) = (
   (let (m :: Mstatus) = (Mk_Mstatus v) in
   (let m = (update_Mstatus_XS m ((extStatus_to_bits Off  ::  2 Word.word))) in
   (let m =
     (update_Mstatus_SD m
       ((bool_to_bits
           ((((((((extStatus_to_bits ((extStatus_of_bits ((get_Mstatus_FS m  ::  2 Word.word))))
                      ::  2 Word.word)) = ((extStatus_to_bits Dirty  ::  2 Word.word))))) \<or> (((((extStatus_to_bits ((extStatus_of_bits ((get_Mstatus_XS m  ::  2 Word.word))))
                      ::  2 Word.word)) = ((extStatus_to_bits Dirty  ::  2 Word.word))))))))
          ::  1 Word.word))) in
   (let m = (update_Mstatus_SXL m ((get_Mstatus_SXL o1  ::  2 Word.word))) in
   (let m = (update_Mstatus_UXL m ((get_Mstatus_UXL o1  ::  2 Word.word))) in
   (let m = (update_Mstatus_UPIE m ((bool_to_bits False  ::  1 Word.word))) in
   update_Mstatus_UIE m ((bool_to_bits False  ::  1 Word.word)))))))))"


(*val cur_Architecture : unit -> M Architecture*)

definition cur_Architecture  :: " unit \<Rightarrow>((register_value),(Architecture),(exception))monad "  where 
     " cur_Architecture _ = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (case  w__0 of
     Machine =>
      read_reg misa_ref \<bind> (\<lambda> (w__1 :: Misa) .  return ((get_Misa_MXL w__1  ::  2 Word.word)))
   | Supervisor =>
      read_reg mstatus_ref \<bind> (\<lambda> (w__2 :: Mstatus) .  return ((get_Mstatus_SXL w__2  ::  2 Word.word)))
   | User =>
      read_reg mstatus_ref \<bind> (\<lambda> (w__3 :: Mstatus) .  return ((get_Mstatus_UXL w__3  ::  2 Word.word)))
   ) \<bind> (\<lambda> (a :: arch_xlen) . 
   (case  ((architecture a)) of
     Some (a) => return a
   | None => internal_error (''Invalid current architecture'')
   ))))"


(*val in32BitMode : unit -> M bool*)

definition in32BitMode  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " in32BitMode _ = ( cur_Architecture ()  \<bind> (\<lambda> (w__0 :: Architecture) .  return (((w__0 = RV32)))))"


(*val haveAtomics : unit -> M bool*)

definition haveAtomics  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " haveAtomics _ = (
   read_reg misa_ref \<bind> (\<lambda> (w__0 :: Misa) . 
   return (((((get_Misa_A w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))"


(*val haveRVC : unit -> M bool*)

definition haveRVC  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " haveRVC _ = (
   read_reg misa_ref \<bind> (\<lambda> (w__0 :: Misa) . 
   return (((((get_Misa_C w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))"


(*val haveMulDiv : unit -> M bool*)

definition haveMulDiv  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " haveMulDiv _ = (
   read_reg misa_ref \<bind> (\<lambda> (w__0 :: Misa) . 
   return (((((get_Misa_M w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))"


(*val haveFP : unit -> M bool*)

definition haveFP  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " haveFP _ = (
   or_boolM
     (read_reg misa_ref \<bind> (\<lambda> (w__0 :: Misa) . 
      return (((((get_Misa_F w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))
     (read_reg misa_ref \<bind> (\<lambda> (w__1 :: Misa) . 
      return (((((get_Misa_D w__1  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))))"


(*val pc_alignment_mask : unit -> M (mword ty64)*)

definition pc_alignment_mask  :: " unit \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " pc_alignment_mask _ = (
   read_reg misa_ref \<bind> (\<lambda> (w__0 :: Misa) . 
   return ((not_vec
              ((EXTZ (( 64 :: int)::ii)
                  (if (((((get_Misa_C w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
                   then
                     (vec_of_bits [B0,B0]  ::  2 Word.word)
                   else (vec_of_bits [B1,B0]  ::  2 Word.word))
                 ::  64 Word.word))
             ::  64 Word.word))))"


(*val Mk_Minterrupts : mword ty64 -> Minterrupts*)

definition Mk_Minterrupts  :: "(64)Word.word \<Rightarrow> Minterrupts "  where 
     " Mk_Minterrupts v = (
   (| Minterrupts_Minterrupts_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Minterrupts_bits : Minterrupts -> mword ty64*)

definition get_Minterrupts_bits  :: " Minterrupts \<Rightarrow>(64)Word.word "  where 
     " get_Minterrupts_bits v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Minterrupts_bits : register_ref regstate register_value Minterrupts -> mword ty64 -> M unit*)

definition set_Minterrupts_bits  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_bits : Minterrupts -> mword ty64 -> Minterrupts*)

definition update_Minterrupts_bits  :: " Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_bits v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Minterrupts_MEI : Minterrupts -> mword ty1*)

definition get_Minterrupts_MEI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_MEI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 11 :: int)::ii) (( 11 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_MEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_MEI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_MEI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 11 :: int)::ii) (( 11 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_MEI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_MEI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_MEI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 11 :: int)::ii) (( 11 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Minterrupts_SEI : Minterrupts -> mword ty1*)

definition get_Minterrupts_SEI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_SEI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_SEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_SEI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_SEI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 9 :: int)::ii) (( 9 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_SEI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_SEI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_SEI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_SEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SEI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UEI : Minterrupts -> mword ty1*)

definition get_Minterrupts_UEI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_UEI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_UEI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_UEI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_UEI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_UEI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_UEI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_UEI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_UEI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_UEI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UEI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MTI : Minterrupts -> mword ty1*)

definition get_Minterrupts_MTI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_MTI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_MTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_MTI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_MTI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_MTI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_MTI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_MTI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Minterrupts_STI : Minterrupts -> mword ty1*)

definition get_Minterrupts_STI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_STI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_STI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_STI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_STI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_STI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_STI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_STI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_STI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_STI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_STI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_UTI : Minterrupts -> mword ty1*)

definition get_Minterrupts_UTI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_UTI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_UTI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_UTI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_UTI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_UTI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_UTI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_UTI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_UTI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_UTI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_UTI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_MSI : Minterrupts -> mword ty1*)

definition get_Minterrupts_MSI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_MSI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_MSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_MSI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_MSI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_MSI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_MSI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_MSI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Minterrupts_SSI : Minterrupts -> mword ty1*)

definition get_Minterrupts_SSI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_SSI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_SSI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_SSI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_SSI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_SSI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_SSI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_SSI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_SSI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_SSI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_SSI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val _get_Minterrupts_USI : Minterrupts -> mword ty1*)

definition get_Minterrupts_USI  :: " Minterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Minterrupts_USI v = (
   (subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


(*val _set_Minterrupts_USI : register_ref regstate register_value Minterrupts -> mword ty1 -> M unit*)

definition set_Minterrupts_USI  :: "((regstate),(register_value),(Minterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Minterrupts_USI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Minterrupts_Minterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Minterrupts_USI : Minterrupts -> mword ty1 -> Minterrupts*)

definition update_Minterrupts_USI  :: " Minterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Minterrupts "  where 
     " update_Minterrupts_USI v x = (
   (v (|
     Minterrupts_Minterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Minterrupts_Minterrupts_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sinterrupts_USI : Sinterrupts -> mword ty1 -> Sinterrupts*)

(*val _get_Sinterrupts_USI : Sinterrupts -> mword ty1*)

(*val _set_Sinterrupts_USI : register_ref regstate register_value Sinterrupts -> mword ty1 -> M unit*)

(*val legalize_mip : Minterrupts -> mword ty64 -> Minterrupts*)

definition legalize_mip  :: " Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " legalize_mip (o1 :: Minterrupts) (v :: xlenbits) = (
   (let v = (Mk_Minterrupts v) in
   (let m = (update_Minterrupts_SEI o1 ((get_Minterrupts_SEI v  ::  1 Word.word))) in
   (let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  ::  1 Word.word))) in
   update_Minterrupts_SSI m ((get_Minterrupts_SSI v  ::  1 Word.word))))))"


(*val legalize_mie : Minterrupts -> mword ty64 -> Minterrupts*)

definition legalize_mie  :: " Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " legalize_mie (o1 :: Minterrupts) (v :: xlenbits) = (
   (let v = (Mk_Minterrupts v) in
   (let m = (update_Minterrupts_MEI o1 ((get_Minterrupts_MEI v  ::  1 Word.word))) in
   (let m = (update_Minterrupts_MTI m ((get_Minterrupts_MTI v  ::  1 Word.word))) in
   (let m = (update_Minterrupts_MSI m ((get_Minterrupts_MSI v  ::  1 Word.word))) in
   (let m = (update_Minterrupts_SEI m ((get_Minterrupts_SEI v  ::  1 Word.word))) in
   (let m = (update_Minterrupts_STI m ((get_Minterrupts_STI v  ::  1 Word.word))) in
   update_Minterrupts_SSI m ((get_Minterrupts_SSI v  ::  1 Word.word)))))))))"


(*val legalize_mideleg : Minterrupts -> mword ty64 -> Minterrupts*)

definition legalize_mideleg  :: " Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " legalize_mideleg (o1 :: Minterrupts) (v :: xlenbits) = (
   (let m = (Mk_Minterrupts v) in
   (let m = (update_Minterrupts_MEI m ((bool_to_bits False  ::  1 Word.word))) in
   (let m = (update_Minterrupts_MTI m ((bool_to_bits False  ::  1 Word.word))) in
   update_Minterrupts_MSI m ((bool_to_bits False  ::  1 Word.word))))))"


(*val Mk_Medeleg : mword ty64 -> Medeleg*)

definition Mk_Medeleg  :: "(64)Word.word \<Rightarrow> Medeleg "  where 
     " Mk_Medeleg v = (
   (| Medeleg_Medeleg_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Medeleg_bits : Medeleg -> mword ty64*)

definition get_Medeleg_bits  :: " Medeleg \<Rightarrow>(64)Word.word "  where 
     " get_Medeleg_bits v = ( (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Medeleg_bits : register_ref regstate register_value Medeleg -> mword ty64 -> M unit*)

definition set_Medeleg_bits  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_bits : Medeleg -> mword ty64 -> Medeleg*)

definition update_Medeleg_bits  :: " Medeleg \<Rightarrow>(64)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_bits v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_SAMO_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_SAMO_Page_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 15 :: int)::ii) (( 15 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_SAMO_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_SAMO_Page_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_SAMO_Page_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 15 :: int)::ii) (( 15 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_SAMO_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_SAMO_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_SAMO_Page_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 15 :: int)::ii) (( 15 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_Load_Page_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_Load_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Load_Page_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 13 :: int)::ii) (( 13 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Load_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Load_Page_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Load_Page_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 13 :: int)::ii) (( 13 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Load_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Load_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Load_Page_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 13 :: int)::ii) (( 13 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_Fetch_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Fetch_Page_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Fetch_Page_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Fetch_Page_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Fetch_Page_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 12 :: int)::ii) (( 12 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Fetch_Page_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Fetch_Page_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Fetch_Page_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 12 :: int)::ii) (( 12 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_MEnvCall : Medeleg -> mword ty1*)

definition get_Medeleg_MEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_MEnvCall v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 10 :: int)::ii) (( 10 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_MEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_MEnvCall  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_MEnvCall r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 10 :: int)::ii) (( 10 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_MEnvCall : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_MEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_MEnvCall v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 10 :: int)::ii) (( 10 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_SEnvCall : Medeleg -> mword ty1*)

definition get_Medeleg_SEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_SEnvCall v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_SEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_SEnvCall  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_SEnvCall r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 9 :: int)::ii) (( 9 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_SEnvCall : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_SEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_SEnvCall v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Medeleg_UEnvCall : Medeleg -> mword ty1*)

definition get_Medeleg_UEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_UEnvCall v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_UEnvCall : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_UEnvCall  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_UEnvCall r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_UEnvCall : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_UEnvCall  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_UEnvCall v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_UEnvCall : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_UEnvCall : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_UEnvCall : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_SAMO_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_SAMO_Access_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_SAMO_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_SAMO_Access_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_SAMO_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_SAMO_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_SAMO_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_SAMO_Access_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1*)

definition get_Medeleg_SAMO_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_SAMO_Addr_Align v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_SAMO_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_SAMO_Addr_Align  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_SAMO_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 6 :: int)::ii) (( 6 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_SAMO_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_SAMO_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_SAMO_Addr_Align v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_SAMO_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_SAMO_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Access_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_Load_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Load_Access_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Load_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Load_Access_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Load_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Load_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Load_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Load_Access_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Load_Addr_Align : Medeleg -> mword ty1*)

definition get_Medeleg_Load_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Load_Addr_Align v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Load_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Load_Addr_Align  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Load_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Load_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Load_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Load_Addr_Align v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Load_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Load_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Breakpoint : Medeleg -> mword ty1*)

definition get_Medeleg_Breakpoint  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Breakpoint v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Breakpoint : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Breakpoint  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Breakpoint r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Breakpoint : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Breakpoint  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Breakpoint v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Breakpoint : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Breakpoint : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Breakpoint : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Illegal_Instr : Medeleg -> mword ty1*)

definition get_Medeleg_Illegal_Instr  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Illegal_Instr v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Illegal_Instr : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Illegal_Instr  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Illegal_Instr r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 2 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Illegal_Instr : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Illegal_Instr  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Illegal_Instr v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Illegal_Instr : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Illegal_Instr : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1*)

definition get_Medeleg_Fetch_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Fetch_Access_Fault v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Fetch_Access_Fault : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Fetch_Access_Fault  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Fetch_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Fetch_Access_Fault : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Fetch_Access_Fault  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Fetch_Access_Fault v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Access_Fault : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Access_Fault : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val _get_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1*)

definition get_Medeleg_Fetch_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word "  where 
     " get_Medeleg_Fetch_Addr_Align v = (
   (subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


(*val _set_Medeleg_Fetch_Addr_Align : register_ref regstate register_value Medeleg -> mword ty1 -> M unit*)

definition set_Medeleg_Fetch_Addr_Align  :: "((regstate),(register_value),(Medeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Medeleg_Fetch_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Medeleg_Medeleg_chunk_0 :=
         ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Medeleg_Fetch_Addr_Align : Medeleg -> mword ty1 -> Medeleg*)

definition update_Medeleg_Fetch_Addr_Align  :: " Medeleg \<Rightarrow>(1)Word.word \<Rightarrow> Medeleg "  where 
     " update_Medeleg_Fetch_Addr_Align v x = (
   (v (|
     Medeleg_Medeleg_chunk_0 :=
       ((update_subrange_vec_dec(Medeleg_Medeleg_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1 -> Sedeleg*)

(*val _get_Sedeleg_Fetch_Addr_Align : Sedeleg -> mword ty1*)

(*val _set_Sedeleg_Fetch_Addr_Align : register_ref regstate register_value Sedeleg -> mword ty1 -> M unit*)

(*val legalize_medeleg : Medeleg -> mword ty64 -> Medeleg*)

definition legalize_medeleg  :: " Medeleg \<Rightarrow>(64)Word.word \<Rightarrow> Medeleg "  where 
     " legalize_medeleg (o1 :: Medeleg) (v :: xlenbits) = (
   (let m = (Mk_Medeleg v) in
   update_Medeleg_MEnvCall m ((bool_to_bits False  ::  1 Word.word))))"


(*val Mk_Mtvec : mword ty64 -> Mtvec*)

definition Mk_Mtvec  :: "(64)Word.word \<Rightarrow> Mtvec "  where 
     " Mk_Mtvec v = ( (| Mtvec_Mtvec_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Mtvec_bits : Mtvec -> mword ty64*)

definition get_Mtvec_bits  :: " Mtvec \<Rightarrow>(64)Word.word "  where 
     " get_Mtvec_bits v = ( (subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Mtvec_bits : register_ref regstate register_value Mtvec -> mword ty64 -> M unit*)

definition set_Mtvec_bits  :: "((regstate),(register_value),(Mtvec))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mtvec_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mtvec_bits : Mtvec -> mword ty64 -> Mtvec*)

definition update_Mtvec_bits  :: " Mtvec \<Rightarrow>(64)Word.word \<Rightarrow> Mtvec "  where 
     " update_Mtvec_bits v x = (
   (v (|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mtvec_Base : Mtvec -> mword ty62*)

definition get_Mtvec_Base  :: " Mtvec \<Rightarrow>(62)Word.word "  where 
     " get_Mtvec_Base v = ( (subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 63 :: int)::ii) (( 2 :: int)::ii)  ::  62 Word.word))"


(*val _set_Mtvec_Base : register_ref regstate register_value Mtvec -> mword ty62 -> M unit*)

definition set_Mtvec_Base  :: "((regstate),(register_value),(Mtvec))register_ref \<Rightarrow>(62)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mtvec_Base r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   r) (( 63 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 61 :: int)::ii) (( 0 :: int)::ii)  ::  62 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mtvec_Base : Mtvec -> mword ty62 -> Mtvec*)

definition update_Mtvec_Base  :: " Mtvec \<Rightarrow>(62)Word.word \<Rightarrow> Mtvec "  where 
     " update_Mtvec_Base v x = (
   (v (|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 63 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 61 :: int)::ii) (( 0 :: int)::ii)  ::  62 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mtvec_Mode : Mtvec -> mword ty2*)

definition get_Mtvec_Mode  :: " Mtvec \<Rightarrow>(2)Word.word "  where 
     " get_Mtvec_Mode v = ( (subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))"


(*val _set_Mtvec_Mode : register_ref regstate register_value Mtvec -> mword ty2 -> M unit*)

definition set_Mtvec_Mode  :: "((regstate),(register_value),(Mtvec))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mtvec_Mode r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mtvec_Mtvec_chunk_0 :=
         ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   r) (( 1 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mtvec_Mode : Mtvec -> mword ty2 -> Mtvec*)

definition update_Mtvec_Mode  :: " Mtvec \<Rightarrow>(2)Word.word \<Rightarrow> Mtvec "  where 
     " update_Mtvec_Mode v x = (
   (v (|
     Mtvec_Mtvec_chunk_0 :=
       ((update_subrange_vec_dec(Mtvec_Mtvec_chunk_0   v) (( 1 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _update_Satp64_Mode : Satp64 -> mword ty4 -> Satp64*)

(*val _get_Satp64_Mode : Satp64 -> mword ty4*)

(*val _set_Satp64_Mode : register_ref regstate register_value Satp64 -> mword ty4 -> M unit*)

(*val legalize_tvec : Mtvec -> mword ty64 -> Mtvec*)

definition legalize_tvec  :: " Mtvec \<Rightarrow>(64)Word.word \<Rightarrow> Mtvec "  where 
     " legalize_tvec (o1 :: Mtvec) (v :: xlenbits) = (
   (let v = (Mk_Mtvec v) in
   (case  ((trapVectorMode_of_bits ((get_Mtvec_Mode v  ::  2 Word.word)))) of
     TV_Direct => v
   | TV_Vector => v
   | _ => update_Mtvec_Mode v ((get_Mtvec_Mode o1  ::  2 Word.word))
   )))"


(*val Mk_Mcause : mword ty64 -> Mcause*)

definition Mk_Mcause  :: "(64)Word.word \<Rightarrow> Mcause "  where 
     " Mk_Mcause v = ( (| Mcause_Mcause_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Mcause_bits : Mcause -> mword ty64*)

definition get_Mcause_bits  :: " Mcause \<Rightarrow>(64)Word.word "  where 
     " get_Mcause_bits v = ( (subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Mcause_bits : register_ref regstate register_value Mcause -> mword ty64 -> M unit*)

definition set_Mcause_bits  :: "((regstate),(register_value),(Mcause))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mcause_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mcause_bits : Mcause -> mword ty64 -> Mcause*)

definition update_Mcause_bits  :: " Mcause \<Rightarrow>(64)Word.word \<Rightarrow> Mcause "  where 
     " update_Mcause_bits v x = (
   (v (|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mcause_IsInterrupt : Mcause -> mword ty1*)

definition get_Mcause_IsInterrupt  :: " Mcause \<Rightarrow>(1)Word.word "  where 
     " get_Mcause_IsInterrupt v = (
   (subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)  ::  1 Word.word))"


(*val _set_Mcause_IsInterrupt : register_ref regstate register_value Mcause -> mword ty1 -> M unit*)

definition set_Mcause_IsInterrupt  :: "((regstate),(register_value),(Mcause))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mcause_IsInterrupt r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   r) (( 63 :: int)::ii) (( 63 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mcause_IsInterrupt : Mcause -> mword ty1 -> Mcause*)

definition update_Mcause_IsInterrupt  :: " Mcause \<Rightarrow>(1)Word.word \<Rightarrow> Mcause "  where 
     " update_Mcause_IsInterrupt v x = (
   (v (|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Mcause_Cause : Mcause -> mword ty63*)

definition get_Mcause_Cause  :: " Mcause \<Rightarrow>(63)Word.word "  where 
     " get_Mcause_Cause v = ( (subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 62 :: int)::ii) (( 0 :: int)::ii)  ::  63 Word.word))"


(*val _set_Mcause_Cause : register_ref regstate register_value Mcause -> mword ty63 -> M unit*)

definition set_Mcause_Cause  :: "((regstate),(register_value),(Mcause))register_ref \<Rightarrow>(63)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Mcause_Cause r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Mcause_Mcause_chunk_0 :=
         ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   r) (( 62 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 62 :: int)::ii) (( 0 :: int)::ii)  ::  63 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Mcause_Cause : Mcause -> mword ty63 -> Mcause*)

definition update_Mcause_Cause  :: " Mcause \<Rightarrow>(63)Word.word \<Rightarrow> Mcause "  where 
     " update_Mcause_Cause v x = (
   (v (|
     Mcause_Mcause_chunk_0 :=
       ((update_subrange_vec_dec(Mcause_Mcause_chunk_0   v) (( 62 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 62 :: int)::ii) (( 0 :: int)::ii)  ::  63 Word.word))
          ::  64 Word.word))|)))"


(*val tvec_addr : Mtvec -> Mcause -> maybe (mword ty64)*)

definition tvec_addr  :: " Mtvec \<Rightarrow> Mcause \<Rightarrow>((64)Word.word)option "  where 
     " tvec_addr (m :: Mtvec) (c :: Mcause) = (
   (let (base :: xlenbits) =
     ((concat_vec ((get_Mtvec_Base m  ::  62 Word.word)) (vec_of_bits [B0,B0]  ::  2 Word.word)
       ::  64 Word.word)) in
   (case  ((trapVectorMode_of_bits ((get_Mtvec_Mode m  ::  2 Word.word)))) of
     TV_Direct => Some base
   | TV_Vector =>
      if (((((get_Mcause_IsInterrupt c  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
      then
        Some ((add_vec base
                 ((shift_bits_left
                     ((EXTZ (( 64 :: int)::ii) ((get_Mcause_Cause c  ::  63 Word.word))  ::  64 Word.word))
                     (vec_of_bits [B1,B0]  ::  2 Word.word)
                    ::  64 Word.word))
                ::  64 Word.word))
      else Some base
   | TV_Reserved => None
   )))"


(*val legalize_xepc : mword ty64 -> M (mword ty64)*)

definition legalize_xepc  :: "(64)Word.word \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " legalize_xepc v = (
   haveRVC ()  \<bind> (\<lambda> (w__0 :: bool) . 
   return ((and_vec v
              ((EXTS (( 64 :: int)::ii)
                  (if w__0 then (vec_of_bits [B1,B1,B0]  ::  3 Word.word)
                   else (vec_of_bits [B1,B0,B0]  ::  3 Word.word))
                 ::  64 Word.word))
             ::  64 Word.word))))"


(*val Mk_Counteren : mword ty32 -> Counteren*)

definition Mk_Counteren  :: "(32)Word.word \<Rightarrow> Counteren "  where 
     " Mk_Counteren v = (
   (| Counteren_Counteren_chunk_0 = ((subrange_vec_dec v (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) |) )"


(*val _get_Counteren_bits : Counteren -> mword ty32*)

definition get_Counteren_bits  :: " Counteren \<Rightarrow>(32)Word.word "  where 
     " get_Counteren_bits v = (
   (subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))"


(*val _set_Counteren_bits : register_ref regstate register_value Counteren -> mword ty32 -> M unit*)

definition set_Counteren_bits  :: "((regstate),(register_value),(Counteren))register_ref \<Rightarrow>(32)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Counteren_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   r) (( 31 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))
            ::  32 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Counteren_bits : Counteren -> mword ty32 -> Counteren*)

definition update_Counteren_bits  :: " Counteren \<Rightarrow>(32)Word.word \<Rightarrow> Counteren "  where 
     " update_Counteren_bits v x = (
   (v (|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 31 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))
          ::  32 Word.word))|)))"


(*val _get_Counteren_HPM : Counteren -> mword ty29*)

definition get_Counteren_HPM  :: " Counteren \<Rightarrow>(29)Word.word "  where 
     " get_Counteren_HPM v = (
   (subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 31 :: int)::ii) (( 3 :: int)::ii)  ::  29 Word.word))"


(*val _set_Counteren_HPM : register_ref regstate register_value Counteren -> mword ty29 -> M unit*)

definition set_Counteren_HPM  :: "((regstate),(register_value),(Counteren))register_ref \<Rightarrow>(29)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Counteren_HPM r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   r) (( 31 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 28 :: int)::ii) (( 0 :: int)::ii)  ::  29 Word.word))
            ::  32 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Counteren_HPM : Counteren -> mword ty29 -> Counteren*)

definition update_Counteren_HPM  :: " Counteren \<Rightarrow>(29)Word.word \<Rightarrow> Counteren "  where 
     " update_Counteren_HPM v x = (
   (v (|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 31 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 28 :: int)::ii) (( 0 :: int)::ii)  ::  29 Word.word))
          ::  32 Word.word))|)))"


(*val _get_Counteren_IR : Counteren -> mword ty1*)

definition get_Counteren_IR  :: " Counteren \<Rightarrow>(1)Word.word "  where 
     " get_Counteren_IR v = (
   (subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word))"


(*val _set_Counteren_IR : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

definition set_Counteren_IR  :: "((regstate),(register_value),(Counteren))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Counteren_IR r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   r) (( 2 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  32 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Counteren_IR : Counteren -> mword ty1 -> Counteren*)

definition update_Counteren_IR  :: " Counteren \<Rightarrow>(1)Word.word \<Rightarrow> Counteren "  where 
     " update_Counteren_IR v x = (
   (v (|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  32 Word.word))|)))"


(*val _get_Counteren_TM : Counteren -> mword ty1*)

definition get_Counteren_TM  :: " Counteren \<Rightarrow>(1)Word.word "  where 
     " get_Counteren_TM v = (
   (subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


(*val _set_Counteren_TM : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

definition set_Counteren_TM  :: "((regstate),(register_value),(Counteren))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Counteren_TM r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  32 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Counteren_TM : Counteren -> mword ty1 -> Counteren*)

definition update_Counteren_TM  :: " Counteren \<Rightarrow>(1)Word.word \<Rightarrow> Counteren "  where 
     " update_Counteren_TM v x = (
   (v (|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  32 Word.word))|)))"


(*val _get_Counteren_CY : Counteren -> mword ty1*)

definition get_Counteren_CY  :: " Counteren \<Rightarrow>(1)Word.word "  where 
     " get_Counteren_CY v = (
   (subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


(*val _set_Counteren_CY : register_ref regstate register_value Counteren -> mword ty1 -> M unit*)

definition set_Counteren_CY  :: "((regstate),(register_value),(Counteren))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Counteren_CY r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Counteren_Counteren_chunk_0 :=
         ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  32 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Counteren_CY : Counteren -> mword ty1 -> Counteren*)

definition update_Counteren_CY  :: " Counteren \<Rightarrow>(1)Word.word \<Rightarrow> Counteren "  where 
     " update_Counteren_CY v x = (
   (v (|
     Counteren_Counteren_chunk_0 :=
       ((update_subrange_vec_dec(Counteren_Counteren_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  32 Word.word))|)))"


(*val legalize_mcounteren : Counteren -> mword ty64 -> Counteren*)

definition legalize_mcounteren  :: " Counteren \<Rightarrow>(64)Word.word \<Rightarrow> Counteren "  where 
     " legalize_mcounteren (c :: Counteren) (v :: xlenbits) = (
   (let c = (update_Counteren_IR c ((cast_unit_vec0 ((access_vec_dec v (( 2 :: int)::ii)))  ::  1 Word.word))) in
   (let c = (update_Counteren_TM c ((cast_unit_vec0 ((access_vec_dec v (( 1 :: int)::ii)))  ::  1 Word.word))) in
   update_Counteren_CY c ((cast_unit_vec0 ((access_vec_dec v (( 0 :: int)::ii)))  ::  1 Word.word)))))"


(*val legalize_scounteren : Counteren -> mword ty64 -> Counteren*)

definition legalize_scounteren  :: " Counteren \<Rightarrow>(64)Word.word \<Rightarrow> Counteren "  where 
     " legalize_scounteren (c :: Counteren) (v :: xlenbits) = (
   (let c = (update_Counteren_IR c ((cast_unit_vec0 ((access_vec_dec v (( 2 :: int)::ii)))  ::  1 Word.word))) in
   (let c = (update_Counteren_TM c ((cast_unit_vec0 ((access_vec_dec v (( 1 :: int)::ii)))  ::  1 Word.word))) in
   update_Counteren_CY c ((cast_unit_vec0 ((access_vec_dec v (( 0 :: int)::ii)))  ::  1 Word.word)))))"


(*val retire_instruction : unit -> M unit*)

definition retire_instruction  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " retire_instruction _ = (
   read_reg minstret_written_ref \<bind> (\<lambda> (w__0 :: bool) . 
   if (((((bool_to_bits w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
     write_reg minstret_written_ref False
   else
     (read_reg minstret_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
     write_reg minstret_ref ((add_vec_int w__1 (( 1 :: int)::ii)  ::  64 Word.word)))))"


(*val Mk_Sstatus : mword ty64 -> Sstatus*)

definition Mk_Sstatus  :: "(64)Word.word \<Rightarrow> Sstatus "  where 
     " Mk_Sstatus v = (
   (| Sstatus_Sstatus_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Sstatus_bits : Sstatus -> mword ty64*)

definition get_Sstatus_bits  :: " Sstatus \<Rightarrow>(64)Word.word "  where 
     " get_Sstatus_bits v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Sstatus_bits : register_ref regstate register_value Sstatus -> mword ty64 -> M unit*)

definition set_Sstatus_bits  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Sstatus_bits : Sstatus -> mword ty64 -> Sstatus*)

definition update_Sstatus_bits  :: " Sstatus \<Rightarrow>(64)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_bits v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_SD  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_SD v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_SD  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_SD r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 63 :: int)::ii) (( 63 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_SD  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_SD v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 63 :: int)::ii) (( 63 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_UXL  :: " Sstatus \<Rightarrow>(2)Word.word "  where 
     " get_Sstatus_UXL v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 33 :: int)::ii) (( 32 :: int)::ii)  ::  2 Word.word))"


definition set_Sstatus_UXL  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_UXL r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 33 :: int)::ii) (( 32 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_UXL  :: " Sstatus \<Rightarrow>(2)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_UXL v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 33 :: int)::ii) (( 32 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_MXR  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_MXR v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_MXR  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_MXR r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 19 :: int)::ii) (( 19 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_MXR  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_MXR v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 19 :: int)::ii) (( 19 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_SUM  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_SUM v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_SUM  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_SUM r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 18 :: int)::ii) (( 18 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_SUM  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_SUM v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 18 :: int)::ii) (( 18 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_XS  :: " Sstatus \<Rightarrow>(2)Word.word "  where 
     " get_Sstatus_XS v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 16 :: int)::ii) (( 15 :: int)::ii)  ::  2 Word.word))"


definition set_Sstatus_XS  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_XS r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 16 :: int)::ii) (( 15 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_XS  :: " Sstatus \<Rightarrow>(2)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_XS v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 16 :: int)::ii) (( 15 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_FS  :: " Sstatus \<Rightarrow>(2)Word.word "  where 
     " get_Sstatus_FS v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word))"


definition set_Sstatus_FS  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_FS r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 14 :: int)::ii) (( 13 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_FS  :: " Sstatus \<Rightarrow>(2)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_FS v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 14 :: int)::ii) (( 13 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_SPP  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_SPP v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_SPP  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_SPP r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_SPP  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_SPP v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_SPIE  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_SPIE v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_SPIE  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_SPIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_SPIE  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_SPIE v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_UPIE  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_UPIE v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_UPIE  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_UPIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_UPIE  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_UPIE v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_SIE  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_SIE v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_SIE  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_SIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_SIE  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_SIE v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sstatus_UIE  :: " Sstatus \<Rightarrow>(1)Word.word "  where 
     " get_Sstatus_UIE v = ( (subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


definition set_Sstatus_UIE  :: "((regstate),(register_value),(Sstatus))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sstatus_UIE r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sstatus_Sstatus_chunk_0 :=
         ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sstatus_UIE  :: " Sstatus \<Rightarrow>(1)Word.word \<Rightarrow> Sstatus "  where 
     " update_Sstatus_UIE v x = (
   (v (|
     Sstatus_Sstatus_chunk_0 :=
       ((update_subrange_vec_dec(Sstatus_Sstatus_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val lower_mstatus : Mstatus -> Sstatus*)

definition lower_mstatus  :: " Mstatus \<Rightarrow> Sstatus "  where 
     " lower_mstatus m = (
   (let s = (Mk_Sstatus ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) in
   (let s = (update_Sstatus_SD s ((get_Mstatus_SD m  ::  1 Word.word))) in
   (let s = (update_Sstatus_UXL s ((get_Mstatus_UXL m  ::  2 Word.word))) in
   (let s = (update_Sstatus_MXR s ((get_Mstatus_MXR m  ::  1 Word.word))) in
   (let s = (update_Sstatus_SUM s ((get_Mstatus_SUM m  ::  1 Word.word))) in
   (let s = (update_Sstatus_XS s ((get_Mstatus_XS m  ::  2 Word.word))) in
   (let s = (update_Sstatus_FS s ((get_Mstatus_FS m  ::  2 Word.word))) in
   (let s = (update_Sstatus_SPP s ((get_Mstatus_SPP m  ::  1 Word.word))) in
   (let s = (update_Sstatus_SPIE s ((get_Mstatus_SPIE m  ::  1 Word.word))) in
   (let s = (update_Sstatus_UPIE s ((get_Mstatus_UPIE m  ::  1 Word.word))) in
   (let s = (update_Sstatus_SIE s ((get_Mstatus_SIE m  ::  1 Word.word))) in
   update_Sstatus_UIE s ((get_Mstatus_UIE m  ::  1 Word.word))))))))))))))"


(*val lift_sstatus : Mstatus -> Sstatus -> Mstatus*)

definition lift_sstatus  :: " Mstatus \<Rightarrow> Sstatus \<Rightarrow> Mstatus "  where 
     " lift_sstatus (m :: Mstatus) (s :: Sstatus) = (
   (let m = (update_Mstatus_SD m ((get_Sstatus_SD s  ::  1 Word.word))) in
   (let m = (update_Mstatus_MXR m ((get_Sstatus_MXR s  ::  1 Word.word))) in
   (let m = (update_Mstatus_SUM m ((get_Sstatus_SUM s  ::  1 Word.word))) in
   (let m = (update_Mstatus_XS m ((get_Sstatus_XS s  ::  2 Word.word))) in
   (let m = (update_Mstatus_FS m ((get_Sstatus_FS s  ::  2 Word.word))) in
   (let m = (update_Mstatus_SPP m ((get_Sstatus_SPP s  ::  1 Word.word))) in
   (let m = (update_Mstatus_SPIE m ((get_Sstatus_SPIE s  ::  1 Word.word))) in
   (let m = (update_Mstatus_UPIE m ((get_Sstatus_UPIE s  ::  1 Word.word))) in
   (let m = (update_Mstatus_SIE m ((get_Sstatus_SIE s  ::  1 Word.word))) in
   update_Mstatus_UIE m ((get_Sstatus_UIE s  ::  1 Word.word))))))))))))"


(*val legalize_sstatus : Mstatus -> mword ty64 -> Mstatus*)

definition legalize_sstatus  :: " Mstatus \<Rightarrow>(64)Word.word \<Rightarrow> Mstatus "  where 
     " legalize_sstatus (m :: Mstatus) (v :: xlenbits) = ( lift_sstatus m ((Mk_Sstatus v)))"


(*val Mk_Sedeleg : mword ty64 -> Sedeleg*)

definition Mk_Sedeleg  :: "(64)Word.word \<Rightarrow> Sedeleg "  where 
     " Mk_Sedeleg v = (
   (| Sedeleg_Sedeleg_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Sedeleg_bits : Sedeleg -> mword ty64*)

definition get_Sedeleg_bits  :: " Sedeleg \<Rightarrow>(64)Word.word "  where 
     " get_Sedeleg_bits v = ( (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Sedeleg_bits : register_ref regstate register_value Sedeleg -> mword ty64 -> M unit*)

definition set_Sedeleg_bits  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Sedeleg_bits : Sedeleg -> mword ty64 -> Sedeleg*)

definition update_Sedeleg_bits  :: " Sedeleg \<Rightarrow>(64)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_bits v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_UEnvCall  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_UEnvCall v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_UEnvCall  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_UEnvCall r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_UEnvCall  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_UEnvCall v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_SAMO_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_SAMO_Access_Fault v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_SAMO_Access_Fault  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_SAMO_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_SAMO_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_SAMO_Access_Fault v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_SAMO_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_SAMO_Addr_Align v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_SAMO_Addr_Align  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_SAMO_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 6 :: int)::ii) (( 6 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_SAMO_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_SAMO_Addr_Align v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Load_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Load_Access_Fault v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Load_Access_Fault  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Load_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Load_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Load_Access_Fault v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Load_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Load_Addr_Align v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Load_Addr_Align  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Load_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Load_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Load_Addr_Align v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Breakpoint  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Breakpoint v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Breakpoint  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Breakpoint r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Breakpoint  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Breakpoint v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Illegal_Instr  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Illegal_Instr v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Illegal_Instr  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Illegal_Instr r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 2 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Illegal_Instr  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Illegal_Instr v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Fetch_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Fetch_Access_Fault v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Fetch_Access_Fault  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Fetch_Access_Fault r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Fetch_Access_Fault  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Fetch_Access_Fault v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sedeleg_Fetch_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word "  where 
     " get_Sedeleg_Fetch_Addr_Align v = (
   (subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


definition set_Sedeleg_Fetch_Addr_Align  :: "((regstate),(register_value),(Sedeleg))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sedeleg_Fetch_Addr_Align r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sedeleg_Sedeleg_chunk_0 :=
         ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sedeleg_Fetch_Addr_Align  :: " Sedeleg \<Rightarrow>(1)Word.word \<Rightarrow> Sedeleg "  where 
     " update_Sedeleg_Fetch_Addr_Align v x = (
   (v (|
     Sedeleg_Sedeleg_chunk_0 :=
       ((update_subrange_vec_dec(Sedeleg_Sedeleg_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val legalize_sedeleg : Sedeleg -> mword ty64 -> Sedeleg*)

definition legalize_sedeleg  :: " Sedeleg \<Rightarrow>(64)Word.word \<Rightarrow> Sedeleg "  where 
     " legalize_sedeleg (s :: Sedeleg) (v :: xlenbits) = (
   Mk_Sedeleg ((EXTZ (( 64 :: int)::ii) ((subrange_vec_dec v (( 8 :: int)::ii) (( 0 :: int)::ii)  ::  9 Word.word))  ::  64 Word.word)))"


(*val Mk_Sinterrupts : mword ty64 -> Sinterrupts*)

definition Mk_Sinterrupts  :: "(64)Word.word \<Rightarrow> Sinterrupts "  where 
     " Mk_Sinterrupts v = (
   (| Sinterrupts_Sinterrupts_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Sinterrupts_bits : Sinterrupts -> mword ty64*)

definition get_Sinterrupts_bits  :: " Sinterrupts \<Rightarrow>(64)Word.word "  where 
     " get_Sinterrupts_bits v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Sinterrupts_bits : register_ref regstate register_value Sinterrupts -> mword ty64 -> M unit*)

definition set_Sinterrupts_bits  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Sinterrupts_bits : Sinterrupts -> mword ty64 -> Sinterrupts*)

definition update_Sinterrupts_bits  :: " Sinterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_bits v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_SEI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_SEI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_SEI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_SEI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 9 :: int)::ii) (( 9 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_SEI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_SEI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 9 :: int)::ii) (( 9 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_UEI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_UEI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_UEI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_UEI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 8 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_UEI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_UEI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 8 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_STI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_STI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_STI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_STI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_STI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_STI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_UTI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_UTI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_UTI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_UTI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_UTI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_UTI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_SSI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_SSI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_SSI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_SSI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_SSI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_SSI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


definition get_Sinterrupts_USI  :: " Sinterrupts \<Rightarrow>(1)Word.word "  where 
     " get_Sinterrupts_USI v = (
   (subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


definition set_Sinterrupts_USI  :: "((regstate),(register_value),(Sinterrupts))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Sinterrupts_USI r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Sinterrupts_Sinterrupts_chunk_0 :=
         ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Sinterrupts_USI  :: " Sinterrupts \<Rightarrow>(1)Word.word \<Rightarrow> Sinterrupts "  where 
     " update_Sinterrupts_USI v x = (
   (v (|
     Sinterrupts_Sinterrupts_chunk_0 :=
       ((update_subrange_vec_dec(Sinterrupts_Sinterrupts_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  64 Word.word))|)))"


(*val lower_mip : Minterrupts -> Minterrupts -> Sinterrupts*)

definition lower_mip  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow> Sinterrupts "  where 
     " lower_mip (m :: Minterrupts) (d :: Minterrupts) = (
   (let (s :: Sinterrupts) =
     (Mk_Sinterrupts ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) in
   (let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  ::  1 Word.word)) ((get_Minterrupts_SEI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  ::  1 Word.word)) ((get_Minterrupts_STI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  ::  1 Word.word)) ((get_Minterrupts_SSI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  ::  1 Word.word)) ((get_Minterrupts_UEI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  ::  1 Word.word)) ((get_Minterrupts_UTI d  ::  1 Word.word))
          ::  1 Word.word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  ::  1 Word.word)) ((get_Minterrupts_USI d  ::  1 Word.word))
        ::  1 Word.word)))))))))"


(*val lower_mie : Minterrupts -> Minterrupts -> Sinterrupts*)

definition lower_mie  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow> Sinterrupts "  where 
     " lower_mie (m :: Minterrupts) (d :: Minterrupts) = (
   (let (s :: Sinterrupts) =
     (Mk_Sinterrupts ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) in
   (let s =
     (update_Sinterrupts_SEI s
       ((and_vec ((get_Minterrupts_SEI m  ::  1 Word.word)) ((get_Minterrupts_SEI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_STI s
       ((and_vec ((get_Minterrupts_STI m  ::  1 Word.word)) ((get_Minterrupts_STI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_SSI s
       ((and_vec ((get_Minterrupts_SSI m  ::  1 Word.word)) ((get_Minterrupts_SSI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_UEI s
       ((and_vec ((get_Minterrupts_UEI m  ::  1 Word.word)) ((get_Minterrupts_UEI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let s =
     (update_Sinterrupts_UTI s
       ((and_vec ((get_Minterrupts_UTI m  ::  1 Word.word)) ((get_Minterrupts_UTI d  ::  1 Word.word))
          ::  1 Word.word))) in
   update_Sinterrupts_USI s
     ((and_vec ((get_Minterrupts_USI m  ::  1 Word.word)) ((get_Minterrupts_USI d  ::  1 Word.word))
        ::  1 Word.word)))))))))"


(*val lift_sip : Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts*)

definition lift_sip  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow> Sinterrupts \<Rightarrow> Minterrupts "  where 
     " lift_sip (o1 :: Minterrupts) (d :: Minterrupts) (s :: Sinterrupts) = (
   (let (m :: Minterrupts) = o1 in
   (let m =
     (update_Minterrupts_SSI m
       ((and_vec ((get_Sinterrupts_SSI s  ::  1 Word.word)) ((get_Minterrupts_SSI d  ::  1 Word.word))
          ::  1 Word.word))) in
   (let m =
     (update_Minterrupts_UEI m
       ((and_vec ((get_Minterrupts_UEI m  ::  1 Word.word)) ((get_Minterrupts_UEI d  ::  1 Word.word))
          ::  1 Word.word))) in
   update_Minterrupts_USI m
     ((and_vec ((get_Minterrupts_USI m  ::  1 Word.word)) ((get_Minterrupts_USI d  ::  1 Word.word))
        ::  1 Word.word))))))"


(*val legalize_sip : Minterrupts -> Minterrupts -> mword ty64 -> Minterrupts*)

definition legalize_sip  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " legalize_sip (m :: Minterrupts) (d :: Minterrupts) (v :: xlenbits) = (
   lift_sip m d ((Mk_Sinterrupts v)))"


(*val lift_sie : Minterrupts -> Minterrupts -> Sinterrupts -> Minterrupts*)

definition lift_sie  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow> Sinterrupts \<Rightarrow> Minterrupts "  where 
     " lift_sie (o1 :: Minterrupts) (d :: Minterrupts) (s :: Sinterrupts) = (
   (let (m :: Minterrupts) = o1 in
   (let m =
     (if (((((get_Minterrupts_SEI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
       update_Minterrupts_SEI m ((get_Sinterrupts_SEI s  ::  1 Word.word))
     else m) in
   (let m =
     (if (((((get_Minterrupts_STI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
       update_Minterrupts_STI m ((get_Sinterrupts_STI s  ::  1 Word.word))
     else m) in
   (let m =
     (if (((((get_Minterrupts_SSI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
       update_Minterrupts_SSI m ((get_Sinterrupts_SSI s  ::  1 Word.word))
     else m) in
   (let m =
     (if (((((get_Minterrupts_UEI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
       update_Minterrupts_UEI m ((get_Sinterrupts_UEI s  ::  1 Word.word))
     else m) in
   (let m =
     (if (((((get_Minterrupts_UTI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
       update_Minterrupts_UTI m ((get_Sinterrupts_UTI s  ::  1 Word.word))
     else m) in
   if (((((get_Minterrupts_USI d  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
     update_Minterrupts_USI m ((get_Sinterrupts_USI s  ::  1 Word.word))
   else m)))))))"


(*val legalize_sie : Minterrupts -> Minterrupts -> mword ty64 -> Minterrupts*)

definition legalize_sie  :: " Minterrupts \<Rightarrow> Minterrupts \<Rightarrow>(64)Word.word \<Rightarrow> Minterrupts "  where 
     " legalize_sie (m :: Minterrupts) (d :: Minterrupts) (v :: xlenbits) = (
   lift_sie m d ((Mk_Sinterrupts v)))"


(*val Mk_Satp64 : mword ty64 -> Satp64*)

definition Mk_Satp64  :: "(64)Word.word \<Rightarrow> Satp64 "  where 
     " Mk_Satp64 v = ( (| Satp64_Satp64_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_Satp64_bits : Satp64 -> mword ty64*)

definition get_Satp64_bits  :: " Satp64 \<Rightarrow>(64)Word.word "  where 
     " get_Satp64_bits v = ( (subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_Satp64_bits : register_ref regstate register_value Satp64 -> mword ty64 -> M unit*)

definition set_Satp64_bits  :: "((regstate),(register_value),(Satp64))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Satp64_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Satp64_bits : Satp64 -> mword ty64 -> Satp64*)

definition update_Satp64_bits  :: " Satp64 \<Rightarrow>(64)Word.word \<Rightarrow> Satp64 "  where 
     " update_Satp64_bits v x = (
   (v (|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


definition get_Satp64_Mode  :: " Satp64 \<Rightarrow>(4)Word.word "  where 
     " get_Satp64_Mode v = ( (subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 63 :: int)::ii) (( 60 :: int)::ii)  ::  4 Word.word))"


definition set_Satp64_Mode  :: "((regstate),(register_value),(Satp64))register_ref \<Rightarrow>(4)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Satp64_Mode r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   r) (( 63 :: int)::ii) (( 60 :: int)::ii)
             ((subrange_vec_dec v (( 3 :: int)::ii) (( 0 :: int)::ii)  ::  4 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_Satp64_Mode  :: " Satp64 \<Rightarrow>(4)Word.word \<Rightarrow> Satp64 "  where 
     " update_Satp64_Mode v x = (
   (v (|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 63 :: int)::ii) (( 60 :: int)::ii)
           ((subrange_vec_dec x (( 3 :: int)::ii) (( 0 :: int)::ii)  ::  4 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Satp64_Asid : Satp64 -> mword ty16*)

definition get_Satp64_Asid  :: " Satp64 \<Rightarrow>(16)Word.word "  where 
     " get_Satp64_Asid v = ( (subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 59 :: int)::ii) (( 44 :: int)::ii)  ::  16 Word.word))"


(*val _set_Satp64_Asid : register_ref regstate register_value Satp64 -> mword ty16 -> M unit*)

definition set_Satp64_Asid  :: "((regstate),(register_value),(Satp64))register_ref \<Rightarrow>(16)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Satp64_Asid r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   r) (( 59 :: int)::ii) (( 44 :: int)::ii)
             ((subrange_vec_dec v (( 15 :: int)::ii) (( 0 :: int)::ii)  ::  16 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Satp64_Asid : Satp64 -> mword ty16 -> Satp64*)

definition update_Satp64_Asid  :: " Satp64 \<Rightarrow>(16)Word.word \<Rightarrow> Satp64 "  where 
     " update_Satp64_Asid v x = (
   (v (|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 59 :: int)::ii) (( 44 :: int)::ii)
           ((subrange_vec_dec x (( 15 :: int)::ii) (( 0 :: int)::ii)  ::  16 Word.word))
          ::  64 Word.word))|)))"


(*val _get_Satp64_PPN : Satp64 -> mword ty44*)

definition get_Satp64_PPN  :: " Satp64 \<Rightarrow>(44)Word.word "  where 
     " get_Satp64_PPN v = ( (subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))"


(*val _set_Satp64_PPN : register_ref regstate register_value Satp64 -> mword ty44 -> M unit*)

definition set_Satp64_PPN  :: "((regstate),(register_value),(Satp64))register_ref \<Rightarrow>(44)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_Satp64_PPN r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       Satp64_Satp64_chunk_0 :=
         ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   r) (( 43 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_Satp64_PPN : Satp64 -> mword ty44 -> Satp64*)

definition update_Satp64_PPN  :: " Satp64 \<Rightarrow>(44)Word.word \<Rightarrow> Satp64 "  where 
     " update_Satp64_PPN v x = (
   (v (|
     Satp64_Satp64_chunk_0 :=
       ((update_subrange_vec_dec(Satp64_Satp64_chunk_0   v) (( 43 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
          ::  64 Word.word))|)))"


(*val legalize_satp : Architecture -> mword ty64 -> mword ty64 -> mword ty64*)

definition legalize_satp  :: " Architecture \<Rightarrow>(64)Word.word \<Rightarrow>(64)Word.word \<Rightarrow>(64)Word.word "  where 
     " legalize_satp (a :: Architecture) (o1 :: xlenbits) (v :: xlenbits) = (
   (let s = (Mk_Satp64 v) in
   (case  ((satpMode_of_bits a ((get_Satp64_Mode s  ::  4 Word.word)))) of
     None => o1
   | Some (Sv32) => o1
   | Some (_) => (get_Satp64_bits s  ::  64 Word.word)
   )))"


(*val csr_name : mword ty12 -> string*)

definition csr_name  :: "(12)Word.word \<Rightarrow> string "  where 
     " csr_name csr = (
   (let b__0 = csr in
   if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''ustatus'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''uie'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''utvec'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''fflags'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''frm'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''fcsr'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''cycle'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''time'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''instret'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''cycleh'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''timeh'')
   else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''instreth'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''sstatus'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''sedeleg'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''sideleg'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''sie'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''stvec'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (''scounteren'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''sscratch'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''sepc'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''scause'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''stval'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''sip'')
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''satp'')
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''mvendorid'')
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''marchid'')
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mimpid'')
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mhartid'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mstatus'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''misa'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''medeleg'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mideleg'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mie'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''mtvec'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (''mcounteren'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mscratch'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''mepc'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''mcause'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mtval'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mip'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''pmpcfg0'')
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''pmpaddr0'')
   else if (((b__0 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mcycle'')
   else if (((b__0 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''minstret'')
   else if (((b__0 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mcycleh'')
   else if (((b__0 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''minstreth'')
   else if (((b__0 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''tselect'')
   else (''UNKNOWN'')))"


(*val csr_name_map_forwards : mword ty12 -> string*)

definition csr_name_map_forwards  :: "(12)Word.word \<Rightarrow> string "  where 
     " csr_name_map_forwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''ustatus'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''uie'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''utvec'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''uscratch'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''uepc'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''ucause'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''utval'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''uip'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''fflags'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''frm'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''fcsr'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''cycle'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''time'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''instret'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''cycleh'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''timeh'')
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''instreth'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''sstatus'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''sedeleg'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''sideleg'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''sie'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''stvec'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (''scounteren'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''sscratch'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''sepc'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''scause'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''stval'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''sip'')
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''satp'')
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''mvendorid'')
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''marchid'')
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mimpid'')
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mhartid'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mstatus'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''misa'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''medeleg'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mideleg'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mie'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''mtvec'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (''mcounteren'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mscratch'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''mepc'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''mcause'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''mtval'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''mip'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''pmpcfg0'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''pmpcfg1'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''pmpcfg2'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''pmpcfg3'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''pmpaddr0'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''pmpaddr1'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''pmpaddr2'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (''pmpaddr3'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (''pmpaddr4'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (''pmpaddr5'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (''pmpaddr6'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B1]  ::  12 Word.word)))) then
     (''pmpaddr7'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B0]  ::  12 Word.word)))) then
     (''pmpaddr8'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B1]  ::  12 Word.word)))) then
     (''pmpaddr9'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B0]  ::  12 Word.word)))) then
     (''pmpaddr10'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B1]  ::  12 Word.word)))) then
     (''pmpaddr11'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B0]  ::  12 Word.word)))) then
     (''pmpaddr12'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B1]  ::  12 Word.word)))) then
     (''pmpaddr13'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B0]  ::  12 Word.word)))) then
     (''pmpaddr14'')
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B1]  ::  12 Word.word)))) then
     (''pmpaddr15'')
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mcycle'')
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''minstret'')
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''mcycleh'')
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''minstreth'')
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (''tselect'')
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (''tdata1'')
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (''tdata2'')
   else (''tdata3'')))"


(*val csr_name_map_backwards : string -> mword ty12*)

definition csr_name_map_backwards  :: " string \<Rightarrow>(12)Word.word "  where 
     " csr_name_map_backwards arg0 = ( 
  if(arg0 = (''ustatus'')) then
    ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
  else
    (
    if(arg0 = (''uie'')) then
      ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
    else
      (
      if(arg0 = (''utvec'')) then
        ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1] :: 12 Word.word))
      else
        (
        if(arg0 = (''uscratch'')) then
          ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
        else
          (
          if(arg0 = (''uepc'')) then
            ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
          else
            (
            if(arg0 = (''ucause'')) then
              ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
            else
              (
              if(arg0 = (''utval'')) then
                ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
              else
                (
                if(arg0 = (''uip'')) then
                  ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
                else
                  (
                  if(arg0 = (''fflags'')) then
                    ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                  else
                    (
                    if(arg0 = (''frm'')) then
                      ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                    else
                      (
                      if(arg0 = (''fcsr'')) then
                        ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
                      else
                        (
                        if(arg0 = (''cycle'')) then
                          ((vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                        else
                          (
                          if(arg0 = (''time'')) then
                            ((vec_of_bits
                                [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                          else
                            (
                            if(arg0 = (''instret'')) then
                              ((vec_of_bits
                                  [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                            else
                              (
                              if(arg0 = (''cycleh'')) then
                                ((vec_of_bits
                                    [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                              else
                                (
                                if(arg0 = (''timeh'')) then
                                  ((vec_of_bits
                                      [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                                else
                                  (
                                  if(arg0 = (''instreth'')) then
                                    ((vec_of_bits
                                        [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                  else
                                    (
                                    if(arg0 = (''sstatus'')) then
                                      ((vec_of_bits
                                          [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                    else
                                      (
                                      if(arg0 = (''sedeleg'')) then
                                        ((vec_of_bits
                                            [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                      else
                                        (
                                        if(arg0 = (''sideleg'')) then
                                          ((vec_of_bits
                                              [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
                                        else
                                          (
                                          if(arg0 = (''sie'')) then
                                            ((vec_of_bits
                                                [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
                                          else
                                            (
                                            if(arg0 = (''stvec'')) then
                                              ((vec_of_bits
                                                  [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1] :: 12 Word.word))
                                            else
                                              (
                                              if(arg0 = (''scounteren'')) then
                                                ((vec_of_bits
                                                    [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0] :: 12 Word.word))
                                              else
                                                (
                                                if(arg0 = (''sscratch'')) then
                                                  ((vec_of_bits
                                                      [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                else
                                                  (
                                                  if(arg0 = (''sepc'')) then
                                                    ((vec_of_bits
                                                        [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                                                  else
                                                    (
                                                    if(arg0 = (''scause'')) then
                                                      ((vec_of_bits
                                                          [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                    else
                                                      (
                                                      if(arg0 = (''stval'')) then
                                                        ((vec_of_bits
                                                            [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
                                                      else
                                                        (
                                                        if(arg0 = (''sip'')) then
                                                          ((vec_of_bits
                                                              [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
                                                        else
                                                          (
                                                          if(arg0 =
                                                               (''satp'')) then
                                                            ((vec_of_bits
                                                                [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                          else
                                                            (
                                                            if(arg0 =
                                                                 (''mvendorid'')) then
                                                              ((vec_of_bits
                                                                  [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1] :: 12 Word.word))
                                                            else
                                                              (
                                                              if(arg0 =
                                                                   (''marchid'')) then
                                                                ((vec_of_bits
                                                                    [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0] :: 12 Word.word))
                                                              else
                                                                (
                                                                if(arg0 =
                                                                    (''mimpid'')) then
                                                                  ((vec_of_bits
                                                                    [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1] :: 12 Word.word))
                                                                else
                                                                  (
                                                                  if(
                                                                    arg0 =
                                                                    (''mhartid'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0] :: 12 Word.word))
                                                                  else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mstatus'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''misa'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''medeleg'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mideleg'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mie'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mtvec'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcounteren'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mscratch'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mepc'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcause'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mtval'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mip'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg0'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg1'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg2'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg3'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr0'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr1'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr2'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr3'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr4'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr5'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr6'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr7'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr8'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr9'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr10'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr11'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr12'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr13'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr14'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr15'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcycle'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''minstret'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcycleh'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''minstreth'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tselect'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata1'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata2'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0] :: 12 Word.word))
                                                                    else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata3'')) then
                                                                    (
                                                                    (
                                                                    vec_of_bits
                                                                    [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1] :: 12 Word.word))
                                                                    else
                                                                    undefined)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) )"


(*val csr_name_map_forwards_matches : mword ty12 -> bool*)

definition csr_name_map_forwards_matches  :: "(12)Word.word \<Rightarrow> bool "  where 
     " csr_name_map_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     True
   else if (((p00 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     True
   else False))"


(*val csr_name_map_backwards_matches : string -> bool*)

definition csr_name_map_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " csr_name_map_backwards_matches arg0 = ( 
  if(arg0 = (''ustatus'')) then True else
    (
    if(arg0 = (''uie'')) then True else
      (
      if(arg0 = (''utvec'')) then True else
        (
        if(arg0 = (''uscratch'')) then True else
          (
          if(arg0 = (''uepc'')) then True else
            (
            if(arg0 = (''ucause'')) then True else
              (
              if(arg0 = (''utval'')) then True else
                (
                if(arg0 = (''uip'')) then True else
                  (
                  if(arg0 = (''fflags'')) then True else
                    (
                    if(arg0 = (''frm'')) then True else
                      (
                      if(arg0 = (''fcsr'')) then True else
                        (
                        if(arg0 = (''cycle'')) then True else
                          (
                          if(arg0 = (''time'')) then True else
                            (
                            if(arg0 = (''instret'')) then True else
                              (
                              if(arg0 = (''cycleh'')) then True else
                                (
                                if(arg0 = (''timeh'')) then True else
                                  (
                                  if(arg0 = (''instreth'')) then True else
                                    (
                                    if(arg0 = (''sstatus'')) then True else
                                      (
                                      if(arg0 = (''sedeleg'')) then True else
                                        (
                                        if(arg0 = (''sideleg'')) then 
                                        True else
                                          (
                                          if(arg0 = (''sie'')) then True else
                                            (
                                            if(arg0 = (''stvec'')) then 
                                            True else
                                              (
                                              if(arg0 = (''scounteren'')) then
                                                True else
                                                (
                                                if(arg0 = (''sscratch'')) then
                                                  True else
                                                  (
                                                  if(arg0 = (''sepc'')) then
                                                    True else
                                                    (
                                                    if(arg0 = (''scause'')) then
                                                      True else
                                                      (
                                                      if(arg0 = (''stval'')) then
                                                        True else
                                                        (
                                                        if(arg0 = (''sip'')) then
                                                          True else
                                                          (
                                                          if(arg0 =
                                                               (''satp'')) then
                                                            True else
                                                            (
                                                            if(arg0 =
                                                                 (''mvendorid'')) then
                                                              True else
                                                              (
                                                              if(arg0 =
                                                                   (''marchid'')) then
                                                                True else
                                                                (
                                                                if(arg0 =
                                                                    (''mimpid'')) then
                                                                  True else
                                                                  (
                                                                  if(
                                                                    arg0 =
                                                                    (''mhartid'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mstatus'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''misa'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''medeleg'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mideleg'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mie'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mtvec'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcounteren'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mscratch'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mepc'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcause'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mtval'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mip'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg0'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg1'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg2'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpcfg3'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr0'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr1'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr2'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr3'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr4'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr5'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr6'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr7'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr8'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr9'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr10'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr11'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr12'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr13'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr14'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''pmpaddr15'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcycle'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''minstret'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''mcycleh'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''minstreth'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tselect'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata1'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata2'')) then
                                                                    True else
                                                                    (
                                                                    if
                                                                    (
                                                                    arg0 =
                                                                    (''tdata3'')) then
                                                                    True else
                                                                    False)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) )"


(*val csr_name_map_matches_prefix : string -> maybe ((mword ty12 * ii))*)

definition csr_name_map_matches_prefix  :: " string \<Rightarrow>((12)Word.word*int)option "  where 
     " csr_name_map_matches_prefix arg0 = (
   (let stringappend_17160 = arg0 in
   if (((((string_startswith stringappend_17160 (''ustatus''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''ustatus''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''ustatus''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''uie''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''uie''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''uie''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''utvec''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''utvec''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''utvec''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''uscratch''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''uscratch''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''uscratch''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''uepc''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''uepc''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''uepc''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''ucause''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''ucause''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''ucause''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''utval''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''utval''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''utval''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''uip''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''uip''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''uip''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''fflags''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''fflags''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''fflags''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''frm''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''frm''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''frm''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''fcsr''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''fcsr''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''fcsr''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''cycle''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''cycle''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''cycle''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''time''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''time''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''time''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''instret''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''instret''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''instret''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''cycleh''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''cycleh''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''cycleh''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''timeh''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''timeh''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''timeh''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''instreth''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''instreth''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''instreth''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sstatus''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sstatus''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sstatus''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sedeleg''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sedeleg''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sedeleg''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sideleg''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sideleg''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sideleg''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sie''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sie''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sie''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''stvec''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''stvec''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''stvec''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''scounteren''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''scounteren''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''scounteren''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sscratch''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sscratch''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sscratch''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sepc''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sepc''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sepc''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''scause''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''scause''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''scause''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''stval''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''stval''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''stval''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''sip''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''sip''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''sip''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''satp''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''satp''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''satp''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mvendorid''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mvendorid''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mvendorid''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''marchid''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''marchid''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''marchid''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mimpid''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mimpid''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mimpid''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mhartid''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mhartid''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mhartid''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mstatus''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mstatus''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mstatus''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''misa''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''misa''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''misa''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''medeleg''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''medeleg''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''medeleg''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mideleg''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mideleg''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mideleg''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mie''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mie''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mie''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mtvec''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mtvec''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mtvec''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mcounteren''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mcounteren''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mcounteren''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mscratch''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mscratch''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mscratch''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mepc''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mepc''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mepc''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mcause''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mcause''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mcause''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mtval''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mtval''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mtval''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mip''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mip''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mip''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpcfg0''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg0''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg0''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpcfg1''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpcfg2''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg2''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpcfg3''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpcfg3''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr0''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr0''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr0''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr1''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr2''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr2''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr3''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr3''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr4''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr4''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr4''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr5''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr5''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr5''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr6''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr6''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr6''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr7''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr7''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr7''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B1,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr8''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr8''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr8''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr9''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr9''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr9''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr10''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr10''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr10''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr11''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr11''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr11''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr12''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr12''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr12''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr13''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr13''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr13''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr14''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr14''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr14''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''pmpaddr15''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr15''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''pmpaddr15''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B1,B1,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mcycle''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mcycle''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mcycle''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''minstret''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''minstret''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''minstret''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''mcycleh''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''mcycleh''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''mcycleh''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''minstreth''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''minstreth''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''minstreth''))))) of
       s0 =>
        Some ((vec_of_bits [B1,B0,B1,B1,B1,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''tselect''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''tselect''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''tselect''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''tdata1''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''tdata1''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''tdata1''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''tdata2''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''tdata2''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''tdata2''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B0]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17160 (''tdata3''))) \<and> (
  (case  ((string_drop stringappend_17160 ((string_length (''tdata3''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17160 ((string_length (''tdata3''))))) of
       s0 =>
        Some ((vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B1,B1]  ::  12 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val csrAccess : mword ty12 -> mword ty2*)

definition csrAccess  :: "(12)Word.word \<Rightarrow>(2)Word.word "  where 
     " csrAccess csr = ( (subrange_vec_dec csr (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word))"


(*val csrPriv : mword ty12 -> mword ty2*)

definition csrPriv  :: "(12)Word.word \<Rightarrow>(2)Word.word "  where 
     " csrPriv csr = ( (subrange_vec_dec csr (( 9 :: int)::ii) (( 8 :: int)::ii)  ::  2 Word.word))"


(*val is_CSR_defined : mword ty12 -> Privilege -> bool*)

definition is_CSR_defined  :: "(12)Word.word \<Rightarrow> Privilege \<Rightarrow> bool "  where 
     " is_CSR_defined (csr :: 12 bits) (p :: Privilege) = (
   (let b__0 = csr in
   if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
     False
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     ((((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))) \<or> (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
   else if (((b__0 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
     (((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))
   else False))"


(*val check_CSR_access : mword ty2 -> mword ty2 -> Privilege -> bool -> bool*)

definition check_CSR_access  :: "(2)Word.word \<Rightarrow>(2)Word.word \<Rightarrow> Privilege \<Rightarrow> bool \<Rightarrow> bool "  where 
     " check_CSR_access csrrw csrpr p isWrite = (
   (((\<not> ((((((((bool_to_bits isWrite  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> (((csrrw = (vec_of_bits [B1,B1]  ::  2 Word.word))))))))) \<and> ((zopz0zKzJ_u ((privLevel_to_bits p  ::  2 Word.word)) csrpr))))"


(*val check_TVM_SATP : mword ty12 -> Privilege -> M bool*)

definition check_TVM_SATP  :: "(12)Word.word \<Rightarrow> Privilege \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " check_TVM_SATP (csr :: csreg) (p :: Privilege) = (
   and_boolM
     (return (((csr = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))))
     (and_boolM
        (return (((((privLevel_to_bits p  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
        (read_reg mstatus_ref \<bind> (\<lambda> (w__0 :: Mstatus) . 
         return (((((get_Mstatus_TVM w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))) \<bind> (\<lambda> (w__2 ::
     bool) . 
   return ((\<not> w__2))))"


(*val check_Counteren : mword ty12 -> Privilege -> M bool*)

definition check_Counteren  :: "(12)Word.word \<Rightarrow> Privilege \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " check_Counteren (csr :: csreg) (p :: Privilege) = (
   (case  (csr, p) of
     (b__0, Supervisor) =>
      if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
        read_reg mcounteren_ref \<bind> (\<lambda> (w__0 :: Counteren) . 
        return (((((get_Counteren_CY w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
        read_reg mcounteren_ref \<bind> (\<lambda> (w__1 :: Counteren) . 
        return (((((get_Counteren_TM w__1  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
        read_reg mcounteren_ref \<bind> (\<lambda> (w__2 :: Counteren) . 
        return (((((get_Counteren_IR w__2  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else
        return ((case  (b__0, Supervisor) of
          (g__31, g__32) =>
           if (((((zopz0zIzJ_u (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)
                      csr)) \<and> ((zopz0zIzJ_u csr
                      (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B1,B1,B1,B1,B1]  ::  12 Word.word)))))) then
             False
           else True
        ))
   | (b__3, User) =>
      if (((b__3 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
        read_reg scounteren_ref \<bind> (\<lambda> (w__6 :: Counteren) . 
        return (((((get_Counteren_CY w__6  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else if (((b__3 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
        read_reg scounteren_ref \<bind> (\<lambda> (w__7 :: Counteren) . 
        return (((((get_Counteren_TM w__7  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else if (((b__3 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
        read_reg scounteren_ref \<bind> (\<lambda> (w__8 :: Counteren) . 
        return (((((get_Counteren_IR w__8  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
      else
        return ((case  (b__3, User) of
          (g__31, g__32) =>
           if (((((zopz0zIzJ_u (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)
                      csr)) \<and> ((zopz0zIzJ_u csr
                      (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B1,B1,B1,B1,B1]  ::  12 Word.word)))))) then
             False
           else True
        ))
   | (g__31, g__32) =>
      return (if (((((zopz0zIzJ_u (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)
                         csr)) \<and> ((zopz0zIzJ_u csr
                         (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B1,B1,B1,B1,B1]  ::  12 Word.word)))))) then
                False
              else True)
   ))"


(*val check_CSR : mword ty12 -> Privilege -> bool -> M bool*)

definition check_CSR  :: "(12)Word.word \<Rightarrow> Privilege \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " check_CSR (csr :: csreg) (p :: Privilege) (isWrite :: bool) = (
   and_boolM (return ((is_CSR_defined csr p)))
     (and_boolM
        (return ((check_CSR_access ((csrAccess csr  ::  2 Word.word)) ((csrPriv csr  ::  2 Word.word)) p
                    isWrite))) (and_boolM ((check_TVM_SATP csr p)) ((check_Counteren csr p)))))"


(*val exception_delegatee : ExceptionType -> Privilege -> M Privilege*)

definition exception_delegatee  :: " ExceptionType \<Rightarrow> Privilege \<Rightarrow>((register_value),(Privilege),(exception))monad "  where 
     " exception_delegatee (e :: ExceptionType) (p :: Privilege) = (
   (let idx = (num_of_ExceptionType e) in
   read_reg medeleg_ref \<bind> (\<lambda> (w__0 :: Medeleg) . 
   (let super = (access_vec_dec ((get_Medeleg_bits w__0  ::  64 Word.word)) idx) in
   read_reg sedeleg_ref \<bind> (\<lambda> (w__1 :: Sedeleg) . 
   (let user = (access_vec_dec ((get_Sedeleg_bits w__1  ::  64 Word.word)) idx) in
   and_boolM
     (read_reg misa_ref \<bind> (\<lambda> (w__2 :: Misa) . 
      return (((((get_Misa_S w__2  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))
     (return ((bit_to_bool super))) \<bind> (\<lambda> (w__3 :: bool) . 
   (let deleg = (if w__3 then Supervisor else Machine) in
   return (if ((zopz0zI_u ((privLevel_to_bits deleg  ::  2 Word.word))
                  ((privLevel_to_bits p  ::  2 Word.word)))) then
             p
           else deleg)))))))))"


(*val findPendingInterrupt : mword ty64 -> maybe InterruptType*)

definition findPendingInterrupt  :: "(64)Word.word \<Rightarrow>(InterruptType)option "  where 
     " findPendingInterrupt ip = (
   (let ip = (Mk_Minterrupts ip) in
   if (((((get_Minterrupts_MEI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
     Some I_M_External
   else if (((((get_Minterrupts_MSI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_M_Software
   else if (((((get_Minterrupts_MTI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_M_Timer
   else if (((((get_Minterrupts_SEI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_S_External
   else if (((((get_Minterrupts_SSI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_S_Software
   else if (((((get_Minterrupts_STI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_S_Timer
   else if (((((get_Minterrupts_UEI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_U_External
   else if (((((get_Minterrupts_USI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_U_Software
   else if (((((get_Minterrupts_UTI ip  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
   then
     Some I_U_Timer
   else None))"


(*val curInterrupt : Privilege -> Minterrupts -> Minterrupts -> Minterrupts -> M (maybe ((InterruptType * Privilege)))*)

definition curInterrupt  :: " Privilege \<Rightarrow> Minterrupts \<Rightarrow> Minterrupts \<Rightarrow> Minterrupts \<Rightarrow>((register_value),((InterruptType*Privilege)option),(exception))monad "  where 
     " curInterrupt (priv :: Privilege) (pend :: Minterrupts) (enbl :: Minterrupts) (delg :: Minterrupts) = (
   (let (en_mip :: xlenbits) =
     ((and_vec ((get_Minterrupts_bits pend  ::  64 Word.word))
        ((get_Minterrupts_bits enbl  ::  64 Word.word))
       ::  64 Word.word)) in
   if (((en_mip = ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))))) then
     return None
   else
     or_boolM
       (return (((((privLevel_to_bits priv  ::  2 Word.word)) \<noteq> ((privLevel_to_bits Machine  ::  2 Word.word))))))
       (and_boolM
          (return (((((privLevel_to_bits priv  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word))))))
          (read_reg mstatus_ref \<bind> (\<lambda> (w__0 :: Mstatus) . 
           return (((((get_Mstatus_MIE w__0  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))) \<bind> (\<lambda> eff_mie . 
     or_boolM
       (return (((((privLevel_to_bits priv  ::  2 Word.word)) = ((privLevel_to_bits User  ::  2 Word.word))))))
       (and_boolM
          (return (((((privLevel_to_bits priv  ::  2 Word.word)) = ((privLevel_to_bits Supervisor  ::  2 Word.word))))))
          (read_reg mstatus_ref \<bind> (\<lambda> (w__2 :: Mstatus) . 
           return (((((get_Mstatus_SIE w__2  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))) \<bind> (\<lambda> eff_sie . 
     (let eff_mip =
       ((and_vec en_mip ((not_vec ((get_Minterrupts_bits delg  ::  64 Word.word))  ::  64 Word.word))
         ::  64 Word.word)) in
     (let eff_sip = ((and_vec en_mip ((get_Minterrupts_bits delg  ::  64 Word.word))  ::  64 Word.word)) in
     if (((eff_mie \<and> (((eff_mip \<noteq> ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word)))))))) then
       (case  ((findPendingInterrupt eff_mip)) of
         Some (i) =>
          (let r = (i, Machine) in
          return (Some r))
       | None =>
          internal_error
            (((op@) (''non-zero eff_mip='')
                (((op@) ((string_of_bits eff_mip)) ('', but nothing pending'')))))
       )
     else if (((eff_sie \<and> (((eff_sip \<noteq> ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))))))))
     then
       (case  ((findPendingInterrupt eff_sip)) of
         Some (i) =>
          (let r = (i, Supervisor) in
          return (Some r))
       | None =>
          internal_error
            (((op@) (''non-zero eff_sip='')
                (((op@) ((string_of_bits eff_sip)) ('', but nothing pending'')))))
       )
     else
       (let p =
         (if (((((get_Minterrupts_MTI pend  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
         then
           (''1'')
         else (''0'')) in
       (let e =
         (if (((((get_Minterrupts_MTI enbl  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
         then
           (''1'')
         else (''0'')) in
       (let d =
         (if (((((get_Minterrupts_MTI delg  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
         then
           (''1'')
         else (''0'')) in
       (let (_ :: unit) =
         (print_endline
           (((op@) ('' MTI: pend='')
               (((op@) p
                   (((op@) ('' enbl='') (((op@) e (((op@) ('' delg='') d))))))))))) in
       (let eff_mip =
         ((and_vec en_mip ((not_vec ((get_Minterrupts_bits delg  ::  64 Word.word))  ::  64 Word.word))
           ::  64 Word.word)) in
       (let eff_sip = ((and_vec en_mip ((get_Minterrupts_bits delg  ::  64 Word.word))  ::  64 Word.word)) in
       read_reg mstatus_ref \<bind> (\<lambda> (w__8 :: Mstatus) . 
       read_reg mstatus_ref \<bind> (\<lambda> (w__9 :: Mstatus) . 
       read_reg mstatus_ref \<bind> (\<lambda> (w__10 :: Mstatus) . 
       (let (_ :: unit) =
         (print_endline
           (((op@) (''mstatus='')
               (((op@) ((string_of_bits ((get_Mstatus_bits w__8  ::  64 Word.word))))
                   (((op@) ('' mie,sie='')
                       (((op@) ((string_of_bits ((get_Mstatus_MIE w__9  ::  1 Word.word))))
                           (((op@) ('','')
                               (((op@)
                                   ((string_of_bits ((get_Mstatus_SIE w__10  ::  1 Word.word))))
                                   (((op@) ('' en_mip='')
                                       (((op@) ((string_of_bits en_mip))
                                           (((op@) ('' eff_mip='')
                                               (((op@) ((string_of_bits eff_mip))
                                                   (((op@) ('' eff_sip='')
                                                       ((string_of_bits eff_sip))))))))))))))))))))))))) in
       return None))))))))))))))))"


(*val tval : maybe (mword ty64) -> mword ty64*)

fun tval  :: "((64)Word.word)option \<Rightarrow>(64)Word.word "  where 
     " tval (Some (e)) = ( e )"
|" tval None = ( (EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))"


(*val handle_trap : Privilege -> bool -> mword ty4 -> mword ty64 -> maybe (mword ty64) -> M (mword ty64)*)

definition handle_trap  :: " Privilege \<Rightarrow> bool \<Rightarrow>(4)Word.word \<Rightarrow>(64)Word.word \<Rightarrow>(xlenbits)option \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " handle_trap (del_priv :: Privilege) (intr :: bool) (c :: exc_code) (pc :: xlenbits) (info ::
   xlenbits option) = (
   (let (_ :: unit) =
     (print_endline
       (((op@) (''handling '')
           (((op@) (if intr then (''int#'') else (''exc#''))
               (((op@) ((string_of_bits c))
                   (((op@) ('' at priv '')
                       (((op@) ((privLevel_to_str del_priv))
                           (((op@) ('' with tval '')
                               ((string_of_bits ((tval info  ::  64 Word.word))))))))))))))))) in
   (case  del_priv of
     Machine =>
      ((set_Mcause_IsInterrupt mcause_ref ((bool_to_bits intr  ::  1 Word.word)) \<then>
      set_Mcause_Cause mcause_ref ((EXTZ (( 63 :: int)::ii) c  ::  63 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__0 :: Mstatus) . 
      ((set_Mstatus_MPIE mstatus_ref ((get_Mstatus_MIE w__0  ::  1 Word.word)) \<then>
      set_Mstatus_MIE mstatus_ref ((bool_to_bits False  ::  1 Word.word))) \<then>
      read_reg cur_privilege_ref) \<bind> (\<lambda> (w__1 :: Privilege) . 
      ((((set_Mstatus_MPP mstatus_ref ((privLevel_to_bits w__1  ::  2 Word.word)) \<then>
      write_reg mtval_ref ((tval info  ::  64 Word.word))) \<then>
      write_reg mepc_ref pc) \<then>
      write_reg cur_privilege_ref del_priv) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__2 :: Mstatus) . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__3 :: Mstatus) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''CSR mstatus <- '')
              (((op@) ((string_of_bits ((get_Mstatus_bits w__2  ::  64 Word.word))))
                  (((op@) ('' (input: '')
                      (((op@) ((string_of_bits ((get_Mstatus_bits w__3  ::  64 Word.word)))) ('')'')))))))))) in
      (let (_ :: unit) = (cancel_reservation () ) in
      read_reg mtvec_ref \<bind> (\<lambda> (w__4 :: Mtvec) . 
      read_reg mcause_ref \<bind> (\<lambda> (w__5 :: Mcause) . 
      (case  ((tvec_addr w__4 w__5  ::  ( 64 Word.word)option)) of
        Some (epc) => return epc
      | None => (internal_error (''Invalid mtvec mode'')  :: ( 64 Word.word) M)
      )))))))))
   | Supervisor =>
      ((set_Mcause_IsInterrupt scause_ref ((bool_to_bits intr  ::  1 Word.word)) \<then>
      set_Mcause_Cause scause_ref ((EXTZ (( 63 :: int)::ii) c  ::  63 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__8 :: Mstatus) . 
      ((set_Mstatus_SPIE mstatus_ref ((get_Mstatus_SIE w__8  ::  1 Word.word)) \<then>
      set_Mstatus_SIE mstatus_ref ((bool_to_bits False  ::  1 Word.word))) \<then>
      read_reg cur_privilege_ref) \<bind> (\<lambda> (w__9 :: Privilege) . 
      (case  w__9 of
        User => return ((bool_to_bits False  ::  1 Word.word))
      | Supervisor => return ((bool_to_bits True  ::  1 Word.word))
      | Machine => (internal_error (''invalid privilege for s-mode trap'')  :: ( 1 Word.word) M)
      ) \<bind> (\<lambda> (w__11 ::  1 Word.word) . 
      ((((set_Mstatus_SPP mstatus_ref w__11 \<then>
      write_reg stval_ref ((tval info  ::  64 Word.word))) \<then>
      write_reg sepc_ref pc) \<then>
      write_reg cur_privilege_ref del_priv) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__12 :: Mstatus) . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__13 :: Mstatus) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''CSR mstatus <- '')
              (((op@) ((string_of_bits ((get_Mstatus_bits w__12  ::  64 Word.word))))
                  (((op@) ('' (input: '')
                      (((op@) ((string_of_bits ((get_Mstatus_bits w__13  ::  64 Word.word))))
                          ('')'')))))))))) in
      (let (_ :: unit) = (cancel_reservation () ) in
      read_reg stvec_ref \<bind> (\<lambda> (w__14 :: Mtvec) . 
      read_reg scause_ref \<bind> (\<lambda> (w__15 :: Mcause) . 
      (case  ((tvec_addr w__14 w__15  ::  ( 64 Word.word)option)) of
        Some (epc) => return epc
      | None => (internal_error (''Invalid stvec mode'')  :: ( 64 Word.word) M)
      ))))))))))
   | User => (internal_error (''the N extension is currently unsupported'')  :: ( 64 Word.word) M)
   )))"


(*val handle_exception : Privilege -> ctl_result -> mword ty64 -> M (mword ty64)*)

definition handle_exception  :: " Privilege \<Rightarrow> ctl_result \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " handle_exception (cur_priv :: Privilege) (ctl :: ctl_result) (pc :: xlenbits) = (
   (case  (cur_priv, ctl) of
     (_, CTL_TRAP (e)) =>
      exception_delegatee(sync_exception_trap   e) cur_priv \<bind> (\<lambda> del_priv . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''trapping from '')
              (((op@) ((privLevel_to_str cur_priv))
                  (((op@) ('' to '')
                      (((op@) ((privLevel_to_str del_priv))
                          (((op@) ('' to handle '')
                              ((exceptionType_to_str(sync_exception_trap   e)))))))))))))) in
      (handle_trap del_priv False ((exceptionType_to_bits(sync_exception_trap   e)  ::  4 Word.word)) pc(sync_exception_excinfo  
         e)
        :: ( 64 Word.word) M)))
   | (_, CTL_MRET (_)) =>
      read_reg cur_privilege_ref \<bind> (\<lambda> prev_priv . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__1 :: Mstatus) . 
      ((set_Mstatus_MIE mstatus_ref ((get_Mstatus_MPIE w__1  ::  1 Word.word)) \<then>
      set_Mstatus_MPIE mstatus_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__2 :: Mstatus) . 
      ((write_reg cur_privilege_ref ((privLevel_of_bits ((get_Mstatus_MPP w__2  ::  2 Word.word)))) \<then>
      set_Mstatus_MPP mstatus_ref ((privLevel_to_bits User  ::  2 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__3 :: Mstatus) . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__4 :: Mstatus) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''CSR mstatus <- '')
              (((op@) ((string_of_bits ((get_Mstatus_bits w__3  ::  64 Word.word))))
                  (((op@) ('' (input: '')
                      (((op@) ((string_of_bits ((get_Mstatus_bits w__4  ::  64 Word.word)))) ('')'')))))))))) in
      read_reg cur_privilege_ref \<bind> (\<lambda> (w__5 :: Privilege) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''ret-ing from '')
              (((op@) ((privLevel_to_str prev_priv))
                  (((op@) ('' to '') ((privLevel_to_str w__5))))))))) in
      (let (_ :: unit) = (cancel_reservation () ) in
      (read_reg mepc_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__6 ::  64 Word.word) . 
      (pc_alignment_mask ()   :: ( 64 Word.word) M) \<bind> (\<lambda> (w__7 ::  64 Word.word) . 
      return ((and_vec w__6 w__7  ::  64 Word.word)))))))))))))
   | (_, CTL_SRET (_)) =>
      read_reg cur_privilege_ref \<bind> (\<lambda> prev_priv . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__8 :: Mstatus) . 
      ((set_Mstatus_SIE mstatus_ref ((get_Mstatus_SPIE w__8  ::  1 Word.word)) \<then>
      set_Mstatus_SPIE mstatus_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__9 :: Mstatus) . 
      ((write_reg
        cur_privilege_ref
        (if (((((get_Mstatus_SPP w__9  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))
         then
           Supervisor
         else User) \<then>
      set_Mstatus_SPP mstatus_ref ((bool_to_bits False  ::  1 Word.word))) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__10 :: Mstatus) . 
      read_reg mstatus_ref \<bind> (\<lambda> (w__11 :: Mstatus) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''CSR mstatus <- '')
              (((op@) ((string_of_bits ((get_Mstatus_bits w__10  ::  64 Word.word))))
                  (((op@) ('' (input: '')
                      (((op@) ((string_of_bits ((get_Mstatus_bits w__11  ::  64 Word.word))))
                          ('')'')))))))))) in
      read_reg cur_privilege_ref \<bind> (\<lambda> (w__12 :: Privilege) . 
      (let (_ :: unit) =
        (print_endline
          (((op@) (''ret-ing from '')
              (((op@) ((privLevel_to_str prev_priv))
                  (((op@) ('' to '') ((privLevel_to_str w__12))))))))) in
      (let (_ :: unit) = (cancel_reservation () ) in
      (read_reg sepc_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__13 ::  64 Word.word) . 
      (pc_alignment_mask ()   :: ( 64 Word.word) M) \<bind> (\<lambda> (w__14 ::  64 Word.word) . 
      return ((and_vec w__13 w__14  ::  64 Word.word)))))))))))))
   ))"


(*val handle_mem_exception : mword ty64 -> ExceptionType -> M unit*)

definition handle_mem_exception  :: "(64)Word.word \<Rightarrow> ExceptionType \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " handle_mem_exception (addr :: xlenbits) (e :: ExceptionType) = (
   (let (t :: sync_exception) = ((| sync_exception_trap = e,  sync_exception_excinfo = (Some addr) |)) in
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (handle_exception w__0 (CTL_TRAP t) w__1  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 :: xlenbits) . 
   write_reg nextPC_ref w__2)))))"


(*val handle_decode_exception : mword ty64 -> M unit*)

definition handle_decode_exception  :: "(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " handle_decode_exception instbits = (
   (let (t :: sync_exception) =
     ((| sync_exception_trap = E_Illegal_Instr, 
        sync_exception_excinfo = (Some instbits) |)) in
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (handle_exception w__0 (CTL_TRAP t) w__1  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 :: xlenbits) . 
   write_reg nextPC_ref w__2)))))"


(*val handle_interrupt : InterruptType -> Privilege -> M unit*)

definition handle_interrupt  :: " InterruptType \<Rightarrow> Privilege \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " handle_interrupt (i :: InterruptType) (del_priv :: Privilege) = (
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (handle_trap del_priv True ((interruptType_to_bits i  ::  4 Word.word)) w__0 None
     :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 :: xlenbits) . 
   write_reg nextPC_ref w__1)))"


(*val handle_illegal : unit -> M unit*)

definition handle_illegal  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " handle_illegal _ = (
   (let (t :: sync_exception) =
     ((| sync_exception_trap = E_Illegal_Instr, 
        sync_exception_excinfo = None |)) in
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (handle_exception w__0 (CTL_TRAP t) w__1  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 :: xlenbits) . 
   write_reg nextPC_ref w__2)))))"


(*val init_sys : unit -> M unit*)

definition init_sys  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " init_sys _ = (
   (((((((((write_reg cur_privilege_ref Machine \<then>
   write_reg mhartid_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Misa_MXL misa_ref ((arch_to_bits RV64  ::  2 Word.word))) \<then>
   set_Misa_A misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   set_Misa_C misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   set_Misa_I misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   set_Misa_M misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   set_Misa_U misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   set_Misa_S misa_ref ((bool_to_bits True  ::  1 Word.word))) \<then>
   read_reg misa_ref) \<bind> (\<lambda> (w__0 :: Misa) . 
   (set_Mstatus_SXL mstatus_ref ((get_Misa_MXL w__0  ::  2 Word.word)) \<then>
   read_reg misa_ref) \<bind> (\<lambda> (w__1 :: Misa) . 
   ((((((((((((((((set_Mstatus_UXL mstatus_ref ((get_Misa_MXL w__1  ::  2 Word.word)) \<then>
   set_Mstatus_SD mstatus_ref ((bool_to_bits False  ::  1 Word.word))) \<then>
   set_Minterrupts_bits mip_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Minterrupts_bits mie_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Minterrupts_bits mideleg_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Medeleg_bits medeleg_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Mtvec_bits mtvec_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Mcause_bits mcause_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg mepc_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg mtval_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg mscratch_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg mcycle_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg mtime_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   set_Counteren_bits mcounteren_ref ((EXTZ (( 32 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  32 Word.word))) \<then>
   write_reg minstret_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))) \<then>
   write_reg minstret_written_ref False) \<then>
   read_reg mstatus_ref) \<bind> (\<lambda> (w__2 :: Mstatus) . 
   return ((print_endline
              (((op@) (''CSR mstatus <- '')
                  (((op@) ((string_of_bits ((get_Mstatus_bits w__2  ::  64 Word.word))))
                      (((op@) ('' (input: '')
                          (((op@)
                              ((string_of_bits
                                  ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word))))
                              ('')'')))))))))))))))"


(*val phys_mem_segments : unit -> list ((mword ty64 * mword ty64))*)

definition phys_mem_segments  :: " unit \<Rightarrow>((64)Word.word*(64)Word.word)list "  where 
     " phys_mem_segments _ = (
   ((plat_rom_base ()   ::  64 Word.word), (plat_rom_size ()   ::  64 Word.word)) #
     (((plat_ram_base ()   ::  64 Word.word), (plat_ram_size ()   ::  64 Word.word)) # []))"


(*val within_phys_mem : mword ty64 -> integer -> bool*)

definition within_phys_mem  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_phys_mem (addr :: xlenbits) (width :: int) = (
   if (((((zopz0zIzJ_u ((plat_ram_base ()   ::  64 Word.word)) addr)) \<and> ((zopz0zIzJ_u ((add_vec_int addr width  ::  64 Word.word))
              ((add_vec ((plat_ram_base ()   ::  64 Word.word)) ((plat_ram_size ()   ::  64 Word.word))
                 ::  64 Word.word))))))) then
     True
   else if (((((zopz0zIzJ_u ((plat_rom_base ()   ::  64 Word.word)) addr)) \<and> ((zopz0zIzJ_u ((add_vec_int addr width  ::  64 Word.word))
                   ((add_vec ((plat_rom_base ()   ::  64 Word.word)) ((plat_rom_size ()   ::  64 Word.word))
                      ::  64 Word.word))))))) then
     True
   else False )"


(*val within_clint : mword ty64 -> integer -> bool*)

definition within_clint  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_clint (addr :: xlenbits) (width :: int) = (
   (((zopz0zIzJ_u ((plat_clint_base ()   ::  64 Word.word)) addr)) \<and> ((zopz0zIzJ_u ((add_vec_int addr width  ::  64 Word.word))
         ((add_vec ((plat_clint_base ()   ::  64 Word.word)) ((plat_clint_size ()   ::  64 Word.word))
            ::  64 Word.word))))))"


(*val within_htif_writable : mword ty64 -> integer -> bool*)

definition within_htif_writable  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_htif_writable (addr :: xlenbits) (width :: int) = (
   (((plat_htif_tohost ()   ::  64 Word.word)) = addr))"


(*val within_htif_readable : mword ty64 -> integer -> bool*)

definition within_htif_readable  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_htif_readable (addr :: xlenbits) (width :: int) = (
   (((plat_htif_tohost ()   ::  64 Word.word)) = addr))"


definition MSIP_BASE  :: "(64)Word.word "  where 
     " MSIP_BASE = (
  (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                B0,B0,B0,B0,B0,B0,B0,B0]
    ::  64 Word.word))"


definition MTIMECMP_BASE  :: "(64)Word.word "  where 
     " MTIMECMP_BASE = (
  (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,
                B0,B0,B0,B0,B0,B0,B0,B0]
    ::  64 Word.word))"


definition MTIME_BASE  :: "(64)Word.word "  where 
     " MTIME_BASE = (
  (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0,B1,B1,B1,B1,B1,B1,
                B1,B1,B1,B1,B1,B0,B0,B0]
    ::  64 Word.word))"


(*val clint_load : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

definition clint_load  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " clint_load addr width = (
   (let addr = ((sub_vec addr ((plat_clint_base ()   ::  64 Word.word))  ::  64 Word.word)) in
   if ((((((addr = MSIP_BASE))) \<and> ((((((width = (( 8 :: int)::ii)))) \<or> (((width = (( 4 :: int)::ii))))))))))
   then
     read_reg mip_ref \<bind> (\<lambda> (w__0 :: Minterrupts) . 
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr))
                 (((op@) (''] -> '')
                     ((string_of_bits ((get_Minterrupts_MSI w__0  ::  1 Word.word))))))))))) in
     read_reg mip_ref \<bind> (\<lambda> (w__1 :: Minterrupts) . 
     return (MemValue ((zero_extend ((get_Minterrupts_MSI w__1  ::  1 Word.word))
                          (((( 8 :: int)::ii) * width))
                         :: ( 'int8_times_n::len)Word.word))))))
   else if ((((((addr = MTIMECMP_BASE))) \<and> (((width = (( 8 :: int)::ii))))))) then
     (read_reg mtimecmp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 :: xlenbits) . 
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr)) (((op@) (''] -> '') ((string_of_bits w__2))))))))) in
     (read_reg mtimecmp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 :: xlenbits) . 
     return (MemValue ((zero_extend w__3 (( 64 :: int)::ii)  :: ( 'int8_times_n::len)Word.word))))))
   else if ((((((addr = MTIME_BASE))) \<and> (((width = (( 8 :: int)::ii))))))) then
     (read_reg mtime_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__4 :: xlenbits) . 
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr)) (((op@) (''] -> '') ((string_of_bits w__4))))))))) in
     (read_reg mtime_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__5 :: xlenbits) . 
     return (MemValue ((zero_extend w__5 (( 64 :: int)::ii)  :: ( 'int8_times_n::len)Word.word))))))
   else
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['') (((op@) ((string_of_bits addr)) (''] -> <not-mapped>'')))))) in
     return (MemException E_Load_Access_Fault))))"


(*val clint_dispatch : unit -> M unit*)

definition clint_dispatch  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " clint_dispatch _ = (
   (read_reg mtime_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
   (let (_ :: unit) = (print_endline (((op@) (''clint::tick mtime <- '') ((string_of_bits w__0))))) in
   (set_Minterrupts_MTI mip_ref ((bool_to_bits False  ::  1 Word.word)) \<then>
   (read_reg mtimecmp_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__1 :: xlenbits) . 
   (read_reg mtime_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 ::  64 Word.word) . 
   if ((zopz0zIzJ_u w__1 w__2)) then
     (read_reg mtime_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 :: xlenbits) . 
     (let (_ :: unit) =
       (print_endline (((op@) ('' clint timer pending at mtime '') ((string_of_bits w__3))))) in
     set_Minterrupts_MTI mip_ref ((bool_to_bits True  ::  1 Word.word))))
   else return () )))))"


(*val clint_store : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition clint_store  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " clint_store addr width data = (
   (let addr = ((sub_vec addr ((plat_clint_base ()   ::  64 Word.word))  ::  64 Word.word)) in
   if ((((((addr = MSIP_BASE))) \<and> ((((((width = (( 8 :: int)::ii)))) \<or> (((width = (( 4 :: int)::ii))))))))))
   then
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr))
                 (((op@) (''] <- '')
                     (((op@) ((string_of_bits data))
                         (((op@) ('' (mip.MSI <- '')
                             (((op@)
                                 ((string_of_bits
                                     ((cast_unit_vec0 ((access_vec_dec data (( 0 :: int)::ii)))  ::  1 Word.word))))
                                 ('')'')))))))))))))) in
     (set_Minterrupts_MSI mip_ref
       ((bool_to_bits
           (((((cast_unit_vec0 ((access_vec_dec data (( 0 :: int)::ii)))  ::  1 Word.word)) = (vec_of_bits [B1]  ::  1 Word.word))))
          ::  1 Word.word)) \<then>
     clint_dispatch () ) \<then> return (MemValue () ))
   else if ((((((addr = MTIMECMP_BASE))) \<and> (((width = (( 8 :: int)::ii))))))) then
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr))
                 (((op@) (''] <- '') (((op@) ((string_of_bits data)) ('' (mtimecmp)'')))))))))) in
     (write_reg mtimecmp_ref ((zero_extend data (( 64 :: int)::ii)  ::  64 Word.word)) \<then>
     clint_dispatch () ) \<then> return (MemValue () ))
   else
     (let (_ :: unit) =
       (print_endline
         (((op@) (''clint['')
             (((op@) ((string_of_bits addr))
                 (((op@) (''] <- '') (((op@) ((string_of_bits data)) ('' (<unmapped>)'')))))))))) in
     return (MemException E_SAMO_Access_Fault))))"


(*val tick_clock : unit -> M unit*)

definition tick_clock  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " tick_clock _ = (
   (read_reg mcycle_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (write_reg mcycle_ref ((add_vec_int w__0 (( 1 :: int)::ii)  ::  64 Word.word)) \<then>
   (read_reg mtime_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   write_reg mtime_ref ((add_vec_int w__1 (( 1 :: int)::ii)  ::  64 Word.word)) \<then> clint_dispatch () )))"


(*val Mk_htif_cmd : mword ty64 -> htif_cmd*)

definition Mk_htif_cmd  :: "(64)Word.word \<Rightarrow> htif_cmd "  where 
     " Mk_htif_cmd v = (
   (| htif_cmd_htif_cmd_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


(*val _get_htif_cmd_bits : htif_cmd -> mword ty64*)

definition get_htif_cmd_bits  :: " htif_cmd \<Rightarrow>(64)Word.word "  where 
     " get_htif_cmd_bits v = (
   (subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


(*val _set_htif_cmd_bits : register_ref regstate register_value htif_cmd -> mword ty64 -> M unit*)

definition set_htif_cmd_bits  :: "((regstate),(register_value),(htif_cmd))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_htif_cmd_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_htif_cmd_bits : htif_cmd -> mword ty64 -> htif_cmd*)

definition update_htif_cmd_bits  :: " htif_cmd \<Rightarrow>(64)Word.word \<Rightarrow> htif_cmd "  where 
     " update_htif_cmd_bits v x = (
   (v (|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


(*val _get_htif_cmd_device : htif_cmd -> mword ty8*)

definition get_htif_cmd_device  :: " htif_cmd \<Rightarrow>(8)Word.word "  where 
     " get_htif_cmd_device v = (
   (subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 63 :: int)::ii) (( 56 :: int)::ii)  ::  8 Word.word))"


(*val _set_htif_cmd_device : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

definition set_htif_cmd_device  :: "((regstate),(register_value),(htif_cmd))register_ref \<Rightarrow>(8)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_htif_cmd_device r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   r) (( 63 :: int)::ii) (( 56 :: int)::ii)
             ((subrange_vec_dec v (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_htif_cmd_device : htif_cmd -> mword ty8 -> htif_cmd*)

definition update_htif_cmd_device  :: " htif_cmd \<Rightarrow>(8)Word.word \<Rightarrow> htif_cmd "  where 
     " update_htif_cmd_device v x = (
   (v (|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 63 :: int)::ii) (( 56 :: int)::ii)
           ((subrange_vec_dec x (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
          ::  64 Word.word))|)))"


(*val _get_htif_cmd_cmd : htif_cmd -> mword ty8*)

definition get_htif_cmd_cmd  :: " htif_cmd \<Rightarrow>(8)Word.word "  where 
     " get_htif_cmd_cmd v = (
   (subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 55 :: int)::ii) (( 48 :: int)::ii)  ::  8 Word.word))"


(*val _set_htif_cmd_cmd : register_ref regstate register_value htif_cmd -> mword ty8 -> M unit*)

definition set_htif_cmd_cmd  :: "((regstate),(register_value),(htif_cmd))register_ref \<Rightarrow>(8)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_htif_cmd_cmd r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   r) (( 55 :: int)::ii) (( 48 :: int)::ii)
             ((subrange_vec_dec v (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_htif_cmd_cmd : htif_cmd -> mword ty8 -> htif_cmd*)

definition update_htif_cmd_cmd  :: " htif_cmd \<Rightarrow>(8)Word.word \<Rightarrow> htif_cmd "  where 
     " update_htif_cmd_cmd v x = (
   (v (|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 55 :: int)::ii) (( 48 :: int)::ii)
           ((subrange_vec_dec x (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
          ::  64 Word.word))|)))"


(*val _get_htif_cmd_payload : htif_cmd -> mword ty48*)

definition get_htif_cmd_payload  :: " htif_cmd \<Rightarrow>(48)Word.word "  where 
     " get_htif_cmd_payload v = (
   (subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 47 :: int)::ii) (( 0 :: int)::ii)  ::  48 Word.word))"


(*val _set_htif_cmd_payload : register_ref regstate register_value htif_cmd -> mword ty48 -> M unit*)

definition set_htif_cmd_payload  :: "((regstate),(register_value),(htif_cmd))register_ref \<Rightarrow>(48)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_htif_cmd_payload r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       htif_cmd_htif_cmd_chunk_0 :=
         ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   r) (( 47 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 47 :: int)::ii) (( 0 :: int)::ii)  ::  48 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_htif_cmd_payload : htif_cmd -> mword ty48 -> htif_cmd*)

definition update_htif_cmd_payload  :: " htif_cmd \<Rightarrow>(48)Word.word \<Rightarrow> htif_cmd "  where 
     " update_htif_cmd_payload v x = (
   (v (|
     htif_cmd_htif_cmd_chunk_0 :=
       ((update_subrange_vec_dec(htif_cmd_htif_cmd_chunk_0   v) (( 47 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 47 :: int)::ii) (( 0 :: int)::ii)  ::  48 Word.word))
          ::  64 Word.word))|)))"


(*val htif_load : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

definition htif_load  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " htif_load addr width = (
   (read_reg htif_tohost_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
   (let (_ :: unit) =
     (print_endline
       (((op@) (''htif['')
           (((op@) ((string_of_bits addr)) (((op@) (''] -> '') ((string_of_bits w__0))))))))) in
   if (((width = (( 8 :: int)::ii)))) then
     (read_reg htif_tohost_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 :: xlenbits) . 
     return (MemValue ((zero_extend w__1 (( 64 :: int)::ii)  :: ( 'int8_times_n::len)Word.word))))
   else return (MemException E_Load_Access_Fault))))"


(*val htif_store : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition htif_store  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " htif_store addr width data = (
   (let (_ :: unit) =
     (print_endline
       (((op@) (''htif['')
           (((op@) ((string_of_bits addr)) (((op@) (''] <- '') ((string_of_bits data))))))))) in
   (let (cbits :: xlenbits) = ((EXTZ (( 64 :: int)::ii) data  ::  64 Word.word)) in
   write_reg htif_tohost_ref cbits \<then>
   ((let cmd = (Mk_htif_cmd cbits) in
   (let b__0 = ((get_htif_cmd_device cmd  ::  8 Word.word)) in
   (if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word)))) then
      (let (_ :: unit) =
        (print_endline
          (((op@) (''htif-syscall-proxy cmd: '')
              ((string_of_bits ((get_htif_cmd_payload cmd  ::  48 Word.word))))))) in
      if (((((cast_unit_vec0 ((access_vec_dec ((get_htif_cmd_payload cmd  ::  48 Word.word)) (( 0 :: int)::ii)))
                ::  1 Word.word)) = (vec_of_bits [B1]  ::  1 Word.word)))) then
        write_reg htif_done_ref True \<then>
        write_reg
          htif_exit_code_ref
          ((shift_bits_right
              ((zero_extend ((get_htif_cmd_payload cmd  ::  48 Word.word)) xlen  ::  64 Word.word))
              (vec_of_bits [B0,B1]  ::  2 Word.word)
             ::  64 Word.word))
      else return () )
    else
      return (if (((b__0 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B1]  ::  8 Word.word)))) then
                (let (_ :: unit) =
                  (print_endline
                    (((op@) (''htif-term cmd: '')
                        ((string_of_bits ((get_htif_cmd_payload cmd  ::  48 Word.word))))))) in
                (let b__2 = ((get_htif_cmd_cmd cmd  ::  8 Word.word)) in
                if (((b__2 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word)))) then () 
                else if (((b__2 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B1]  ::  8 Word.word)))) then
                  plat_term_write
                    ((subrange_vec_dec ((get_htif_cmd_payload cmd  ::  48 Word.word)) (( 7 :: int)::ii) (( 0 :: int)::ii)
                       ::  8 Word.word))
                else print_endline (((op@) (''Unknown term cmd: '') ((string_of_bits b__2))))))
              else print_endline (((op@) (''htif-???? cmd: '') ((string_of_bits data)))))) \<then>
   return (MemValue () )))))))"


(*val htif_tick : unit -> M unit*)

definition htif_tick  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " htif_tick _ = (
   (read_reg htif_tohost_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
   (let (_ :: unit) = (print_endline (((op@) (''htif::tick '') ((string_of_bits w__0))))) in
   write_reg htif_tohost_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word)))))"


(*val within_mmio_readable : mword ty64 -> integer -> bool*)

definition within_mmio_readable  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_mmio_readable (addr :: xlenbits) (width :: int) = (
   (((within_clint addr width)) \<or> (((((within_htif_readable addr width)) \<and> (((( 1 :: int)::ii) \<le> width)))))))"


(*val within_mmio_writable : mword ty64 -> integer -> bool*)

definition within_mmio_writable  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " within_mmio_writable (addr :: xlenbits) (width :: int) = (
   (((within_clint addr width)) \<or> (((((within_htif_writable addr width)) \<and> ((width \<le> (( 8 :: int)::ii))))))))"


(*val mmio_read : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

definition mmio_read  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " mmio_read (addr :: xlenbits) (width :: int) = (
   if ((within_clint addr width)) then
     (clint_load addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
   else if (((((within_htif_readable addr width)) \<and> (((( 1 :: int)::ii) \<le> width))))) then
     (htif_load addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
   else return (MemException E_Load_Access_Fault))"


(*val mmio_write : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition mmio_write  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " mmio_write (addr :: xlenbits) (width :: int) (data :: 'int8_times_n bits) = (
   if ((within_clint addr width)) then clint_store addr width data
   else if (((((within_htif_writable addr width)) \<and> ((width \<le> (( 8 :: int)::ii)))))) then
     htif_store addr width data
   else return (MemException E_SAMO_Access_Fault))"


(*val init_platform : unit -> M unit*)

definition init_platform  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " init_platform _ = (
   (write_reg htif_tohost_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word)) \<then>
   write_reg htif_done_ref False) \<then>
   write_reg htif_exit_code_ref ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word)))"


(*val tick_platform : unit -> M unit*)

definition tick_platform  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " tick_platform _ = (
   (let (_ :: unit) = (cancel_reservation () ) in
   htif_tick () ))"


(*val is_aligned_addr : mword ty64 -> integer -> bool*)

definition is_aligned_addr  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool "  where 
     " is_aligned_addr (addr :: xlenbits) (width :: int) = (
   (((ex_int ((hardware_mod ((Word.uint addr)) width)))) = (( 0 :: int)::ii)))"


(*val phys_mem_read : forall 'int8_times_n. Size 'int8_times_n => ReadType -> mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

definition phys_mem_read  :: " ReadType \<Rightarrow>(64)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " phys_mem_read (t :: ReadType) (addr :: xlenbits) (width :: int) (aq :: bool) (rl :: bool) (res ::
  bool) = (
   (RISCV_read addr width aq rl res  :: ( (( 'int8_times_n::len)Word.word)option) M) \<bind> (\<lambda> (w__0 ::
      (( 'int8_times_n::len)Word.word)option) . 
   return ((case  (t, w__0) of
     (Instruction, None) => MemException E_Fetch_Access_Fault
   | (Data, None) => MemException E_Load_Access_Fault
   | (_, Some (v)) =>
      (let (_ :: unit) =
        (print_endline
          (((op@) (''mem['')
              (((op@) ((readType_to_str t))
                  (((op@) ('','')
                      (((op@) ((string_of_bits addr))
                          (((op@) (''] -> '') ((string_of_bits v))))))))))))) in
      MemValue v)
   ))))"


(*val checked_mem_read : forall 'int8_times_n. Size 'int8_times_n => ReadType -> mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

definition checked_mem_read  :: " ReadType \<Rightarrow>(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " checked_mem_read (t :: ReadType) (addr :: xlenbits) (width :: int) = (
   if ((((((((readType_to_str t)) = ((readType_to_str Data))))) \<and> ((within_mmio_readable addr width))))) then
     (mmio_read addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
   else if ((within_phys_mem addr width)) then
     (phys_mem_read t addr width False False False  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
   else return (MemException E_Load_Access_Fault))"


(*val MEMr : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_strong_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

(*val MEMr_reserved_strong_acquire : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> M (MemoryOpResult (mword 'int8_times_n))*)

definition MEMr0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr0 addr width = ( (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


definition MEMr_acquire0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr_acquire0 addr width = (
   (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


definition MEMr_strong_acquire0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr_strong_acquire0 addr width = (
   (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


definition MEMr_reserved0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr_reserved0 addr width = (
   (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


definition MEMr_reserved_acquire0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr_reserved_acquire0 addr width = (
   (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


definition MEMr_reserved_strong_acquire0  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " MEMr_reserved_strong_acquire0 addr width = (
   (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M))"


(*val mem_read : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult (mword 'int8_times_n))*)

definition mem_read  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),((('int8_times_n::len)Word.word)MemoryOpResult),(exception))monad "  where 
     " mem_read addr width aq rl res = (
   if ((((((aq \<or> res))) \<and> ((\<not> ((is_aligned_addr addr width))))))) then
     return (MemException E_Load_Addr_Align)
   else
     (case  (aq, rl, res) of
       (False, False, False) =>
        (checked_mem_read Data addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     | (True, False, False) => (MEMr_acquire0 addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     | (False, False, True) =>
        (MEMr_reserved0 addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     | (True, False, True) =>
        (MEMr_reserved_acquire0 addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     | (False, True, False) => throw (Error_not_implemented (''load.rl''))
     | (True, True, False) =>
        (MEMr_strong_acquire0 addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     | (False, True, True) => throw (Error_not_implemented (''lr.rl''))
     | (True, True, True) =>
        (MEMr_reserved_strong_acquire0 addr width  :: ( (( 'int8_times_n::len)Word.word)MemoryOpResult) M)
     ))"


(*val mem_write_ea : mword ty64 -> integer -> bool -> bool -> bool -> M (MemoryOpResult unit)*)

definition mem_write_ea  :: "(64)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " mem_write_ea addr width aq rl con = (
   if ((((((rl \<or> con))) \<and> ((\<not> ((is_aligned_addr addr width))))))) then
     return (MemException E_SAMO_Addr_Align)
   else
     (case  (aq, rl, con) of
       (False, False, False) => MEMea addr width \<then> return (MemValue () )
     | (False, True, False) => MEMea_release addr width \<then> return (MemValue () )
     | (False, False, True) => MEMea_conditional addr width \<then> return (MemValue () )
     | (False, True, True) => MEMea_conditional_release addr width \<then> return (MemValue () )
     | (True, False, False) => throw (Error_not_implemented (''store.aq''))
     | (True, True, False) => MEMea_strong_release addr width \<then> return (MemValue () )
     | (True, False, True) => throw (Error_not_implemented (''sc.aq''))
     | (True, True, True) => MEMea_conditional_strong_release addr width \<then> return (MemValue () )
     ))"


(*val phys_mem_write : forall 'int8_times_n. Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition phys_mem_write  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " phys_mem_write (addr :: xlenbits) (width :: int) (data :: 'int8_times_n bits) = (
   (let (_ :: unit) =
     (print_endline
       (((op@) (''mem['')
           (((op@) ((string_of_bits addr)) (((op@) (''] <- '') ((string_of_bits data))))))))) in
   RISCV_write addr width data \<bind> (\<lambda> (w__0 :: bool) . 
   return (if w__0 then MemValue () 
           else MemException E_SAMO_Access_Fault))))"


(*val checked_mem_write : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition checked_mem_write  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " checked_mem_write (addr :: xlenbits) (width :: int) (data :: 'int8_times_n bits) = (
   if ((within_mmio_writable addr width)) then mmio_write addr width data
   else if ((within_phys_mem addr width)) then phys_mem_write addr width data
   else return (MemException E_SAMO_Access_Fault))"


(*val MEMval : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_strong_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

(*val MEMval_conditional_strong_release : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> M (MemoryOpResult unit)*)

definition MEMval  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval addr width data = ( checked_mem_write addr width data )"


definition MEMval_release  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval_release addr width data = ( checked_mem_write addr width data )"


definition MEMval_strong_release  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval_strong_release addr width data = ( checked_mem_write addr width data )"


definition MEMval_conditional  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval_conditional addr width data = ( checked_mem_write addr width data )"


definition MEMval_conditional_release  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval_conditional_release addr width data = ( checked_mem_write addr width data )"


definition MEMval_conditional_strong_release  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " MEMval_conditional_strong_release addr width data = ( checked_mem_write addr width data )"


(*val mem_write_value : forall 'int8_times_n . Size 'int8_times_n => mword ty64 -> integer -> mword 'int8_times_n -> bool -> bool -> bool -> M (MemoryOpResult unit)*)

definition mem_write_value  :: "(64)Word.word \<Rightarrow> int \<Rightarrow>('int8_times_n::len)Word.word \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),((unit)MemoryOpResult),(exception))monad "  where 
     " mem_write_value addr width value1 aq rl con = (
   if ((((((rl \<or> con))) \<and> ((\<not> ((is_aligned_addr addr width))))))) then
     return (MemException E_SAMO_Addr_Align)
   else
     (case  (aq, rl, con) of
       (False, False, False) => checked_mem_write addr width value1
     | (False, True, False) => MEMval_release addr width value1
     | (False, False, True) => MEMval_conditional addr width value1
     | (False, True, True) => MEMval_conditional_release addr width value1
     | (True, False, False) => throw (Error_not_implemented (''store.aq''))
     | (True, True, False) => MEMval_strong_release addr width value1
     | (True, False, True) => throw (Error_not_implemented (''sc.aq''))
     | (True, True, True) => MEMval_conditional_strong_release addr width value1
     ))"


definition PAGESIZE_BITS  :: " int "  where 
     " PAGESIZE_BITS = ( (( 12 :: int)::ii))"


(*val Mk_PTE_Bits : mword ty8 -> PTE_Bits*)

definition Mk_PTE_Bits  :: "(8)Word.word \<Rightarrow> PTE_Bits "  where 
     " Mk_PTE_Bits v = (
   (| PTE_Bits_PTE_Bits_chunk_0 = ((subrange_vec_dec v (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word)) |) )"


(*val _get_PTE_Bits_bits : PTE_Bits -> mword ty8*)

definition get_PTE_Bits_bits  :: " PTE_Bits \<Rightarrow>(8)Word.word "  where 
     " get_PTE_Bits_bits v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))"


(*val _set_PTE_Bits_bits : register_ref regstate register_value PTE_Bits -> mword ty8 -> M unit*)

definition set_PTE_Bits_bits  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(8)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 7 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_PTE_Bits_bits : PTE_Bits -> mword ty8 -> PTE_Bits*)

definition update_PTE_Bits_bits  :: " PTE_Bits \<Rightarrow>(8)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_bits v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 7 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_D  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_D v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_D  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_D r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 7 :: int)::ii) (( 7 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_D  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_D v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 7 :: int)::ii) (( 7 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_A  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_A v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_A  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_A r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 6 :: int)::ii) (( 6 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_A  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_A v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 6 :: int)::ii) (( 6 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_G  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_G v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_G  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_G r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 5 :: int)::ii) (( 5 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_G  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_G v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 5 :: int)::ii) (( 5 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_U  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_U v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_U  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_U r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 4 :: int)::ii) (( 4 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_U  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_U v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 4 :: int)::ii) (( 4 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_X  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_X v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_X  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_X r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 3 :: int)::ii) (( 3 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_X  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_X v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 3 :: int)::ii) (( 3 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_W  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_W v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_W  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_W r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 2 :: int)::ii) (( 2 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_W  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_W v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 2 :: int)::ii) (( 2 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_R  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_R v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_R  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_R r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 1 :: int)::ii) (( 1 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_R  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_R v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 1 :: int)::ii) (( 1 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


definition get_PTE_Bits_V  :: " PTE_Bits \<Rightarrow>(1)Word.word "  where 
     " get_PTE_Bits_V v = ( (subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))"


definition set_PTE_Bits_V  :: "((regstate),(register_value),(PTE_Bits))register_ref \<Rightarrow>(1)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_PTE_Bits_V r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       PTE_Bits_PTE_Bits_chunk_0 :=
         ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   r) (( 0 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
            ::  8 Word.word))|))) in
   write_reg r_ref r)))"


definition update_PTE_Bits_V  :: " PTE_Bits \<Rightarrow>(1)Word.word \<Rightarrow> PTE_Bits "  where 
     " update_PTE_Bits_V v x = (
   (v (|
     PTE_Bits_PTE_Bits_chunk_0 :=
       ((update_subrange_vec_dec(PTE_Bits_PTE_Bits_chunk_0   v) (( 0 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word))
          ::  8 Word.word))|)))"


(*val isPTEPtr : mword ty8 -> bool*)

definition isPTEPtr  :: "(8)Word.word \<Rightarrow> bool "  where 
     " isPTEPtr p = (
   (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_R a  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<and> ((((((((get_PTE_Bits_W a  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<and> (((((get_PTE_Bits_X a  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word)))))))))))"


(*val isInvalidPTE : mword ty8 -> bool*)

definition isInvalidPTE  :: "(8)Word.word \<Rightarrow> bool "  where 
     " isInvalidPTE p = (
   (let a = (Mk_PTE_Bits p) in
   ((((((get_PTE_Bits_V a  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<or> ((((((((get_PTE_Bits_W a  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> (((((get_PTE_Bits_R a  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word)))))))))))"


(*val checkPTEPermission : AccessType -> Privilege -> bool -> bool -> PTE_Bits -> M bool*)

fun checkPTEPermission  :: " AccessType \<Rightarrow> Privilege \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> PTE_Bits \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " checkPTEPermission (Read :: AccessType) (User :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return ((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> ((((((((get_PTE_Bits_R p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> ((((((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> mxr))))))))))"
|" checkPTEPermission (Write :: AccessType) (User :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return ((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> (((((get_PTE_Bits_W p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))))"
|" checkPTEPermission (ReadWrite :: AccessType) (User :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return ((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> ((((((((get_PTE_Bits_W p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> ((((((((get_PTE_Bits_R p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> ((((((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> mxr)))))))))))))"
|" checkPTEPermission (Execute :: AccessType) (User :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return ((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> (((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))))"
|" checkPTEPermission (Read :: AccessType) (Supervisor :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return (((((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<or> do_sum))) \<and> ((((((((get_PTE_Bits_R p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> ((((((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> mxr))))))))))"
|" checkPTEPermission (Write :: AccessType) (Supervisor :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return (((((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<or> do_sum))) \<and> (((((get_PTE_Bits_W p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))))"
|" checkPTEPermission (ReadWrite :: AccessType) (Supervisor :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return (((((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<or> do_sum))) \<and> ((((((((get_PTE_Bits_W p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> ((((((((get_PTE_Bits_R p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> ((((((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<and> mxr)))))))))))))"
|" checkPTEPermission (Execute :: AccessType) (Supervisor :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = (
      return ((((((((get_PTE_Bits_U p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) \<and> (((((get_PTE_Bits_X p  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))))"
|" checkPTEPermission (_ :: AccessType) (Machine :: Privilege) (mxr :: bool) (do_sum :: bool) (p ::
  PTE_Bits) = ( internal_error (''m-mode mem perm check''))"


(*val update_PTE_Bits : PTE_Bits -> AccessType -> maybe PTE_Bits*)

definition update_PTE_Bits  :: " PTE_Bits \<Rightarrow> AccessType \<Rightarrow>(PTE_Bits)option "  where 
     " update_PTE_Bits (p :: PTE_Bits) (a :: AccessType) = (
   (let update_d =
     (((((((((accessType_to_str a)) = ((accessType_to_str Write))))) \<or> (((((accessType_to_str a)) = ((accessType_to_str ReadWrite)))))))) \<and> (((((get_PTE_Bits_D p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word)))))) in
   (let update_a = (((get_PTE_Bits_A p  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))) in
   if (((update_d \<or> update_a))) then
     (let np = (update_PTE_Bits_A p ((bool_to_bits True  ::  1 Word.word))) in
     (let np = (if update_d then update_PTE_Bits_D p ((bool_to_bits True  ::  1 Word.word)) else np) in
     Some np))
   else None)))"


(*val PTW_Error_of_num : integer -> PTW_Error*)

definition PTW_Error_of_num  :: " int \<Rightarrow> PTW_Error "  where 
     " PTW_Error_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then PTW_Access
   else if (((p00 = (( 1 :: int)::ii)))) then PTW_Invalid_PTE
   else if (((p00 = (( 2 :: int)::ii)))) then PTW_No_Permission
   else if (((p00 = (( 3 :: int)::ii)))) then PTW_Misaligned
   else PTW_PTE_Update))"


(*val num_of_PTW_Error : PTW_Error -> integer*)

fun num_of_PTW_Error  :: " PTW_Error \<Rightarrow> int "  where 
     " num_of_PTW_Error PTW_Access = ( (( 0 :: int)::ii))"
|" num_of_PTW_Error PTW_Invalid_PTE = ( (( 1 :: int)::ii))"
|" num_of_PTW_Error PTW_No_Permission = ( (( 2 :: int)::ii))"
|" num_of_PTW_Error PTW_Misaligned = ( (( 3 :: int)::ii))"
|" num_of_PTW_Error PTW_PTE_Update = ( (( 4 :: int)::ii))"


(*val ptw_error_to_str : PTW_Error -> string*)

fun ptw_error_to_str  :: " PTW_Error \<Rightarrow> string "  where 
     " ptw_error_to_str PTW_Access = ( (''mem-access-error''))"
|" ptw_error_to_str PTW_Invalid_PTE = ( (''invalid-pte''))"
|" ptw_error_to_str PTW_No_Permission = ( (''no-permission''))"
|" ptw_error_to_str PTW_Misaligned = ( (''misaligned-superpage''))"
|" ptw_error_to_str PTW_PTE_Update = ( (''pte-update-needed''))"


(*val translationException : AccessType -> PTW_Error -> ExceptionType*)

definition translationException  :: " AccessType \<Rightarrow> PTW_Error \<Rightarrow> ExceptionType "  where 
     " translationException (a :: AccessType) (f :: PTW_Error) = (
   (let (e :: ExceptionType) =
     ((case  (a, f) of
       (ReadWrite, PTW_Access) => E_SAMO_Access_Fault
     | (ReadWrite, _) => E_SAMO_Page_Fault
     | (Read, PTW_Access) => E_Load_Access_Fault
     | (Read, _) => E_Load_Page_Fault
     | (Write, PTW_Access) => E_SAMO_Access_Fault
     | (Write, _) => E_SAMO_Page_Fault
     | (Fetch, PTW_Access) => E_Fetch_Access_Fault
     | (Fetch, _) => E_Fetch_Page_Fault
     )) in
   (let (_ :: unit) =
     (print_endline
       (((op@) (''translationException('')
           (((op@) ((accessType_to_str a))
               (((op@) ('', '')
                   (((op@) ((ptw_error_to_str f))
                       (((op@) ('') -> '') ((exceptionType_to_str e))))))))))))) in
   e)))"


definition SV39_LEVEL_BITS  :: " int "  where 
     " SV39_LEVEL_BITS = ( (( 9 :: int)::ii))"


definition SV39_LEVELS  :: " int "  where 
     " SV39_LEVELS = ( (( 3 :: int)::ii))"


definition PTE39_LOG_SIZE  :: " int "  where 
     " PTE39_LOG_SIZE = ( (( 3 :: int)::ii))"


definition PTE39_SIZE  :: " int "  where 
     " PTE39_SIZE = ( (( 8 :: int)::ii))"


(*val Mk_SV39_Vaddr : mword ty39 -> SV39_Vaddr*)

definition Mk_SV39_Vaddr  :: "(39)Word.word \<Rightarrow> SV39_Vaddr "  where 
     " Mk_SV39_Vaddr v = (
   (| SV39_Vaddr_SV39_Vaddr_chunk_0 = ((subrange_vec_dec v (( 38 :: int)::ii) (( 0 :: int)::ii)  ::  39 Word.word)) |) )"


(*val _get_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39*)

definition get_SV39_Vaddr_bits  :: " SV39_Vaddr \<Rightarrow>(39)Word.word "  where 
     " get_SV39_Vaddr_bits v = (
   (subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 38 :: int)::ii) (( 0 :: int)::ii)  ::  39 Word.word))"


(*val _set_SV39_Vaddr_bits : register_ref regstate register_value SV39_Vaddr -> mword ty39 -> M unit*)

definition set_SV39_Vaddr_bits  :: "((regstate),(register_value),(SV39_Vaddr))register_ref \<Rightarrow>(39)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Vaddr_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   r) (( 38 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 38 :: int)::ii) (( 0 :: int)::ii)  ::  39 Word.word))
            ::  39 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_Vaddr_bits : SV39_Vaddr -> mword ty39 -> SV39_Vaddr*)

definition update_SV39_Vaddr_bits  :: " SV39_Vaddr \<Rightarrow>(39)Word.word \<Rightarrow> SV39_Vaddr "  where 
     " update_SV39_Vaddr_bits v x = (
   (v (|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 38 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 38 :: int)::ii) (( 0 :: int)::ii)  ::  39 Word.word))
          ::  39 Word.word))|)))"


(*val _get_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27*)

definition get_SV39_Vaddr_VPNi  :: " SV39_Vaddr \<Rightarrow>(27)Word.word "  where 
     " get_SV39_Vaddr_VPNi v = (
   (subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 38 :: int)::ii) (( 12 :: int)::ii)  ::  27 Word.word))"


(*val _set_SV39_Vaddr_VPNi : register_ref regstate register_value SV39_Vaddr -> mword ty27 -> M unit*)

definition set_SV39_Vaddr_VPNi  :: "((regstate),(register_value),(SV39_Vaddr))register_ref \<Rightarrow>(27)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Vaddr_VPNi r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   r) (( 38 :: int)::ii) (( 12 :: int)::ii)
             ((subrange_vec_dec v (( 26 :: int)::ii) (( 0 :: int)::ii)  ::  27 Word.word))
            ::  39 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_Vaddr_VPNi : SV39_Vaddr -> mword ty27 -> SV39_Vaddr*)

definition update_SV39_Vaddr_VPNi  :: " SV39_Vaddr \<Rightarrow>(27)Word.word \<Rightarrow> SV39_Vaddr "  where 
     " update_SV39_Vaddr_VPNi v x = (
   (v (|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 38 :: int)::ii) (( 12 :: int)::ii)
           ((subrange_vec_dec x (( 26 :: int)::ii) (( 0 :: int)::ii)  ::  27 Word.word))
          ::  39 Word.word))|)))"


(*val _get_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12*)

definition get_SV39_Vaddr_PgOfs  :: " SV39_Vaddr \<Rightarrow>(12)Word.word "  where 
     " get_SV39_Vaddr_PgOfs v = (
   (subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))"


(*val _set_SV39_Vaddr_PgOfs : register_ref regstate register_value SV39_Vaddr -> mword ty12 -> M unit*)

definition set_SV39_Vaddr_PgOfs  :: "((regstate),(register_value),(SV39_Vaddr))register_ref \<Rightarrow>(12)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Vaddr_PgOfs r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Vaddr_SV39_Vaddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   r) (( 11 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))
            ::  39 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_Vaddr_PgOfs : SV39_Vaddr -> mword ty12 -> SV39_Vaddr*)

definition update_SV39_Vaddr_PgOfs  :: " SV39_Vaddr \<Rightarrow>(12)Word.word \<Rightarrow> SV39_Vaddr "  where 
     " update_SV39_Vaddr_PgOfs v x = (
   (v (|
     SV39_Vaddr_SV39_Vaddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Vaddr_SV39_Vaddr_chunk_0   v) (( 11 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))
          ::  39 Word.word))|)))"


(*val _update_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12 -> SV39_Paddr*)

(*val _get_SV39_Paddr_PgOfs : SV39_Paddr -> mword ty12*)

(*val _set_SV39_Paddr_PgOfs : register_ref regstate register_value SV39_Paddr -> mword ty12 -> M unit*)

(*val Mk_SV39_Paddr : mword ty56 -> SV39_Paddr*)

definition Mk_SV39_Paddr  :: "(56)Word.word \<Rightarrow> SV39_Paddr "  where 
     " Mk_SV39_Paddr v = (
   (| SV39_Paddr_SV39_Paddr_chunk_0 = ((subrange_vec_dec v (( 55 :: int)::ii) (( 0 :: int)::ii)  ::  56 Word.word)) |) )"


(*val _get_SV39_Paddr_bits : SV39_Paddr -> mword ty56*)

definition get_SV39_Paddr_bits  :: " SV39_Paddr \<Rightarrow>(56)Word.word "  where 
     " get_SV39_Paddr_bits v = (
   (subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 55 :: int)::ii) (( 0 :: int)::ii)  ::  56 Word.word))"


(*val _set_SV39_Paddr_bits : register_ref regstate register_value SV39_Paddr -> mword ty56 -> M unit*)

definition set_SV39_Paddr_bits  :: "((regstate),(register_value),(SV39_Paddr))register_ref \<Rightarrow>(56)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Paddr_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   r) (( 55 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 55 :: int)::ii) (( 0 :: int)::ii)  ::  56 Word.word))
            ::  56 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_Paddr_bits : SV39_Paddr -> mword ty56 -> SV39_Paddr*)

definition update_SV39_Paddr_bits  :: " SV39_Paddr \<Rightarrow>(56)Word.word \<Rightarrow> SV39_Paddr "  where 
     " update_SV39_Paddr_bits v x = (
   (v (|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 55 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 55 :: int)::ii) (( 0 :: int)::ii)  ::  56 Word.word))
          ::  56 Word.word))|)))"


(*val _get_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44*)

definition get_SV39_Paddr_PPNi  :: " SV39_Paddr \<Rightarrow>(44)Word.word "  where 
     " get_SV39_Paddr_PPNi v = (
   (subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 55 :: int)::ii) (( 12 :: int)::ii)  ::  44 Word.word))"


(*val _set_SV39_Paddr_PPNi : register_ref regstate register_value SV39_Paddr -> mword ty44 -> M unit*)

definition set_SV39_Paddr_PPNi  :: "((regstate),(register_value),(SV39_Paddr))register_ref \<Rightarrow>(44)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Paddr_PPNi r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   r) (( 55 :: int)::ii) (( 12 :: int)::ii)
             ((subrange_vec_dec v (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
            ::  56 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_Paddr_PPNi : SV39_Paddr -> mword ty44 -> SV39_Paddr*)

definition update_SV39_Paddr_PPNi  :: " SV39_Paddr \<Rightarrow>(44)Word.word \<Rightarrow> SV39_Paddr "  where 
     " update_SV39_Paddr_PPNi v x = (
   (v (|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 55 :: int)::ii) (( 12 :: int)::ii)
           ((subrange_vec_dec x (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
          ::  56 Word.word))|)))"


(*val _update_SV39_PTE_PPNi : SV39_PTE -> mword ty44 -> SV39_PTE*)

(*val _get_SV39_PTE_PPNi : SV39_PTE -> mword ty44*)

(*val _set_SV39_PTE_PPNi : register_ref regstate register_value SV39_PTE -> mword ty44 -> M unit*)

definition get_SV39_Paddr_PgOfs  :: " SV39_Paddr \<Rightarrow>(12)Word.word "  where 
     " get_SV39_Paddr_PgOfs v = (
   (subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))"


definition set_SV39_Paddr_PgOfs  :: "((regstate),(register_value),(SV39_Paddr))register_ref \<Rightarrow>(12)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_Paddr_PgOfs r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_Paddr_SV39_Paddr_chunk_0 :=
         ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   r) (( 11 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))
            ::  56 Word.word))|))) in
   write_reg r_ref r)))"


definition update_SV39_Paddr_PgOfs  :: " SV39_Paddr \<Rightarrow>(12)Word.word \<Rightarrow> SV39_Paddr "  where 
     " update_SV39_Paddr_PgOfs v x = (
   (v (|
     SV39_Paddr_SV39_Paddr_chunk_0 :=
       ((update_subrange_vec_dec(SV39_Paddr_SV39_Paddr_chunk_0   v) (( 11 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 11 :: int)::ii) (( 0 :: int)::ii)  ::  12 Word.word))
          ::  56 Word.word))|)))"


(*val Mk_SV39_PTE : mword ty64 -> SV39_PTE*)

definition Mk_SV39_PTE  :: "(64)Word.word \<Rightarrow> SV39_PTE "  where 
     " Mk_SV39_PTE v = (
   (| SV39_PTE_SV39_PTE_chunk_0 = ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) |) )"


definition get_SV39_PTE_bits  :: " SV39_PTE \<Rightarrow>(64)Word.word "  where 
     " get_SV39_PTE_bits v = (
   (subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))"


definition set_SV39_PTE_bits  :: "((regstate),(register_value),(SV39_PTE))register_ref \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_PTE_bits r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   r) (( 63 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_SV39_PTE_bits  :: " SV39_PTE \<Rightarrow>(64)Word.word \<Rightarrow> SV39_PTE "  where 
     " update_SV39_PTE_bits v x = (
   (v (|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 63 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word))
          ::  64 Word.word))|)))"


definition get_SV39_PTE_PPNi  :: " SV39_PTE \<Rightarrow>(44)Word.word "  where 
     " get_SV39_PTE_PPNi v = (
   (subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 53 :: int)::ii) (( 10 :: int)::ii)  ::  44 Word.word))"


definition set_SV39_PTE_PPNi  :: "((regstate),(register_value),(SV39_PTE))register_ref \<Rightarrow>(44)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_PTE_PPNi r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   r) (( 53 :: int)::ii) (( 10 :: int)::ii)
             ((subrange_vec_dec v (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


definition update_SV39_PTE_PPNi  :: " SV39_PTE \<Rightarrow>(44)Word.word \<Rightarrow> SV39_PTE "  where 
     " update_SV39_PTE_PPNi v x = (
   (v (|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 53 :: int)::ii) (( 10 :: int)::ii)
           ((subrange_vec_dec x (( 43 :: int)::ii) (( 0 :: int)::ii)  ::  44 Word.word))
          ::  64 Word.word))|)))"


(*val _get_SV39_PTE_RSW : SV39_PTE -> mword ty2*)

definition get_SV39_PTE_RSW  :: " SV39_PTE \<Rightarrow>(2)Word.word "  where 
     " get_SV39_PTE_RSW v = ( (subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 9 :: int)::ii) (( 8 :: int)::ii)  ::  2 Word.word))"


(*val _set_SV39_PTE_RSW : register_ref regstate register_value SV39_PTE -> mword ty2 -> M unit*)

definition set_SV39_PTE_RSW  :: "((regstate),(register_value),(SV39_PTE))register_ref \<Rightarrow>(2)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_PTE_RSW r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   r) (( 9 :: int)::ii) (( 8 :: int)::ii)
             ((subrange_vec_dec v (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_PTE_RSW : SV39_PTE -> mword ty2 -> SV39_PTE*)

definition update_SV39_PTE_RSW  :: " SV39_PTE \<Rightarrow>(2)Word.word \<Rightarrow> SV39_PTE "  where 
     " update_SV39_PTE_RSW v x = (
   (v (|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 9 :: int)::ii) (( 8 :: int)::ii)
           ((subrange_vec_dec x (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word))
          ::  64 Word.word))|)))"


(*val _get_SV39_PTE_BITS : SV39_PTE -> mword ty8*)

definition get_SV39_PTE_BITS  :: " SV39_PTE \<Rightarrow>(8)Word.word "  where 
     " get_SV39_PTE_BITS v = ( (subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))"


(*val _set_SV39_PTE_BITS : register_ref regstate register_value SV39_PTE -> mword ty8 -> M unit*)

definition set_SV39_PTE_BITS  :: "((regstate),(register_value),(SV39_PTE))register_ref \<Rightarrow>(8)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " set_SV39_PTE_BITS r_ref v = (
   reg_deref r_ref \<bind> (\<lambda> r . 
   (let r =
     ((r (|
       SV39_PTE_SV39_PTE_chunk_0 :=
         ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   r) (( 7 :: int)::ii) (( 0 :: int)::ii)
             ((subrange_vec_dec v (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
            ::  64 Word.word))|))) in
   write_reg r_ref r)))"


(*val _update_SV39_PTE_BITS : SV39_PTE -> mword ty8 -> SV39_PTE*)

definition update_SV39_PTE_BITS  :: " SV39_PTE \<Rightarrow>(8)Word.word \<Rightarrow> SV39_PTE "  where 
     " update_SV39_PTE_BITS v x = (
   (v (|
     SV39_PTE_SV39_PTE_chunk_0 :=
       ((update_subrange_vec_dec(SV39_PTE_SV39_PTE_chunk_0   v) (( 7 :: int)::ii) (( 0 :: int)::ii)
           ((subrange_vec_dec x (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word))
          ::  64 Word.word))|)))"


(*val curAsid64 : unit -> M (mword ty16)*)

definition curAsid64  :: " unit \<Rightarrow>((register_value),((16)Word.word),(exception))monad "  where 
     " curAsid64 _ = (
   (read_reg satp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let satp64 = (Mk_Satp64 w__0) in
   return ((get_Satp64_Asid satp64  ::  16 Word.word)))))"


(*val curPTB39 : unit -> M (mword ty56)*)

definition curPTB39  :: " unit \<Rightarrow>((register_value),((56)Word.word),(exception))monad "  where 
     " curPTB39 _ = (
   (read_reg satp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let satp64 = (Mk_Satp64 w__0) in
   return ((EXTZ (( 56 :: int)::ii)
              ((shiftl ((get_Satp64_PPN satp64  ::  44 Word.word)) PAGESIZE_BITS  ::  44 Word.word))
             ::  56 Word.word)))))"


(*val walk39 : mword ty39 -> AccessType -> Privilege -> bool -> bool -> mword ty56 -> ii -> bool -> M PTW_Result*)

function (sequential,domintros)  walk39  :: "(39)Word.word \<Rightarrow> AccessType \<Rightarrow> Privilege \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>(56)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow>((register_value),(PTW_Result),(exception))monad "  where 
     " walk39 vaddr ac priv mxr do_sum ptb level global1 = (
   (let va = (Mk_SV39_Vaddr vaddr) in
   (let (pt_ofs :: paddr39) =
     ((shiftl
        ((EXTZ (( 56 :: int)::ii)
            ((subrange_vec_dec
                ((shiftr ((get_SV39_Vaddr_VPNi va  ::  27 Word.word))
                    ((level * SV39_LEVEL_BITS))
                   ::  27 Word.word)) ((SV39_LEVEL_BITS - (( 1 :: int)::ii))) (( 0 :: int)::ii)
               ::  9 Word.word))
           ::  56 Word.word)) PTE39_LOG_SIZE
       ::  56 Word.word)) in
   (let pte_addr = ((add_vec ptb pt_ofs  ::  56 Word.word)) in
   (phys_mem_read Data ((EXTZ (( 64 :: int)::ii) pte_addr  ::  64 Word.word)) (( 8 :: int)::ii) False False False
     :: ( ( 64 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__0 :: ( 64 Word.word) MemoryOpResult) . 
   (case  w__0 of
     MemException (_) =>
      (let (_ :: unit) =
        (print_endline
          (((op@) (''walk39(vaddr='')
              (((op@) ((string_of_bits vaddr))
                  (((op@) ('' level='')
                      (((op@) ((stringFromInteger level))
                          (((op@) ('' pt_base='')
                              (((op@) ((string_of_bits ptb))
                                  (((op@) ('' pt_ofs='')
                                      (((op@) ((string_of_bits pt_ofs))
                                          (((op@) ('' pte_addr='')
                                              (((op@) ((string_of_bits pte_addr))
                                                  ('': invalid pte address'')))))))))))))))))))))) in
      return (PTW_Failure PTW_Access))
   | MemValue (v) =>
      (let pte = (Mk_SV39_PTE v) in
      (let pbits = ((get_SV39_PTE_BITS pte  ::  8 Word.word)) in
      (let pattr = (Mk_PTE_Bits pbits) in
      (let is_global =
        (global1 \<or> (((((get_PTE_Bits_G pattr  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))) in
      if ((isInvalidPTE pbits)) then return (PTW_Failure PTW_Invalid_PTE)
      else if ((isPTEPtr pbits)) then
        if (((level = (( 0 :: int)::ii)))) then return (PTW_Failure PTW_Invalid_PTE)
        else
          walk39 vaddr ac priv mxr do_sum
            ((EXTZ (( 56 :: int)::ii)
                ((shiftl ((get_SV39_PTE_PPNi pte  ::  44 Word.word)) PAGESIZE_BITS  ::  44 Word.word))
               ::  56 Word.word)) ((level - (( 1 :: int)::ii))) is_global
      else
        checkPTEPermission ac priv mxr do_sum pattr \<bind> (\<lambda> (w__3 :: bool) . 
        return (if ((\<not> w__3)) then PTW_Failure PTW_No_Permission
                else if ((level > (( 0 :: int)::ii))) then
                  (let mask1 =
                    ((sub_vec_int
                       ((shiftl
                           ((xor_vec ((get_SV39_PTE_PPNi pte  ::  44 Word.word))
                               ((xor_vec ((get_SV39_PTE_PPNi pte  ::  44 Word.word))
                                   ((EXTZ (( 44 :: int)::ii) (vec_of_bits [B1]  ::  1 Word.word)  ::  44 Word.word))
                                  ::  44 Word.word))
                              ::  44 Word.word)) ((level * SV39_LEVEL_BITS))
                          ::  44 Word.word)) (( 1 :: int)::ii)
                      ::  44 Word.word)) in
                  if (((((and_vec ((get_SV39_PTE_PPNi pte  ::  44 Word.word)) mask1  ::  44 Word.word)) \<noteq> ((EXTZ (( 44 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  44 Word.word))))) then
                    PTW_Failure PTW_Misaligned
                  else
                    (let ppn =
                      ((or_vec ((get_SV39_PTE_PPNi pte  ::  44 Word.word))
                         ((and_vec
                             ((EXTZ (( 44 :: int)::ii) ((get_SV39_Vaddr_VPNi va  ::  27 Word.word))  ::  44 Word.word))
                             mask1
                            ::  44 Word.word))
                        ::  44 Word.word)) in
                    PTW_Success ((concat_vec ppn ((get_SV39_Vaddr_PgOfs va  ::  12 Word.word))
                                   ::  56 Word.word),pte,pte_addr,level,is_global)))
                else
                  PTW_Success ((concat_vec ((get_SV39_PTE_PPNi pte  ::  44 Word.word))
                                  ((get_SV39_Vaddr_PgOfs va  ::  12 Word.word))
                                 ::  56 Word.word),pte,pte_addr,level,is_global)))))))
   ))))))" 
by pat_completeness auto


(*val make_TLB39_Entry : mword ty16 -> bool -> mword ty39 -> mword ty56 -> SV39_PTE -> ii -> mword ty56 -> M TLB39_Entry*)

definition make_TLB39_Entry  :: "(16)Word.word \<Rightarrow> bool \<Rightarrow>(39)Word.word \<Rightarrow>(56)Word.word \<Rightarrow> SV39_PTE \<Rightarrow> int \<Rightarrow>(56)Word.word \<Rightarrow>((register_value),(TLB39_Entry),(exception))monad "  where 
     " make_TLB39_Entry asid global1 vAddr pAddr pte level pteAddr = (
   (let (shift :: ii) = (PAGESIZE_BITS + ((level * SV39_LEVEL_BITS))) in
   (let (vAddrMask :: vaddr39) =
     ((sub_vec_int
        ((shiftl
            ((xor_vec vAddr
                ((xor_vec vAddr ((EXTZ (( 39 :: int)::ii) (vec_of_bits [B1]  ::  1 Word.word)  ::  39 Word.word))
                   ::  39 Word.word))
               ::  39 Word.word)) shift
           ::  39 Word.word)) (( 1 :: int)::ii)
       ::  39 Word.word)) in
   (let (vMatchMask :: vaddr39) = ((not_vec vAddrMask  ::  39 Word.word)) in
   (read_reg mcycle_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
   return ((| TLB39_Entry_asid = asid, 
              TLB39_Entry_global = global1, 
              TLB39_Entry_vAddr = ((and_vec vAddr vMatchMask  ::  39 Word.word)), 
              TLB39_Entry_pAddr =
                ((shiftl ((shiftr pAddr shift  ::  56 Word.word)) shift  ::  56 Word.word)), 
              TLB39_Entry_vMatchMask = vMatchMask, 
              TLB39_Entry_vAddrMask = vAddrMask, 
              TLB39_Entry_pte = pte, 
              TLB39_Entry_pteAddr = pteAddr, 
              TLB39_Entry_age = w__0  |)))))))"


definition TLBEntries  :: " int "  where 
     " TLBEntries = ( (( 32 :: int)::ii))"


(*val lookupTLB39 : mword ty16 -> mword ty39 -> M (maybe ((ii * TLB39_Entry)))*)

definition lookupTLB39  :: "(16)Word.word \<Rightarrow>(39)Word.word \<Rightarrow>((register_value),((int*TLB39_Entry)option),(exception))monad "  where 
     " lookupTLB39 asid vaddr = (
   read_reg tlb39_ref \<bind> (\<lambda> (w__0 ::  TLB39_Entry option) . 
   return ((case  w__0 of
     None => None
   | Some (e) =>
      if (((((((TLB39_Entry_global   e) \<or> ((((TLB39_Entry_asid   e) = asid)))))) \<and> ((((TLB39_Entry_vAddr   e) = ((and_vec(TLB39_Entry_vMatchMask   e) vaddr  ::  39 Word.word))))))))
      then
        Some ((( 0 :: int)::ii), e)
      else None
   ))))"


(*val addToTLB39 : mword ty16 -> mword ty39 -> mword ty56 -> SV39_PTE -> mword ty56 -> ii -> bool -> M unit*)

definition addToTLB39  :: "(16)Word.word \<Rightarrow>(39)Word.word \<Rightarrow>(56)Word.word \<Rightarrow> SV39_PTE \<Rightarrow>(56)Word.word \<Rightarrow> int \<Rightarrow> bool \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " addToTLB39 asid vAddr pAddr pte pteAddr level global1 = (
   make_TLB39_Entry asid global1 vAddr pAddr pte level pteAddr \<bind> (\<lambda> ent . 
   write_reg tlb39_ref (Some ent)))"


(*val writeTLB39 : ii -> TLB39_Entry -> M unit*)

definition writeTLB39  :: " int \<Rightarrow> TLB39_Entry \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " writeTLB39 (idx :: ii) (ent :: TLB39_Entry) = ( write_reg tlb39_ref (Some ent))"


(*val flushTLB : maybe (mword ty16) -> maybe (mword ty39) -> M unit*)

definition flushTLB  :: "((16)Word.word)option \<Rightarrow>((39)Word.word)option \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " flushTLB asid addr = (
   read_reg tlb39_ref \<bind> (\<lambda> (w__0 ::  TLB39_Entry option) . 
   (let (ent ::  TLB39_Entry option) =
     ((case  (w__0, asid, addr) of
       (None, _, _) => None
     | (Some (e), None, None) => None
     | (Some (e), None, Some (a)) =>
        if ((((TLB39_Entry_vAddr   e) = ((and_vec(TLB39_Entry_vMatchMask   e) a  ::  39 Word.word))))) then
          None
        else Some e
     | (Some (e), Some (i), None) =>
        if (((((((TLB39_Entry_asid   e) = i))) \<and> ((\<not>(TLB39_Entry_global   e)))))) then None
        else Some e
     | (Some (e), Some (i), Some (a)) =>
        if (((((((TLB39_Entry_asid   e) = i))) \<and> (((((((TLB39_Entry_vAddr   e) = ((and_vec a(TLB39_Entry_vMatchMask   e)  ::  39 Word.word))))) \<and> ((\<not>(TLB39_Entry_global   e))))))))) then
          None
        else Some e
     )) in
   write_reg tlb39_ref ent)))"


(*val translate39 : mword ty39 -> AccessType -> Privilege -> bool -> bool -> ii -> M TR39_Result*)

definition translate39  :: "(39)Word.word \<Rightarrow> AccessType \<Rightarrow> Privilege \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> int \<Rightarrow>((register_value),(TR39_Result),(exception))monad "  where 
     " translate39 vAddr ac priv mxr do_sum level = (
   (curAsid64 ()   :: ( 16 Word.word) M) \<bind> (\<lambda> asid . 
   lookupTLB39 asid vAddr \<bind> (\<lambda> (w__0 ::  ((ii * TLB39_Entry))option) . 
   (case  w__0 of
     Some (idx,ent) =>
      (let pteBits = (Mk_PTE_Bits ((get_SV39_PTE_BITS(TLB39_Entry_pte   ent)  ::  8 Word.word))) in
      checkPTEPermission ac priv mxr do_sum pteBits \<bind> (\<lambda> (w__1 :: bool) . 
      if ((\<not> w__1)) then return (TR39_Failure PTW_No_Permission)
      else
        (case  ((update_PTE_Bits pteBits ac)) of
          None =>
           return (TR39_Address ((or_vec(TLB39_Entry_pAddr   ent)
                                    ((EXTZ (( 56 :: int)::ii)
                                        ((and_vec vAddr(TLB39_Entry_vAddrMask   ent)  ::  39 Word.word))
                                       ::  56 Word.word))
                                   ::  56 Word.word)))
        | Some (pbits) =>
           if ((\<not> ((plat_enable_dirty_update () )))) then return (TR39_Failure PTW_PTE_Update)
           else
             (let (n_ent :: TLB39_Entry) = ent in
             (let n_ent =
               ((n_ent (|
                 TLB39_Entry_pte :=
                   ((update_SV39_PTE_BITS(TLB39_Entry_pte   ent)
                       ((get_PTE_Bits_bits pbits  ::  8 Word.word))))|))) in
             (writeTLB39 idx n_ent \<then>
             checked_mem_write ((EXTZ (( 64 :: int)::ii)(TLB39_Entry_pteAddr   ent)  ::  64 Word.word)) (( 8 :: int)::ii)
               ((get_SV39_PTE_bits(TLB39_Entry_pte   ent)  ::  64 Word.word))) \<bind> (\<lambda> (w__2 :: unit
               MemoryOpResult) . 
             (case  w__2 of
               MemValue (_) => return () 
             | MemException (e) => internal_error (''invalid physical address in TLB'')
             ) \<then>
             return (TR39_Address ((or_vec(TLB39_Entry_pAddr   ent)
                                      ((EXTZ (( 56 :: int)::ii)
                                          ((and_vec vAddr(TLB39_Entry_vAddrMask   ent)  ::  39 Word.word))
                                         ::  56 Word.word))
                                     ::  56 Word.word))))))
        )))
   | None =>
      (curPTB39 ()   :: ( 56 Word.word) M) \<bind> (\<lambda> (w__6 ::  56 Word.word) . 
      walk39 vAddr ac priv mxr do_sum w__6 level False \<bind> (\<lambda> (w__7 :: PTW_Result) . 
      (case  w__7 of
        PTW_Failure (f) => return (TR39_Failure f)
      | PTW_Success (pAddr,pte,pteAddr,level,global1) =>
         (case  ((update_PTE_Bits ((Mk_PTE_Bits ((get_SV39_PTE_BITS pte  ::  8 Word.word)))) ac)) of
           None =>
            addToTLB39 asid vAddr pAddr pte pteAddr level global1 \<then> return (TR39_Address pAddr)
         | Some (pbits) =>
            if ((\<not> ((plat_enable_dirty_update () )))) then return (TR39_Failure PTW_PTE_Update)
            else
              (let (w_pte :: SV39_PTE) =
                (update_SV39_PTE_BITS pte ((get_PTE_Bits_bits pbits  ::  8 Word.word))) in
              checked_mem_write ((EXTZ (( 64 :: int)::ii) pteAddr  ::  64 Word.word)) (( 8 :: int)::ii)
                ((get_SV39_PTE_bits w_pte  ::  64 Word.word)) \<bind> (\<lambda> (w__8 :: unit MemoryOpResult) . 
              (case  w__8 of
                MemValue (_) =>
                 addToTLB39 asid vAddr pAddr w_pte pteAddr level global1 \<then>
                 return (TR39_Address pAddr)
              | MemException (e) => return (TR39_Failure PTW_Access)
              )))
         )
      )))
   ))))"


(*val translationMode : Privilege -> M SATPMode*)

definition translationMode  :: " Privilege \<Rightarrow>((register_value),(SATPMode),(exception))monad "  where 
     " translationMode priv = (
   if (((((privLevel_to_bits priv  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))))
   then
     return Sbare
   else
     read_reg mstatus_ref \<bind> (\<lambda> (w__0 :: Mstatus) . 
     (let arch = (architecture ((get_Mstatus_SXL w__0  ::  2 Word.word))) in
     (case  arch of
       Some (RV64) =>
        (read_reg satp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
        (let (mbits :: satp_mode) = ((get_Satp64_Mode ((Mk_Satp64 w__1))  ::  4 Word.word)) in
        (case  ((satpMode_of_bits RV64 mbits)) of
          Some (m) => return m
        | None => internal_error (''invalid RV64 translation mode in satp'')
        )))
     | _ => internal_error (''unsupported address translation arch'')
     ))))"


(*val translateAddr : mword ty64 -> AccessType -> ReadType -> M TR_Result*)

definition translateAddr  :: "(64)Word.word \<Rightarrow> AccessType \<Rightarrow> ReadType \<Rightarrow>((register_value),(TR_Result),(exception))monad "  where 
     " translateAddr vAddr ac rt = (
   (case  rt of
     Instruction => read_reg cur_privilege_ref
   | Data =>
      read_reg mstatus_ref \<bind> (\<lambda> (w__1 :: Mstatus) . 
      if (((((get_Mstatus_MPRV w__1  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
        read_reg mstatus_ref \<bind> (\<lambda> (w__2 :: Mstatus) . 
        return ((privLevel_of_bits ((get_Mstatus_MPP w__2  ::  2 Word.word)))))
      else read_reg cur_privilege_ref)
   ) \<bind> (\<lambda> (effPriv :: Privilege) . 
   read_reg mstatus_ref \<bind> (\<lambda> (w__5 :: Mstatus) . 
   (let (mxr :: bool) =
     (((get_Mstatus_MXR w__5  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))) in
   read_reg mstatus_ref \<bind> (\<lambda> (w__6 :: Mstatus) . 
   (let (do_sum :: bool) =
     (((get_Mstatus_SUM w__6  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))) in
   translationMode effPriv \<bind> (\<lambda> (mode :: SATPMode) .  
  (case  mode of
        Sbare => return (TR_Address vAddr)
    | SV39 =>
  translate39
    ((subrange_vec_dec vAddr (( 38 :: int):: ii) (( 0 :: int):: ii) :: 39 Word.word))
    ac effPriv mxr do_sum ((SV39_LEVELS - (( 1 :: int):: ii))) \<bind>
    (\<lambda> (w__7 :: TR39_Result) . 
     return
       ((case  w__7 of
              TR39_Address (pa) => TR_Address
                                     ((EXTZ (( 64 :: int):: ii) pa :: 64 Word.word))
          | TR39_Failure (f) => TR_Failure ((translationException ac f))
        )))
  ))))))))"


(*val decode : mword ty32 -> maybe ast*)

(*val decodeCompressed : mword ty16 -> maybe ast*)

(*val execute : ast -> M bool*)

(*val print_insn : ast -> string*)

(*val encdec_uop_forwards : uop -> mword ty7*)

fun encdec_uop_forwards  :: " uop \<Rightarrow>(7)Word.word "  where 
     " encdec_uop_forwards RISCV_LUI = ( (vec_of_bits [B0,B1,B1,B0,B1,B1,B1]  ::  7 Word.word))"
|" encdec_uop_forwards RISCV_AUIPC = ( (vec_of_bits [B0,B0,B1,B0,B1,B1,B1]  ::  7 Word.word))"


(*val encdec_uop_backwards : mword ty7 -> uop*)

definition encdec_uop_backwards  :: "(7)Word.word \<Rightarrow> uop "  where 
     " encdec_uop_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B1,B1,B0,B1,B1,B1]  ::  7 Word.word)))) then RISCV_LUI
   else RISCV_AUIPC))"


(*val encdec_uop_forwards_matches : uop -> bool*)

fun encdec_uop_forwards_matches  :: " uop \<Rightarrow> bool "  where 
     " encdec_uop_forwards_matches RISCV_LUI = ( True )"
|" encdec_uop_forwards_matches RISCV_AUIPC = ( True )"


(*val encdec_uop_backwards_matches : mword ty7 -> bool*)

definition encdec_uop_backwards_matches  :: "(7)Word.word \<Rightarrow> bool "  where 
     " encdec_uop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B1,B1,B0,B1,B1,B1]  ::  7 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B0,B1,B0,B1,B1,B1]  ::  7 Word.word)))) then True
   else False))"


(*val utype_mnemonic_forwards : uop -> string*)

fun utype_mnemonic_forwards  :: " uop \<Rightarrow> string "  where 
     " utype_mnemonic_forwards RISCV_LUI = ( (''lui''))"
|" utype_mnemonic_forwards RISCV_AUIPC = ( (''auipc''))"


(*val utype_mnemonic_backwards : string -> uop*)

definition utype_mnemonic_backwards  :: " string \<Rightarrow> uop "  where 
     " utype_mnemonic_backwards arg0 = ( 
  if(arg0 = (''lui'')) then RISCV_LUI else
    (if(arg0 = (''auipc'')) then RISCV_AUIPC else undefined) )"


(*val utype_mnemonic_forwards_matches : uop -> bool*)

fun utype_mnemonic_forwards_matches  :: " uop \<Rightarrow> bool "  where 
     " utype_mnemonic_forwards_matches RISCV_LUI = ( True )"
|" utype_mnemonic_forwards_matches RISCV_AUIPC = ( True )"


(*val utype_mnemonic_backwards_matches : string -> bool*)

definition utype_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " utype_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''lui'')) then True else
    (if(arg0 = (''auipc'')) then True else False) )"


(*val utype_mnemonic_matches_prefix : string -> maybe ((uop * ii))*)

definition utype_mnemonic_matches_prefix  :: " string \<Rightarrow>(uop*int)option "  where 
     " utype_mnemonic_matches_prefix arg0 = (
   (let stringappend_17140 = arg0 in
   if (((((string_startswith stringappend_17140 (''lui''))) \<and> (
  (case  ((string_drop stringappend_17140 ((string_length (''lui''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17140 ((string_length (''lui''))))) of
       s0 => Some (RISCV_LUI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17140 (''auipc''))) \<and> (
  (case  ((string_drop stringappend_17140 ((string_length (''auipc''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17140 ((string_length (''auipc''))))) of
       s0 => Some (RISCV_AUIPC, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val encdec_bop_forwards : bop -> mword ty3*)

fun encdec_bop_forwards  :: " bop \<Rightarrow>(3)Word.word "  where 
     " encdec_bop_forwards RISCV_BEQ = ( (vec_of_bits [B0,B0,B0]  ::  3 Word.word))"
|" encdec_bop_forwards RISCV_BNE = ( (vec_of_bits [B0,B0,B1]  ::  3 Word.word))"
|" encdec_bop_forwards RISCV_BLT = ( (vec_of_bits [B1,B0,B0]  ::  3 Word.word))"
|" encdec_bop_forwards RISCV_BGE = ( (vec_of_bits [B1,B0,B1]  ::  3 Word.word))"
|" encdec_bop_forwards RISCV_BLTU = ( (vec_of_bits [B1,B1,B0]  ::  3 Word.word))"
|" encdec_bop_forwards RISCV_BGEU = ( (vec_of_bits [B1,B1,B1]  ::  3 Word.word))"


(*val encdec_bop_backwards : mword ty3 -> bop*)

definition encdec_bop_backwards  :: "(3)Word.word \<Rightarrow> bop "  where 
     " encdec_bop_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then RISCV_BEQ
   else if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then RISCV_BNE
   else if (((p00 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) then RISCV_BLT
   else if (((p00 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) then RISCV_BGE
   else if (((p00 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) then RISCV_BLTU
   else RISCV_BGEU))"


(*val encdec_bop_forwards_matches : bop -> bool*)

fun encdec_bop_forwards_matches  :: " bop \<Rightarrow> bool "  where 
     " encdec_bop_forwards_matches RISCV_BEQ = ( True )"
|" encdec_bop_forwards_matches RISCV_BNE = ( True )"
|" encdec_bop_forwards_matches RISCV_BLT = ( True )"
|" encdec_bop_forwards_matches RISCV_BGE = ( True )"
|" encdec_bop_forwards_matches RISCV_BLTU = ( True )"
|" encdec_bop_forwards_matches RISCV_BGEU = ( True )"


(*val encdec_bop_backwards_matches : mword ty3 -> bool*)

definition encdec_bop_backwards_matches  :: "(3)Word.word \<Rightarrow> bool "  where 
     " encdec_bop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1,B1]  ::  3 Word.word)))) then True
   else False))"


(*val btype_mnemonic_forwards : bop -> string*)

fun btype_mnemonic_forwards  :: " bop \<Rightarrow> string "  where 
     " btype_mnemonic_forwards RISCV_BEQ = ( (''beq''))"
|" btype_mnemonic_forwards RISCV_BNE = ( (''bne''))"
|" btype_mnemonic_forwards RISCV_BLT = ( (''blt''))"
|" btype_mnemonic_forwards RISCV_BGE = ( (''bge''))"
|" btype_mnemonic_forwards RISCV_BLTU = ( (''bltu''))"
|" btype_mnemonic_forwards RISCV_BGEU = ( (''bgeu''))"


(*val btype_mnemonic_backwards : string -> bop*)

definition btype_mnemonic_backwards  :: " string \<Rightarrow> bop "  where 
     " btype_mnemonic_backwards arg0 = ( 
  if(arg0 = (''beq'')) then RISCV_BEQ else
    (
    if(arg0 = (''bne'')) then RISCV_BNE else
      (
      if(arg0 = (''blt'')) then RISCV_BLT else
        (
        if(arg0 = (''bge'')) then RISCV_BGE else
          (
          if(arg0 = (''bltu'')) then RISCV_BLTU else
            (if(arg0 = (''bgeu'')) then RISCV_BGEU else undefined))))) )"


(*val btype_mnemonic_forwards_matches : bop -> bool*)

fun btype_mnemonic_forwards_matches  :: " bop \<Rightarrow> bool "  where 
     " btype_mnemonic_forwards_matches RISCV_BEQ = ( True )"
|" btype_mnemonic_forwards_matches RISCV_BNE = ( True )"
|" btype_mnemonic_forwards_matches RISCV_BLT = ( True )"
|" btype_mnemonic_forwards_matches RISCV_BGE = ( True )"
|" btype_mnemonic_forwards_matches RISCV_BLTU = ( True )"
|" btype_mnemonic_forwards_matches RISCV_BGEU = ( True )"


(*val btype_mnemonic_backwards_matches : string -> bool*)

definition btype_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " btype_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''beq'')) then True else
    (
    if(arg0 = (''bne'')) then True else
      (
      if(arg0 = (''blt'')) then True else
        (
        if(arg0 = (''bge'')) then True else
          (
          if(arg0 = (''bltu'')) then True else
            (if(arg0 = (''bgeu'')) then True else False))))) )"


(*val btype_mnemonic_matches_prefix : string -> maybe ((bop * ii))*)

definition btype_mnemonic_matches_prefix  :: " string \<Rightarrow>(bop*int)option "  where 
     " btype_mnemonic_matches_prefix arg0 = (
   (let stringappend_17080 = arg0 in
   if (((((string_startswith stringappend_17080 (''beq''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''beq''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''beq''))))) of
       s0 => Some (RISCV_BEQ, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17080 (''bne''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''bne''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''bne''))))) of
       s0 => Some (RISCV_BNE, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17080 (''blt''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''blt''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''blt''))))) of
       s0 => Some (RISCV_BLT, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17080 (''bge''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''bge''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''bge''))))) of
       s0 => Some (RISCV_BGE, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17080 (''bltu''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''bltu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''bltu''))))) of
       s0 => Some (RISCV_BLTU, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17080 (''bgeu''))) \<and> (
  (case  ((string_drop stringappend_17080 ((string_length (''bgeu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17080 ((string_length (''bgeu''))))) of
       s0 => Some (RISCV_BGEU, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val encdec_iop_forwards : iop -> mword ty3*)

fun encdec_iop_forwards  :: " iop \<Rightarrow>(3)Word.word "  where 
     " encdec_iop_forwards RISCV_ADDI = ( (vec_of_bits [B0,B0,B0]  ::  3 Word.word))"
|" encdec_iop_forwards RISCV_SLTI = ( (vec_of_bits [B0,B1,B0]  ::  3 Word.word))"
|" encdec_iop_forwards RISCV_SLTIU = ( (vec_of_bits [B0,B1,B1]  ::  3 Word.word))"
|" encdec_iop_forwards RISCV_XORI = ( (vec_of_bits [B1,B0,B0]  ::  3 Word.word))"
|" encdec_iop_forwards RISCV_ORI = ( (vec_of_bits [B1,B1,B0]  ::  3 Word.word))"
|" encdec_iop_forwards RISCV_ANDI = ( (vec_of_bits [B1,B1,B1]  ::  3 Word.word))"


(*val encdec_iop_backwards : mword ty3 -> iop*)

definition encdec_iop_backwards  :: "(3)Word.word \<Rightarrow> iop "  where 
     " encdec_iop_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then RISCV_ADDI
   else if (((p00 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) then RISCV_SLTI
   else if (((p00 = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) then RISCV_SLTIU
   else if (((p00 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) then RISCV_XORI
   else if (((p00 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) then RISCV_ORI
   else RISCV_ANDI))"


(*val encdec_iop_forwards_matches : iop -> bool*)

fun encdec_iop_forwards_matches  :: " iop \<Rightarrow> bool "  where 
     " encdec_iop_forwards_matches RISCV_ADDI = ( True )"
|" encdec_iop_forwards_matches RISCV_SLTI = ( True )"
|" encdec_iop_forwards_matches RISCV_SLTIU = ( True )"
|" encdec_iop_forwards_matches RISCV_XORI = ( True )"
|" encdec_iop_forwards_matches RISCV_ORI = ( True )"
|" encdec_iop_forwards_matches RISCV_ANDI = ( True )"


(*val encdec_iop_backwards_matches : mword ty3 -> bool*)

definition encdec_iop_backwards_matches  :: "(3)Word.word \<Rightarrow> bool "  where 
     " encdec_iop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1,B1]  ::  3 Word.word)))) then True
   else False))"


(*val itype_mnemonic_forwards : iop -> string*)

fun itype_mnemonic_forwards  :: " iop \<Rightarrow> string "  where 
     " itype_mnemonic_forwards RISCV_ADDI = ( (''addi''))"
|" itype_mnemonic_forwards RISCV_SLTI = ( (''slti''))"
|" itype_mnemonic_forwards RISCV_SLTIU = ( (''sltiu''))"
|" itype_mnemonic_forwards RISCV_XORI = ( (''xori''))"
|" itype_mnemonic_forwards RISCV_ORI = ( (''ori''))"
|" itype_mnemonic_forwards RISCV_ANDI = ( (''andi''))"


(*val itype_mnemonic_backwards : string -> iop*)

definition itype_mnemonic_backwards  :: " string \<Rightarrow> iop "  where 
     " itype_mnemonic_backwards arg0 = ( 
  if(arg0 = (''addi'')) then RISCV_ADDI else
    (
    if(arg0 = (''slti'')) then RISCV_SLTI else
      (
      if(arg0 = (''sltiu'')) then RISCV_SLTIU else
        (
        if(arg0 = (''xori'')) then RISCV_XORI else
          (
          if(arg0 = (''ori'')) then RISCV_ORI else
            (if(arg0 = (''andi'')) then RISCV_ANDI else undefined))))) )"


(*val itype_mnemonic_forwards_matches : iop -> bool*)

fun itype_mnemonic_forwards_matches  :: " iop \<Rightarrow> bool "  where 
     " itype_mnemonic_forwards_matches RISCV_ADDI = ( True )"
|" itype_mnemonic_forwards_matches RISCV_SLTI = ( True )"
|" itype_mnemonic_forwards_matches RISCV_SLTIU = ( True )"
|" itype_mnemonic_forwards_matches RISCV_XORI = ( True )"
|" itype_mnemonic_forwards_matches RISCV_ORI = ( True )"
|" itype_mnemonic_forwards_matches RISCV_ANDI = ( True )"


(*val itype_mnemonic_backwards_matches : string -> bool*)

definition itype_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " itype_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''addi'')) then True else
    (
    if(arg0 = (''slti'')) then True else
      (
      if(arg0 = (''sltiu'')) then True else
        (
        if(arg0 = (''xori'')) then True else
          (
          if(arg0 = (''ori'')) then True else
            (if(arg0 = (''andi'')) then True else False))))) )"


(*val itype_mnemonic_matches_prefix : string -> maybe ((iop * ii))*)

definition itype_mnemonic_matches_prefix  :: " string \<Rightarrow>(iop*int)option "  where 
     " itype_mnemonic_matches_prefix arg0 = (
   (let stringappend_17020 = arg0 in
   if (((((string_startswith stringappend_17020 (''addi''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''addi''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''addi''))))) of
       s0 => Some (RISCV_ADDI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17020 (''slti''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''slti''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''slti''))))) of
       s0 => Some (RISCV_SLTI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17020 (''sltiu''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''sltiu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''sltiu''))))) of
       s0 => Some (RISCV_SLTIU, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17020 (''xori''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''xori''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''xori''))))) of
       s0 => Some (RISCV_XORI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17020 (''ori''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''ori''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''ori''))))) of
       s0 => Some (RISCV_ORI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_17020 (''andi''))) \<and> (
  (case  ((string_drop stringappend_17020 ((string_length (''andi''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_17020 ((string_length (''andi''))))) of
       s0 => Some (RISCV_ANDI, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val encdec_sop_forwards : sop -> mword ty3*)

fun encdec_sop_forwards  :: " sop \<Rightarrow>(3)Word.word "  where 
     " encdec_sop_forwards RISCV_SLLI = ( (vec_of_bits [B0,B0,B1]  ::  3 Word.word))"
|" encdec_sop_forwards RISCV_SRLI = ( (vec_of_bits [B1,B0,B1]  ::  3 Word.word))"
|" encdec_sop_forwards RISCV_SRAI = ( (vec_of_bits [B1,B0,B1]  ::  3 Word.word))"


(*val encdec_sop_backwards : mword ty3 -> sop*)

definition encdec_sop_backwards  :: "(3)Word.word \<Rightarrow> sop "  where 
     " encdec_sop_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then RISCV_SLLI
   else if (((p00 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) then RISCV_SRLI
   else RISCV_SRAI))"


(*val encdec_sop_forwards_matches : sop -> bool*)

fun encdec_sop_forwards_matches  :: " sop \<Rightarrow> bool "  where 
     " encdec_sop_forwards_matches RISCV_SLLI = ( True )"
|" encdec_sop_forwards_matches RISCV_SRLI = ( True )"
|" encdec_sop_forwards_matches RISCV_SRAI = ( True )"


(*val encdec_sop_backwards_matches : mword ty3 -> bool*)

definition encdec_sop_backwards_matches  :: "(3)Word.word \<Rightarrow> bool "  where 
     " encdec_sop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) then True
   else False))"


(*val shiftiop_mnemonic_forwards : sop -> string*)

fun shiftiop_mnemonic_forwards  :: " sop \<Rightarrow> string "  where 
     " shiftiop_mnemonic_forwards RISCV_SLLI = ( (''slli''))"
|" shiftiop_mnemonic_forwards RISCV_SRLI = ( (''srli''))"
|" shiftiop_mnemonic_forwards RISCV_SRAI = ( (''srai''))"


(*val shiftiop_mnemonic_backwards : string -> sop*)

definition shiftiop_mnemonic_backwards  :: " string \<Rightarrow> sop "  where 
     " shiftiop_mnemonic_backwards arg0 = ( 
  if(arg0 = (''slli'')) then RISCV_SLLI else
    (
    if(arg0 = (''srli'')) then RISCV_SRLI else
      (if(arg0 = (''srai'')) then RISCV_SRAI else undefined)) )"


(*val shiftiop_mnemonic_forwards_matches : sop -> bool*)

fun shiftiop_mnemonic_forwards_matches  :: " sop \<Rightarrow> bool "  where 
     " shiftiop_mnemonic_forwards_matches RISCV_SLLI = ( True )"
|" shiftiop_mnemonic_forwards_matches RISCV_SRLI = ( True )"
|" shiftiop_mnemonic_forwards_matches RISCV_SRAI = ( True )"


(*val shiftiop_mnemonic_backwards_matches : string -> bool*)

definition shiftiop_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " shiftiop_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''slli'')) then True else
    (
    if(arg0 = (''srli'')) then True else
      (if(arg0 = (''srai'')) then True else False)) )"


(*val shiftiop_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

definition shiftiop_mnemonic_matches_prefix  :: " string \<Rightarrow>(sop*int)option "  where 
     " shiftiop_mnemonic_matches_prefix arg0 = (
   (let stringappend_16990 = arg0 in
   if (((((string_startswith stringappend_16990 (''slli''))) \<and> (
  (case  ((string_drop stringappend_16990 ((string_length (''slli''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16990 ((string_length (''slli''))))) of
       s0 => Some (RISCV_SLLI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16990 (''srli''))) \<and> (
  (case  ((string_drop stringappend_16990 ((string_length (''srli''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16990 ((string_length (''srli''))))) of
       s0 => Some (RISCV_SRLI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16990 (''srai''))) \<and> (
  (case  ((string_drop stringappend_16990 ((string_length (''srai''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16990 ((string_length (''srai''))))) of
       s0 => Some (RISCV_SRAI, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val rtype_mnemonic_forwards : rop -> string*)

fun rtype_mnemonic_forwards  :: " rop \<Rightarrow> string "  where 
     " rtype_mnemonic_forwards RISCV_ADD = ( (''add''))"
|" rtype_mnemonic_forwards RISCV_SUB = ( (''sub''))"
|" rtype_mnemonic_forwards RISCV_SLL = ( (''sll''))"
|" rtype_mnemonic_forwards RISCV_SLT = ( (''slt''))"
|" rtype_mnemonic_forwards RISCV_SLTU = ( (''sltu''))"
|" rtype_mnemonic_forwards RISCV_XOR = ( (''xor''))"
|" rtype_mnemonic_forwards RISCV_SRL = ( (''srl''))"
|" rtype_mnemonic_forwards RISCV_SRA = ( (''sra''))"
|" rtype_mnemonic_forwards RISCV_OR = ( (''or''))"
|" rtype_mnemonic_forwards RISCV_AND = ( (''and''))"


(*val rtype_mnemonic_backwards : string -> rop*)

definition rtype_mnemonic_backwards  :: " string \<Rightarrow> rop "  where 
     " rtype_mnemonic_backwards arg0 = ( 
  if(arg0 = (''add'')) then RISCV_ADD else
    (
    if(arg0 = (''sub'')) then RISCV_SUB else
      (
      if(arg0 = (''sll'')) then RISCV_SLL else
        (
        if(arg0 = (''slt'')) then RISCV_SLT else
          (
          if(arg0 = (''sltu'')) then RISCV_SLTU else
            (
            if(arg0 = (''xor'')) then RISCV_XOR else
              (
              if(arg0 = (''srl'')) then RISCV_SRL else
                (
                if(arg0 = (''sra'')) then RISCV_SRA else
                  (
                  if(arg0 = (''or'')) then RISCV_OR else
                    (if(arg0 = (''and'')) then RISCV_AND else undefined))))))))) )"


(*val rtype_mnemonic_forwards_matches : rop -> bool*)

fun rtype_mnemonic_forwards_matches  :: " rop \<Rightarrow> bool "  where 
     " rtype_mnemonic_forwards_matches RISCV_ADD = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SUB = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SLL = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SLT = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SLTU = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_XOR = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SRL = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_SRA = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_OR = ( True )"
|" rtype_mnemonic_forwards_matches RISCV_AND = ( True )"


(*val rtype_mnemonic_backwards_matches : string -> bool*)

definition rtype_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " rtype_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''add'')) then True else
    (
    if(arg0 = (''sub'')) then True else
      (
      if(arg0 = (''sll'')) then True else
        (
        if(arg0 = (''slt'')) then True else
          (
          if(arg0 = (''sltu'')) then True else
            (
            if(arg0 = (''xor'')) then True else
              (
              if(arg0 = (''srl'')) then True else
                (
                if(arg0 = (''sra'')) then True else
                  (
                  if(arg0 = (''or'')) then True else
                    (if(arg0 = (''and'')) then True else False))))))))) )"


(*val rtype_mnemonic_matches_prefix : string -> maybe ((rop * ii))*)

definition rtype_mnemonic_matches_prefix  :: " string \<Rightarrow>(rop*int)option "  where 
     " rtype_mnemonic_matches_prefix arg0 = (
   (let stringappend_16890 = arg0 in
   if (((((string_startswith stringappend_16890 (''add''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''add''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''add''))))) of
       s0 => Some (RISCV_ADD, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''sub''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''sub''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''sub''))))) of
       s0 => Some (RISCV_SUB, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''sll''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''sll''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''sll''))))) of
       s0 => Some (RISCV_SLL, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''slt''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''slt''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''slt''))))) of
       s0 => Some (RISCV_SLT, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''sltu''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''sltu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''sltu''))))) of
       s0 => Some (RISCV_SLTU, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''xor''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''xor''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''xor''))))) of
       s0 => Some (RISCV_XOR, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''srl''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''srl''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''srl''))))) of
       s0 => Some (RISCV_SRL, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''sra''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''sra''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''sra''))))) of
       s0 => Some (RISCV_SRA, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''or''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''or''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''or''))))) of
       s0 => Some (RISCV_OR, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16890 (''and''))) \<and> (
  (case  ((string_drop stringappend_16890 ((string_length (''and''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16890 ((string_length (''and''))))) of
       s0 => Some (RISCV_AND, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val extend_value : forall 'int8_times_n . Size 'int8_times_n => bool -> MemoryOpResult (mword 'int8_times_n) -> MemoryOpResult (mword ty64)*)

fun extend_value  :: " bool \<Rightarrow>(('int8_times_n::len)Word.word)MemoryOpResult \<Rightarrow>((64)Word.word)MemoryOpResult "  where 
     " extend_value is_unsigned (MemValue (v)) = (
      MemValue (if is_unsigned then (EXTZ (( 64 :: int)::ii) v  ::  64 Word.word)
                else (EXTS (( 64 :: int)::ii) v  ::  64 Word.word)))"
|" extend_value is_unsigned (MemException (e)) = ( MemException e )"


(*val process_load : forall 'int8_times_n . Size 'int8_times_n => mword ty5 -> mword ty64 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M bool*)

definition process_load  :: "(5)Word.word \<Rightarrow>(64)Word.word \<Rightarrow>(('int8_times_n::len)Word.word)MemoryOpResult \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " process_load rd addr value1 is_unsigned = (
   (case  ((extend_value is_unsigned value1  :: ( 64 Word.word) MemoryOpResult)) of
     MemValue (result) => wX ((regbits_to_regno rd)) result \<then> return True
   | MemException (e) => handle_mem_exception addr e \<then> return False
   ))"


(*val check_misaligned : mword ty64 -> word_width -> bool*)

definition check_misaligned  :: "(64)Word.word \<Rightarrow> word_width \<Rightarrow> bool "  where 
     " check_misaligned (vaddr :: xlenbits) (width :: word_width) = (
   if ((plat_enable_misaligned_access () )) then False
   else
     (case  width of
       BYTE => False
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))
     | WORD =>
        ((((((cast_unit_vec0 ((access_vec_dec vaddr (( 0 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> (((((cast_unit_vec0 ((access_vec_dec vaddr (( 1 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))))
     | DOUBLE =>
        ((((((cast_unit_vec0 ((access_vec_dec vaddr (( 0 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> ((((((((cast_unit_vec0 ((access_vec_dec vaddr (( 1 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) \<or> (((((cast_unit_vec0 ((access_vec_dec vaddr (( 2 :: int)::ii)))  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word)))))))))
     ))"


(*val maybe_aq_forwards : bool -> string*)

fun maybe_aq_forwards  :: " bool \<Rightarrow> string "  where 
     " maybe_aq_forwards True = ( (''.aq''))"
|" maybe_aq_forwards False = ( (''''))"


(*val maybe_aq_backwards : string -> bool*)

definition maybe_aq_backwards  :: " string \<Rightarrow> bool "  where 
     " maybe_aq_backwards arg0 = ( 
  if(arg0 = (''.aq'')) then True else
    (if(arg0 = ('''')) then False else undefined) )"


(*val maybe_aq_forwards_matches : bool -> bool*)

fun maybe_aq_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " maybe_aq_forwards_matches True = ( True )"
|" maybe_aq_forwards_matches False = ( True )"


(*val maybe_aq_backwards_matches : string -> bool*)

definition maybe_aq_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " maybe_aq_backwards_matches arg0 = ( 
  if(arg0 = (''.aq'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val maybe_aq_matches_prefix : string -> maybe ((bool * ii))*)

definition maybe_aq_matches_prefix  :: " string \<Rightarrow>(bool*int)option "  where 
     " maybe_aq_matches_prefix arg0 = (
   (let stringappend_16870 = arg0 in
   if (((((string_startswith stringappend_16870 (''.aq''))) \<and> (
  (case  ((string_drop stringappend_16870 ((string_length (''.aq''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16870 ((string_length (''.aq''))))) of
       s0 => Some (True, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16870 (''''))) \<and> (
  (case  ((string_drop stringappend_16870 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16870 ((string_length (''''))))) of
       s0 => Some (False, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val maybe_rl_forwards : bool -> string*)

fun maybe_rl_forwards  :: " bool \<Rightarrow> string "  where 
     " maybe_rl_forwards True = ( (''.rl''))"
|" maybe_rl_forwards False = ( (''''))"


(*val maybe_rl_backwards : string -> bool*)

definition maybe_rl_backwards  :: " string \<Rightarrow> bool "  where 
     " maybe_rl_backwards arg0 = ( 
  if(arg0 = (''.rl'')) then True else
    (if(arg0 = ('''')) then False else undefined) )"


(*val maybe_rl_forwards_matches : bool -> bool*)

fun maybe_rl_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " maybe_rl_forwards_matches True = ( True )"
|" maybe_rl_forwards_matches False = ( True )"


(*val maybe_rl_backwards_matches : string -> bool*)

definition maybe_rl_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " maybe_rl_backwards_matches arg0 = ( 
  if(arg0 = (''.rl'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val maybe_rl_matches_prefix : string -> maybe ((bool * ii))*)

definition maybe_rl_matches_prefix  :: " string \<Rightarrow>(bool*int)option "  where 
     " maybe_rl_matches_prefix arg0 = (
   (let stringappend_16850 = arg0 in
   if (((((string_startswith stringappend_16850 (''.rl''))) \<and> (
  (case  ((string_drop stringappend_16850 ((string_length (''.rl''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16850 ((string_length (''.rl''))))) of
       s0 => Some (True, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16850 (''''))) \<and> (
  (case  ((string_drop stringappend_16850 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16850 ((string_length (''''))))) of
       s0 => Some (False, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val maybe_u_forwards : bool -> string*)

fun maybe_u_forwards  :: " bool \<Rightarrow> string "  where 
     " maybe_u_forwards True = ( (''u''))"
|" maybe_u_forwards False = ( (''''))"


(*val maybe_u_backwards : string -> bool*)

definition maybe_u_backwards  :: " string \<Rightarrow> bool "  where 
     " maybe_u_backwards arg0 = ( 
  if(arg0 = (''u'')) then True else
    (if(arg0 = ('''')) then False else undefined) )"


(*val maybe_u_forwards_matches : bool -> bool*)

fun maybe_u_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " maybe_u_forwards_matches True = ( True )"
|" maybe_u_forwards_matches False = ( True )"


(*val maybe_u_backwards_matches : string -> bool*)

definition maybe_u_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " maybe_u_backwards_matches arg0 = ( 
  if(arg0 = (''u'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val maybe_u_matches_prefix : string -> maybe ((bool * ii))*)

definition maybe_u_matches_prefix  :: " string \<Rightarrow>(bool*int)option "  where 
     " maybe_u_matches_prefix arg0 = (
   (let stringappend_16830 = arg0 in
   if (((((string_startswith stringappend_16830 (''u''))) \<and> (
  (case  ((string_drop stringappend_16830 ((string_length (''u''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16830 ((string_length (''u''))))) of
       s0 => Some (True, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16830 (''''))) \<and> (
  (case  ((string_drop stringappend_16830 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16830 ((string_length (''''))))) of
       s0 => Some (False, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val shiftw_mnemonic_forwards : sop -> string*)

fun shiftw_mnemonic_forwards  :: " sop \<Rightarrow> string "  where 
     " shiftw_mnemonic_forwards RISCV_SLLI = ( (''slli''))"
|" shiftw_mnemonic_forwards RISCV_SRLI = ( (''srli''))"
|" shiftw_mnemonic_forwards RISCV_SRAI = ( (''srai''))"


(*val shiftw_mnemonic_backwards : string -> sop*)

definition shiftw_mnemonic_backwards  :: " string \<Rightarrow> sop "  where 
     " shiftw_mnemonic_backwards arg0 = ( 
  if(arg0 = (''slli'')) then RISCV_SLLI else
    (
    if(arg0 = (''srli'')) then RISCV_SRLI else
      (if(arg0 = (''srai'')) then RISCV_SRAI else undefined)) )"


(*val shiftw_mnemonic_forwards_matches : sop -> bool*)

fun shiftw_mnemonic_forwards_matches  :: " sop \<Rightarrow> bool "  where 
     " shiftw_mnemonic_forwards_matches RISCV_SLLI = ( True )"
|" shiftw_mnemonic_forwards_matches RISCV_SRLI = ( True )"
|" shiftw_mnemonic_forwards_matches RISCV_SRAI = ( True )"


(*val shiftw_mnemonic_backwards_matches : string -> bool*)

definition shiftw_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " shiftw_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''slli'')) then True else
    (
    if(arg0 = (''srli'')) then True else
      (if(arg0 = (''srai'')) then True else False)) )"


(*val shiftw_mnemonic_matches_prefix : string -> maybe ((sop * ii))*)

definition shiftw_mnemonic_matches_prefix  :: " string \<Rightarrow>(sop*int)option "  where 
     " shiftw_mnemonic_matches_prefix arg0 = (
   (let stringappend_16800 = arg0 in
   if (((((string_startswith stringappend_16800 (''slli''))) \<and> (
  (case  ((string_drop stringappend_16800 ((string_length (''slli''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16800 ((string_length (''slli''))))) of
       s0 => Some (RISCV_SLLI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16800 (''srli''))) \<and> (
  (case  ((string_drop stringappend_16800 ((string_length (''srli''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16800 ((string_length (''srli''))))) of
       s0 => Some (RISCV_SRLI, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16800 (''srai''))) \<and> (
  (case  ((string_drop stringappend_16800 ((string_length (''srai''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16800 ((string_length (''srai''))))) of
       s0 => Some (RISCV_SRAI, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val rtypew_mnemonic_forwards : ropw -> string*)

fun rtypew_mnemonic_forwards  :: " ropw \<Rightarrow> string "  where 
     " rtypew_mnemonic_forwards RISCV_ADDW = ( (''addw''))"
|" rtypew_mnemonic_forwards RISCV_SUBW = ( (''subw''))"
|" rtypew_mnemonic_forwards RISCV_SLLW = ( (''sllw''))"
|" rtypew_mnemonic_forwards RISCV_SRLW = ( (''srlw''))"
|" rtypew_mnemonic_forwards RISCV_SRAW = ( (''sraw''))"


(*val rtypew_mnemonic_backwards : string -> ropw*)

definition rtypew_mnemonic_backwards  :: " string \<Rightarrow> ropw "  where 
     " rtypew_mnemonic_backwards arg0 = ( 
  if(arg0 = (''addw'')) then RISCV_ADDW else
    (
    if(arg0 = (''subw'')) then RISCV_SUBW else
      (
      if(arg0 = (''sllw'')) then RISCV_SLLW else
        (
        if(arg0 = (''srlw'')) then RISCV_SRLW else
          (if(arg0 = (''sraw'')) then RISCV_SRAW else undefined)))) )"


(*val rtypew_mnemonic_forwards_matches : ropw -> bool*)

fun rtypew_mnemonic_forwards_matches  :: " ropw \<Rightarrow> bool "  where 
     " rtypew_mnemonic_forwards_matches RISCV_ADDW = ( True )"
|" rtypew_mnemonic_forwards_matches RISCV_SUBW = ( True )"
|" rtypew_mnemonic_forwards_matches RISCV_SLLW = ( True )"
|" rtypew_mnemonic_forwards_matches RISCV_SRLW = ( True )"
|" rtypew_mnemonic_forwards_matches RISCV_SRAW = ( True )"


(*val rtypew_mnemonic_backwards_matches : string -> bool*)

definition rtypew_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " rtypew_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''addw'')) then True else
    (
    if(arg0 = (''subw'')) then True else
      (
      if(arg0 = (''sllw'')) then True else
        (
        if(arg0 = (''srlw'')) then True else
          (if(arg0 = (''sraw'')) then True else False)))) )"


(*val rtypew_mnemonic_matches_prefix : string -> maybe ((ropw * ii))*)

definition rtypew_mnemonic_matches_prefix  :: " string \<Rightarrow>(ropw*int)option "  where 
     " rtypew_mnemonic_matches_prefix arg0 = (
   (let stringappend_16750 = arg0 in
   if (((((string_startswith stringappend_16750 (''addw''))) \<and> (
  (case  ((string_drop stringappend_16750 ((string_length (''addw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16750 ((string_length (''addw''))))) of
       s0 => Some (RISCV_ADDW, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16750 (''subw''))) \<and> (
  (case  ((string_drop stringappend_16750 ((string_length (''subw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16750 ((string_length (''subw''))))) of
       s0 => Some (RISCV_SUBW, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16750 (''sllw''))) \<and> (
  (case  ((string_drop stringappend_16750 ((string_length (''sllw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16750 ((string_length (''sllw''))))) of
       s0 => Some (RISCV_SLLW, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16750 (''srlw''))) \<and> (
  (case  ((string_drop stringappend_16750 ((string_length (''srlw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16750 ((string_length (''srlw''))))) of
       s0 => Some (RISCV_SRLW, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16750 (''sraw''))) \<and> (
  (case  ((string_drop stringappend_16750 ((string_length (''sraw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16750 ((string_length (''sraw''))))) of
       s0 => Some (RISCV_SRAW, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val encdec_mul_op_forwards : bool -> bool -> bool -> mword ty3*)

definition encdec_mul_op_forwards  :: " bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>(3)Word.word "  where 
     " encdec_mul_op_forwards arg0 arg1 arg2 = (
   (let arg0 = (arg0, arg1, arg2) in
   (case  arg0 of
     (False, True, True) => (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
   | (True, True, True) => (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
   | (True, True, False) => (vec_of_bits [B0,B1,B0]  ::  3 Word.word)
   | (True, False, False) => (vec_of_bits [B0,B1,B1]  ::  3 Word.word)
   )))"


(*val encdec_mul_op_backwards : mword ty3 -> (bool * bool * bool)*)

definition encdec_mul_op_backwards  :: "(3)Word.word \<Rightarrow> bool*bool*bool "  where 
     " encdec_mul_op_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then (False, True, True)
   else if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then (True, True, True)
   else if (((p00 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) then (True, True, False)
   else (True, False, False)))"


(*val encdec_mul_op_forwards_matches : bool -> bool -> bool -> bool*)

definition encdec_mul_op_forwards_matches  :: " bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool "  where 
     " encdec_mul_op_forwards_matches arg0 arg1 arg2 = (
   (let arg0 = (arg0, arg1, arg2) in
   (case  arg0 of
     (False, True, True) => True
   | (True, True, True) => True
   | (True, True, False) => True
   | (True, False, False) => True
   | _ => False
   )))"


(*val encdec_mul_op_backwards_matches : mword ty3 -> bool*)

definition encdec_mul_op_backwards_matches  :: "(3)Word.word \<Rightarrow> bool "  where 
     " encdec_mul_op_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) then True
   else False))"


(*val mul_mnemonic_forwards : bool -> bool -> bool -> string*)

definition mul_mnemonic_forwards  :: " bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> string "  where 
     " mul_mnemonic_forwards arg0 arg1 arg2 = (
   (let arg0 = (arg0, arg1, arg2) in
   (case  arg0 of
     (False, True, True) => (''mul'')
   | (True, True, True) => (''mulh'')
   | (True, True, False) => (''mulhsu'')
   | (True, False, False) => (''mulhu'')
   )))"


(*val mul_mnemonic_backwards : string -> (bool * bool * bool)*)

definition mul_mnemonic_backwards  :: " string \<Rightarrow> bool*bool*bool "  where 
     " mul_mnemonic_backwards arg0 = ( 
  if(arg0 = (''mul'')) then (False, True, True) else
    (
    if(arg0 = (''mulh'')) then (True, True, True) else
      (
      if(arg0 = (''mulhsu'')) then (True, True, False) else
        (if(arg0 = (''mulhu'')) then (True, False, False) else undefined))) )"


(*val mul_mnemonic_forwards_matches : bool -> bool -> bool -> bool*)

definition mul_mnemonic_forwards_matches  :: " bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool "  where 
     " mul_mnemonic_forwards_matches arg0 arg1 arg2 = (
   (let arg0 = (arg0, arg1, arg2) in
   (case  arg0 of
     (False, True, True) => True
   | (True, True, True) => True
   | (True, True, False) => True
   | (True, False, False) => True
   | _ => False
   )))"


(*val mul_mnemonic_backwards_matches : string -> bool*)

definition mul_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " mul_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''mul'')) then True else
    (
    if(arg0 = (''mulh'')) then True else
      (
      if(arg0 = (''mulhsu'')) then True else
        (if(arg0 = (''mulhu'')) then True else False))) )"


(*val mul_mnemonic_matches_prefix : string -> maybe (((bool * bool * bool) * ii))*)

definition mul_mnemonic_matches_prefix  :: " string \<Rightarrow>((bool*bool*bool)*int)option "  where 
     " mul_mnemonic_matches_prefix arg0 = (
   (let stringappend_16710 = arg0 in
   if (((((string_startswith stringappend_16710 (''mul''))) \<and> (
  (case  ((string_drop stringappend_16710 ((string_length (''mul''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16710 ((string_length (''mul''))))) of
       s0 => Some ((False, True, True), ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16710 (''mulh''))) \<and> (
  (case  ((string_drop stringappend_16710 ((string_length (''mulh''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16710 ((string_length (''mulh''))))) of
       s0 => Some ((True, True, True), ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16710 (''mulhsu''))) \<and> (
  (case  ((string_drop stringappend_16710 ((string_length (''mulhsu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16710 ((string_length (''mulhsu''))))) of
       s0 => Some ((True, True, False), ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16710 (''mulhu''))) \<and> (
  (case  ((string_drop stringappend_16710 ((string_length (''mulhu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16710 ((string_length (''mulhu''))))) of
       s0 => Some ((True, False, False), ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val maybe_not_u_forwards : bool -> string*)

fun maybe_not_u_forwards  :: " bool \<Rightarrow> string "  where 
     " maybe_not_u_forwards False = ( (''u''))"
|" maybe_not_u_forwards True = ( (''''))"


(*val maybe_not_u_backwards : string -> bool*)

definition maybe_not_u_backwards  :: " string \<Rightarrow> bool "  where 
     " maybe_not_u_backwards arg0 = ( 
  if(arg0 = (''u'')) then False else
    (if(arg0 = ('''')) then True else undefined) )"


(*val maybe_not_u_forwards_matches : bool -> bool*)

fun maybe_not_u_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " maybe_not_u_forwards_matches False = ( True )"
|" maybe_not_u_forwards_matches True = ( True )"


(*val maybe_not_u_backwards_matches : string -> bool*)

definition maybe_not_u_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " maybe_not_u_backwards_matches arg0 = ( 
  if(arg0 = (''u'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val maybe_not_u_matches_prefix : string -> maybe ((bool * ii))*)

definition maybe_not_u_matches_prefix  :: " string \<Rightarrow>(bool*int)option "  where 
     " maybe_not_u_matches_prefix arg0 = (
   (let stringappend_16690 = arg0 in
   if (((((string_startswith stringappend_16690 (''u''))) \<and> (
  (case  ((string_drop stringappend_16690 ((string_length (''u''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16690 ((string_length (''u''))))) of
       s0 => Some (False, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16690 (''''))) \<and> (
  (case  ((string_drop stringappend_16690 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16690 ((string_length (''''))))) of
       s0 => Some (True, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val bit_maybe_r_forwards : mword ty1 -> string*)

definition bit_maybe_r_forwards  :: "(1)Word.word \<Rightarrow> string "  where 
     " bit_maybe_r_forwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then (''r'')
   else ('''')))"


(*val bit_maybe_r_backwards : string -> mword ty1*)

definition bit_maybe_r_backwards  :: " string \<Rightarrow>(1)Word.word "  where 
     " bit_maybe_r_backwards arg0 = ( 
  if(arg0 = (''r'')) then ((vec_of_bits [B1] :: 1 Word.word)) else
    (
    if(arg0 = ('''')) then ((vec_of_bits [B0] :: 1 Word.word)) else undefined) )"


(*val bit_maybe_r_forwards_matches : mword ty1 -> bool*)

definition bit_maybe_r_forwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bit_maybe_r_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bit_maybe_r_backwards_matches : string -> bool*)

definition bit_maybe_r_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " bit_maybe_r_backwards_matches arg0 = ( 
  if(arg0 = (''r'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val bit_maybe_r_matches_prefix : string -> maybe ((mword ty1 * ii))*)

definition bit_maybe_r_matches_prefix  :: " string \<Rightarrow>((1)Word.word*int)option "  where 
     " bit_maybe_r_matches_prefix arg0 = (
   (let stringappend_16670 = arg0 in
   if (((((string_startswith stringappend_16670 (''r''))) \<and> (
  (case  ((string_drop stringappend_16670 ((string_length (''r''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16670 ((string_length (''r''))))) of
       s0 =>
        Some ((vec_of_bits [B1]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16670 (''''))) \<and> (
  (case  ((string_drop stringappend_16670 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16670 ((string_length (''''))))) of
       s0 =>
        Some ((vec_of_bits [B0]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val bit_maybe_w_forwards : mword ty1 -> string*)

definition bit_maybe_w_forwards  :: "(1)Word.word \<Rightarrow> string "  where 
     " bit_maybe_w_forwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then (''w'')
   else ('''')))"


(*val bit_maybe_w_backwards : string -> mword ty1*)

definition bit_maybe_w_backwards  :: " string \<Rightarrow>(1)Word.word "  where 
     " bit_maybe_w_backwards arg0 = ( 
  if(arg0 = (''w'')) then ((vec_of_bits [B1] :: 1 Word.word)) else
    (
    if(arg0 = ('''')) then ((vec_of_bits [B0] :: 1 Word.word)) else undefined) )"


(*val bit_maybe_w_forwards_matches : mword ty1 -> bool*)

definition bit_maybe_w_forwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bit_maybe_w_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bit_maybe_w_backwards_matches : string -> bool*)

definition bit_maybe_w_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " bit_maybe_w_backwards_matches arg0 = ( 
  if(arg0 = (''w'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val bit_maybe_w_matches_prefix : string -> maybe ((mword ty1 * ii))*)

definition bit_maybe_w_matches_prefix  :: " string \<Rightarrow>((1)Word.word*int)option "  where 
     " bit_maybe_w_matches_prefix arg0 = (
   (let stringappend_16650 = arg0 in
   if (((((string_startswith stringappend_16650 (''w''))) \<and> (
  (case  ((string_drop stringappend_16650 ((string_length (''w''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16650 ((string_length (''w''))))) of
       s0 =>
        Some ((vec_of_bits [B1]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16650 (''''))) \<and> (
  (case  ((string_drop stringappend_16650 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16650 ((string_length (''''))))) of
       s0 =>
        Some ((vec_of_bits [B0]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val bit_maybe_i_forwards : mword ty1 -> string*)

definition bit_maybe_i_forwards  :: "(1)Word.word \<Rightarrow> string "  where 
     " bit_maybe_i_forwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then (''i'')
   else ('''')))"


(*val bit_maybe_i_backwards : string -> mword ty1*)

definition bit_maybe_i_backwards  :: " string \<Rightarrow>(1)Word.word "  where 
     " bit_maybe_i_backwards arg0 = ( 
  if(arg0 = (''i'')) then ((vec_of_bits [B1] :: 1 Word.word)) else
    (
    if(arg0 = ('''')) then ((vec_of_bits [B0] :: 1 Word.word)) else undefined) )"


(*val bit_maybe_i_forwards_matches : mword ty1 -> bool*)

definition bit_maybe_i_forwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bit_maybe_i_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bit_maybe_i_backwards_matches : string -> bool*)

definition bit_maybe_i_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " bit_maybe_i_backwards_matches arg0 = ( 
  if(arg0 = (''i'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val bit_maybe_i_matches_prefix : string -> maybe ((mword ty1 * ii))*)

definition bit_maybe_i_matches_prefix  :: " string \<Rightarrow>((1)Word.word*int)option "  where 
     " bit_maybe_i_matches_prefix arg0 = (
   (let stringappend_16630 = arg0 in
   if (((((string_startswith stringappend_16630 (''i''))) \<and> (
  (case  ((string_drop stringappend_16630 ((string_length (''i''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16630 ((string_length (''i''))))) of
       s0 =>
        Some ((vec_of_bits [B1]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16630 (''''))) \<and> (
  (case  ((string_drop stringappend_16630 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16630 ((string_length (''''))))) of
       s0 =>
        Some ((vec_of_bits [B0]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val bit_maybe_o_forwards : mword ty1 -> string*)

definition bit_maybe_o_forwards  :: "(1)Word.word \<Rightarrow> string "  where 
     " bit_maybe_o_forwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then (''o'')
   else ('''')))"


(*val bit_maybe_o_backwards : string -> mword ty1*)

definition bit_maybe_o_backwards  :: " string \<Rightarrow>(1)Word.word "  where 
     " bit_maybe_o_backwards arg0 = ( 
  if(arg0 = (''o'')) then ((vec_of_bits [B1] :: 1 Word.word)) else
    (
    if(arg0 = ('''')) then ((vec_of_bits [B0] :: 1 Word.word)) else undefined) )"


(*val bit_maybe_o_forwards_matches : mword ty1 -> bool*)

definition bit_maybe_o_forwards_matches  :: "(1)Word.word \<Rightarrow> bool "  where 
     " bit_maybe_o_forwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B1]  ::  1 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then True
   else False))"


(*val bit_maybe_o_backwards_matches : string -> bool*)

definition bit_maybe_o_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " bit_maybe_o_backwards_matches arg0 = ( 
  if(arg0 = (''o'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val bit_maybe_o_matches_prefix : string -> maybe ((mword ty1 * ii))*)

definition bit_maybe_o_matches_prefix  :: " string \<Rightarrow>((1)Word.word*int)option "  where 
     " bit_maybe_o_matches_prefix arg0 = (
   (let stringappend_16610 = arg0 in
   if (((((string_startswith stringappend_16610 (''o''))) \<and> (
  (case  ((string_drop stringappend_16610 ((string_length (''o''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16610 ((string_length (''o''))))) of
       s0 =>
        Some ((vec_of_bits [B1]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16610 (''''))) \<and> (
  (case  ((string_drop stringappend_16610 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16610 ((string_length (''''))))) of
       s0 =>
        Some ((vec_of_bits [B0]  ::  1 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val fence_bits_forwards : mword ty4 -> string*)

definition fence_bits_forwards  :: "(4)Word.word \<Rightarrow> string "  where 
     " fence_bits_forwards v__0 = (
      (let (r :: 1 bits) = ((subrange_vec_dec v__0 (( 3 :: int)::ii) (( 3 :: int)::ii)  ::  1 Word.word)) in
      (let (w :: 1 bits) = ((subrange_vec_dec v__0 (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word)) in
      (let (i :: 1 bits) = ((subrange_vec_dec v__0 (( 1 :: int)::ii) (( 1 :: int)::ii)  ::  1 Word.word)) in
      (let (o1 :: 1 bits) = ((subrange_vec_dec v__0 (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word)) in
      string_append ((bit_maybe_r_forwards r))
        ((string_append ((bit_maybe_w_forwards w))
            ((string_append ((bit_maybe_i_forwards i))
                ((string_append ((bit_maybe_o_forwards o1)) (''''))))))))))))"


(*val fence_bits_backwards : string -> mword ty4*)

definition fence_bits_backwards  :: " string \<Rightarrow>(4)Word.word "  where 
     " fence_bits_backwards arg0 = (
   (let stringappend_16490 = arg0 in
   (let (r, stringappend_16510) =
     ((case  ((bit_maybe_r_matches_prefix stringappend_16490  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16500,stringappend_16510) => (stringappend_16500, stringappend_16510)
     )) in
   (let stringappend_16520 = (string_drop stringappend_16490 stringappend_16510) in
   (let (w, stringappend_16540) =
     ((case  ((bit_maybe_w_matches_prefix stringappend_16520  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16530,stringappend_16540) => (stringappend_16530, stringappend_16540)
     )) in
   (let stringappend_16550 = (string_drop stringappend_16520 stringappend_16540) in
   (let (i, stringappend_16570) =
     ((case  ((bit_maybe_i_matches_prefix stringappend_16550  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16560,stringappend_16570) => (stringappend_16560, stringappend_16570)
     )) in
   (let stringappend_16580 = (string_drop stringappend_16550 stringappend_16570) in
   (let (o1, stringappend_16600) =
     ((case  ((bit_maybe_o_matches_prefix stringappend_16580  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16590,stringappend_16600) => (stringappend_16590, stringappend_16600)
     )) in  if(((string_drop stringappend_16580 stringappend_16600)) = ('''')) then
   ((concat_vec r
       ((concat_vec w ((concat_vec i o1 :: 2 Word.word)) :: 3 Word.word)) :: 4 Word.word))
 else undefined)))))))))"


(*val fence_bits_forwards_matches : mword ty4 -> bool*)

definition fence_bits_forwards_matches  :: "(4)Word.word \<Rightarrow> bool "  where 
     " fence_bits_forwards_matches v__1 = ( True )"


(*val fence_bits_backwards_matches : string -> bool*)

definition fence_bits_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " fence_bits_backwards_matches arg0 = (
   (let stringappend_16370 = arg0 in
   if ((case  ((bit_maybe_r_matches_prefix stringappend_16370  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16380,stringappend_16390) =>
        (let stringappend_16400 = (string_drop stringappend_16370 stringappend_16390) in
        if ((case  ((bit_maybe_w_matches_prefix stringappend_16400  ::  (( 1 Word.word * ii))option)) of
            Some (stringappend_16410,stringappend_16420) =>
             (let stringappend_16430 = (string_drop stringappend_16400 stringappend_16420) in
             if ((case  ((bit_maybe_i_matches_prefix stringappend_16430  ::  (( 1 Word.word * ii))option)) of
                 Some (stringappend_16440,stringappend_16450) =>
                  (let stringappend_16460 = (string_drop stringappend_16430 stringappend_16450) in
                  if ((case  ((bit_maybe_o_matches_prefix stringappend_16460
                               ::  (( 1 Word.word * ii))option)) of
                      Some (stringappend_16470,stringappend_16480) => 
  if(((string_drop stringappend_16460 stringappend_16480)) = ('''')) then
    True else False
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (r, stringappend_16390) =
       ((case  ((bit_maybe_r_matches_prefix stringappend_16370  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16380,stringappend_16390) =>
          (stringappend_16380, stringappend_16390)
       )) in
     (let stringappend_16400 = (string_drop stringappend_16370 stringappend_16390) in
     (let (w, stringappend_16420) =
       ((case  ((bit_maybe_w_matches_prefix stringappend_16400  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16410,stringappend_16420) =>
          (stringappend_16410, stringappend_16420)
       )) in
     (let stringappend_16430 = (string_drop stringappend_16400 stringappend_16420) in
     (let (i, stringappend_16450) =
       ((case  ((bit_maybe_i_matches_prefix stringappend_16430  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16440,stringappend_16450) =>
          (stringappend_16440, stringappend_16450)
       )) in
     (let stringappend_16460 = (string_drop stringappend_16430 stringappend_16450) in
     (let (o1, stringappend_16480) =
       ((case  ((bit_maybe_o_matches_prefix stringappend_16460  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16470,stringappend_16480) =>
          (stringappend_16470, stringappend_16480)
       )) in  if(((string_drop stringappend_16460 stringappend_16480)) = ('''')) then 
 True else undefined)))))))
   else False))"


(*val fence_bits_matches_prefix : string -> maybe ((mword ty4 * ii))*)

definition fence_bits_matches_prefix  :: " string \<Rightarrow>((4)Word.word*int)option "  where 
     " fence_bits_matches_prefix arg0 = (
   (let stringappend_16250 = arg0 in
   if ((case  ((bit_maybe_r_matches_prefix stringappend_16250  ::  (( 1 Word.word * ii))option)) of
       Some (stringappend_16260,stringappend_16270) =>
        (let stringappend_16280 = (string_drop stringappend_16250 stringappend_16270) in
        if ((case  ((bit_maybe_w_matches_prefix stringappend_16280  ::  (( 1 Word.word * ii))option)) of
            Some (stringappend_16290,stringappend_16300) =>
             (let stringappend_16310 = (string_drop stringappend_16280 stringappend_16300) in
             if ((case  ((bit_maybe_i_matches_prefix stringappend_16310  ::  (( 1 Word.word * ii))option)) of
                 Some (stringappend_16320,stringappend_16330) =>
                  (let stringappend_16340 = (string_drop stringappend_16310 stringappend_16330) in
                  if ((case  ((bit_maybe_o_matches_prefix stringappend_16340
                               ::  (( 1 Word.word * ii))option)) of
                      Some (stringappend_16350,stringappend_16360) => 
  (case  ((string_drop stringappend_16340 stringappend_16360)) of
        s0 => True
  )
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (r, stringappend_16270) =
       ((case  ((bit_maybe_r_matches_prefix stringappend_16250  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16260,stringappend_16270) =>
          (stringappend_16260, stringappend_16270)
       )) in
     (let stringappend_16280 = (string_drop stringappend_16250 stringappend_16270) in
     (let (w, stringappend_16300) =
       ((case  ((bit_maybe_w_matches_prefix stringappend_16280  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16290,stringappend_16300) =>
          (stringappend_16290, stringappend_16300)
       )) in
     (let stringappend_16310 = (string_drop stringappend_16280 stringappend_16300) in
     (let (i, stringappend_16330) =
       ((case  ((bit_maybe_i_matches_prefix stringappend_16310  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16320,stringappend_16330) =>
          (stringappend_16320, stringappend_16330)
       )) in
     (let stringappend_16340 = (string_drop stringappend_16310 stringappend_16330) in
     (let (o1, stringappend_16360) =
       ((case  ((bit_maybe_o_matches_prefix stringappend_16340  ::  (( 1 Word.word * ii))option)) of
         Some (stringappend_16350,stringappend_16360) =>
          (stringappend_16350, stringappend_16360)
       )) in
     (case  ((string_drop stringappend_16340 stringappend_16360)) of
       s0 =>
        Some ((concat_vec r ((concat_vec w ((concat_vec i o1  ::  2 Word.word))  ::  3 Word.word))
                ::  4 Word.word),
              ((string_length arg0)) - ((string_length s0)))
     ))))))))
   else None))"


(*val aqrl_str : bool -> bool -> string*)

fun aqrl_str  :: " bool \<Rightarrow> bool \<Rightarrow> string "  where 
     " aqrl_str (False :: bool) (False :: bool) = ( (''''))"
|" aqrl_str (False :: bool) (True :: bool) = ( (''.rl''))"
|" aqrl_str (True :: bool) (False :: bool) = ( (''.aq''))"
|" aqrl_str (True :: bool) (True :: bool) = ( (''.aqrl''))"


(*val lrsc_width_str : word_width -> string*)

fun lrsc_width_str  :: " word_width \<Rightarrow> string "  where 
     " lrsc_width_str BYTE = ( (''.b''))"
|" lrsc_width_str HALF = ( (''.h''))"
|" lrsc_width_str WORD = ( (''.w''))"
|" lrsc_width_str DOUBLE = ( (''.d''))"


(*val process_loadres : forall 'int8_times_n . Size 'int8_times_n => mword ty5 -> mword ty64 -> MemoryOpResult (mword 'int8_times_n) -> bool -> M bool*)

definition process_loadres  :: "(5)Word.word \<Rightarrow>(64)Word.word \<Rightarrow>(('int8_times_n::len)Word.word)MemoryOpResult \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " process_loadres rd addr value1 is_unsigned = (
   (case  ((extend_value is_unsigned value1  :: ( 64 Word.word) MemoryOpResult)) of
     MemValue (result) =>
      (let (_ :: unit) = (load_reservation addr) in
      wX ((regbits_to_regno rd)) result \<then> return True)
   | MemException (e) => handle_mem_exception addr e \<then> return False
   ))"


(*val encdec_amoop_forwards : amoop -> mword ty5*)

fun encdec_amoop_forwards  :: " amoop \<Rightarrow>(5)Word.word "  where 
     " encdec_amoop_forwards AMOSWAP = ( (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOADD = ( (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOXOR = ( (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOAND = ( (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOOR = ( (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOMIN = ( (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOMAX = ( (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOMINU = ( (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word))"
|" encdec_amoop_forwards AMOMAXU = ( (vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word))"


(*val encdec_amoop_backwards : mword ty5 -> amoop*)

definition encdec_amoop_backwards  :: "(5)Word.word \<Rightarrow> amoop "  where 
     " encdec_amoop_backwards arg0 = (
   (let p00 = arg0 in
   if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word))))))
   then
     AMOSWAP
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     AMOADD
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     AMOXOR
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     AMOAND
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     AMOOR
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     AMOMIN
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     AMOMAX
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     AMOMINU
   else AMOMAXU))"


(*val encdec_amoop_forwards_matches : amoop -> bool*)

fun encdec_amoop_forwards_matches  :: " amoop \<Rightarrow> bool "  where 
     " encdec_amoop_forwards_matches AMOSWAP = ( True )"
|" encdec_amoop_forwards_matches AMOADD = ( True )"
|" encdec_amoop_forwards_matches AMOXOR = ( True )"
|" encdec_amoop_forwards_matches AMOAND = ( True )"
|" encdec_amoop_forwards_matches AMOOR = ( True )"
|" encdec_amoop_forwards_matches AMOMIN = ( True )"
|" encdec_amoop_forwards_matches AMOMAX = ( True )"
|" encdec_amoop_forwards_matches AMOMINU = ( True )"
|" encdec_amoop_forwards_matches AMOMAXU = ( True )"


(*val encdec_amoop_backwards_matches : mword ty5 -> bool*)

definition encdec_amoop_backwards_matches  :: "(5)Word.word \<Rightarrow> bool "  where 
     " encdec_amoop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B1]  ::  5 Word.word))))))
   then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B0,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B0,B0,B0]  ::  5 Word.word)))))) then
     True
   else if (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B1,B1,B1,B0,B0]  ::  5 Word.word)))))) then
     True
   else False))"


(*val amo_mnemonic_forwards : amoop -> string*)

fun amo_mnemonic_forwards  :: " amoop \<Rightarrow> string "  where 
     " amo_mnemonic_forwards AMOSWAP = ( (''amoswap''))"
|" amo_mnemonic_forwards AMOADD = ( (''amoadd''))"
|" amo_mnemonic_forwards AMOXOR = ( (''amoxor''))"
|" amo_mnemonic_forwards AMOAND = ( (''amoand''))"
|" amo_mnemonic_forwards AMOOR = ( (''amoor''))"
|" amo_mnemonic_forwards AMOMIN = ( (''amomin''))"
|" amo_mnemonic_forwards AMOMAX = ( (''amomax''))"
|" amo_mnemonic_forwards AMOMINU = ( (''amominu''))"
|" amo_mnemonic_forwards AMOMAXU = ( (''amomaxu''))"


(*val amo_mnemonic_backwards : string -> amoop*)

definition amo_mnemonic_backwards  :: " string \<Rightarrow> amoop "  where 
     " amo_mnemonic_backwards arg0 = ( 
  if(arg0 = (''amoswap'')) then AMOSWAP else
    (
    if(arg0 = (''amoadd'')) then AMOADD else
      (
      if(arg0 = (''amoxor'')) then AMOXOR else
        (
        if(arg0 = (''amoand'')) then AMOAND else
          (
          if(arg0 = (''amoor'')) then AMOOR else
            (
            if(arg0 = (''amomin'')) then AMOMIN else
              (
              if(arg0 = (''amomax'')) then AMOMAX else
                (
                if(arg0 = (''amominu'')) then AMOMINU else
                  (if(arg0 = (''amomaxu'')) then AMOMAXU else undefined)))))))) )"


(*val amo_mnemonic_forwards_matches : amoop -> bool*)

fun amo_mnemonic_forwards_matches  :: " amoop \<Rightarrow> bool "  where 
     " amo_mnemonic_forwards_matches AMOSWAP = ( True )"
|" amo_mnemonic_forwards_matches AMOADD = ( True )"
|" amo_mnemonic_forwards_matches AMOXOR = ( True )"
|" amo_mnemonic_forwards_matches AMOAND = ( True )"
|" amo_mnemonic_forwards_matches AMOOR = ( True )"
|" amo_mnemonic_forwards_matches AMOMIN = ( True )"
|" amo_mnemonic_forwards_matches AMOMAX = ( True )"
|" amo_mnemonic_forwards_matches AMOMINU = ( True )"
|" amo_mnemonic_forwards_matches AMOMAXU = ( True )"


(*val amo_mnemonic_backwards_matches : string -> bool*)

definition amo_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " amo_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''amoswap'')) then True else
    (
    if(arg0 = (''amoadd'')) then True else
      (
      if(arg0 = (''amoxor'')) then True else
        (
        if(arg0 = (''amoand'')) then True else
          (
          if(arg0 = (''amoor'')) then True else
            (
            if(arg0 = (''amomin'')) then True else
              (
              if(arg0 = (''amomax'')) then True else
                (
                if(arg0 = (''amominu'')) then True else
                  (if(arg0 = (''amomaxu'')) then True else False)))))))) )"


(*val amo_mnemonic_matches_prefix : string -> maybe ((amoop * ii))*)

definition amo_mnemonic_matches_prefix  :: " string \<Rightarrow>(amoop*int)option "  where 
     " amo_mnemonic_matches_prefix arg0 = (
   (let stringappend_16160 = arg0 in
   if (((((string_startswith stringappend_16160 (''amoswap''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amoswap''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amoswap''))))) of
       s0 => Some (AMOSWAP, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amoadd''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amoadd''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amoadd''))))) of
       s0 => Some (AMOADD, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amoxor''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amoxor''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amoxor''))))) of
       s0 => Some (AMOXOR, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amoand''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amoand''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amoand''))))) of
       s0 => Some (AMOAND, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amoor''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amoor''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amoor''))))) of
       s0 => Some (AMOOR, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amomin''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amomin''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amomin''))))) of
       s0 => Some (AMOMIN, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amomax''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amomax''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amomax''))))) of
       s0 => Some (AMOMAX, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amominu''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amominu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amominu''))))) of
       s0 => Some (AMOMINU, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16160 (''amomaxu''))) \<and> (
  (case  ((string_drop stringappend_16160 ((string_length (''amomaxu''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16160 ((string_length (''amomaxu''))))) of
       s0 => Some (AMOMAXU, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val encdec_csrop_forwards : csrop -> mword ty2*)

fun encdec_csrop_forwards  :: " csrop \<Rightarrow>(2)Word.word "  where 
     " encdec_csrop_forwards CSRRW = ( (vec_of_bits [B0,B1]  ::  2 Word.word))"
|" encdec_csrop_forwards CSRRS = ( (vec_of_bits [B1,B0]  ::  2 Word.word))"
|" encdec_csrop_forwards CSRRC = ( (vec_of_bits [B1,B1]  ::  2 Word.word))"


(*val encdec_csrop_backwards : mword ty2 -> csrop*)

definition encdec_csrop_backwards  :: "(2)Word.word \<Rightarrow> csrop "  where 
     " encdec_csrop_backwards arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then CSRRW
   else if (((p00 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then CSRRS
   else CSRRC))"


(*val encdec_csrop_forwards_matches : csrop -> bool*)

fun encdec_csrop_forwards_matches  :: " csrop \<Rightarrow> bool "  where 
     " encdec_csrop_forwards_matches CSRRW = ( True )"
|" encdec_csrop_forwards_matches CSRRS = ( True )"
|" encdec_csrop_forwards_matches CSRRC = ( True )"


(*val encdec_csrop_backwards_matches : mword ty2 -> bool*)

definition encdec_csrop_backwards_matches  :: "(2)Word.word \<Rightarrow> bool "  where 
     " encdec_csrop_backwards_matches arg0 = (
   (let p00 = arg0 in
   if (((p00 = (vec_of_bits [B0,B1]  ::  2 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B0]  ::  2 Word.word)))) then True
   else if (((p00 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) then True
   else False))"


(*val readCSR : mword ty12 -> M (mword ty64)*)

definition readCSR  :: "(12)Word.word \<Rightarrow>((register_value),((64)Word.word),(exception))monad "  where 
     " readCSR csr = (
   (let b__0 = csr in
   (if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (read_reg mvendorid_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B0]  ::  12 Word.word)))) then
      (read_reg marchid_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (read_reg mimpid_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B1,B1,B0,B0,B0,B1,B0,B1,B0,B0]  ::  12 Word.word)))) then
      (read_reg mhartid_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      read_reg mstatus_ref \<bind> (\<lambda> (w__4 :: Mstatus) . 
      return ((get_Mstatus_bits w__4  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      read_reg misa_ref \<bind> (\<lambda> (w__5 :: Misa) .  return ((get_Misa_bits w__5  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg medeleg_ref \<bind> (\<lambda> (w__6 :: Medeleg) . 
      return ((get_Medeleg_bits w__6  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      read_reg mideleg_ref \<bind> (\<lambda> (w__7 :: Minterrupts) . 
      return ((get_Minterrupts_bits w__7  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mie_ref \<bind> (\<lambda> (w__8 :: Minterrupts) . 
      return ((get_Minterrupts_bits w__8  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
      read_reg mtvec_ref \<bind> (\<lambda> (w__9 :: Mtvec) .  return ((get_Mtvec_bits w__9  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
      read_reg mcounteren_ref \<bind> (\<lambda> (w__10 :: Counteren) . 
      return ((EXTZ (( 64 :: int)::ii) ((get_Counteren_bits w__10  ::  32 Word.word))  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg mscratch_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (read_reg mepc_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__12 ::  64 Word.word) . 
      (pc_alignment_mask ()   :: ( 64 Word.word) M) \<bind> (\<lambda> (w__13 ::  64 Word.word) . 
      return ((and_vec w__12 w__13  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg mcause_ref \<bind> (\<lambda> (w__14 :: Mcause) . 
      return ((get_Mcause_bits w__14  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (read_reg mtval_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mip_ref \<bind> (\<lambda> (w__16 :: Minterrupts) . 
      return ((get_Minterrupts_bits w__16  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg pmpcfg0_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg pmpaddr0_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      read_reg mstatus_ref \<bind> (\<lambda> (w__19 :: Mstatus) . 
      return ((get_Sstatus_bits ((lower_mstatus w__19))  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg sedeleg_ref \<bind> (\<lambda> (w__20 :: Sedeleg) . 
      return ((get_Sedeleg_bits w__20  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      read_reg sideleg_ref \<bind> (\<lambda> (w__21 :: Sinterrupts) . 
      return ((get_Sinterrupts_bits w__21  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mie_ref \<bind> (\<lambda> (w__22 :: Minterrupts) . 
      read_reg mideleg_ref \<bind> (\<lambda> (w__23 :: Minterrupts) . 
      return ((get_Sinterrupts_bits ((lower_mie w__22 w__23))  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
      read_reg stvec_ref \<bind> (\<lambda> (w__24 :: Mtvec) .  return ((get_Mtvec_bits w__24  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
      read_reg scounteren_ref \<bind> (\<lambda> (w__25 :: Counteren) . 
      return ((EXTZ (( 64 :: int)::ii) ((get_Counteren_bits w__25  ::  32 Word.word))  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg sscratch_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (read_reg sepc_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__27 ::  64 Word.word) . 
      (pc_alignment_mask ()   :: ( 64 Word.word) M) \<bind> (\<lambda> (w__28 ::  64 Word.word) . 
      return ((and_vec w__27 w__28  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg scause_ref \<bind> (\<lambda> (w__29 :: Mcause) . 
      return ((get_Mcause_bits w__29  ::  64 Word.word)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (read_reg stval_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mip_ref \<bind> (\<lambda> (w__31 :: Minterrupts) . 
      read_reg mideleg_ref \<bind> (\<lambda> (w__32 :: Minterrupts) . 
      return ((get_Sinterrupts_bits ((lower_mip w__31 w__32))  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg satp_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg mcycle_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (read_reg mtime_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      (read_reg minstret_ref  :: ( 64 Word.word) M)
    else if (((b__0 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (read_reg tselect_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__37 ::  64 Word.word) . 
      return ((not_vec w__37  ::  64 Word.word)))
    else
      (let (_ :: unit) = (print_bits (''unhandled read to CSR '') csr) in
      return (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word))) \<bind> (\<lambda> (res :: xlenbits) . 
   (let (_ :: unit) =
     (print_endline
       (((op@) (''CSR '')
           (((op@) ((csr_name csr)) (((op@) ('' -> '') ((string_of_bits res))))))))) in
   return res))))"


(*val writeCSR : mword ty12 -> mword ty64 -> M unit*)

definition writeCSR  :: "(12)Word.word \<Rightarrow>(64)Word.word \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " writeCSR (csr :: csreg) (value1 :: xlenbits) = (
   (let b__0 = csr in
   (if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      read_reg mstatus_ref \<bind> (\<lambda> (w__0 :: Mstatus) . 
      (write_reg mstatus_ref ((legalize_mstatus w__0 value1)) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__1 :: Mstatus) . 
      return (Some ((get_Mstatus_bits w__1  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      read_reg misa_ref \<bind> (\<lambda> (w__2 :: Misa) . 
      legalize_misa w__2 value1 \<bind> (\<lambda> (w__3 :: Misa) . 
      (write_reg misa_ref w__3 \<then>
      read_reg misa_ref) \<bind> (\<lambda> (w__4 :: Misa) .  return (Some ((get_Misa_bits w__4  ::  64 Word.word))))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg medeleg_ref \<bind> (\<lambda> (w__5 :: Medeleg) . 
      (write_reg medeleg_ref ((legalize_medeleg w__5 value1)) \<then>
      read_reg medeleg_ref) \<bind> (\<lambda> (w__6 :: Medeleg) . 
      return (Some ((get_Medeleg_bits w__6  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      read_reg mideleg_ref \<bind> (\<lambda> (w__7 :: Minterrupts) . 
      (write_reg mideleg_ref ((legalize_mideleg w__7 value1)) \<then>
      read_reg mideleg_ref) \<bind> (\<lambda> (w__8 :: Minterrupts) . 
      return (Some ((get_Minterrupts_bits w__8  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mie_ref \<bind> (\<lambda> (w__9 :: Minterrupts) . 
      (write_reg mie_ref ((legalize_mie w__9 value1)) \<then>
      read_reg mie_ref) \<bind> (\<lambda> (w__10 :: Minterrupts) . 
      return (Some ((get_Minterrupts_bits w__10  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
      read_reg mtvec_ref \<bind> (\<lambda> (w__11 :: Mtvec) . 
      (write_reg mtvec_ref ((legalize_tvec w__11 value1)) \<then>
      read_reg mtvec_ref) \<bind> (\<lambda> (w__12 :: Mtvec) . 
      return (Some ((get_Mtvec_bits w__12  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
      read_reg mcounteren_ref \<bind> (\<lambda> (w__13 :: Counteren) . 
      (write_reg mcounteren_ref ((legalize_mcounteren w__13 value1)) \<then>
      read_reg mcounteren_ref) \<bind> (\<lambda> (w__14 :: Counteren) . 
      return (Some ((EXTZ (( 64 :: int)::ii) ((get_Counteren_bits w__14  ::  32 Word.word))  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg mscratch_ref value1 \<then>
      (read_reg mscratch_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__15 ::  64 Word.word) .  return (Some w__15))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (legalize_xepc value1  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__16 :: xlenbits) . 
      (write_reg mepc_ref w__16 \<then>
      (read_reg mepc_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__17 ::  64 Word.word) .  return (Some w__17)))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      (set_Mcause_bits mcause_ref value1 \<then>
      read_reg mcause_ref) \<bind> (\<lambda> (w__18 :: Mcause) . 
      return (Some ((get_Mcause_bits w__18  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (write_reg mtval_ref value1 \<then>
      (read_reg mtval_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__19 ::  64 Word.word) .  return (Some w__19))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mip_ref \<bind> (\<lambda> (w__20 :: Minterrupts) . 
      (write_reg mip_ref ((legalize_mip w__20 value1)) \<then>
      read_reg mip_ref) \<bind> (\<lambda> (w__21 :: Minterrupts) . 
      return (Some ((get_Minterrupts_bits w__21  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg pmpcfg0_ref value1 \<then>
      (read_reg pmpcfg0_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__22 ::  64 Word.word) .  return (Some w__22))
    else if (((b__0 = (vec_of_bits [B0,B0,B1,B1,B1,B0,B1,B1,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg pmpaddr0_ref value1 \<then>
      (read_reg pmpaddr0_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__23 ::  64 Word.word) .  return (Some w__23))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      read_reg mstatus_ref \<bind> (\<lambda> (w__24 :: Mstatus) . 
      (write_reg mstatus_ref ((legalize_sstatus w__24 value1)) \<then>
      read_reg mstatus_ref) \<bind> (\<lambda> (w__25 :: Mstatus) . 
      return (Some ((get_Mstatus_bits w__25  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      read_reg sedeleg_ref \<bind> (\<lambda> (w__26 :: Sedeleg) . 
      (write_reg sedeleg_ref ((legalize_sedeleg w__26 value1)) \<then>
      read_reg sedeleg_ref) \<bind> (\<lambda> (w__27 :: Sedeleg) . 
      return (Some ((get_Sedeleg_bits w__27  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (set_Sinterrupts_bits sideleg_ref value1 \<then>
      read_reg sideleg_ref) \<bind> (\<lambda> (w__28 :: Sinterrupts) . 
      return (Some ((get_Sinterrupts_bits w__28  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mie_ref \<bind> (\<lambda> (w__29 :: Minterrupts) . 
      read_reg mideleg_ref \<bind> (\<lambda> (w__30 :: Minterrupts) . 
      (write_reg mie_ref ((legalize_sie w__29 w__30 value1)) \<then>
      read_reg mie_ref) \<bind> (\<lambda> (w__31 :: Minterrupts) . 
      return (Some ((get_Minterrupts_bits w__31  ::  64 Word.word))))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)))) then
      read_reg stvec_ref \<bind> (\<lambda> (w__32 :: Mtvec) . 
      (write_reg stvec_ref ((legalize_tvec w__32 value1)) \<then>
      read_reg stvec_ref) \<bind> (\<lambda> (w__33 :: Mtvec) . 
      return (Some ((get_Mtvec_bits w__33  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B1,B0]  ::  12 Word.word)))) then
      read_reg scounteren_ref \<bind> (\<lambda> (w__34 :: Counteren) . 
      (write_reg scounteren_ref ((legalize_scounteren w__34 value1)) \<then>
      read_reg scounteren_ref) \<bind> (\<lambda> (w__35 :: Counteren) . 
      return (Some ((EXTZ (( 64 :: int)::ii) ((get_Counteren_bits w__35  ::  32 Word.word))  ::  64 Word.word)))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg sscratch_ref value1 \<then>
      (read_reg sscratch_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__36 ::  64 Word.word) .  return (Some w__36))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)))) then
      (legalize_xepc value1  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__37 :: xlenbits) . 
      (write_reg sepc_ref w__37 \<then>
      (read_reg sepc_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__38 ::  64 Word.word) .  return (Some w__38)))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      (set_Mcause_bits scause_ref value1 \<then>
      read_reg scause_ref) \<bind> (\<lambda> (w__39 :: Mcause) . 
      return (Some ((get_Mcause_bits w__39  ::  64 Word.word))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B0,B1,B1]  ::  12 Word.word)))) then
      (write_reg stval_ref value1 \<then>
      (read_reg stval_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__40 ::  64 Word.word) .  return (Some w__40))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B0,B1,B0,B0,B0,B1,B0,B0]  ::  12 Word.word)))) then
      read_reg mip_ref \<bind> (\<lambda> (w__41 :: Minterrupts) . 
      read_reg mideleg_ref \<bind> (\<lambda> (w__42 :: Minterrupts) . 
      (write_reg mip_ref ((legalize_sip w__41 w__42 value1)) \<then>
      read_reg mip_ref) \<bind> (\<lambda> (w__43 :: Minterrupts) . 
      return (Some ((get_Minterrupts_bits w__43  ::  64 Word.word))))))
    else if (((b__0 = (vec_of_bits [B0,B0,B0,B1,B1,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      cur_Architecture ()  \<bind> (\<lambda> (w__44 :: Architecture) . 
      (read_reg satp_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__45 ::  64 Word.word) . 
      (write_reg satp_ref ((legalize_satp w__44 w__45 value1  ::  64 Word.word)) \<then>
      (read_reg satp_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__46 ::  64 Word.word) .  return (Some w__46))))
    else if (((b__0 = (vec_of_bits [B0,B1,B1,B1,B1,B0,B1,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg tselect_ref value1 \<then>
      (read_reg tselect_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__47 ::  64 Word.word) .  return (Some w__47))
    else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)))) then
      (write_reg mcycle_ref value1 \<then>
      (read_reg mcycle_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__48 ::  64 Word.word) .  return (Some w__48))
    else if (((b__0 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B0,B0,B1,B0]  ::  12 Word.word)))) then
      ((write_reg minstret_ref value1 \<then>
      write_reg minstret_written_ref True) \<then>
      (read_reg minstret_ref  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__49 ::  64 Word.word) .  return (Some w__49))
    else return None) \<bind> (\<lambda> (res ::  xlenbits option) . 
   return ((case  res of
     Some (v) =>
      print_endline
        (((op@) (''CSR '')
            (((op@) ((csr_name csr))
                (((op@) ('' <- '')
                    (((op@) ((string_of_bits v))
                        (((op@) ('' (input: '') (((op@) ((string_of_bits value1)) ('')'')))))))))))))
   | None => print_bits (''unhandled write to CSR '') csr
   )))))"


(*val maybe_i_forwards : bool -> string*)

fun maybe_i_forwards  :: " bool \<Rightarrow> string "  where 
     " maybe_i_forwards True = ( (''i''))"
|" maybe_i_forwards False = ( (''''))"


(*val maybe_i_backwards : string -> bool*)

definition maybe_i_backwards  :: " string \<Rightarrow> bool "  where 
     " maybe_i_backwards arg0 = ( 
  if(arg0 = (''i'')) then True else
    (if(arg0 = ('''')) then False else undefined) )"


(*val maybe_i_forwards_matches : bool -> bool*)

fun maybe_i_forwards_matches  :: " bool \<Rightarrow> bool "  where 
     " maybe_i_forwards_matches True = ( True )"
|" maybe_i_forwards_matches False = ( True )"


(*val maybe_i_backwards_matches : string -> bool*)

definition maybe_i_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " maybe_i_backwards_matches arg0 = ( 
  if(arg0 = (''i'')) then True else (if(arg0 = ('''')) then True else False) )"


(*val maybe_i_matches_prefix : string -> maybe ((bool * ii))*)

definition maybe_i_matches_prefix  :: " string \<Rightarrow>(bool*int)option "  where 
     " maybe_i_matches_prefix arg0 = (
   (let stringappend_16140 = arg0 in
   if (((((string_startswith stringappend_16140 (''i''))) \<and> (
  (case  ((string_drop stringappend_16140 ((string_length (''i''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16140 ((string_length (''i''))))) of
       s0 => Some (True, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16140 (''''))) \<and> (
  (case  ((string_drop stringappend_16140 ((string_length (''''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16140 ((string_length (''''))))) of
       s0 => Some (False, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


(*val csr_mnemonic_forwards : csrop -> string*)

fun csr_mnemonic_forwards  :: " csrop \<Rightarrow> string "  where 
     " csr_mnemonic_forwards CSRRW = ( (''csrrw''))"
|" csr_mnemonic_forwards CSRRS = ( (''csrrs''))"
|" csr_mnemonic_forwards CSRRC = ( (''csrrc''))"


(*val csr_mnemonic_backwards : string -> csrop*)

definition csr_mnemonic_backwards  :: " string \<Rightarrow> csrop "  where 
     " csr_mnemonic_backwards arg0 = ( 
  if(arg0 = (''csrrw'')) then CSRRW else
    (
    if(arg0 = (''csrrs'')) then CSRRS else
      (if(arg0 = (''csrrc'')) then CSRRC else undefined)) )"


(*val csr_mnemonic_forwards_matches : csrop -> bool*)

fun csr_mnemonic_forwards_matches  :: " csrop \<Rightarrow> bool "  where 
     " csr_mnemonic_forwards_matches CSRRW = ( True )"
|" csr_mnemonic_forwards_matches CSRRS = ( True )"
|" csr_mnemonic_forwards_matches CSRRC = ( True )"


(*val csr_mnemonic_backwards_matches : string -> bool*)

definition csr_mnemonic_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " csr_mnemonic_backwards_matches arg0 = ( 
  if(arg0 = (''csrrw'')) then True else
    (
    if(arg0 = (''csrrs'')) then True else
      (if(arg0 = (''csrrc'')) then True else False)) )"


(*val csr_mnemonic_matches_prefix : string -> maybe ((csrop * ii))*)

definition csr_mnemonic_matches_prefix  :: " string \<Rightarrow>(csrop*int)option "  where 
     " csr_mnemonic_matches_prefix arg0 = (
   (let stringappend_16110 = arg0 in
   if (((((string_startswith stringappend_16110 (''csrrw''))) \<and> (
  (case  ((string_drop stringappend_16110 ((string_length (''csrrw''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16110 ((string_length (''csrrw''))))) of
       s0 => Some (CSRRW, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16110 (''csrrs''))) \<and> (
  (case  ((string_drop stringappend_16110 ((string_length (''csrrs''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16110 ((string_length (''csrrs''))))) of
       s0 => Some (CSRRS, ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_16110 (''csrrc''))) \<and> (
  (case  ((string_drop stringappend_16110 ((string_length (''csrrc''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_16110 ((string_length (''csrrc''))))) of
       s0 => Some (CSRRC, ((string_length arg0)) - ((string_length s0)))
     )
   else None))"


definition decodeCompressed  :: "(16)Word.word \<Rightarrow>(ast)option "  where 
     " decodeCompressed v__2 = (
   if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) \<and> ((((((((regbits_to_regno ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)))) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)))))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (nzi1 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (nzi0 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     if ((((((nzi1 = (vec_of_bits [B0]  ::  1 Word.word)))) \<and> (((((regbits_to_regno nzi0)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) then
       Some (NOP () )
     else None))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
     (let (nz54 :: 2 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 11 :: int)::ii)  ::  2 Word.word)) in
     (let (nz96 :: 4 bits) = ((subrange_vec_dec v__2 (( 10 :: int)::ii) (( 7 :: int)::ii)  ::  4 Word.word)) in
     (let (nz2 :: 1 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word)) in
     (let (nz3 :: 1 bits) = ((subrange_vec_dec v__2 (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let nzimm =
       ((concat_vec nz96 ((concat_vec nz54 ((concat_vec nz3 nz2  ::  2 Word.word))  ::  4 Word.word))
         ::  8 Word.word)) in
     if (((nzimm = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word)))) then None
     else Some (C_ADDI4SPN (rd,nzimm))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
     (let (ui53 :: 3 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 10 :: int)::ii)  ::  3 Word.word)) in
     (let (rs1 :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (ui2 :: 1 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word)) in
     (let (ui6 :: 1 bits) = ((subrange_vec_dec v__2 (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let uimm = ((concat_vec ui6 ((concat_vec ui53 ui2  ::  4 Word.word))  ::  5 Word.word)) in
     Some (C_LW (uimm,rs1,rd))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
     (let (ui53 :: 3 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 10 :: int)::ii)  ::  3 Word.word)) in
     (let (rs1 :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (ui76 :: 2 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let (rd :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let uimm = ((concat_vec ui76 ui53  ::  5 Word.word)) in
     Some (C_LD (uimm,rs1,rd)))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
     (let (ui53 :: 3 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 10 :: int)::ii)  ::  3 Word.word)) in
     (let (rs1 :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (ui2 :: 1 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word)) in
     (let (ui6 :: 1 bits) = ((subrange_vec_dec v__2 (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let uimm = ((concat_vec ui6 ((concat_vec ui53 ui2  ::  4 Word.word))  ::  5 Word.word)) in
     Some (C_SW (uimm,rs1,rs2))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
     (let (ui53 :: 3 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 10 :: int)::ii)  ::  3 Word.word)) in
     (let (rs1 :: 3 bits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (ui76 :: 2 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let (rs2 :: 3 bits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let uimm = ((concat_vec ui76 ui53  ::  5 Word.word)) in
     Some (C_SD (uimm,rs1,rs2)))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (nzi5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (nzi40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let nzi = ((concat_vec nzi5 nzi40  ::  6 Word.word)) in
     if ((((((nzi = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)))) \<or> (((((regbits_to_regno rsd)) = ((regbits_to_regno zreg)))))))) then
       None
     else Some (C_ADDI (nzi,rsd))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (imm5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (imm40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     Some (C_ADDIW ((concat_vec imm5 imm40  ::  6 Word.word),rsd)))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (imm5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (imm40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then None
     else Some (C_LI ((concat_vec imm5 imm40  ::  6 Word.word),rd)))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) \<and> ((((((((regbits_to_regno ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)))) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)))))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (nzi9 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (nzi4 :: 1 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word)) in
     (let (nzi6 :: 1 bits) = ((subrange_vec_dec v__2 (( 5 :: int)::ii) (( 5 :: int)::ii)  ::  1 Word.word)) in
     (let (nzi87 :: 2 bits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 3 :: int)::ii)  ::  2 Word.word)) in
     (let (nzi5 :: 1 bits) = ((subrange_vec_dec v__2 (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word)) in
     (let nzimm =
       ((concat_vec nzi9
          ((concat_vec nzi87 ((concat_vec nzi6 ((concat_vec nzi5 nzi4  ::  2 Word.word))  ::  3 Word.word))
             ::  5 Word.word))
         ::  6 Word.word)) in
     if (((nzimm = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)))) then None
     else Some (C_ADDI16SP nzimm)))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (imm17 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (imm1612 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     if ((((((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) \<or> (((((regbits_to_regno rd)) = ((regbits_to_regno sp)))))))) then
       None
     else Some (C_LUI ((concat_vec imm17 imm1612  ::  6 Word.word),rd)))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (nzui5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (nzui40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let (shamt :: 6 bits) = ((concat_vec nzui5 nzui40  ::  6 Word.word)) in
     if (((shamt = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)))) then None
     else Some (C_SRLI (shamt,rsd))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (nzui5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (nzui40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let (shamt :: 6 bits) = ((concat_vec nzui5 nzui40  ::  6 Word.word)) in
     if (((shamt = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)))) then None
     else Some (C_SRAI (shamt,rsd))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B0,B0]  ::  3 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (i5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (i40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     Some (C_ANDI ((concat_vec i5 i40  ::  6 Word.word),rsd)))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B0,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_SUB (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B0,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_XOR (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B0,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_OR (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B0,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_AND (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B1,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_SUBW (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 10 :: int)::ii)  ::  6 Word.word)) = (vec_of_bits [B1,B0,B0,B1,B1,B1]  ::  6 Word.word)))) \<and> ((((((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))))))))) then
     (let (rsd :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: cregbits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     Some (C_ADDW (rsd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B0,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (i11 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (i4 :: 1 bits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 11 :: int)::ii)  ::  1 Word.word)) in
     (let (i98 :: 2 bits) = ((subrange_vec_dec v__2 (( 10 :: int)::ii) (( 9 :: int)::ii)  ::  2 Word.word)) in
     (let (i10 :: 1 bits) = ((subrange_vec_dec v__2 (( 8 :: int)::ii) (( 8 :: int)::ii)  ::  1 Word.word)) in
     (let (i6 :: 1 bits) = ((subrange_vec_dec v__2 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let (i7 :: 1 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 6 :: int)::ii)  ::  1 Word.word)) in
     (let (i31 :: 3 bits) = ((subrange_vec_dec v__2 (( 5 :: int)::ii) (( 3 :: int)::ii)  ::  3 Word.word)) in
     (let (i5 :: 1 bits) = ((subrange_vec_dec v__2 (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word)) in
     Some (C_J ((concat_vec i11
                   ((concat_vec i10
                       ((concat_vec i98
                           ((concat_vec i7
                               ((concat_vec i6
                                   ((concat_vec i5 ((concat_vec i4 i31  ::  4 Word.word))  ::  5 Word.word))
                                  ::  6 Word.word))
                              ::  7 Word.word))
                          ::  9 Word.word))
                      ::  10 Word.word))
                  ::  11 Word.word)))))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (i8 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (i43 :: 2 bits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word)) in
     (let (rs :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (i76 :: 2 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let (i21 :: 2 bits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 3 :: int)::ii)  ::  2 Word.word)) in
     (let (i5 :: 1 bits) = ((subrange_vec_dec v__2 (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word)) in
     Some (C_BEQZ ((concat_vec i8
                      ((concat_vec i76
                          ((concat_vec i5 ((concat_vec i43 i21  ::  4 Word.word))  ::  5 Word.word))
                         ::  7 Word.word))
                     ::  8 Word.word),rs))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
     (let (i8 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (i43 :: 2 bits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 10 :: int)::ii)  ::  2 Word.word)) in
     (let (rs :: cregbits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (i76 :: 2 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let (i21 :: 2 bits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 3 :: int)::ii)  ::  2 Word.word)) in
     (let (i5 :: 1 bits) = ((subrange_vec_dec v__2 (( 2 :: int)::ii) (( 2 :: int)::ii)  ::  1 Word.word)) in
     Some (C_BNEZ ((concat_vec i8
                      ((concat_vec i76
                          ((concat_vec i5 ((concat_vec i43 i21  ::  4 Word.word))  ::  5 Word.word))
                         ::  7 Word.word))
                     ::  8 Word.word),rs))))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (nzui5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rsd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (nzui40 :: 5 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let (shamt :: 6 bits) = ((concat_vec nzui5 nzui40  ::  6 Word.word)) in
     if ((((((shamt = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)))) \<or> (((((regbits_to_regno rsd)) = ((regbits_to_regno zreg)))))))) then
       None
     else Some (C_SLLI (shamt,rsd))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (ui5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (ui42 :: 3 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 4 :: int)::ii)  ::  3 Word.word)) in
     (let (ui76 :: 2 bits) = ((subrange_vec_dec v__2 (( 3 :: int)::ii) (( 2 :: int)::ii)  ::  2 Word.word)) in
     (let (uimm :: 6 bits) = ((concat_vec ui76 ((concat_vec ui5 ui42  ::  4 Word.word))  ::  6 Word.word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then None
     else Some (C_LWSP (uimm,rd)))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (ui5 :: 1 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (ui43 :: 2 bits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let (ui86 :: 3 bits) = ((subrange_vec_dec v__2 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let (uimm :: 6 bits) = ((concat_vec ui86 ((concat_vec ui5 ui43  ::  3 Word.word))  ::  6 Word.word)) in
     if (((((regbits_to_regno rd)) = ((regbits_to_regno zreg))))) then None
     else Some (C_LDSP (uimm,rd)))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B0]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (ui52 :: 4 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 9 :: int)::ii)  ::  4 Word.word)) in
     (let (ui76 :: 2 bits) = ((subrange_vec_dec v__2 (( 8 :: int)::ii) (( 7 :: int)::ii)  ::  2 Word.word)) in
     (let (rs2 :: regbits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let (uimm :: 6 bits) = ((concat_vec ui76 ui52  ::  6 Word.word)) in
     Some (C_SWSP (uimm,rs2))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 13 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B1,B1,B1]  ::  3 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (ui53 :: 3 bits) = ((subrange_vec_dec v__2 (( 12 :: int)::ii) (( 10 :: int)::ii)  ::  3 Word.word)) in
     (let (ui86 :: 3 bits) = ((subrange_vec_dec v__2 (( 9 :: int)::ii) (( 7 :: int)::ii)  ::  3 Word.word)) in
     (let (rs2 :: regbits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     (let (uimm :: 6 bits) = ((concat_vec ui86 ui53  ::  6 Word.word)) in
     Some (C_SDSP (uimm,rs2))))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 12 :: int)::ii)  ::  4 Word.word)) = (vec_of_bits [B1,B0,B0,B0]  ::  4 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0]  ::  7 Word.word))))))) then
     (let (rs1 :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     if (((((regbits_to_regno rs1)) = ((regbits_to_regno zreg))))) then None
     else Some (C_JR rs1))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 12 :: int)::ii)  ::  4 Word.word)) = (vec_of_bits [B1,B0,B0,B1]  ::  4 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) = (vec_of_bits [B0,B0,B0,B0,B0,B1,B0]  ::  7 Word.word))))))) then
     (let (rs1 :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     if (((((regbits_to_regno rs1)) = ((regbits_to_regno zreg))))) then None
     else Some (C_JALR rs1))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 12 :: int)::ii)  ::  4 Word.word)) = (vec_of_bits [B1,B0,B0,B0]  ::  4 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (rd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (rs2 :: regbits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     if ((((((((regbits_to_regno rs2)) = ((regbits_to_regno zreg))))) \<or> (((((regbits_to_regno rd)) = ((regbits_to_regno zreg)))))))) then
       None
     else Some (C_MV (rd,rs2))))
   else if ((((((((subrange_vec_dec v__2 (( 15 :: int)::ii) (( 12 :: int)::ii)  ::  4 Word.word)) = (vec_of_bits [B1,B0,B0,B1]  ::  4 Word.word)))) \<and> (((((subrange_vec_dec v__2 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
     (let (rsd :: regbits) = ((subrange_vec_dec v__2 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (rs2 :: regbits) = ((subrange_vec_dec v__2 (( 6 :: int)::ii) (( 2 :: int)::ii)  ::  5 Word.word)) in
     if ((((((((regbits_to_regno rsd)) = ((regbits_to_regno zreg))))) \<or> (((((regbits_to_regno rs2)) = ((regbits_to_regno zreg)))))))) then
       None
     else Some (C_ADD (rsd,rs2))))
   else if (((v__2 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  16 Word.word)))) then
     Some (C_ILLEGAL () )
   else None )"


(*val execute_WFI : unit -> M bool*)

fun  execute_WFI  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_WFI g__26 = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (case  w__0 of
     Machine => return True
   | Supervisor =>
      read_reg mstatus_ref \<bind> (\<lambda> (w__1 :: Mstatus) . 
      if (((((get_Mstatus_TW w__1  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
        handle_illegal ()  \<then> return False
      else return True)
   | User => handle_illegal ()  \<then> return False
   )))"


(*val execute_UTYPE : mword ty20 -> mword ty5 -> uop -> M bool*)

fun  execute_UTYPE  :: "(20)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> uop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_UTYPE imm rd op1 = (
   (let (off :: xlenbits) =
     ((EXTS (( 64 :: int)::ii)
        ((concat_vec imm (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)
           ::  32 Word.word))
       ::  64 Word.word)) in
   (case  op1 of
     RISCV_LUI => return off
   | RISCV_AUIPC =>
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
      return ((add_vec w__0 off  ::  64 Word.word)))
   ) \<bind> (\<lambda> (ret :: xlenbits) . 
   wX ((regbits_to_regno rd)) ret \<then> return True)))"


(*val execute_THREAD_START : unit -> bool*)

fun  execute_THREAD_START  :: " unit \<Rightarrow> bool "  where 
     " execute_THREAD_START g__29 = ( True )"


(*val execute_STORECON : bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M bool*)

fun  execute_STORECON  :: " bool \<Rightarrow> bool \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> word_width \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_STORECON aq rl rs2 rs1 width rd = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (vaddr :: xlenbits) . 
   (let (aligned :: bool) =
     ((case  width of
       BYTE => True
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 :: int)::ii)))  ::  1 Word.word)) = (vec_of_bits [B0]  ::  1 Word.word))
     | WORD =>
        (((subrange_vec_dec vaddr (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))
     | DOUBLE =>
        (((subrange_vec_dec vaddr (( 2 :: int)::ii) (( 0 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))
     )) in
   if ((\<not> aligned)) then handle_mem_exception vaddr E_SAMO_Addr_Align \<then> return False
   else
     speculate_conditional_success vaddr \<bind> (\<lambda> (w__0 :: bool) . 
     if (((((bool_to_bits w__0  ::  1 Word.word)) = ((bool_to_bits False  ::  1 Word.word))))) then
       wX ((regbits_to_regno rd)) ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B1]  ::  1 Word.word)  ::  64 Word.word)) \<then>
       return True
     else
       translateAddr vaddr Write Data \<bind> (\<lambda> (w__1 :: TR_Result) . 
       (case  w__1 of
         TR_Failure (e) => handle_mem_exception vaddr e \<then> return False
       | TR_Address (addr) =>
          (case  width of
            WORD => mem_write_ea addr (( 4 :: int)::ii) aq rl True
          | DOUBLE => mem_write_ea addr (( 8 :: int)::ii) aq rl True
          | _ => internal_error (''STORECON expected word or double'')
          ) \<bind> (\<lambda> (eares :: unit MemoryOpResult) . 
          (case  eares of
            MemException (e) => handle_mem_exception addr e \<then> return False
          | MemValue (_) =>
             (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
             (case  width of
               WORD =>
                mem_write_value addr (( 4 :: int)::ii)
                  ((subrange_vec_dec rs2_val (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) aq rl True
             | DOUBLE => mem_write_value addr (( 8 :: int)::ii) rs2_val aq rl True
             | _ => internal_error (''STORECON expected word or double'')
             ) \<bind> (\<lambda> (res :: unit MemoryOpResult) . 
             (case  res of
               MemValue (_) =>
                wX ((regbits_to_regno rd))
                  ((EXTZ (( 64 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  64 Word.word)) \<then>
                ((let (_ :: unit) = (cancel_reservation () ) in
                return True))
             | MemException (e) => handle_mem_exception addr e \<then> return False
             )))
          ))
       ))))))"


(*val execute_STORE : mword ty12 -> mword ty5 -> mword ty5 -> word_width -> bool -> bool -> M bool*)

fun  execute_STORE  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> word_width \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_STORE imm rs2 rs1 width aq rl = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let (vaddr :: xlenbits) = ((add_vec w__0 ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word))  ::  64 Word.word)) in
   if ((check_misaligned vaddr width)) then
     handle_mem_exception vaddr E_SAMO_Addr_Align \<then> return False
   else
     translateAddr vaddr Write Data \<bind> (\<lambda> (w__1 :: TR_Result) . 
     (case  w__1 of
       TR_Failure (e) => handle_mem_exception vaddr e \<then> return False
     | TR_Address (addr) =>
        (case  width of
          BYTE => mem_write_ea addr (( 1 :: int)::ii) aq rl False
        | HALF => mem_write_ea addr (( 2 :: int)::ii) aq rl False
        | WORD => mem_write_ea addr (( 4 :: int)::ii) aq rl False
        | DOUBLE => mem_write_ea addr (( 8 :: int)::ii) aq rl False
        ) \<bind> (\<lambda> (eares :: unit MemoryOpResult) . 
        (case  eares of
          MemException (e) => handle_mem_exception addr e \<then> return False
        | MemValue (_) =>
           (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
           (case  width of
             BYTE =>
              mem_write_value addr (( 1 :: int)::ii) ((subrange_vec_dec rs2_val (( 7 :: int)::ii) (( 0 :: int)::ii)  ::  8 Word.word)) aq
                rl False
           | HALF =>
              mem_write_value addr (( 2 :: int)::ii) ((subrange_vec_dec rs2_val (( 15 :: int)::ii) (( 0 :: int)::ii)  ::  16 Word.word))
                aq rl False
           | WORD =>
              mem_write_value addr (( 4 :: int)::ii) ((subrange_vec_dec rs2_val (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))
                aq rl False
           | DOUBLE => mem_write_value addr (( 8 :: int)::ii) rs2_val aq rl False
           ) \<bind> (\<lambda> (res :: unit MemoryOpResult) . 
           (case  res of
             MemValue (_) => return True
           | MemException (e) => handle_mem_exception addr e \<then> return False
           )))
        ))
     )))))"


(*val execute_STOP_FETCHING : unit -> bool*)

fun  execute_STOP_FETCHING  :: " unit \<Rightarrow> bool "  where 
     " execute_STOP_FETCHING g__28 = ( True )"


(*val execute_SRET : unit -> M bool*)

fun  execute_SRET  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_SRET g__24 = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (case  w__0 of
     User => handle_illegal () 
   | Supervisor =>
      read_reg mstatus_ref \<bind> (\<lambda> (w__1 :: Mstatus) . 
      if (((((get_Mstatus_TSR w__1  ::  1 Word.word)) = ((bool_to_bits True  ::  1 Word.word))))) then
        handle_illegal () 
      else
        read_reg cur_privilege_ref \<bind> (\<lambda> (w__2 :: Privilege) . 
        (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 ::  64 Word.word) . 
        (handle_exception w__2 (CTL_SRET () ) w__3  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__4 :: xlenbits) . 
        write_reg nextPC_ref w__4))))
   | Machine =>
      read_reg cur_privilege_ref \<bind> (\<lambda> (w__5 :: Privilege) . 
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__6 ::  64 Word.word) . 
      (handle_exception w__5 (CTL_SRET () ) w__6  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__7 :: xlenbits) . 
      write_reg nextPC_ref w__7)))
   ) \<then>
   return False))"


(*val execute_SHIFTW : mword ty5 -> mword ty5 -> mword ty5 -> sop -> M bool*)

fun  execute_SHIFTW  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> sop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_SHIFTW shamt rs1 rd op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let rs1_val = ((subrange_vec_dec w__0 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (let (result :: 32 bits) =
     ((case  op1 of
       RISCV_SLLI => (shift_bits_left rs1_val shamt  ::  32 Word.word)
     | RISCV_SRLI => (shift_bits_right rs1_val shamt  ::  32 Word.word)
     | RISCV_SRAI => (shift_right_arith32 rs1_val shamt  ::  32 Word.word)
     )) in
   wX ((regbits_to_regno rd)) ((EXTS (( 64 :: int)::ii) result  ::  64 Word.word)) \<then> return True))))"


(*val execute_SHIFTIOP : mword ty6 -> mword ty5 -> mword ty5 -> sop -> M bool*)

fun  execute_SHIFTIOP  :: "(6)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> sop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_SHIFTIOP shamt rs1 rd op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (let (result :: xlenbits) =
     ((case  op1 of
       RISCV_SLLI => (shift_bits_left rs1_val shamt  ::  64 Word.word)
     | RISCV_SRLI => (shift_bits_right rs1_val shamt  ::  64 Word.word)
     | RISCV_SRAI => (shift_right_arith64 rs1_val shamt  ::  64 Word.word)
     )) in
   wX ((regbits_to_regno rd)) result \<then> return True)))"


(*val execute_SFENCE_VMA : mword ty5 -> mword ty5 -> M bool*)

fun  execute_SFENCE_VMA  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_SFENCE_VMA rs1 rs2 = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   if (((((privLevel_to_bits w__0  ::  2 Word.word)) = ((privLevel_to_bits User  ::  2 Word.word)))))
   then
     handle_illegal ()  \<then> return False
   else
     read_reg mstatus_ref \<bind> (\<lambda> (w__1 :: Mstatus) . 
     read_reg mstatus_ref \<bind> (\<lambda> (w__2 :: Mstatus) . 
     (let p__20 =
       (architecture ((get_Mstatus_SXL w__1  ::  2 Word.word)), (get_Mstatus_TVM w__2  ::  1 Word.word)) in
     (case  p__20 of
       (Some (RV64), v_0) =>
        if (((v_0 = ((bool_to_bits True  ::  1 Word.word))))) then handle_illegal ()  \<then> return False
        else if (((v_0 = ((bool_to_bits False  ::  1 Word.word))))) then
          (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then return None
           else
             (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 ::  64 Word.word) . 
             return (Some ((subrange_vec_dec w__3 (( 38 :: int)::ii) (( 0 :: int)::ii)  ::  39 Word.word))))) \<bind> (\<lambda> (addr ::
             vaddr39 option) . 
          (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then return None
           else
             (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__4 ::  64 Word.word) . 
             return (Some ((subrange_vec_dec w__4 (( 15 :: int)::ii) (( 0 :: int)::ii)  ::  16 Word.word))))) \<bind> (\<lambda> (asid ::
             asid64 option) . 
          flushTLB asid addr \<then> return True))
        else
          (case  (Some RV64, v_0) of
            (g__18, g__19) => internal_error (''unimplemented sfence architecture'')
          )
     | (g__18, g__19) => internal_error (''unimplemented sfence architecture'')
     ))))))"


(*val execute_RTYPEW : mword ty5 -> mword ty5 -> mword ty5 -> ropw -> M bool*)

fun  execute_RTYPEW  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> ropw \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_RTYPEW rs2 rs1 rd op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let rs1_val = ((subrange_vec_dec w__0 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (let rs2_val = ((subrange_vec_dec w__1 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (let (result :: 32 bits) =
     ((case  op1 of
       RISCV_ADDW => (add_vec rs1_val rs2_val  ::  32 Word.word)
     | RISCV_SUBW => (sub_vec rs1_val rs2_val  ::  32 Word.word)
     | RISCV_SLLW =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 4 :: int)::ii) (( 0 :: int)::ii)  ::  5 Word.word))
          ::  32 Word.word)
     | RISCV_SRLW =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 4 :: int)::ii) (( 0 :: int)::ii)  ::  5 Word.word))
          ::  32 Word.word)
     | RISCV_SRAW =>
        (shift_right_arith32 rs1_val ((subrange_vec_dec rs2_val (( 4 :: int)::ii) (( 0 :: int)::ii)  ::  5 Word.word))
          ::  32 Word.word)
     )) in
   wX ((regbits_to_regno rd)) ((EXTS (( 64 :: int)::ii) result  ::  64 Word.word)) \<then> return True))))))"


(*val execute_RTYPE : mword ty5 -> mword ty5 -> mword ty5 -> rop -> M bool*)

fun  execute_RTYPE  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> rop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_RTYPE rs2 rs1 rd op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
   (let (result :: xlenbits) =
     ((case  op1 of
       RISCV_ADD => (add_vec rs1_val rs2_val  ::  64 Word.word)
     | RISCV_SUB => (sub_vec rs1_val rs2_val  ::  64 Word.word)
     | RISCV_SLL =>
        (shift_bits_left rs1_val ((subrange_vec_dec rs2_val (( 5 :: int)::ii) (( 0 :: int)::ii)  ::  6 Word.word))
          ::  64 Word.word)
     | RISCV_SLT =>
        (EXTZ (( 64 :: int)::ii) ((bool_to_bits ((zopz0zI_s rs1_val rs2_val))  ::  1 Word.word))  ::  64 Word.word)
     | RISCV_SLTU =>
        (EXTZ (( 64 :: int)::ii) ((bool_to_bits ((zopz0zI_u rs1_val rs2_val))  ::  1 Word.word))  ::  64 Word.word)
     | RISCV_XOR => (xor_vec rs1_val rs2_val  ::  64 Word.word)
     | RISCV_SRL =>
        (shift_bits_right rs1_val ((subrange_vec_dec rs2_val (( 5 :: int)::ii) (( 0 :: int)::ii)  ::  6 Word.word))
          ::  64 Word.word)
     | RISCV_SRA =>
        (shift_right_arith64 rs1_val ((subrange_vec_dec rs2_val (( 5 :: int)::ii) (( 0 :: int)::ii)  ::  6 Word.word))
          ::  64 Word.word)
     | RISCV_OR => (or_vec rs1_val rs2_val  ::  64 Word.word)
     | RISCV_AND => (and_vec rs1_val rs2_val  ::  64 Word.word)
     )) in
   wX ((regbits_to_regno rd)) result \<then> return True))))"


(*val execute_RISCV_JALR : mword ty12 -> mword ty5 -> mword ty5 -> M bool*)

fun  execute_RISCV_JALR  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_RISCV_JALR imm rs1 rd = (
   (read_reg nextPC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (wX ((regbits_to_regno rd)) w__0 \<then>
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M)) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (let (newPC :: xlenbits) = ((add_vec w__1 ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word))  ::  64 Word.word)) in
   write_reg
     nextPC_ref
     ((concat_vec ((subrange_vec_dec newPC (( 63 :: int)::ii) (( 1 :: int)::ii)  ::  63 Word.word))
         (vec_of_bits [B0]  ::  1 Word.word)
        ::  64 Word.word)) \<then>
   return True))))"


(*val execute_RISCV_JAL : mword ty21 -> mword ty5 -> M bool*)

fun  execute_RISCV_JAL  :: "(21)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_RISCV_JAL imm rd = (
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (pc :: xlenbits) . 
   (read_reg nextPC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   wX ((regbits_to_regno rd)) w__0 \<then>
   ((let (offset :: xlenbits) = ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) in
   write_reg nextPC_ref ((add_vec pc offset  ::  64 Word.word)) \<then> return True)))))"


(*val execute_REMW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

fun  execute_REMW  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_REMW rs2 rs1 rd s = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let rs1_val = ((subrange_vec_dec w__0 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (let rs2_val = ((subrange_vec_dec w__1 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (let (rs1_int :: ii) = (if s then Word.sint rs1_val else Word.uint rs1_val) in
   (let (rs2_int :: ii) = (if s then Word.sint rs2_val else Word.uint rs2_val) in
   (let (r :: ii) = (if (((rs2_int = (( 0 :: int)::ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in
   wX ((regbits_to_regno rd)) ((EXTS (( 64 :: int)::ii) ((to_bits (( 32 :: int)::ii) r  ::  32 Word.word))  ::  64 Word.word)) \<then>
   return True))))))))"


(*val execute_REM : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

fun  execute_REM  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_REM rs2 rs1 rd s = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
   (let (rs1_int :: ii) = (if s then Word.sint rs1_val else Word.uint rs1_val) in
   (let (rs2_int :: ii) = (if s then Word.sint rs2_val else Word.uint rs2_val) in
   (let (r :: ii) = (if (((rs2_int = (( 0 :: int)::ii)))) then rs1_int else hardware_mod rs1_int rs2_int) in
   wX ((regbits_to_regno rd)) ((to_bits xlen r  ::  64 Word.word)) \<then> return True))))))"


(*val execute_NOP : unit -> bool*)

fun  execute_NOP  :: " unit \<Rightarrow> bool "  where 
     " execute_NOP g__27 = ( True )"


(*val execute_MULW : mword ty5 -> mword ty5 -> mword ty5 -> M bool*)

fun  execute_MULW  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_MULW rs2 rs1 rd = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let rs1_val = ((subrange_vec_dec w__0 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (let rs2_val = ((subrange_vec_dec w__1 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (let (rs1_int :: ii) = (Word.sint rs1_val) in
   (let (rs2_int :: ii) = (Word.sint rs2_val) in
   (let result32 =
     ((subrange_vec_dec ((to_bits (( 64 :: int)::ii) ((rs1_int * rs2_int))  ::  64 Word.word)) (( 31 :: int)::ii)
        (( 0 :: int)::ii)
       ::  32 Word.word)) in
   (let (result :: xlenbits) = ((EXTS (( 64 :: int)::ii) result32  ::  64 Word.word)) in
   wX ((regbits_to_regno rd)) result \<then> return True)))))))))"


(*val execute_MUL : mword ty5 -> mword ty5 -> mword ty5 -> bool -> bool -> bool -> M bool*)

fun  execute_MUL  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_MUL rs2 rs1 rd high signed1 signed2 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
   (let (rs1_int :: ii) = (if signed1 then Word.sint rs1_val else Word.uint rs1_val) in
   (let (rs2_int :: ii) = (if signed2 then Word.sint rs2_val else Word.uint rs2_val) in
   (let result128 = ((to_bits (( 128 :: int)::ii) ((rs1_int * rs2_int))  ::  128 Word.word)) in
   (let result =
     (if high then (subrange_vec_dec result128 (( 127 :: int)::ii) (( 64 :: int)::ii)  ::  64 Word.word)
     else (subrange_vec_dec result128 (( 63 :: int)::ii) (( 0 :: int)::ii)  ::  64 Word.word)) in
   wX ((regbits_to_regno rd)) result \<then> return True)))))))"


(*val execute_MRET : unit -> M bool*)

fun  execute_MRET  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_MRET g__23 = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (if (((((privLevel_to_bits w__0  ::  2 Word.word)) = ((privLevel_to_bits Machine  ::  2 Word.word)))))
    then
      read_reg cur_privilege_ref \<bind> (\<lambda> (w__1 :: Privilege) . 
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 ::  64 Word.word) . 
      (handle_exception w__1 (CTL_MRET () ) w__2  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 :: xlenbits) . 
      write_reg nextPC_ref w__3)))
    else handle_illegal () ) \<then>
   return False))"


(*val execute_LOADRES : bool -> bool -> mword ty5 -> word_width -> mword ty5 -> M bool*)

fun  execute_LOADRES  :: " bool \<Rightarrow> bool \<Rightarrow>(5)Word.word \<Rightarrow> word_width \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_LOADRES aq rl rs1 width rd = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (vaddr :: xlenbits) . 
   (let (aligned :: bool) =
     ((case  width of
       BYTE => True
     | HALF =>
        (((cast_unit_vec0 ((access_vec_dec vaddr (( 0 :: int)::ii)))  ::  1 Word.word)) = (vec_of_bits [B0]  ::  1 Word.word))
     | WORD =>
        (((subrange_vec_dec vaddr (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))
     | DOUBLE =>
        (((subrange_vec_dec vaddr (( 2 :: int)::ii) (( 0 :: int)::ii)  ::  3 Word.word)) = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))
     )) in
   if ((\<not> aligned)) then handle_mem_exception vaddr E_SAMO_Addr_Align \<then> return False
   else
     translateAddr vaddr Read Data \<bind> (\<lambda> (w__0 :: TR_Result) . 
     (case  w__0 of
       TR_Failure (e) => handle_mem_exception vaddr e \<then> return False
     | TR_Address (addr) =>
        (case  width of
          WORD =>
           (mem_read addr (( 4 :: int)::ii) aq rl True  :: ( ( 32 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__1 :: ( 32 Word.word)
             MemoryOpResult) . 
           process_loadres rd vaddr w__1 False)
        | DOUBLE =>
           (mem_read addr (( 8 :: int)::ii) aq rl True  :: ( ( 64 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__3 :: ( 64 Word.word)
             MemoryOpResult) . 
           process_loadres rd vaddr w__3 False)
        | _ => internal_error (''LOADRES expected WORD or DOUBLE'')
        )
     )))))"


(*val execute_LOAD : mword ty12 -> mword ty5 -> mword ty5 -> bool -> word_width -> bool -> bool -> M bool*)

fun  execute_LOAD  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow> word_width \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_LOAD imm rs1 rd is_unsigned width aq rl = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let (vaddr :: xlenbits) = ((add_vec w__0 ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word))  ::  64 Word.word)) in
   if ((check_misaligned vaddr width)) then
     handle_mem_exception vaddr E_Load_Addr_Align \<then> return False
   else
     translateAddr vaddr Read Data \<bind> (\<lambda> (w__1 :: TR_Result) . 
     (case  w__1 of
       TR_Failure (e) => handle_mem_exception vaddr e \<then> return False
     | TR_Address (addr) =>
        (case  width of
          BYTE =>
           (mem_read addr (( 1 :: int)::ii) aq rl False  :: ( ( 8 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__2 :: ( 8 Word.word)
             MemoryOpResult) . 
           process_load rd vaddr w__2 is_unsigned)
        | HALF =>
           (mem_read addr (( 2 :: int)::ii) aq rl False  :: ( ( 16 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__4 :: ( 16 Word.word)
             MemoryOpResult) . 
           process_load rd vaddr w__4 is_unsigned)
        | WORD =>
           (mem_read addr (( 4 :: int)::ii) aq rl False  :: ( ( 32 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__6 :: ( 32 Word.word)
             MemoryOpResult) . 
           process_load rd vaddr w__6 is_unsigned)
        | DOUBLE =>
           (mem_read addr (( 8 :: int)::ii) aq rl False  :: ( ( 64 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__8 :: ( 64 Word.word)
             MemoryOpResult) . 
           process_load rd vaddr w__8 is_unsigned)
        )
     )))))"


(*val execute_ITYPE : mword ty12 -> mword ty5 -> mword ty5 -> iop -> M bool*)

fun  execute_ITYPE  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> iop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_ITYPE imm rs1 rd op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (let (immext :: xlenbits) = ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) in
   (let (result :: xlenbits) =
     ((case  op1 of
       RISCV_ADDI => (add_vec rs1_val immext  ::  64 Word.word)
     | RISCV_SLTI =>
        (EXTZ (( 64 :: int)::ii) ((bool_to_bits ((zopz0zI_s rs1_val immext))  ::  1 Word.word))  ::  64 Word.word)
     | RISCV_SLTIU =>
        (EXTZ (( 64 :: int)::ii) ((bool_to_bits ((zopz0zI_u rs1_val immext))  ::  1 Word.word))  ::  64 Word.word)
     | RISCV_XORI => (xor_vec rs1_val immext  ::  64 Word.word)
     | RISCV_ORI => (or_vec rs1_val immext  ::  64 Word.word)
     | RISCV_ANDI => (and_vec rs1_val immext  ::  64 Word.word)
     )) in
   wX ((regbits_to_regno rd)) result \<then> return True))))"


(*val execute_ILLEGAL : mword ty32 -> M bool*)

fun  execute_ILLEGAL  :: "(32)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_ILLEGAL s = ( handle_illegal ()  \<then> return False )"


(*val execute_FENCEI : unit -> M bool*)

fun  execute_FENCEI  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_FENCEI g__21 = ( MEM_fence_i ()  \<then> return True )"


(*val execute_FENCE : mword ty4 -> mword ty4 -> M bool*)

fun  execute_FENCE  :: "(4)Word.word \<Rightarrow>(4)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_FENCE pred succ = (
   (case  (pred, succ) of
     (v__132, v__133) =>
      if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
        MEM_fence_rw_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
        MEM_fence_r_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
        MEM_fence_r_r () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
        MEM_fence_rw_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
        MEM_fence_w_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
        MEM_fence_w_rw () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
        MEM_fence_rw_r () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
        MEM_fence_r_w () 
      else if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
        MEM_fence_w_r () 
      else
        return (if ((((((((subrange_vec_dec v__132 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__133 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
                  () 
                else
                  (let (_ :: unit) = (print_endline (''FIXME: unsupported fence'')) in
                  () ))
   ) \<then>
   return True )"


(*val execute_ECALL : unit -> M bool*)

fun  execute_ECALL  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_ECALL g__22 = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   (let (t :: sync_exception) =
     ((| sync_exception_trap =
          ((case  w__0 of
            User => E_U_EnvCall
          | Supervisor => E_S_EnvCall
          | Machine => E_M_EnvCall
          )), 
        sync_exception_excinfo = None |)) in
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__1 :: Privilege) . 
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__2 ::  64 Word.word) . 
   (handle_exception w__1 (CTL_TRAP t) w__2  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 :: xlenbits) . 
   write_reg nextPC_ref w__3 \<then> return False))))))"


(*val execute_EBREAK : unit -> M bool*)

fun  execute_EBREAK  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_EBREAK g__25 = (
   (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   handle_mem_exception w__0 E_Breakpoint \<then> return False))"


(*val execute_DIVW : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

fun  execute_DIVW  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_DIVW rs2 rs1 rd s = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let rs1_val = ((subrange_vec_dec w__0 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
   (let rs2_val = ((subrange_vec_dec w__1 (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) in
   (let (rs1_int :: ii) = (if s then Word.sint rs1_val else Word.uint rs1_val) in
   (let (rs2_int :: ii) = (if s then Word.sint rs2_val else Word.uint rs2_val) in
   (let (q :: ii) = (if (((rs2_int = (( 0 :: int)::ii)))) then ((( 0 :: int)-( 1 :: int))::ii) else hardware_quot rs1_int rs2_int) in
   (let (q' :: ii) =
     (if (((s \<and> ((q > ((((pow2 (( 31 :: int)::ii))) - (( 1 :: int)::ii)))))))) then
       (( 0 :: int)::ii) - ((ex_int ((pow (( 2 :: int)::ii) (( 31 :: int)::ii)))))
     else q) in
   wX ((regbits_to_regno rd)) ((EXTS (( 64 :: int)::ii) ((to_bits (( 32 :: int)::ii) q'  ::  32 Word.word))  ::  64 Word.word)) \<then>
   return True)))))))))"


(*val execute_DIV : mword ty5 -> mword ty5 -> mword ty5 -> bool -> M bool*)

fun  execute_DIV  :: "(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_DIV rs2 rs1 rd s = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
   (let (rs1_int :: ii) = (if s then Word.sint rs1_val else Word.uint rs1_val) in
   (let (rs2_int :: ii) = (if s then Word.sint rs2_val else Word.uint rs2_val) in
   (let (q :: ii) = (if (((rs2_int = (( 0 :: int)::ii)))) then ((( 0 :: int)-( 1 :: int))::ii) else hardware_quot rs1_int rs2_int) in
   (let (q' :: ii) = (if (((s \<and> ((q > xlen_max_signed))))) then xlen_min_signed else q) in
   wX ((regbits_to_regno rd)) ((to_bits xlen q'  ::  64 Word.word)) \<then> return True)))))))"


(*val execute_C_ILLEGAL : unit -> M bool*)

fun  execute_C_ILLEGAL  :: " unit \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_C_ILLEGAL g__30 = ( handle_illegal ()  \<then> return False )"


(*val execute_C_ADDIW : mword ty6 -> mword ty5 -> M bool*)

fun  execute_C_ADDIW  :: "(6)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_C_ADDIW imm rsd = (
   (let (imm :: 32 bits) = ((EXTS (( 32 :: int)::ii) imm  ::  32 Word.word)) in
   (rX ((regbits_to_regno rsd))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs_val . 
   (let (res :: 32 bits) =
     ((add_vec ((subrange_vec_dec rs_val (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word)) imm  ::  32 Word.word)) in
   wX ((regbits_to_regno rsd)) ((EXTS (( 64 :: int)::ii) res  ::  64 Word.word)) \<then> return True))))"


(*val execute_CSR : mword ty12 -> mword ty5 -> mword ty5 -> bool -> csrop -> M bool*)

fun  execute_CSR  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bool \<Rightarrow> csrop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_CSR csr rs1 rd is_imm op1 = (
   (if is_imm then return ((EXTZ (( 64 :: int)::ii) rs1  ::  64 Word.word))
    else (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M)) \<bind> (\<lambda> (rs1_val :: xlenbits) . 
   (let (isWrite :: bool) =
     ((case  op1 of
       CSRRW => True
     | _ => if is_imm then (((Word.uint rs1_val)) \<noteq> (( 0 :: int)::ii)) else (((Word.uint rs1)) \<noteq> (( 0 :: int)::ii))
     )) in
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__1 :: Privilege) . 
   check_CSR csr w__1 isWrite \<bind> (\<lambda> (w__2 :: bool) . 
   if ((\<not> w__2)) then handle_illegal ()  \<then> return False
   else
     (readCSR csr  :: ( 64 Word.word) M) \<bind> (\<lambda> csr_val . 
     ((if isWrite then
        (let (new_val :: xlenbits) =
          ((case  op1 of
            CSRRW => rs1_val
          | CSRRS => (or_vec csr_val rs1_val  ::  64 Word.word)
          | CSRRC => (and_vec csr_val ((not_vec rs1_val  ::  64 Word.word))  ::  64 Word.word)
          )) in
        writeCSR csr new_val)
      else return () ) \<then>
     wX ((regbits_to_regno rd)) csr_val) \<then> return True))))))"


(*val execute_BTYPE : mword ty13 -> mword ty5 -> mword ty5 -> bop -> M bool*)

fun  execute_BTYPE  :: "(13)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> bop \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_BTYPE imm rs2 rs1 op1 = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs1_val . 
   (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> rs2_val . 
   (let (taken :: bool) =
     ((case  op1 of
       RISCV_BEQ => (rs1_val = rs2_val)
     | RISCV_BNE => (rs1_val \<noteq> rs2_val)
     | RISCV_BLT => zopz0zI_s rs1_val rs2_val
     | RISCV_BGE => zopz0zKzJ_s rs1_val rs2_val
     | RISCV_BLTU => zopz0zI_u rs1_val rs2_val
     | RISCV_BGEU => zopz0zKzJ_u rs1_val rs2_val
     )) in
   (if taken then
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
      write_reg nextPC_ref ((add_vec w__0 ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word))  ::  64 Word.word)))
    else return () ) \<then>
   return True))))"


(*val execute_AMO : amoop -> bool -> bool -> mword ty5 -> mword ty5 -> word_width -> mword ty5 -> M bool*)

fun  execute_AMO  :: " amoop \<Rightarrow> bool \<Rightarrow> bool \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow> word_width \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_AMO op1 aq rl rs2 rs1 width rd = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (vaddr :: xlenbits) . 
   translateAddr vaddr ReadWrite Data \<bind> (\<lambda> (w__0 :: TR_Result) . 
   (case  w__0 of
     TR_Failure (e) => handle_mem_exception vaddr e \<then> return False
   | TR_Address (addr) =>
      (case  width of
        WORD => mem_write_ea addr (( 4 :: int)::ii) (((aq \<and> rl))) rl True
      | DOUBLE => mem_write_ea addr (( 8 :: int)::ii) (((aq \<and> rl))) rl True
      | _ => internal_error (''AMO expected WORD or DOUBLE'')
      ) \<bind> (\<lambda> (eares :: unit MemoryOpResult) . 
      (case  eares of
        MemException (e) => handle_mem_exception addr e \<then> return False
      | MemValue (_) =>
         (case  width of
           WORD =>
            (mem_read addr (( 4 :: int)::ii) aq (((aq \<and> rl))) True  :: ( ( 32 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__4 :: ( 32 Word.word)
              MemoryOpResult) . 
            return ((extend_value False w__4  :: ( 64 Word.word) MemoryOpResult)))
         | DOUBLE =>
            (mem_read addr (( 8 :: int)::ii) aq (((aq \<and> rl))) True  :: ( ( 64 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__5 :: ( 64 Word.word)
              MemoryOpResult) . 
            return ((extend_value False w__5  :: ( 64 Word.word) MemoryOpResult)))
         | _ => (internal_error (''AMO expected WORD or DOUBLE'')  :: ( ( 64 Word.word)MemoryOpResult) M)
         ) \<bind> (\<lambda> (rval :: xlenbits MemoryOpResult) . 
         (case  rval of
           MemException (e) => handle_mem_exception addr e \<then> return False
         | MemValue (loaded) =>
            (rX ((regbits_to_regno rs2))  :: ( 64 Word.word) M) \<bind> (\<lambda> (rs2_val :: xlenbits) . 
            (let (result :: xlenbits) =
              ((case  op1 of
                AMOSWAP => rs2_val
              | AMOADD => (add_vec rs2_val loaded  ::  64 Word.word)
              | AMOXOR => (xor_vec rs2_val loaded  ::  64 Word.word)
              | AMOAND => (and_vec rs2_val loaded  ::  64 Word.word)
              | AMOOR => (or_vec rs2_val loaded  ::  64 Word.word)
              | AMOMIN => (vector64 ((min ((Word.sint rs2_val)) ((Word.sint loaded))))  ::  64 Word.word)
              | AMOMAX => (vector64 ((max ((Word.sint rs2_val)) ((Word.sint loaded))))  ::  64 Word.word)
              | AMOMINU => (vector64 ((min ((Word.uint rs2_val)) ((Word.uint loaded))))  ::  64 Word.word)
              | AMOMAXU => (vector64 ((max ((Word.uint rs2_val)) ((Word.uint loaded))))  ::  64 Word.word)
              )) in
            (case  width of
              WORD =>
               mem_write_value addr (( 4 :: int)::ii) ((subrange_vec_dec result (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))
                 (((aq \<and> rl))) rl True
            | DOUBLE => mem_write_value addr (( 8 :: int)::ii) result (((aq \<and> rl))) rl True
            | _ => internal_error (''AMO expected WORD or DOUBLE'')
            ) \<bind> (\<lambda> (wval :: unit MemoryOpResult) . 
            (case  wval of
              MemValue (_) => wX ((regbits_to_regno rd)) loaded \<then> return True
            | MemException (e) => handle_mem_exception addr e \<then> return False
            ))))
         ))
      ))
   ))))"


(*val execute_ADDIW : mword ty12 -> mword ty5 -> mword ty5 -> M bool*)

fun  execute_ADDIW  :: "(12)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>(5)Word.word \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute_ADDIW imm rs1 rd = (
   (rX ((regbits_to_regno rs1))  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
   (let (result :: xlenbits) = ((add_vec ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) w__0  ::  64 Word.word)) in
   wX ((regbits_to_regno rd))
     ((EXTS (( 64 :: int)::ii) ((subrange_vec_dec result (( 31 :: int)::ii) (( 0 :: int)::ii)  ::  32 Word.word))  ::  64 Word.word)) \<then>
   return True)))"


function (sequential,domintros)  execute  :: " ast \<Rightarrow>((register_value),(bool),(exception))monad "  where 
     " execute (C_ADDI4SPN (rdc,nzimm)) = (
      (let (imm :: 12 bits) =
        ((concat_vec (vec_of_bits [B0,B0]  ::  2 Word.word)
           ((concat_vec nzimm (vec_of_bits [B0,B0]  ::  2 Word.word)  ::  10 Word.word))
          ::  12 Word.word)) in
      (let rd = ((creg2reg_bits rdc  ::  5 Word.word)) in
      execute (ITYPE (imm,sp,rd,RISCV_ADDI)))))"
|" execute (C_LW (uimm,rsc,rdc)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0]  ::  2 Word.word)  ::  7 Word.word))
          ::  12 Word.word)) in
      (let rd = ((creg2reg_bits rdc  ::  5 Word.word)) in
      (let rs = ((creg2reg_bits rsc  ::  5 Word.word)) in
      execute (LOAD (imm,rs,rd,False,WORD,False,False))))))"
|" execute (C_LD (uimm,rsc,rdc)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0,B0]  ::  3 Word.word)  ::  8 Word.word))
          ::  12 Word.word)) in
      (let rd = ((creg2reg_bits rdc  ::  5 Word.word)) in
      (let rs = ((creg2reg_bits rsc  ::  5 Word.word)) in
      execute (LOAD (imm,rs,rd,False,DOUBLE,False,False))))))"
|" execute (C_SW (uimm,rsc1,rsc2)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0]  ::  2 Word.word)  ::  7 Word.word))
          ::  12 Word.word)) in
      (let rs1 = ((creg2reg_bits rsc1  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rsc2  ::  5 Word.word)) in
      execute (STORE (imm,rs2,rs1,WORD,False,False))))))"
|" execute (C_SD (uimm,rsc1,rsc2)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0,B0]  ::  3 Word.word)  ::  8 Word.word))
          ::  12 Word.word)) in
      (let rs1 = ((creg2reg_bits rsc1  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rsc2  ::  5 Word.word)) in
      execute (STORE (imm,rs2,rs1,DOUBLE,False,False))))))"
|" execute (C_ADDI (nzi,rsd)) = (
      (let (imm :: 12 bits) = ((EXTS (( 12 :: int)::ii) nzi  ::  12 Word.word)) in
      execute (ITYPE (imm,rsd,rsd,RISCV_ADDI))))"
|" execute (C_JAL (imm)) = (
      execute
        (RISCV_JAL ((EXTS (( 21 :: int)::ii) ((concat_vec imm (vec_of_bits [B0]  ::  1 Word.word)  ::  12 Word.word))
                      ::  21 Word.word),ra)))"
|" execute (C_LI (imm,rd)) = (
      (let (imm :: 12 bits) = ((EXTS (( 12 :: int)::ii) imm  ::  12 Word.word)) in
      execute (ITYPE (imm,zreg,rd,RISCV_ADDI))))"
|" execute (C_ADDI16SP (imm)) = (
      (let (imm :: 12 bits) =
        ((EXTS (( 12 :: int)::ii) ((concat_vec imm (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word)  ::  10 Word.word))
          ::  12 Word.word)) in
      execute (ITYPE (imm,sp,sp,RISCV_ADDI))))"
|" execute (C_LUI (imm,rd)) = (
      (let (res :: 20 bits) = ((EXTS (( 20 :: int)::ii) imm  ::  20 Word.word)) in
      execute (UTYPE (res,rd,RISCV_LUI))))"
|" execute (C_SRLI (shamt,rsd)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SRLI))))"
|" execute (C_SRAI (shamt,rsd)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SRAI))))"
|" execute (C_ANDI (imm,rsd)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      execute (ITYPE ((EXTS (( 12 :: int)::ii) imm  ::  12 Word.word),rsd,rsd,RISCV_ANDI))))"
|" execute (C_SUB (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_SUB)))))"
|" execute (C_XOR (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_XOR)))))"
|" execute (C_OR (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_OR)))))"
|" execute (C_AND (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPE (rs2,rsd,rsd,RISCV_AND)))))"
|" execute (C_SUBW (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPEW (rs2,rsd,rsd,RISCV_SUBW)))))"
|" execute (C_ADDW (rsd,rs2)) = (
      (let rsd = ((creg2reg_bits rsd  ::  5 Word.word)) in
      (let rs2 = ((creg2reg_bits rs2  ::  5 Word.word)) in
      execute (RTYPEW (rs2,rsd,rsd,RISCV_ADDW)))))"
|" execute (C_J (imm)) = (
      execute
        (RISCV_JAL ((EXTS (( 21 :: int)::ii) ((concat_vec imm (vec_of_bits [B0]  ::  1 Word.word)  ::  12 Word.word))
                      ::  21 Word.word),zreg)))"
|" execute (C_BEQZ (imm,rs)) = (
      execute
        (BTYPE ((EXTS (( 13 :: int)::ii) ((concat_vec imm (vec_of_bits [B0]  ::  1 Word.word)  ::  9 Word.word))
                  ::  13 Word.word),zreg,(creg2reg_bits rs  ::  5 Word.word),RISCV_BEQ)))"
|" execute (C_BNEZ (imm,rs)) = (
      execute
        (BTYPE ((EXTS (( 13 :: int)::ii) ((concat_vec imm (vec_of_bits [B0]  ::  1 Word.word)  ::  9 Word.word))
                  ::  13 Word.word),zreg,(creg2reg_bits rs  ::  5 Word.word),RISCV_BNE)))"
|" execute (C_SLLI (shamt,rsd)) = ( execute (SHIFTIOP (shamt,rsd,rsd,RISCV_SLLI)))"
|" execute (C_LWSP (uimm,rd)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0]  ::  2 Word.word)  ::  8 Word.word))
          ::  12 Word.word)) in
      execute (LOAD (imm,sp,rd,False,WORD,False,False))))"
|" execute (C_LDSP (uimm,rd)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0,B0]  ::  3 Word.word)  ::  9 Word.word))
          ::  12 Word.word)) in
      execute (LOAD (imm,sp,rd,False,DOUBLE,False,False))))"
|" execute (C_SWSP (uimm,rs2)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0]  ::  2 Word.word)  ::  8 Word.word))
          ::  12 Word.word)) in
      execute (STORE (imm,rs2,sp,WORD,False,False))))"
|" execute (C_SDSP (uimm,rs2)) = (
      (let (imm :: 12 bits) =
        ((EXTZ (( 12 :: int)::ii) ((concat_vec uimm (vec_of_bits [B0,B0,B0]  ::  3 Word.word)  ::  9 Word.word))
          ::  12 Word.word)) in
      execute (STORE (imm,rs2,sp,DOUBLE,False,False))))"
|" execute (C_JR (rs1)) = (
      execute (RISCV_JALR ((EXTZ (( 12 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  12 Word.word),rs1,zreg)))"
|" execute (C_JALR (rs1)) = (
      execute (RISCV_JALR ((EXTZ (( 12 :: int)::ii) (vec_of_bits [B0]  ::  1 Word.word)  ::  12 Word.word),rs1,ra)))"
|" execute (C_MV (rd,rs2)) = ( execute (RTYPE (rs2,zreg,rd,RISCV_ADD)))"
|" execute (C_ADD (rsd,rs2)) = ( execute (RTYPE (rs2,rsd,rsd,RISCV_ADD)))"
|" execute (UTYPE (imm,rd,op1)) = ( execute_UTYPE imm rd op1 )"
|" execute (RISCV_JAL (imm,rd)) = ( execute_RISCV_JAL imm rd )"
|" execute (RISCV_JALR (imm,rs1,rd)) = ( execute_RISCV_JALR imm rs1 rd )"
|" execute (BTYPE (imm,rs2,rs1,op1)) = ( execute_BTYPE imm rs2 rs1 op1 )"
|" execute (ITYPE (imm,rs1,rd,op1)) = ( execute_ITYPE imm rs1 rd op1 )"
|" execute (SHIFTIOP (shamt,rs1,rd,op1)) = ( execute_SHIFTIOP shamt rs1 rd op1 )"
|" execute (RTYPE (rs2,rs1,rd,op1)) = ( execute_RTYPE rs2 rs1 rd op1 )"
|" execute (LOAD (imm,rs1,rd,is_unsigned,width,aq,rl)) = ( execute_LOAD imm rs1 rd is_unsigned width aq rl )"
|" execute (STORE (imm,rs2,rs1,width,aq,rl)) = ( execute_STORE imm rs2 rs1 width aq rl )"
|" execute (ADDIW (imm,rs1,rd)) = ( execute_ADDIW imm rs1 rd )"
|" execute (SHIFTW (shamt,rs1,rd,op1)) = ( execute_SHIFTW shamt rs1 rd op1 )"
|" execute (RTYPEW (rs2,rs1,rd,op1)) = ( execute_RTYPEW rs2 rs1 rd op1 )"
|" execute (MUL (rs2,rs1,rd,high,signed1,signed2)) = ( execute_MUL rs2 rs1 rd high signed1 signed2 )"
|" execute (DIV (rs2,rs1,rd,s)) = ( execute_DIV rs2 rs1 rd s )"
|" execute (REM (rs2,rs1,rd,s)) = ( execute_REM rs2 rs1 rd s )"
|" execute (MULW (rs2,rs1,rd)) = ( execute_MULW rs2 rs1 rd )"
|" execute (DIVW (rs2,rs1,rd,s)) = ( execute_DIVW rs2 rs1 rd s )"
|" execute (REMW (rs2,rs1,rd,s)) = ( execute_REMW rs2 rs1 rd s )"
|" execute (FENCE (pred,succ)) = ( execute_FENCE pred succ )"
|" execute (FENCEI (g__21)) = ( execute_FENCEI g__21 )"
|" execute (ECALL (g__22)) = ( execute_ECALL g__22 )"
|" execute (MRET (g__23)) = ( execute_MRET g__23 )"
|" execute (SRET (g__24)) = ( execute_SRET g__24 )"
|" execute (EBREAK (g__25)) = ( execute_EBREAK g__25 )"
|" execute (WFI (g__26)) = ( execute_WFI g__26 )"
|" execute (SFENCE_VMA (rs1,rs2)) = ( execute_SFENCE_VMA rs1 rs2 )"
|" execute (LOADRES (aq,rl,rs1,width,rd)) = ( execute_LOADRES aq rl rs1 width rd )"
|" execute (STORECON (aq,rl,rs2,rs1,width,rd)) = ( execute_STORECON aq rl rs2 rs1 width rd )"
|" execute (AMO (op1,aq,rl,rs2,rs1,width,rd)) = ( execute_AMO op1 aq rl rs2 rs1 width rd )"
|" execute (CSR (csr,rs1,rd,is_imm,op1)) = ( execute_CSR csr rs1 rd is_imm op1 )"
|" execute (NOP (g__27)) = ( return ((execute_NOP g__27)))"
|" execute (C_ADDIW (imm,rsd)) = ( execute_C_ADDIW imm rsd )"
|" execute (STOP_FETCHING (g__28)) = ( return ((execute_STOP_FETCHING g__28)))"
|" execute (THREAD_START (g__29)) = ( return ((execute_THREAD_START g__29)))"
|" execute (ILLEGAL (s)) = ( execute_ILLEGAL s )"
|" execute (C_ILLEGAL (g__30)) = ( execute_C_ILLEGAL g__30 )" 
by pat_completeness auto


(*val assembly_forwards : ast -> string*)

fun assembly_forwards  :: " ast \<Rightarrow> string "  where 
     " assembly_forwards (UTYPE (imm,rd,op1)) = (
      string_append ((utype_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () )) ((string_append ((string_of_bits imm)) (''''))))))))))"
|" assembly_forwards (RISCV_JAL (imm,rd)) = (
      string_append (''jal'')
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () )) ((string_append ((string_of_bits imm)) (''''))))))))))"
|" assembly_forwards (RISCV_JALR (imm,rs1,rd)) = (
      string_append (''jalr'')
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) (''''))))))))))))))"
|" assembly_forwards (BTYPE (imm,rs2,rs1,op1)) = (
      string_append ((btype_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rs1))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs2))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) (''''))))))))))))))"
|" assembly_forwards (ITYPE (imm,rs1,rd,op1)) = (
      string_append ((itype_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) (''''))))))))))))))"
|" assembly_forwards (SHIFTIOP (shamt,rs1,rd,op1)) = (
      string_append ((shiftiop_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((string_of_bits shamt)) (''''))))))))))))"
|" assembly_forwards (RTYPE (rs2,rs1,rd,op1)) = (
      string_append ((rtype_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))"
|" assembly_forwards (LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl)) = (
      string_append (''l'')
        ((string_append ((size_mnemonic_forwards size1))
            ((string_append ((maybe_u_forwards is_unsigned))
                ((string_append ((maybe_aq_forwards aq))
                    ((string_append ((maybe_rl_forwards rl))
                        ((string_append ((spc_forwards () ))
                            ((string_append ((reg_name_forwards rd))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs1))
                                        ((string_append ((sep_forwards () ))
                                            ((string_append ((string_of_bits imm)) (''''))))))))))))))))))))))"
|" assembly_forwards (STORE (imm,rs1,rd,size1,aq,rl)) = (
      string_append (''s'')
        ((string_append ((size_mnemonic_forwards size1))
            ((string_append ((maybe_aq_forwards aq))
                ((string_append ((maybe_rl_forwards rl))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1))
                                    ((string_append ((sep_forwards () ))
                                        ((string_append ((string_of_bits imm)) (''''))))))))))))))))))))"
|" assembly_forwards (ADDIW (imm,rs1,rd)) = (
      string_append (''addiw'')
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits imm)) (''''))))))))))))))"
|" assembly_forwards (SHIFTW (shamt,rs1,rd,op1)) = (
      string_append ((shiftw_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((string_of_bits shamt)) (''''))))))))))))))"
|" assembly_forwards (RTYPEW (rs2,rs1,rd,op1)) = (
      string_append ((rtypew_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))"
|" assembly_forwards (MUL (rs2,rs1,rd,high,signed1,signed2)) = (
      string_append ((mul_mnemonic_forwards high signed1 signed2))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))"
|" assembly_forwards (DIV (rs2,rs1,rd,s)) = (
      string_append (''div'')
        ((string_append ((maybe_not_u_forwards s))
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((reg_name_forwards rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))"
|" assembly_forwards (REM (rs2,rs1,rd,s)) = (
      string_append (''rem'')
        ((string_append ((maybe_not_u_forwards s))
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((reg_name_forwards rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))"
|" assembly_forwards (MULW (rs2,rs1,rd)) = (
      string_append (''mulw'')
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))"
|" assembly_forwards (DIVW (rs2,rs1,rd,s)) = (
      string_append (''div'')
        ((string_append ((maybe_not_u_forwards s))
            ((string_append (''w'')
                ((string_append ((spc_forwards () ))
                    ((string_append ((reg_name_forwards rd))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs1))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))))"
|" assembly_forwards (REMW (rs2,rs1,rd,s)) = (
      string_append (''rem'')
        ((string_append ((maybe_not_u_forwards s))
            ((string_append (''w'')
                ((string_append ((spc_forwards () ))
                    ((string_append ((reg_name_forwards rd))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((reg_name_forwards rs1))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))))"
|" assembly_forwards (FENCE (pred,succ)) = (
      string_append (''fence'')
        ((string_append ((spc_forwards () ))
            ((string_append ((fence_bits_forwards pred))
                ((string_append ((sep_forwards () ))
                    ((string_append ((fence_bits_forwards succ)) (''''))))))))))"
|" assembly_forwards (FENCEI (_)) = ( (''fence.i''))"
|" assembly_forwards (ECALL (_)) = ( (''ecall''))"
|" assembly_forwards (MRET (_)) = ( (''mret''))"
|" assembly_forwards (SRET (_)) = ( (''sret''))"
|" assembly_forwards (EBREAK (_)) = ( (''ebreak''))"
|" assembly_forwards (WFI (_)) = ( (''wfi''))"
|" assembly_forwards (SFENCE_VMA (rs1,rs2)) = (
      string_append (''sfence.vma'')
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rs1))
                ((string_append ((sep_forwards () )) ((string_append ((reg_name_forwards rs2)) (''''))))))))))"
|" assembly_forwards (LOADRES (aq,rl,rs1,size1,rd)) = (
      string_append (''lr.'')
        ((string_append ((maybe_aq_forwards aq))
            ((string_append ((maybe_rl_forwards rl))
                ((string_append ((size_mnemonic_forwards size1))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1)) (''''))))))))))))))))"
|" assembly_forwards (STORECON (aq,rl,rs2,rs1,size1,rd)) = (
      string_append (''sc.'')
        ((string_append ((maybe_aq_forwards aq))
            ((string_append ((maybe_rl_forwards rl))
                ((string_append ((size_mnemonic_forwards size1))
                    ((string_append ((spc_forwards () ))
                        ((string_append ((reg_name_forwards rd))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((reg_name_forwards rs1))
                                    ((string_append ((sep_forwards () ))
                                        ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))))))"
|" assembly_forwards (AMO (op1,aq,rl,rs2,rs1,width,rd)) = (
      string_append ((amo_mnemonic_forwards op1))
        ((string_append (''.'')
            ((string_append ((size_mnemonic_forwards width))
                ((string_append ((maybe_aq_forwards aq))
                    ((string_append ((maybe_rl_forwards rl))
                        ((string_append ((spc_forwards () ))
                            ((string_append ((reg_name_forwards rd))
                                ((string_append ((sep_forwards () ))
                                    ((string_append ((reg_name_forwards rs1))
                                        ((string_append ((sep_forwards () ))
                                            ((string_append ((reg_name_forwards rs2)) (''''))))))))))))))))))))))"
|" assembly_forwards (CSR (csr,rs1,rd,True,op1)) = (
      string_append ((csr_mnemonic_forwards op1))
        ((string_append (''i'')
            ((string_append ((spc_forwards () ))
                ((string_append ((reg_name_forwards rd))
                    ((string_append ((sep_forwards () ))
                        ((string_append ((string_of_bits rs1))
                            ((string_append ((sep_forwards () ))
                                ((string_append ((csr_name_map_forwards csr)) (''''))))))))))))))))"
|" assembly_forwards (CSR (csr,rs1,rd,False,op1)) = (
      string_append ((csr_mnemonic_forwards op1))
        ((string_append ((spc_forwards () ))
            ((string_append ((reg_name_forwards rd))
                ((string_append ((sep_forwards () ))
                    ((string_append ((reg_name_forwards rs1))
                        ((string_append ((sep_forwards () ))
                            ((string_append ((csr_name_map_forwards csr)) (''''))))))))))))))"
|" assembly_forwards (ILLEGAL (s)) = (
      string_append (''illegal'')
        ((string_append ((spc_forwards () )) ((string_append ((string_of_bits s)) (''''))))))"


(*val assembly_backwards : string -> ast*)

definition assembly_backwards  :: " string \<Rightarrow> ast "  where 
     " assembly_backwards arg0 = (
   (let stringappend_10760 = arg0 in
   if ((case  ((utype_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_10770,stringappend_10780) =>
        (let stringappend_10790 = (string_drop stringappend_10760 stringappend_10780) in
        if ((case  ((spc_matches_prefix stringappend_10790)) of
            Some (stringappend_10800,stringappend_10810) =>
             (let stringappend_10820 = (string_drop stringappend_10790 stringappend_10810) in
             if ((case  ((reg_name_matches_prefix stringappend_10820  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_10830,stringappend_10840) =>
                  (let stringappend_10850 = (string_drop stringappend_10820 stringappend_10840) in
                  if ((case  ((sep_matches_prefix stringappend_10850)) of
                      Some (stringappend_10860,stringappend_10870) =>
                       (let stringappend_10880 = (string_drop stringappend_10850 stringappend_10870) in
                       if ((case  ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_10880
                                    ::  (( 20 Word.word * ii))option)) of
                           Some (stringappend_10890,stringappend_10900) => 
  if(((string_drop stringappend_10880 stringappend_10900)) = ('''')) then
    True else False
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_10780) =
       ((case  ((utype_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_10770,stringappend_10780) =>
          (stringappend_10770, stringappend_10780)
       )) in
     (let stringappend_10790 = (string_drop stringappend_10760 stringappend_10780) in  
  (case 
  (case  ((spc_matches_prefix stringappend_10790)) of
        Some (stringappend_10800,stringappend_10810) =>
  (stringappend_10800, stringappend_10810)
  ) of
      (_, stringappend_10810) =>
  (let stringappend_10820 = (string_drop stringappend_10790
                               stringappend_10810) in
  (let (rd, stringappend_10840) =
       ((case  ((reg_name_matches_prefix stringappend_10820 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_10830,stringappend_10840) =>
        (stringappend_10830, stringappend_10840)
        )) in
  (let stringappend_10850 = (string_drop stringappend_10820
                               stringappend_10840) in
  (case 
  (case  ((sep_matches_prefix stringappend_10850)) of
        Some (stringappend_10860,stringappend_10870) =>
  (stringappend_10860, stringappend_10870)
  ) of
      (_, stringappend_10870) =>
  (let stringappend_10880 = (string_drop stringappend_10850
                               stringappend_10870) in
  (let (imm, stringappend_10900) =
       ((case  ((hex_bits_20_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_10880 :: (( 20 Word.word * ii)) option)) of
              Some (stringappend_10890,stringappend_10900) =>
        (stringappend_10890, stringappend_10900)
        )) in
  if(((string_drop stringappend_10880 stringappend_10900)) = ('''')) then
    (UTYPE (imm,rd,op1)) else undefined))
  ))))
  )))
   else if (((((string_startswith stringappend_10760 (''jal''))) \<and> ((let stringappend_10920 = (string_drop stringappend_10760 ((string_length (''jal'')))) in
               if ((case  ((spc_matches_prefix stringappend_10920)) of
                   Some (stringappend_10930,stringappend_10940) =>
                    (let stringappend_10950 = (string_drop stringappend_10920 stringappend_10940) in
                    if ((case  ((reg_name_matches_prefix stringappend_10950
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_10960,stringappend_10970) =>
                         (let stringappend_10980 =
                           (string_drop stringappend_10950 stringappend_10970) in
                         if ((case  ((sep_matches_prefix stringappend_10980)) of
                             Some (stringappend_10990,stringappend_11000) =>
                              (let stringappend_11010 =
                                (string_drop stringappend_10980 stringappend_11000) in
                              if ((case  ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_11010
                                           ::  (( 21 Word.word * ii))option)) of
                                  Some (stringappend_11020,stringappend_11030) => 
  if(((string_drop stringappend_11010 stringappend_11030)) = ('''')) then
    True else False
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_10920 = (string_drop stringappend_10760 ((string_length (''jal'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_10920)) of
        Some (stringappend_10930,stringappend_10940) =>
  (stringappend_10930, stringappend_10940)
  ) of
      (_, stringappend_10940) =>
  (let stringappend_10950 = (string_drop stringappend_10920
                               stringappend_10940) in
  (let (rd, stringappend_10970) =
       ((case  ((reg_name_matches_prefix stringappend_10950 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_10960,stringappend_10970) =>
        (stringappend_10960, stringappend_10970)
        )) in
  (let stringappend_10980 = (string_drop stringappend_10950
                               stringappend_10970) in
  (case 
  (case  ((sep_matches_prefix stringappend_10980)) of
        Some (stringappend_10990,stringappend_11000) =>
  (stringappend_10990, stringappend_11000)
  ) of
      (_, stringappend_11000) =>
  (let stringappend_11010 = (string_drop stringappend_10980
                               stringappend_11000) in
  (let (imm, stringappend_11030) =
       ((case  ((hex_bits_21_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_11010 :: (( 21 Word.word * ii)) option)) of
              Some (stringappend_11020,stringappend_11030) =>
        (stringappend_11020, stringappend_11030)
        )) in
  if(((string_drop stringappend_11010 stringappend_11030)) = ('''')) then
    (RISCV_JAL (imm,rd)) else undefined))
  ))))
  ))
   else if (((((string_startswith stringappend_10760 (''jalr''))) \<and> ((let stringappend_11050 = (string_drop stringappend_10760 ((string_length (''jalr'')))) in
               if ((case  ((spc_matches_prefix stringappend_11050)) of
                   Some (stringappend_11060,stringappend_11070) =>
                    (let stringappend_11080 = (string_drop stringappend_11050 stringappend_11070) in
                    if ((case  ((reg_name_matches_prefix stringappend_11080
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_11090,stringappend_11100) =>
                         (let stringappend_11110 =
                           (string_drop stringappend_11080 stringappend_11100) in
                         if ((case  ((sep_matches_prefix stringappend_11110)) of
                             Some (stringappend_11120,stringappend_11130) =>
                              (let stringappend_11140 =
                                (string_drop stringappend_11110 stringappend_11130) in
                              if ((case  ((reg_name_matches_prefix stringappend_11140
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_11150,stringappend_11160) =>
                                   (let stringappend_11170 =
                                     (string_drop stringappend_11140 stringappend_11160) in
                                   if ((case  ((sep_matches_prefix stringappend_11170)) of
                                       Some (stringappend_11180,stringappend_11190) =>
                                        (let stringappend_11200 =
                                          (string_drop stringappend_11170 stringappend_11190) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_11200
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_11210,stringappend_11220) => 
  if(((string_drop stringappend_11200 stringappend_11220)) = ('''')) then
    True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_11050 = (string_drop stringappend_10760 ((string_length (''jalr'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_11050)) of
        Some (stringappend_11060,stringappend_11070) =>
  (stringappend_11060, stringappend_11070)
  ) of
      (_, stringappend_11070) =>
  (let stringappend_11080 = (string_drop stringappend_11050
                               stringappend_11070) in
  (let (rd, stringappend_11100) =
       ((case  ((reg_name_matches_prefix stringappend_11080 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11090,stringappend_11100) =>
        (stringappend_11090, stringappend_11100)
        )) in
  (let stringappend_11110 = (string_drop stringappend_11080
                               stringappend_11100) in
  (case 
  (case  ((sep_matches_prefix stringappend_11110)) of
        Some (stringappend_11120,stringappend_11130) =>
  (stringappend_11120, stringappend_11130)
  ) of
      (_, stringappend_11130) =>
  (let stringappend_11140 = (string_drop stringappend_11110
                               stringappend_11130) in
  (let (rs1, stringappend_11160) =
       ((case  ((reg_name_matches_prefix stringappend_11140 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11150,stringappend_11160) =>
        (stringappend_11150, stringappend_11160)
        )) in
  (let stringappend_11170 = (string_drop stringappend_11140
                               stringappend_11160) in
  (case 
  (case  ((sep_matches_prefix stringappend_11170)) of
        Some (stringappend_11180,stringappend_11190) =>
  (stringappend_11180, stringappend_11190)
  ) of
      (_, stringappend_11190) =>
  (let stringappend_11200 = (string_drop stringappend_11170
                               stringappend_11190) in
  (let (imm, stringappend_11220) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_11200 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_11210,stringappend_11220) =>
        (stringappend_11210, stringappend_11220)
        )) in
  if(((string_drop stringappend_11200 stringappend_11220)) = ('''')) then
    (RISCV_JALR (imm,rs1,rd)) else undefined))
  ))))
  ))))
  ))
   else if ((case  ((btype_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_11240,stringappend_11250) =>
        (let stringappend_11260 = (string_drop stringappend_10760 stringappend_11250) in
        if ((case  ((spc_matches_prefix stringappend_11260)) of
            Some (stringappend_11270,stringappend_11280) =>
             (let stringappend_11290 = (string_drop stringappend_11260 stringappend_11280) in
             if ((case  ((reg_name_matches_prefix stringappend_11290  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_11300,stringappend_11310) =>
                  (let stringappend_11320 = (string_drop stringappend_11290 stringappend_11310) in
                  if ((case  ((sep_matches_prefix stringappend_11320)) of
                      Some (stringappend_11330,stringappend_11340) =>
                       (let stringappend_11350 = (string_drop stringappend_11320 stringappend_11340) in
                       if ((case  ((reg_name_matches_prefix stringappend_11350
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_11360,stringappend_11370) =>
                            (let stringappend_11380 =
                              (string_drop stringappend_11350 stringappend_11370) in
                            if ((case  ((sep_matches_prefix stringappend_11380)) of
                                Some (stringappend_11390,stringappend_11400) =>
                                 (let stringappend_11410 =
                                   (string_drop stringappend_11380 stringappend_11400) in
                                 if ((case  ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_11410
                                              ::  (( 13 Word.word * ii))option)) of
                                     Some (stringappend_11420,stringappend_11430) => 
  if(((string_drop stringappend_11410 stringappend_11430)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_11250) =
       ((case  ((btype_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_11240,stringappend_11250) =>
          (stringappend_11240, stringappend_11250)
       )) in
     (let stringappend_11260 = (string_drop stringappend_10760 stringappend_11250) in  
  (case 
  (case  ((spc_matches_prefix stringappend_11260)) of
        Some (stringappend_11270,stringappend_11280) =>
  (stringappend_11270, stringappend_11280)
  ) of
      (_, stringappend_11280) =>
  (let stringappend_11290 = (string_drop stringappend_11260
                               stringappend_11280) in
  (let (rs1, stringappend_11310) =
       ((case  ((reg_name_matches_prefix stringappend_11290 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11300,stringappend_11310) =>
        (stringappend_11300, stringappend_11310)
        )) in
  (let stringappend_11320 = (string_drop stringappend_11290
                               stringappend_11310) in
  (case 
  (case  ((sep_matches_prefix stringappend_11320)) of
        Some (stringappend_11330,stringappend_11340) =>
  (stringappend_11330, stringappend_11340)
  ) of
      (_, stringappend_11340) =>
  (let stringappend_11350 = (string_drop stringappend_11320
                               stringappend_11340) in
  (let (rs2, stringappend_11370) =
       ((case  ((reg_name_matches_prefix stringappend_11350 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11360,stringappend_11370) =>
        (stringappend_11360, stringappend_11370)
        )) in
  (let stringappend_11380 = (string_drop stringappend_11350
                               stringappend_11370) in
  (case 
  (case  ((sep_matches_prefix stringappend_11380)) of
        Some (stringappend_11390,stringappend_11400) =>
  (stringappend_11390, stringappend_11400)
  ) of
      (_, stringappend_11400) =>
  (let stringappend_11410 = (string_drop stringappend_11380
                               stringappend_11400) in
  (let (imm, stringappend_11430) =
       ((case  ((hex_bits_13_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_11410 :: (( 13 Word.word * ii)) option)) of
              Some (stringappend_11420,stringappend_11430) =>
        (stringappend_11420, stringappend_11430)
        )) in
  if(((string_drop stringappend_11410 stringappend_11430)) = ('''')) then
    (BTYPE (imm,rs2,rs1,op1)) else undefined))
  ))))
  ))))
  )))
   else if ((case  ((itype_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_11450,stringappend_11460) =>
        (let stringappend_11470 = (string_drop stringappend_10760 stringappend_11460) in
        if ((case  ((spc_matches_prefix stringappend_11470)) of
            Some (stringappend_11480,stringappend_11490) =>
             (let stringappend_11500 = (string_drop stringappend_11470 stringappend_11490) in
             if ((case  ((reg_name_matches_prefix stringappend_11500  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_11510,stringappend_11520) =>
                  (let stringappend_11530 = (string_drop stringappend_11500 stringappend_11520) in
                  if ((case  ((sep_matches_prefix stringappend_11530)) of
                      Some (stringappend_11540,stringappend_11550) =>
                       (let stringappend_11560 = (string_drop stringappend_11530 stringappend_11550) in
                       if ((case  ((reg_name_matches_prefix stringappend_11560
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_11570,stringappend_11580) =>
                            (let stringappend_11590 =
                              (string_drop stringappend_11560 stringappend_11580) in
                            if ((case  ((sep_matches_prefix stringappend_11590)) of
                                Some (stringappend_11600,stringappend_11610) =>
                                 (let stringappend_11620 =
                                   (string_drop stringappend_11590 stringappend_11610) in
                                 if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_11620
                                              ::  (( 12 Word.word * ii))option)) of
                                     Some (stringappend_11630,stringappend_11640) => 
  if(((string_drop stringappend_11620 stringappend_11640)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_11460) =
       ((case  ((itype_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_11450,stringappend_11460) =>
          (stringappend_11450, stringappend_11460)
       )) in
     (let stringappend_11470 = (string_drop stringappend_10760 stringappend_11460) in  
  (case 
  (case  ((spc_matches_prefix stringappend_11470)) of
        Some (stringappend_11480,stringappend_11490) =>
  (stringappend_11480, stringappend_11490)
  ) of
      (_, stringappend_11490) =>
  (let stringappend_11500 = (string_drop stringappend_11470
                               stringappend_11490) in
  (let (rd, stringappend_11520) =
       ((case  ((reg_name_matches_prefix stringappend_11500 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11510,stringappend_11520) =>
        (stringappend_11510, stringappend_11520)
        )) in
  (let stringappend_11530 = (string_drop stringappend_11500
                               stringappend_11520) in
  (case 
  (case  ((sep_matches_prefix stringappend_11530)) of
        Some (stringappend_11540,stringappend_11550) =>
  (stringappend_11540, stringappend_11550)
  ) of
      (_, stringappend_11550) =>
  (let stringappend_11560 = (string_drop stringappend_11530
                               stringappend_11550) in
  (let (rs1, stringappend_11580) =
       ((case  ((reg_name_matches_prefix stringappend_11560 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11570,stringappend_11580) =>
        (stringappend_11570, stringappend_11580)
        )) in
  (let stringappend_11590 = (string_drop stringappend_11560
                               stringappend_11580) in
  (case 
  (case  ((sep_matches_prefix stringappend_11590)) of
        Some (stringappend_11600,stringappend_11610) =>
  (stringappend_11600, stringappend_11610)
  ) of
      (_, stringappend_11610) =>
  (let stringappend_11620 = (string_drop stringappend_11590
                               stringappend_11610) in
  (let (imm, stringappend_11640) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_11620 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_11630,stringappend_11640) =>
        (stringappend_11630, stringappend_11640)
        )) in
  if(((string_drop stringappend_11620 stringappend_11640)) = ('''')) then
    (ITYPE (imm,rs1,rd,op1)) else undefined))
  ))))
  ))))
  )))
   else if ((case  ((shiftiop_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_11660,stringappend_11670) =>
        (let stringappend_11680 = (string_drop stringappend_10760 stringappend_11670) in
        if ((case  ((spc_matches_prefix stringappend_11680)) of
            Some (stringappend_11690,stringappend_11700) =>
             (let stringappend_11710 = (string_drop stringappend_11680 stringappend_11700) in
             if ((case  ((reg_name_matches_prefix stringappend_11710  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_11720,stringappend_11730) =>
                  (let stringappend_11740 = (string_drop stringappend_11710 stringappend_11730) in
                  if ((case  ((sep_matches_prefix stringappend_11740)) of
                      Some (stringappend_11750,stringappend_11760) =>
                       (let stringappend_11770 = (string_drop stringappend_11740 stringappend_11760) in
                       if ((case  ((reg_name_matches_prefix stringappend_11770
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_11780,stringappend_11790) =>
                            (let stringappend_11800 =
                              (string_drop stringappend_11770 stringappend_11790) in
                            if ((case  ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_11800
                                         ::  (( 6 Word.word * ii))option)) of
                                Some (stringappend_11810,stringappend_11820) => 
  if(((string_drop stringappend_11800 stringappend_11820)) = ('''')) then
    True else False
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_11670) =
       ((case  ((shiftiop_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_11660,stringappend_11670) =>
          (stringappend_11660, stringappend_11670)
       )) in
     (let stringappend_11680 = (string_drop stringappend_10760 stringappend_11670) in  
  (case 
  (case  ((spc_matches_prefix stringappend_11680)) of
        Some (stringappend_11690,stringappend_11700) =>
  (stringappend_11690, stringappend_11700)
  ) of
      (_, stringappend_11700) =>
  (let stringappend_11710 = (string_drop stringappend_11680
                               stringappend_11700) in
  (let (rd, stringappend_11730) =
       ((case  ((reg_name_matches_prefix stringappend_11710 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11720,stringappend_11730) =>
        (stringappend_11720, stringappend_11730)
        )) in
  (let stringappend_11740 = (string_drop stringappend_11710
                               stringappend_11730) in
  (case 
  (case  ((sep_matches_prefix stringappend_11740)) of
        Some (stringappend_11750,stringappend_11760) =>
  (stringappend_11750, stringappend_11760)
  ) of
      (_, stringappend_11760) =>
  (let stringappend_11770 = (string_drop stringappend_11740
                               stringappend_11760) in
  (let (rs1, stringappend_11790) =
       ((case  ((reg_name_matches_prefix stringappend_11770 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11780,stringappend_11790) =>
        (stringappend_11780, stringappend_11790)
        )) in
  (let stringappend_11800 = (string_drop stringappend_11770
                               stringappend_11790) in
  (let (shamt, stringappend_11820) =
       ((case  ((hex_bits_6_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_11800 :: (( 6 Word.word * ii)) option)) of
              Some (stringappend_11810,stringappend_11820) =>
        (stringappend_11810, stringappend_11820)
        )) in
  if(((string_drop stringappend_11800 stringappend_11820)) = ('''')) then
    (SHIFTIOP (shamt,rs1,rd,op1)) else undefined))))
  ))))
  )))
   else if ((case  ((rtype_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_11840,stringappend_11850) =>
        (let stringappend_11860 = (string_drop stringappend_10760 stringappend_11850) in
        if ((case  ((spc_matches_prefix stringappend_11860)) of
            Some (stringappend_11870,stringappend_11880) =>
             (let stringappend_11890 = (string_drop stringappend_11860 stringappend_11880) in
             if ((case  ((reg_name_matches_prefix stringappend_11890  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_11900,stringappend_11910) =>
                  (let stringappend_11920 = (string_drop stringappend_11890 stringappend_11910) in
                  if ((case  ((sep_matches_prefix stringappend_11920)) of
                      Some (stringappend_11930,stringappend_11940) =>
                       (let stringappend_11950 = (string_drop stringappend_11920 stringappend_11940) in
                       if ((case  ((reg_name_matches_prefix stringappend_11950
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_11960,stringappend_11970) =>
                            (let stringappend_11980 =
                              (string_drop stringappend_11950 stringappend_11970) in
                            if ((case  ((sep_matches_prefix stringappend_11980)) of
                                Some (stringappend_11990,stringappend_12000) =>
                                 (let stringappend_12010 =
                                   (string_drop stringappend_11980 stringappend_12000) in
                                 if ((case  ((reg_name_matches_prefix stringappend_12010
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_12020,stringappend_12030) => 
  if(((string_drop stringappend_12010 stringappend_12030)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_11850) =
       ((case  ((rtype_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_11840,stringappend_11850) =>
          (stringappend_11840, stringappend_11850)
       )) in
     (let stringappend_11860 = (string_drop stringappend_10760 stringappend_11850) in  
  (case 
  (case  ((spc_matches_prefix stringappend_11860)) of
        Some (stringappend_11870,stringappend_11880) =>
  (stringappend_11870, stringappend_11880)
  ) of
      (_, stringappend_11880) =>
  (let stringappend_11890 = (string_drop stringappend_11860
                               stringappend_11880) in
  (let (rd, stringappend_11910) =
       ((case  ((reg_name_matches_prefix stringappend_11890 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11900,stringappend_11910) =>
        (stringappend_11900, stringappend_11910)
        )) in
  (let stringappend_11920 = (string_drop stringappend_11890
                               stringappend_11910) in
  (case 
  (case  ((sep_matches_prefix stringappend_11920)) of
        Some (stringappend_11930,stringappend_11940) =>
  (stringappend_11930, stringappend_11940)
  ) of
      (_, stringappend_11940) =>
  (let stringappend_11950 = (string_drop stringappend_11920
                               stringappend_11940) in
  (let (rs1, stringappend_11970) =
       ((case  ((reg_name_matches_prefix stringappend_11950 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_11960,stringappend_11970) =>
        (stringappend_11960, stringappend_11970)
        )) in
  (let stringappend_11980 = (string_drop stringappend_11950
                               stringappend_11970) in
  (case 
  (case  ((sep_matches_prefix stringappend_11980)) of
        Some (stringappend_11990,stringappend_12000) =>
  (stringappend_11990, stringappend_12000)
  ) of
      (_, stringappend_12000) =>
  (let stringappend_12010 = (string_drop stringappend_11980
                               stringappend_12000) in
  (let (rs2, stringappend_12030) =
       ((case  ((reg_name_matches_prefix stringappend_12010 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12020,stringappend_12030) =>
        (stringappend_12020, stringappend_12030)
        )) in
  if(((string_drop stringappend_12010 stringappend_12030)) = ('''')) then
    (RTYPE (rs2,rs1,rd,op1)) else undefined))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_10760 (''l''))) \<and> ((let stringappend_12050 = (string_drop stringappend_10760 ((string_length (''l'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_12050)) of
                   Some (stringappend_12060,stringappend_12070) =>
                    (let stringappend_12080 = (string_drop stringappend_12050 stringappend_12070) in
                    if ((case  ((maybe_u_matches_prefix stringappend_12080)) of
                        Some (stringappend_12090,stringappend_12100) =>
                         (let stringappend_12110 =
                           (string_drop stringappend_12080 stringappend_12100) in
                         if ((case  ((maybe_aq_matches_prefix stringappend_12110)) of
                             Some (stringappend_12120,stringappend_12130) =>
                              (let stringappend_12140 =
                                (string_drop stringappend_12110 stringappend_12130) in
                              if ((case  ((maybe_rl_matches_prefix stringappend_12140)) of
                                  Some (stringappend_12150,stringappend_12160) =>
                                   (let stringappend_12170 =
                                     (string_drop stringappend_12140 stringappend_12160) in
                                   if ((case  ((spc_matches_prefix stringappend_12170)) of
                                       Some (stringappend_12180,stringappend_12190) =>
                                        (let stringappend_12200 =
                                          (string_drop stringappend_12170 stringappend_12190) in
                                        if ((case  ((reg_name_matches_prefix stringappend_12200
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_12210,stringappend_12220) =>
                                             (let stringappend_12230 =
                                               (string_drop stringappend_12200 stringappend_12220) in
                                             if ((case  ((sep_matches_prefix stringappend_12230)) of
                                                 Some (stringappend_12240,stringappend_12250) =>
                                                  (let stringappend_12260 =
                                                    (string_drop stringappend_12230
                                                      stringappend_12250) in
                                                  if ((case  ((reg_name_matches_prefix
                                                                stringappend_12260
                                                               ::  (( 5 Word.word * ii))option)) of
                                                      Some (stringappend_12270,stringappend_12280) =>
                                                       (let stringappend_12290 =
                                                         (string_drop stringappend_12260
                                                           stringappend_12280) in
                                                       if ((case  ((sep_matches_prefix
                                                                     stringappend_12290)) of
                                                           Some
                                                           (stringappend_12300,stringappend_12310) =>
                                                            (let stringappend_12320 =
                                                              (string_drop stringappend_12290
                                                                stringappend_12310) in
                                                            if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_12320
                                                                         ::  (( 12 Word.word * ii))option)) of
                                                                Some
                                                                (stringappend_12330,stringappend_12340) => 
  if(((string_drop stringappend_12320 stringappend_12340)) = ('''')) then
    True else False
                                                              | None => False
                                                              )) then
                                                              True
                                                            else False)
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_12050 = (string_drop stringappend_10760 ((string_length (''l'')))) in
     (let (size1, stringappend_12070) =
       ((case  ((size_mnemonic_matches_prefix stringappend_12050)) of
         Some (stringappend_12060,stringappend_12070) =>
          (stringappend_12060, stringappend_12070)
       )) in
     (let stringappend_12080 = (string_drop stringappend_12050 stringappend_12070) in
     (let (is_unsigned, stringappend_12100) =
       ((case  ((maybe_u_matches_prefix stringappend_12080)) of
         Some (stringappend_12090,stringappend_12100) =>
          (stringappend_12090, stringappend_12100)
       )) in
     (let stringappend_12110 = (string_drop stringappend_12080 stringappend_12100) in
     (let (aq, stringappend_12130) =
       ((case  ((maybe_aq_matches_prefix stringappend_12110)) of
         Some (stringappend_12120,stringappend_12130) =>
          (stringappend_12120, stringappend_12130)
       )) in
     (let stringappend_12140 = (string_drop stringappend_12110 stringappend_12130) in
     (let (rl, stringappend_12160) =
       ((case  ((maybe_rl_matches_prefix stringappend_12140)) of
         Some (stringappend_12150,stringappend_12160) =>
          (stringappend_12150, stringappend_12160)
       )) in
     (let stringappend_12170 = (string_drop stringappend_12140 stringappend_12160) in  
  (case 
  (case  ((spc_matches_prefix stringappend_12170)) of
        Some (stringappend_12180,stringappend_12190) =>
  (stringappend_12180, stringappend_12190)
  ) of
      (_, stringappend_12190) =>
  (let stringappend_12200 = (string_drop stringappend_12170
                               stringappend_12190) in
  (let (rd, stringappend_12220) =
       ((case  ((reg_name_matches_prefix stringappend_12200 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12210,stringappend_12220) =>
        (stringappend_12210, stringappend_12220)
        )) in
  (let stringappend_12230 = (string_drop stringappend_12200
                               stringappend_12220) in
  (case 
  (case  ((sep_matches_prefix stringappend_12230)) of
        Some (stringappend_12240,stringappend_12250) =>
  (stringappend_12240, stringappend_12250)
  ) of
      (_, stringappend_12250) =>
  (let stringappend_12260 = (string_drop stringappend_12230
                               stringappend_12250) in
  (let (rs1, stringappend_12280) =
       ((case  ((reg_name_matches_prefix stringappend_12260 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12270,stringappend_12280) =>
        (stringappend_12270, stringappend_12280)
        )) in
  (let stringappend_12290 = (string_drop stringappend_12260
                               stringappend_12280) in
  (case 
  (case  ((sep_matches_prefix stringappend_12290)) of
        Some (stringappend_12300,stringappend_12310) =>
  (stringappend_12300, stringappend_12310)
  ) of
      (_, stringappend_12310) =>
  (let stringappend_12320 = (string_drop stringappend_12290
                               stringappend_12310) in
  (let (imm, stringappend_12340) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_12320 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_12330,stringappend_12340) =>
        (stringappend_12330, stringappend_12340)
        )) in
  if(((string_drop stringappend_12320 stringappend_12340)) = ('''')) then
    (LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl)) else undefined))
  ))))
  ))))
  ))))))))))
   else if (((((string_startswith stringappend_10760 (''s''))) \<and> ((let stringappend_12360 = (string_drop stringappend_10760 ((string_length (''s'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_12360)) of
                   Some (stringappend_12370,stringappend_12380) =>
                    (let stringappend_12390 = (string_drop stringappend_12360 stringappend_12380) in
                    if ((case  ((maybe_aq_matches_prefix stringappend_12390)) of
                        Some (stringappend_12400,stringappend_12410) =>
                         (let stringappend_12420 =
                           (string_drop stringappend_12390 stringappend_12410) in
                         if ((case  ((maybe_rl_matches_prefix stringappend_12420)) of
                             Some (stringappend_12430,stringappend_12440) =>
                              (let stringappend_12450 =
                                (string_drop stringappend_12420 stringappend_12440) in
                              if ((case  ((spc_matches_prefix stringappend_12450)) of
                                  Some (stringappend_12460,stringappend_12470) =>
                                   (let stringappend_12480 =
                                     (string_drop stringappend_12450 stringappend_12470) in
                                   if ((case  ((reg_name_matches_prefix stringappend_12480
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_12490,stringappend_12500) =>
                                        (let stringappend_12510 =
                                          (string_drop stringappend_12480 stringappend_12500) in
                                        if ((case  ((sep_matches_prefix stringappend_12510)) of
                                            Some (stringappend_12520,stringappend_12530) =>
                                             (let stringappend_12540 =
                                               (string_drop stringappend_12510 stringappend_12530) in
                                             if ((case  ((reg_name_matches_prefix stringappend_12540
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_12550,stringappend_12560) =>
                                                  (let stringappend_12570 =
                                                    (string_drop stringappend_12540
                                                      stringappend_12560) in
                                                  if ((case  ((sep_matches_prefix stringappend_12570)) of
                                                      Some (stringappend_12580,stringappend_12590) =>
                                                       (let stringappend_12600 =
                                                         (string_drop stringappend_12570
                                                           stringappend_12590) in
                                                       if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_12600
                                                                    ::  (( 12 Word.word * ii))option)) of
                                                           Some
                                                           (stringappend_12610,stringappend_12620) => 
  if(((string_drop stringappend_12600 stringappend_12620)) = ('''')) then
    True else False
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_12360 = (string_drop stringappend_10760 ((string_length (''s'')))) in
     (let (size1, stringappend_12380) =
       ((case  ((size_mnemonic_matches_prefix stringappend_12360)) of
         Some (stringappend_12370,stringappend_12380) =>
          (stringappend_12370, stringappend_12380)
       )) in
     (let stringappend_12390 = (string_drop stringappend_12360 stringappend_12380) in
     (let (aq, stringappend_12410) =
       ((case  ((maybe_aq_matches_prefix stringappend_12390)) of
         Some (stringappend_12400,stringappend_12410) =>
          (stringappend_12400, stringappend_12410)
       )) in
     (let stringappend_12420 = (string_drop stringappend_12390 stringappend_12410) in
     (let (rl, stringappend_12440) =
       ((case  ((maybe_rl_matches_prefix stringappend_12420)) of
         Some (stringappend_12430,stringappend_12440) =>
          (stringappend_12430, stringappend_12440)
       )) in
     (let stringappend_12450 = (string_drop stringappend_12420 stringappend_12440) in  
  (case 
  (case  ((spc_matches_prefix stringappend_12450)) of
        Some (stringappend_12460,stringappend_12470) =>
  (stringappend_12460, stringappend_12470)
  ) of
      (_, stringappend_12470) =>
  (let stringappend_12480 = (string_drop stringappend_12450
                               stringappend_12470) in
  (let (rd, stringappend_12500) =
       ((case  ((reg_name_matches_prefix stringappend_12480 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12490,stringappend_12500) =>
        (stringappend_12490, stringappend_12500)
        )) in
  (let stringappend_12510 = (string_drop stringappend_12480
                               stringappend_12500) in
  (case 
  (case  ((sep_matches_prefix stringappend_12510)) of
        Some (stringappend_12520,stringappend_12530) =>
  (stringappend_12520, stringappend_12530)
  ) of
      (_, stringappend_12530) =>
  (let stringappend_12540 = (string_drop stringappend_12510
                               stringappend_12530) in
  (let (rs1, stringappend_12560) =
       ((case  ((reg_name_matches_prefix stringappend_12540 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12550,stringappend_12560) =>
        (stringappend_12550, stringappend_12560)
        )) in
  (let stringappend_12570 = (string_drop stringappend_12540
                               stringappend_12560) in
  (case 
  (case  ((sep_matches_prefix stringappend_12570)) of
        Some (stringappend_12580,stringappend_12590) =>
  (stringappend_12580, stringappend_12590)
  ) of
      (_, stringappend_12590) =>
  (let stringappend_12600 = (string_drop stringappend_12570
                               stringappend_12590) in
  (let (imm, stringappend_12620) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_12600 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_12610,stringappend_12620) =>
        (stringappend_12610, stringappend_12620)
        )) in
  if(((string_drop stringappend_12600 stringappend_12620)) = ('''')) then
    (STORE (imm,rs1,rd,size1,aq,rl)) else undefined))
  ))))
  ))))
  ))))))))
   else if (((((string_startswith stringappend_10760 (''addiw''))) \<and> ((let stringappend_12640 = (string_drop stringappend_10760 ((string_length (''addiw'')))) in
               if ((case  ((spc_matches_prefix stringappend_12640)) of
                   Some (stringappend_12650,stringappend_12660) =>
                    (let stringappend_12670 = (string_drop stringappend_12640 stringappend_12660) in
                    if ((case  ((reg_name_matches_prefix stringappend_12670
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_12680,stringappend_12690) =>
                         (let stringappend_12700 =
                           (string_drop stringappend_12670 stringappend_12690) in
                         if ((case  ((sep_matches_prefix stringappend_12700)) of
                             Some (stringappend_12710,stringappend_12720) =>
                              (let stringappend_12730 =
                                (string_drop stringappend_12700 stringappend_12720) in
                              if ((case  ((reg_name_matches_prefix stringappend_12730
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_12740,stringappend_12750) =>
                                   (let stringappend_12760 =
                                     (string_drop stringappend_12730 stringappend_12750) in
                                   if ((case  ((sep_matches_prefix stringappend_12760)) of
                                       Some (stringappend_12770,stringappend_12780) =>
                                        (let stringappend_12790 =
                                          (string_drop stringappend_12760 stringappend_12780) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_12790
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_12800,stringappend_12810) => 
  if(((string_drop stringappend_12790 stringappend_12810)) = ('''')) then
    True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_12640 = (string_drop stringappend_10760 ((string_length (''addiw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_12640)) of
        Some (stringappend_12650,stringappend_12660) =>
  (stringappend_12650, stringappend_12660)
  ) of
      (_, stringappend_12660) =>
  (let stringappend_12670 = (string_drop stringappend_12640
                               stringappend_12660) in
  (let (rd, stringappend_12690) =
       ((case  ((reg_name_matches_prefix stringappend_12670 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12680,stringappend_12690) =>
        (stringappend_12680, stringappend_12690)
        )) in
  (let stringappend_12700 = (string_drop stringappend_12670
                               stringappend_12690) in
  (case 
  (case  ((sep_matches_prefix stringappend_12700)) of
        Some (stringappend_12710,stringappend_12720) =>
  (stringappend_12710, stringappend_12720)
  ) of
      (_, stringappend_12720) =>
  (let stringappend_12730 = (string_drop stringappend_12700
                               stringappend_12720) in
  (let (rs1, stringappend_12750) =
       ((case  ((reg_name_matches_prefix stringappend_12730 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12740,stringappend_12750) =>
        (stringappend_12740, stringappend_12750)
        )) in
  (let stringappend_12760 = (string_drop stringappend_12730
                               stringappend_12750) in
  (case 
  (case  ((sep_matches_prefix stringappend_12760)) of
        Some (stringappend_12770,stringappend_12780) =>
  (stringappend_12770, stringappend_12780)
  ) of
      (_, stringappend_12780) =>
  (let stringappend_12790 = (string_drop stringappend_12760
                               stringappend_12780) in
  (let (imm, stringappend_12810) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_12790 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_12800,stringappend_12810) =>
        (stringappend_12800, stringappend_12810)
        )) in
  if(((string_drop stringappend_12790 stringappend_12810)) = ('''')) then
    (ADDIW (imm,rs1,rd)) else undefined))
  ))))
  ))))
  ))
   else if ((case  ((shiftw_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_12830,stringappend_12840) =>
        (let stringappend_12850 = (string_drop stringappend_10760 stringappend_12840) in
        if ((case  ((spc_matches_prefix stringappend_12850)) of
            Some (stringappend_12860,stringappend_12870) =>
             (let stringappend_12880 = (string_drop stringappend_12850 stringappend_12870) in
             if ((case  ((reg_name_matches_prefix stringappend_12880  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_12890,stringappend_12900) =>
                  (let stringappend_12910 = (string_drop stringappend_12880 stringappend_12900) in
                  if ((case  ((sep_matches_prefix stringappend_12910)) of
                      Some (stringappend_12920,stringappend_12930) =>
                       (let stringappend_12940 = (string_drop stringappend_12910 stringappend_12930) in
                       if ((case  ((reg_name_matches_prefix stringappend_12940
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_12950,stringappend_12960) =>
                            (let stringappend_12970 =
                              (string_drop stringappend_12940 stringappend_12960) in
                            if ((case  ((sep_matches_prefix stringappend_12970)) of
                                Some (stringappend_12980,stringappend_12990) =>
                                 (let stringappend_13000 =
                                   (string_drop stringappend_12970 stringappend_12990) in
                                 if ((case  ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_13000
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_13010,stringappend_13020) => 
  if(((string_drop stringappend_13000 stringappend_13020)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_12840) =
       ((case  ((shiftw_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_12830,stringappend_12840) =>
          (stringappend_12830, stringappend_12840)
       )) in
     (let stringappend_12850 = (string_drop stringappend_10760 stringappend_12840) in  
  (case 
  (case  ((spc_matches_prefix stringappend_12850)) of
        Some (stringappend_12860,stringappend_12870) =>
  (stringappend_12860, stringappend_12870)
  ) of
      (_, stringappend_12870) =>
  (let stringappend_12880 = (string_drop stringappend_12850
                               stringappend_12870) in
  (let (rd, stringappend_12900) =
       ((case  ((reg_name_matches_prefix stringappend_12880 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12890,stringappend_12900) =>
        (stringappend_12890, stringappend_12900)
        )) in
  (let stringappend_12910 = (string_drop stringappend_12880
                               stringappend_12900) in
  (case 
  (case  ((sep_matches_prefix stringappend_12910)) of
        Some (stringappend_12920,stringappend_12930) =>
  (stringappend_12920, stringappend_12930)
  ) of
      (_, stringappend_12930) =>
  (let stringappend_12940 = (string_drop stringappend_12910
                               stringappend_12930) in
  (let (rs1, stringappend_12960) =
       ((case  ((reg_name_matches_prefix stringappend_12940 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_12950,stringappend_12960) =>
        (stringappend_12950, stringappend_12960)
        )) in
  (let stringappend_12970 = (string_drop stringappend_12940
                               stringappend_12960) in
  (case 
  (case  ((sep_matches_prefix stringappend_12970)) of
        Some (stringappend_12980,stringappend_12990) =>
  (stringappend_12980, stringappend_12990)
  ) of
      (_, stringappend_12990) =>
  (let stringappend_13000 = (string_drop stringappend_12970
                               stringappend_12990) in
  (let (shamt, stringappend_13020) =
       ((case  ((hex_bits_5_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_13000 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13010,stringappend_13020) =>
        (stringappend_13010, stringappend_13020)
        )) in
  if(((string_drop stringappend_13000 stringappend_13020)) = ('''')) then
    (SHIFTW (shamt,rs1,rd,op1)) else undefined))
  ))))
  ))))
  )))
   else if ((case  ((rtypew_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_13040,stringappend_13050) =>
        (let stringappend_13060 = (string_drop stringappend_10760 stringappend_13050) in
        if ((case  ((spc_matches_prefix stringappend_13060)) of
            Some (stringappend_13070,stringappend_13080) =>
             (let stringappend_13090 = (string_drop stringappend_13060 stringappend_13080) in
             if ((case  ((reg_name_matches_prefix stringappend_13090  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_13100,stringappend_13110) =>
                  (let stringappend_13120 = (string_drop stringappend_13090 stringappend_13110) in
                  if ((case  ((sep_matches_prefix stringappend_13120)) of
                      Some (stringappend_13130,stringappend_13140) =>
                       (let stringappend_13150 = (string_drop stringappend_13120 stringappend_13140) in
                       if ((case  ((reg_name_matches_prefix stringappend_13150
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_13160,stringappend_13170) =>
                            (let stringappend_13180 =
                              (string_drop stringappend_13150 stringappend_13170) in
                            if ((case  ((sep_matches_prefix stringappend_13180)) of
                                Some (stringappend_13190,stringappend_13200) =>
                                 (let stringappend_13210 =
                                   (string_drop stringappend_13180 stringappend_13200) in
                                 if ((case  ((reg_name_matches_prefix stringappend_13210
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_13220,stringappend_13230) => 
  if(((string_drop stringappend_13210 stringappend_13230)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_13050) =
       ((case  ((rtypew_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_13040,stringappend_13050) =>
          (stringappend_13040, stringappend_13050)
       )) in
     (let stringappend_13060 = (string_drop stringappend_10760 stringappend_13050) in  
  (case 
  (case  ((spc_matches_prefix stringappend_13060)) of
        Some (stringappend_13070,stringappend_13080) =>
  (stringappend_13070, stringappend_13080)
  ) of
      (_, stringappend_13080) =>
  (let stringappend_13090 = (string_drop stringappend_13060
                               stringappend_13080) in
  (let (rd, stringappend_13110) =
       ((case  ((reg_name_matches_prefix stringappend_13090 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13100,stringappend_13110) =>
        (stringappend_13100, stringappend_13110)
        )) in
  (let stringappend_13120 = (string_drop stringappend_13090
                               stringappend_13110) in
  (case 
  (case  ((sep_matches_prefix stringappend_13120)) of
        Some (stringappend_13130,stringappend_13140) =>
  (stringappend_13130, stringappend_13140)
  ) of
      (_, stringappend_13140) =>
  (let stringappend_13150 = (string_drop stringappend_13120
                               stringappend_13140) in
  (let (rs1, stringappend_13170) =
       ((case  ((reg_name_matches_prefix stringappend_13150 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13160,stringappend_13170) =>
        (stringappend_13160, stringappend_13170)
        )) in
  (let stringappend_13180 = (string_drop stringappend_13150
                               stringappend_13170) in
  (case 
  (case  ((sep_matches_prefix stringappend_13180)) of
        Some (stringappend_13190,stringappend_13200) =>
  (stringappend_13190, stringappend_13200)
  ) of
      (_, stringappend_13200) =>
  (let stringappend_13210 = (string_drop stringappend_13180
                               stringappend_13200) in
  (let (rs2, stringappend_13230) =
       ((case  ((reg_name_matches_prefix stringappend_13210 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13220,stringappend_13230) =>
        (stringappend_13220, stringappend_13230)
        )) in
  if(((string_drop stringappend_13210 stringappend_13230)) = ('''')) then
    (RTYPEW (rs2,rs1,rd,op1)) else undefined))
  ))))
  ))))
  )))
   else if ((case  ((mul_mnemonic_matches_prefix stringappend_10760)) of
       Some (stringappend_13250,stringappend_13260) =>
        (let stringappend_13270 = (string_drop stringappend_10760 stringappend_13260) in
        if ((case  ((spc_matches_prefix stringappend_13270)) of
            Some (stringappend_13280,stringappend_13290) =>
             (let stringappend_13300 = (string_drop stringappend_13270 stringappend_13290) in
             if ((case  ((reg_name_matches_prefix stringappend_13300  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_13310,stringappend_13320) =>
                  (let stringappend_13330 = (string_drop stringappend_13300 stringappend_13320) in
                  if ((case  ((sep_matches_prefix stringappend_13330)) of
                      Some (stringappend_13340,stringappend_13350) =>
                       (let stringappend_13360 = (string_drop stringappend_13330 stringappend_13350) in
                       if ((case  ((reg_name_matches_prefix stringappend_13360
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_13370,stringappend_13380) =>
                            (let stringappend_13390 =
                              (string_drop stringappend_13360 stringappend_13380) in
                            if ((case  ((sep_matches_prefix stringappend_13390)) of
                                Some (stringappend_13400,stringappend_13410) =>
                                 (let stringappend_13420 =
                                   (string_drop stringappend_13390 stringappend_13410) in
                                 if ((case  ((reg_name_matches_prefix stringappend_13420
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_13430,stringappend_13440) => 
  if(((string_drop stringappend_13420 stringappend_13440)) = ('''')) then
    True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let ((high, signed1, signed2), stringappend_13260) =
       ((case  ((mul_mnemonic_matches_prefix stringappend_10760)) of
         Some (stringappend_13250,stringappend_13260) =>
          (stringappend_13250, stringappend_13260)
       )) in
     (let stringappend_13270 = (string_drop stringappend_10760 stringappend_13260) in  
  (case 
  (case  ((spc_matches_prefix stringappend_13270)) of
        Some (stringappend_13280,stringappend_13290) =>
  (stringappend_13280, stringappend_13290)
  ) of
      (_, stringappend_13290) =>
  (let stringappend_13300 = (string_drop stringappend_13270
                               stringappend_13290) in
  (let (rd, stringappend_13320) =
       ((case  ((reg_name_matches_prefix stringappend_13300 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13310,stringappend_13320) =>
        (stringappend_13310, stringappend_13320)
        )) in
  (let stringappend_13330 = (string_drop stringappend_13300
                               stringappend_13320) in
  (case 
  (case  ((sep_matches_prefix stringappend_13330)) of
        Some (stringappend_13340,stringappend_13350) =>
  (stringappend_13340, stringappend_13350)
  ) of
      (_, stringappend_13350) =>
  (let stringappend_13360 = (string_drop stringappend_13330
                               stringappend_13350) in
  (let (rs1, stringappend_13380) =
       ((case  ((reg_name_matches_prefix stringappend_13360 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13370,stringappend_13380) =>
        (stringappend_13370, stringappend_13380)
        )) in
  (let stringappend_13390 = (string_drop stringappend_13360
                               stringappend_13380) in
  (case 
  (case  ((sep_matches_prefix stringappend_13390)) of
        Some (stringappend_13400,stringappend_13410) =>
  (stringappend_13400, stringappend_13410)
  ) of
      (_, stringappend_13410) =>
  (let stringappend_13420 = (string_drop stringappend_13390
                               stringappend_13410) in
  (let (rs2, stringappend_13440) =
       ((case  ((reg_name_matches_prefix stringappend_13420 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13430,stringappend_13440) =>
        (stringappend_13430, stringappend_13440)
        )) in
  if(((string_drop stringappend_13420 stringappend_13440)) = ('''')) then
    (MUL (rs2,rs1,rd,high,signed1,signed2)) else undefined))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_10760 (''div''))) \<and> ((let stringappend_13460 = (string_drop stringappend_10760 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_13460)) of
                   Some (stringappend_13470,stringappend_13480) =>
                    (let stringappend_13490 = (string_drop stringappend_13460 stringappend_13480) in
                    if ((case  ((spc_matches_prefix stringappend_13490)) of
                        Some (stringappend_13500,stringappend_13510) =>
                         (let stringappend_13520 =
                           (string_drop stringappend_13490 stringappend_13510) in
                         if ((case  ((reg_name_matches_prefix stringappend_13520
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_13530,stringappend_13540) =>
                              (let stringappend_13550 =
                                (string_drop stringappend_13520 stringappend_13540) in
                              if ((case  ((sep_matches_prefix stringappend_13550)) of
                                  Some (stringappend_13560,stringappend_13570) =>
                                   (let stringappend_13580 =
                                     (string_drop stringappend_13550 stringappend_13570) in
                                   if ((case  ((reg_name_matches_prefix stringappend_13580
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_13590,stringappend_13600) =>
                                        (let stringappend_13610 =
                                          (string_drop stringappend_13580 stringappend_13600) in
                                        if ((case  ((sep_matches_prefix stringappend_13610)) of
                                            Some (stringappend_13620,stringappend_13630) =>
                                             (let stringappend_13640 =
                                               (string_drop stringappend_13610 stringappend_13630) in
                                             if ((case  ((reg_name_matches_prefix stringappend_13640
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_13650,stringappend_13660) => 
  if(((string_drop stringappend_13640 stringappend_13660)) = ('''')) then
    True else False
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_13460 = (string_drop stringappend_10760 ((string_length (''div'')))) in
     (let (s, stringappend_13480) =
       ((case  ((maybe_not_u_matches_prefix stringappend_13460)) of
         Some (stringappend_13470,stringappend_13480) =>
          (stringappend_13470, stringappend_13480)
       )) in
     (let stringappend_13490 = (string_drop stringappend_13460 stringappend_13480) in  
  (case 
  (case  ((spc_matches_prefix stringappend_13490)) of
        Some (stringappend_13500,stringappend_13510) =>
  (stringappend_13500, stringappend_13510)
  ) of
      (_, stringappend_13510) =>
  (let stringappend_13520 = (string_drop stringappend_13490
                               stringappend_13510) in
  (let (rd, stringappend_13540) =
       ((case  ((reg_name_matches_prefix stringappend_13520 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13530,stringappend_13540) =>
        (stringappend_13530, stringappend_13540)
        )) in
  (let stringappend_13550 = (string_drop stringappend_13520
                               stringappend_13540) in
  (case 
  (case  ((sep_matches_prefix stringappend_13550)) of
        Some (stringappend_13560,stringappend_13570) =>
  (stringappend_13560, stringappend_13570)
  ) of
      (_, stringappend_13570) =>
  (let stringappend_13580 = (string_drop stringappend_13550
                               stringappend_13570) in
  (let (rs1, stringappend_13600) =
       ((case  ((reg_name_matches_prefix stringappend_13580 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13590,stringappend_13600) =>
        (stringappend_13590, stringappend_13600)
        )) in
  (let stringappend_13610 = (string_drop stringappend_13580
                               stringappend_13600) in
  (case 
  (case  ((sep_matches_prefix stringappend_13610)) of
        Some (stringappend_13620,stringappend_13630) =>
  (stringappend_13620, stringappend_13630)
  ) of
      (_, stringappend_13630) =>
  (let stringappend_13640 = (string_drop stringappend_13610
                               stringappend_13630) in
  (let (rs2, stringappend_13660) =
       ((case  ((reg_name_matches_prefix stringappend_13640 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13650,stringappend_13660) =>
        (stringappend_13650, stringappend_13660)
        )) in
  if(((string_drop stringappend_13640 stringappend_13660)) = ('''')) then
    (DIV (rs2,rs1,rd,s)) else undefined))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_10760 (''rem''))) \<and> ((let stringappend_13680 = (string_drop stringappend_10760 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_13680)) of
                   Some (stringappend_13690,stringappend_13700) =>
                    (let stringappend_13710 = (string_drop stringappend_13680 stringappend_13700) in
                    if ((case  ((spc_matches_prefix stringappend_13710)) of
                        Some (stringappend_13720,stringappend_13730) =>
                         (let stringappend_13740 =
                           (string_drop stringappend_13710 stringappend_13730) in
                         if ((case  ((reg_name_matches_prefix stringappend_13740
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_13750,stringappend_13760) =>
                              (let stringappend_13770 =
                                (string_drop stringappend_13740 stringappend_13760) in
                              if ((case  ((sep_matches_prefix stringappend_13770)) of
                                  Some (stringappend_13780,stringappend_13790) =>
                                   (let stringappend_13800 =
                                     (string_drop stringappend_13770 stringappend_13790) in
                                   if ((case  ((reg_name_matches_prefix stringappend_13800
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_13810,stringappend_13820) =>
                                        (let stringappend_13830 =
                                          (string_drop stringappend_13800 stringappend_13820) in
                                        if ((case  ((sep_matches_prefix stringappend_13830)) of
                                            Some (stringappend_13840,stringappend_13850) =>
                                             (let stringappend_13860 =
                                               (string_drop stringappend_13830 stringappend_13850) in
                                             if ((case  ((reg_name_matches_prefix stringappend_13860
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_13870,stringappend_13880) => 
  if(((string_drop stringappend_13860 stringappend_13880)) = ('''')) then
    True else False
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_13680 = (string_drop stringappend_10760 ((string_length (''rem'')))) in
     (let (s, stringappend_13700) =
       ((case  ((maybe_not_u_matches_prefix stringappend_13680)) of
         Some (stringappend_13690,stringappend_13700) =>
          (stringappend_13690, stringappend_13700)
       )) in
     (let stringappend_13710 = (string_drop stringappend_13680 stringappend_13700) in  
  (case 
  (case  ((spc_matches_prefix stringappend_13710)) of
        Some (stringappend_13720,stringappend_13730) =>
  (stringappend_13720, stringappend_13730)
  ) of
      (_, stringappend_13730) =>
  (let stringappend_13740 = (string_drop stringappend_13710
                               stringappend_13730) in
  (let (rd, stringappend_13760) =
       ((case  ((reg_name_matches_prefix stringappend_13740 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13750,stringappend_13760) =>
        (stringappend_13750, stringappend_13760)
        )) in
  (let stringappend_13770 = (string_drop stringappend_13740
                               stringappend_13760) in
  (case 
  (case  ((sep_matches_prefix stringappend_13770)) of
        Some (stringappend_13780,stringappend_13790) =>
  (stringappend_13780, stringappend_13790)
  ) of
      (_, stringappend_13790) =>
  (let stringappend_13800 = (string_drop stringappend_13770
                               stringappend_13790) in
  (let (rs1, stringappend_13820) =
       ((case  ((reg_name_matches_prefix stringappend_13800 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13810,stringappend_13820) =>
        (stringappend_13810, stringappend_13820)
        )) in
  (let stringappend_13830 = (string_drop stringappend_13800
                               stringappend_13820) in
  (case 
  (case  ((sep_matches_prefix stringappend_13830)) of
        Some (stringappend_13840,stringappend_13850) =>
  (stringappend_13840, stringappend_13850)
  ) of
      (_, stringappend_13850) =>
  (let stringappend_13860 = (string_drop stringappend_13830
                               stringappend_13850) in
  (let (rs2, stringappend_13880) =
       ((case  ((reg_name_matches_prefix stringappend_13860 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13870,stringappend_13880) =>
        (stringappend_13870, stringappend_13880)
        )) in
  if(((string_drop stringappend_13860 stringappend_13880)) = ('''')) then
    (REM (rs2,rs1,rd,s)) else undefined))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_10760 (''mulw''))) \<and> ((let stringappend_13900 = (string_drop stringappend_10760 ((string_length (''mulw'')))) in
               if ((case  ((spc_matches_prefix stringappend_13900)) of
                   Some (stringappend_13910,stringappend_13920) =>
                    (let stringappend_13930 = (string_drop stringappend_13900 stringappend_13920) in
                    if ((case  ((reg_name_matches_prefix stringappend_13930
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_13940,stringappend_13950) =>
                         (let stringappend_13960 =
                           (string_drop stringappend_13930 stringappend_13950) in
                         if ((case  ((sep_matches_prefix stringappend_13960)) of
                             Some (stringappend_13970,stringappend_13980) =>
                              (let stringappend_13990 =
                                (string_drop stringappend_13960 stringappend_13980) in
                              if ((case  ((reg_name_matches_prefix stringappend_13990
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_14000,stringappend_14010) =>
                                   (let stringappend_14020 =
                                     (string_drop stringappend_13990 stringappend_14010) in
                                   if ((case  ((sep_matches_prefix stringappend_14020)) of
                                       Some (stringappend_14030,stringappend_14040) =>
                                        (let stringappend_14050 =
                                          (string_drop stringappend_14020 stringappend_14040) in
                                        if ((case  ((reg_name_matches_prefix stringappend_14050
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_14060,stringappend_14070) => 
  if(((string_drop stringappend_14050 stringappend_14070)) = ('''')) then
    True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_13900 = (string_drop stringappend_10760 ((string_length (''mulw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_13900)) of
        Some (stringappend_13910,stringappend_13920) =>
  (stringappend_13910, stringappend_13920)
  ) of
      (_, stringappend_13920) =>
  (let stringappend_13930 = (string_drop stringappend_13900
                               stringappend_13920) in
  (let (rd, stringappend_13950) =
       ((case  ((reg_name_matches_prefix stringappend_13930 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_13940,stringappend_13950) =>
        (stringappend_13940, stringappend_13950)
        )) in
  (let stringappend_13960 = (string_drop stringappend_13930
                               stringappend_13950) in
  (case 
  (case  ((sep_matches_prefix stringappend_13960)) of
        Some (stringappend_13970,stringappend_13980) =>
  (stringappend_13970, stringappend_13980)
  ) of
      (_, stringappend_13980) =>
  (let stringappend_13990 = (string_drop stringappend_13960
                               stringappend_13980) in
  (let (rs1, stringappend_14010) =
       ((case  ((reg_name_matches_prefix stringappend_13990 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14000,stringappend_14010) =>
        (stringappend_14000, stringappend_14010)
        )) in
  (let stringappend_14020 = (string_drop stringappend_13990
                               stringappend_14010) in
  (case 
  (case  ((sep_matches_prefix stringappend_14020)) of
        Some (stringappend_14030,stringappend_14040) =>
  (stringappend_14030, stringappend_14040)
  ) of
      (_, stringappend_14040) =>
  (let stringappend_14050 = (string_drop stringappend_14020
                               stringappend_14040) in
  (let (rs2, stringappend_14070) =
       ((case  ((reg_name_matches_prefix stringappend_14050 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14060,stringappend_14070) =>
        (stringappend_14060, stringappend_14070)
        )) in
  if(((string_drop stringappend_14050 stringappend_14070)) = ('''')) then
    (MULW (rs2,rs1,rd)) else undefined))
  ))))
  ))))
  ))
   else if (((((string_startswith stringappend_10760 (''div''))) \<and> ((let stringappend_14090 = (string_drop stringappend_10760 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_14090)) of
                   Some (stringappend_14100,stringappend_14110) =>
                    (let stringappend_14120 = (string_drop stringappend_14090 stringappend_14110) in
                    if (((((string_startswith stringappend_14120 (''w''))) \<and> ((let stringappend_14130 =
                             (string_drop stringappend_14120 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_14130)) of
                               Some (stringappend_14140,stringappend_14150) =>
                                (let stringappend_14160 =
                                  (string_drop stringappend_14130 stringappend_14150) in
                                if ((case  ((reg_name_matches_prefix stringappend_14160
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_14170,stringappend_14180) =>
                                     (let stringappend_14190 =
                                       (string_drop stringappend_14160 stringappend_14180) in
                                     if ((case  ((sep_matches_prefix stringappend_14190)) of
                                         Some (stringappend_14200,stringappend_14210) =>
                                          (let stringappend_14220 =
                                            (string_drop stringappend_14190 stringappend_14210) in
                                          if ((case  ((reg_name_matches_prefix stringappend_14220
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_14230,stringappend_14240) =>
                                               (let stringappend_14250 =
                                                 (string_drop stringappend_14220 stringappend_14240) in
                                               if ((case  ((sep_matches_prefix stringappend_14250)) of
                                                   Some (stringappend_14260,stringappend_14270) =>
                                                    (let stringappend_14280 =
                                                      (string_drop stringappend_14250
                                                        stringappend_14270) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_14280
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some
                                                        (stringappend_14290,stringappend_14300) => 
  if(((string_drop stringappend_14280 stringappend_14300)) = ('''')) then
    True else False
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_14090 = (string_drop stringappend_10760 ((string_length (''div'')))) in
     (let (s, stringappend_14110) =
       ((case  ((maybe_not_u_matches_prefix stringappend_14090)) of
         Some (stringappend_14100,stringappend_14110) =>
          (stringappend_14100, stringappend_14110)
       )) in
     (let stringappend_14120 = (string_drop stringappend_14090 stringappend_14110) in
     (let stringappend_14130 = (string_drop stringappend_14120 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_14130)) of
        Some (stringappend_14140,stringappend_14150) =>
  (stringappend_14140, stringappend_14150)
  ) of
      (_, stringappend_14150) =>
  (let stringappend_14160 = (string_drop stringappend_14130
                               stringappend_14150) in
  (let (rd, stringappend_14180) =
       ((case  ((reg_name_matches_prefix stringappend_14160 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14170,stringappend_14180) =>
        (stringappend_14170, stringappend_14180)
        )) in
  (let stringappend_14190 = (string_drop stringappend_14160
                               stringappend_14180) in
  (case 
  (case  ((sep_matches_prefix stringappend_14190)) of
        Some (stringappend_14200,stringappend_14210) =>
  (stringappend_14200, stringappend_14210)
  ) of
      (_, stringappend_14210) =>
  (let stringappend_14220 = (string_drop stringappend_14190
                               stringappend_14210) in
  (let (rs1, stringappend_14240) =
       ((case  ((reg_name_matches_prefix stringappend_14220 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14230,stringappend_14240) =>
        (stringappend_14230, stringappend_14240)
        )) in
  (let stringappend_14250 = (string_drop stringappend_14220
                               stringappend_14240) in
  (case 
  (case  ((sep_matches_prefix stringappend_14250)) of
        Some (stringappend_14260,stringappend_14270) =>
  (stringappend_14260, stringappend_14270)
  ) of
      (_, stringappend_14270) =>
  (let stringappend_14280 = (string_drop stringappend_14250
                               stringappend_14270) in
  (let (rs2, stringappend_14300) =
       ((case  ((reg_name_matches_prefix stringappend_14280 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14290,stringappend_14300) =>
        (stringappend_14290, stringappend_14300)
        )) in
  if(((string_drop stringappend_14280 stringappend_14300)) = ('''')) then
    (DIVW (rs2,rs1,rd,s)) else undefined))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_10760 (''rem''))) \<and> ((let stringappend_14320 = (string_drop stringappend_10760 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_14320)) of
                   Some (stringappend_14330,stringappend_14340) =>
                    (let stringappend_14350 = (string_drop stringappend_14320 stringappend_14340) in
                    if (((((string_startswith stringappend_14350 (''w''))) \<and> ((let stringappend_14360 =
                             (string_drop stringappend_14350 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_14360)) of
                               Some (stringappend_14370,stringappend_14380) =>
                                (let stringappend_14390 =
                                  (string_drop stringappend_14360 stringappend_14380) in
                                if ((case  ((reg_name_matches_prefix stringappend_14390
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_14400,stringappend_14410) =>
                                     (let stringappend_14420 =
                                       (string_drop stringappend_14390 stringappend_14410) in
                                     if ((case  ((sep_matches_prefix stringappend_14420)) of
                                         Some (stringappend_14430,stringappend_14440) =>
                                          (let stringappend_14450 =
                                            (string_drop stringappend_14420 stringappend_14440) in
                                          if ((case  ((reg_name_matches_prefix stringappend_14450
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_14460,stringappend_14470) =>
                                               (let stringappend_14480 =
                                                 (string_drop stringappend_14450 stringappend_14470) in
                                               if ((case  ((sep_matches_prefix stringappend_14480)) of
                                                   Some (stringappend_14490,stringappend_14500) =>
                                                    (let stringappend_14510 =
                                                      (string_drop stringappend_14480
                                                        stringappend_14500) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_14510
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some
                                                        (stringappend_14520,stringappend_14530) => 
  if(((string_drop stringappend_14510 stringappend_14530)) = ('''')) then
    True else False
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_14320 = (string_drop stringappend_10760 ((string_length (''rem'')))) in
     (let (s, stringappend_14340) =
       ((case  ((maybe_not_u_matches_prefix stringappend_14320)) of
         Some (stringappend_14330,stringappend_14340) =>
          (stringappend_14330, stringappend_14340)
       )) in
     (let stringappend_14350 = (string_drop stringappend_14320 stringappend_14340) in
     (let stringappend_14360 = (string_drop stringappend_14350 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_14360)) of
        Some (stringappend_14370,stringappend_14380) =>
  (stringappend_14370, stringappend_14380)
  ) of
      (_, stringappend_14380) =>
  (let stringappend_14390 = (string_drop stringappend_14360
                               stringappend_14380) in
  (let (rd, stringappend_14410) =
       ((case  ((reg_name_matches_prefix stringappend_14390 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14400,stringappend_14410) =>
        (stringappend_14400, stringappend_14410)
        )) in
  (let stringappend_14420 = (string_drop stringappend_14390
                               stringappend_14410) in
  (case 
  (case  ((sep_matches_prefix stringappend_14420)) of
        Some (stringappend_14430,stringappend_14440) =>
  (stringappend_14430, stringappend_14440)
  ) of
      (_, stringappend_14440) =>
  (let stringappend_14450 = (string_drop stringappend_14420
                               stringappend_14440) in
  (let (rs1, stringappend_14470) =
       ((case  ((reg_name_matches_prefix stringappend_14450 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14460,stringappend_14470) =>
        (stringappend_14460, stringappend_14470)
        )) in
  (let stringappend_14480 = (string_drop stringappend_14450
                               stringappend_14470) in
  (case 
  (case  ((sep_matches_prefix stringappend_14480)) of
        Some (stringappend_14490,stringappend_14500) =>
  (stringappend_14490, stringappend_14500)
  ) of
      (_, stringappend_14500) =>
  (let stringappend_14510 = (string_drop stringappend_14480
                               stringappend_14500) in
  (let (rs2, stringappend_14530) =
       ((case  ((reg_name_matches_prefix stringappend_14510 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_14520,stringappend_14530) =>
        (stringappend_14520, stringappend_14530)
        )) in
  if(((string_drop stringappend_14510 stringappend_14530)) = ('''')) then
    (REMW (rs2,rs1,rd,s)) else undefined))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_10760 (''fence''))) \<and> ((let stringappend_14550 = (string_drop stringappend_10760 ((string_length (''fence'')))) in
               if ((case  ((spc_matches_prefix stringappend_14550)) of
                   Some (stringappend_14560,stringappend_14570) =>
                    (let stringappend_14580 = (string_drop stringappend_14550 stringappend_14570) in
                    if ((case  ((fence_bits_matches_prefix stringappend_14580
                                 ::  (( 4 Word.word * ii))option)) of
                        Some (stringappend_14590,stringappend_14600) =>
                         (let stringappend_14610 =
                           (string_drop stringappend_14580 stringappend_14600) in
                         if ((case  ((sep_matches_prefix stringappend_14610)) of
                             Some (stringappend_14620,stringappend_14630) =>
                              (let stringappend_14640 =
                                (string_drop stringappend_14610 stringappend_14630) in
                              if ((case  ((fence_bits_matches_prefix stringappend_14640
                                           ::  (( 4 Word.word * ii))option)) of
                                  Some (stringappend_14650,stringappend_14660) => 
  if(((string_drop stringappend_14640 stringappend_14660)) = ('''')) then
    True else False
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_14550 = (string_drop stringappend_10760 ((string_length (''fence'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_14550)) of
        Some (stringappend_14560,stringappend_14570) =>
  (stringappend_14560, stringappend_14570)
  ) of
      (_, stringappend_14570) =>
  (let stringappend_14580 = (string_drop stringappend_14550
                               stringappend_14570) in
  (let (pred, stringappend_14600) =
       ((case  ((fence_bits_matches_prefix stringappend_14580 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_14590,stringappend_14600) =>
        (stringappend_14590, stringappend_14600)
        )) in
  (let stringappend_14610 = (string_drop stringappend_14580
                               stringappend_14600) in
  (case 
  (case  ((sep_matches_prefix stringappend_14610)) of
        Some (stringappend_14620,stringappend_14630) =>
  (stringappend_14620, stringappend_14630)
  ) of
      (_, stringappend_14630) =>
  (let stringappend_14640 = (string_drop stringappend_14610
                               stringappend_14630) in
  (let (succ, stringappend_14660) =
       ((case  ((fence_bits_matches_prefix stringappend_14640 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_14650,stringappend_14660) =>
        (stringappend_14650, stringappend_14660)
        )) in
  if(((string_drop stringappend_14640 stringappend_14660)) = ('''')) then
    (FENCE (pred,succ)) else undefined))
  ))))
  ))
   else  if(stringappend_10760 = (''fence.i'')) then (FENCEI () ) else
   (
   if(stringappend_10760 = (''ecall'')) then (ECALL () ) else
     (
     if(stringappend_10760 = (''mret'')) then (MRET () ) else
       (
       if(stringappend_10760 = (''sret'')) then (SRET () ) else
         (
         if(stringappend_10760 = (''ebreak'')) then (EBREAK () ) else
           (
           if(stringappend_10760 = (''wfi'')) then (WFI () ) else
             (
             if (((((string_startswith stringappend_10760 (''sfence.vma'')))
                     \<and>
                     ((let stringappend_14680 =
                           (string_drop stringappend_10760
                              ((string_length (''sfence.vma'')))) in
                      if ((case  ((spc_matches_prefix stringappend_14680)) of
                                Some (stringappend_14690,stringappend_14700) =>
                          (let stringappend_14710 = (string_drop
                                                       stringappend_14680
                                                       stringappend_14700) in
                          if ((case  ((reg_name_matches_prefix
                                         stringappend_14710
                                      :: (( 5 Word.word * ii)) option)) of
                                    Some (stringappend_14720,stringappend_14730) =>
                              (let stringappend_14740 =
                                   (string_drop stringappend_14710
                                      stringappend_14730) in
                              if ((case  ((sep_matches_prefix
                                             stringappend_14740)) of
                                        Some (stringappend_14750,stringappend_14760) =>
                                  (let stringappend_14770 =
                                       (string_drop stringappend_14740
                                          stringappend_14760) in
                                  if ((case  ((reg_name_matches_prefix
                                                 stringappend_14770
                                              :: (( 5 Word.word * ii)) option)) of
                                            Some (stringappend_14780,stringappend_14790) =>
                                      if(((string_drop stringappend_14770
                                             stringappend_14790)) = ('''')) then
                                        True else False
                                        | None => False
                                      )) then True else False)
                                    | None => False
                                  )) then True else False)
                                | None => False
                              )) then True else False)
                            | None => False
                          )) then True else False))))) then
               (let stringappend_14680 = (string_drop stringappend_10760
                                            ((string_length (''sfence.vma'')))) in
               (case 
               (case  ((spc_matches_prefix stringappend_14680)) of
                     Some (stringappend_14690,stringappend_14700) =>
               (stringappend_14690, stringappend_14700)
               ) of
                   (_, stringappend_14700) =>
               (let stringappend_14710 = (string_drop stringappend_14680
                                            stringappend_14700) in
               (let (rs1, stringappend_14730) =
                    ((case  ((reg_name_matches_prefix stringappend_14710 :: (( 5 Word.word * ii)) option)) of
                           Some (stringappend_14720,stringappend_14730) =>
                     (stringappend_14720, stringappend_14730)
                     )) in
               (let stringappend_14740 = (string_drop stringappend_14710
                                            stringappend_14730) in
               (case 
               (case  ((sep_matches_prefix stringappend_14740)) of
                     Some (stringappend_14750,stringappend_14760) =>
               (stringappend_14750, stringappend_14760)
               ) of
                   (_, stringappend_14760) =>
               (let stringappend_14770 = (string_drop stringappend_14740
                                            stringappend_14760) in
               (let (rs2, stringappend_14790) =
                    ((case  ((reg_name_matches_prefix stringappend_14770 :: (( 5 Word.word * ii)) option)) of
                           Some (stringappend_14780,stringappend_14790) =>
                     (stringappend_14780, stringappend_14790)
                     )) in
               if(((string_drop stringappend_14770 stringappend_14790)) =
                    ('''')) then (SFENCE_VMA (rs1,rs2)) else undefined))
               ))))
               )) else
               if (((((string_startswith stringappend_10760 (''lr.'')))
                       \<and>
                       ((let stringappend_14810 =
                             (string_drop stringappend_10760
                                ((string_length (''lr.'')))) in
                        if ((case  ((maybe_aq_matches_prefix
                                       stringappend_14810)) of
                                  Some (stringappend_14820,stringappend_14830) =>
                            (let stringappend_14840 =
                                 (string_drop stringappend_14810
                                    stringappend_14830) in
                            if ((case  ((maybe_rl_matches_prefix
                                           stringappend_14840)) of
                                      Some (stringappend_14850,stringappend_14860) =>
                                (let stringappend_14870 =
                                     (string_drop stringappend_14840
                                        stringappend_14860) in
                                if ((case  ((size_mnemonic_matches_prefix
                                               stringappend_14870)) of
                                          Some (stringappend_14880,stringappend_14890) =>
                                    (let stringappend_14900 =
                                         (string_drop stringappend_14870
                                            stringappend_14890) in
                                    if ((case  ((spc_matches_prefix
                                                   stringappend_14900)) of
                                              Some (stringappend_14910,stringappend_14920) =>
                                        (let stringappend_14930 =
                                             (string_drop stringappend_14900
                                                stringappend_14920) in
                                        if ((case  ((reg_name_matches_prefix
                                                       stringappend_14930
                                                    :: (( 5 Word.word * ii)) option)) of
                                                  Some (stringappend_14940,stringappend_14950) =>
                                            (let stringappend_14960 =
                                                 (string_drop
                                                    stringappend_14930
                                                    stringappend_14950) in
                                            if ((case  ((sep_matches_prefix
                                                           stringappend_14960)) of
                                                      Some (stringappend_14970,stringappend_14980) =>
                                                (let stringappend_14990 =
                                                     (string_drop
                                                        stringappend_14960
                                                        stringappend_14980) in
                                                if ((case  ((reg_name_matches_prefix
                                                               stringappend_14990
                                                            :: (( 5 Word.word * ii)) option)) of
                                                          Some (stringappend_15000,stringappend_15010) =>
                                                    if(((string_drop
                                                           stringappend_14990
                                                           stringappend_15010))
                                                         = ('''')) then 
                                                    True else False
                                                      | None => False
                                                    )) then True else 
                                                False)
                                                  | None => False
                                                )) then True else False)
                                              | None => False
                                            )) then True else False)
                                          | None => False
                                        )) then True else False)
                                      | None => False
                                    )) then True else False)
                                  | None => False
                                )) then True else False)
                              | None => False
                            )) then True else False))))) then
                 (let stringappend_14810 = (string_drop stringappend_10760
                                              ((string_length (''lr.'')))) in
                 (let (aq, stringappend_14830) =
                      ((case  ((maybe_aq_matches_prefix stringappend_14810)) of
                             Some (stringappend_14820,stringappend_14830) =>
                       (stringappend_14820, stringappend_14830)
                       )) in
                 (let stringappend_14840 = (string_drop stringappend_14810
                                              stringappend_14830) in
                 (let (rl, stringappend_14860) =
                      ((case  ((maybe_rl_matches_prefix stringappend_14840)) of
                             Some (stringappend_14850,stringappend_14860) =>
                       (stringappend_14850, stringappend_14860)
                       )) in
                 (let stringappend_14870 = (string_drop stringappend_14840
                                              stringappend_14860) in
                 (let (size1, stringappend_14890) =
                      ((case  ((size_mnemonic_matches_prefix
                                  stringappend_14870)) of
                             Some (stringappend_14880,stringappend_14890) =>
                       (stringappend_14880, stringappend_14890)
                       )) in
                 (let stringappend_14900 = (string_drop stringappend_14870
                                              stringappend_14890) in
                 (case 
                 (case  ((spc_matches_prefix stringappend_14900)) of
                       Some (stringappend_14910,stringappend_14920) =>
                 (stringappend_14910, stringappend_14920)
                 ) of
                     (_, stringappend_14920) =>
                 (let stringappend_14930 = (string_drop stringappend_14900
                                              stringappend_14920) in
                 (let (rd, stringappend_14950) =
                      ((case  ((reg_name_matches_prefix stringappend_14930 :: (( 5 Word.word * ii)) option)) of
                             Some (stringappend_14940,stringappend_14950) =>
                       (stringappend_14940, stringappend_14950)
                       )) in
                 (let stringappend_14960 = (string_drop stringappend_14930
                                              stringappend_14950) in
                 (case 
                 (case  ((sep_matches_prefix stringappend_14960)) of
                       Some (stringappend_14970,stringappend_14980) =>
                 (stringappend_14970, stringappend_14980)
                 ) of
                     (_, stringappend_14980) =>
                 (let stringappend_14990 = (string_drop stringappend_14960
                                              stringappend_14980) in
                 (let (rs1, stringappend_15010) =
                      ((case  ((reg_name_matches_prefix stringappend_14990 :: (( 5 Word.word * ii)) option)) of
                             Some (stringappend_15000,stringappend_15010) =>
                       (stringappend_15000, stringappend_15010)
                       )) in
                 if(((string_drop stringappend_14990 stringappend_15010)) =
                      ('''')) then (LOADRES (aq,rl,rs1,size1,rd)) else
                   undefined))
                 ))))
                 )))))))) else
                 if (((((string_startswith stringappend_10760 (''sc.'')))
                         \<and>
                         ((let stringappend_15030 =
                               (string_drop stringappend_10760
                                  ((string_length (''sc.'')))) in
                          if ((case  ((maybe_aq_matches_prefix
                                         stringappend_15030)) of
                                    Some (stringappend_15040,stringappend_15050) =>
                              (let stringappend_15060 =
                                   (string_drop stringappend_15030
                                      stringappend_15050) in
                              if ((case  ((maybe_rl_matches_prefix
                                             stringappend_15060)) of
                                        Some (stringappend_15070,stringappend_15080) =>
                                  (let stringappend_15090 =
                                       (string_drop stringappend_15060
                                          stringappend_15080) in
                                  if ((case  ((size_mnemonic_matches_prefix
                                                 stringappend_15090)) of
                                            Some (stringappend_15100,stringappend_15110) =>
                                      (let stringappend_15120 =
                                           (string_drop stringappend_15090
                                              stringappend_15110) in
                                      if ((case  ((spc_matches_prefix
                                                     stringappend_15120)) of
                                                Some (stringappend_15130,stringappend_15140) =>
                                          (let stringappend_15150 =
                                               (string_drop
                                                  stringappend_15120
                                                  stringappend_15140) in
                                          if ((case  ((reg_name_matches_prefix
                                                         stringappend_15150
                                                      :: (( 5 Word.word * ii)) option)) of
                                                    Some (stringappend_15160,stringappend_15170) =>
                                              (let stringappend_15180 =
                                                   (string_drop
                                                      stringappend_15150
                                                      stringappend_15170) in
                                              if ((case  ((sep_matches_prefix
                                                             stringappend_15180)) of
                                                        Some (stringappend_15190,stringappend_15200) =>
                                                  (let stringappend_15210 =
                                                       (string_drop
                                                          stringappend_15180
                                                          stringappend_15200) in
                                                  if ((case  ((reg_name_matches_prefix
                                                                 stringappend_15210
                                                              :: (( 5 Word.word * ii)) option)) of
                                                            Some (stringappend_15220,stringappend_15230) =>
                                                      (let stringappend_15240 =
                                                           (string_drop
                                                              stringappend_15210
                                                              stringappend_15230) in
                                                      if ((case  ((sep_matches_prefix
                                                                    stringappend_15240)) of
                                                                Some
                                                          (stringappend_15250,stringappend_15260) =>
                                                          (let stringappend_15270 =
                                                               (string_drop
                                                                  stringappend_15240
                                                                  stringappend_15260) in
                                                          if ((case  
                                                              ((reg_name_matches_prefix
                                                                  stringappend_15270
                                                               :: (( 5 Word.word * ii)) option)) of
                                                                    Some
                                                              (stringappend_15280,stringappend_15290) =>
                                                              if(((string_drop
                                                                    stringappend_15270
                                                                    stringappend_15290))
                                                                   = 
                                                                 ('''')) then
                                                                True else
                                                                False
                                                                | None => 
                                                              False
                                                              )) then 
                                                          True else False)
                                                            | None => 
                                                          False
                                                          )) then True else
                                                        False)
                                                        | None => False
                                                      )) then True else 
                                                  False)
                                                    | None => False
                                                  )) then True else False)
                                                | None => False
                                              )) then True else False)
                                            | None => False
                                          )) then True else False)
                                        | None => False
                                      )) then True else False)
                                    | None => False
                                  )) then True else False)
                                | None => False
                              )) then True else False))))) then
                   (let stringappend_15030 = (string_drop stringappend_10760
                                                ((string_length (''sc.'')))) in
                   (let (aq, stringappend_15050) =
                        ((case  ((maybe_aq_matches_prefix stringappend_15030)) of
                               Some (stringappend_15040,stringappend_15050) =>
                         (stringappend_15040, stringappend_15050)
                         )) in
                   (let stringappend_15060 = (string_drop stringappend_15030
                                                stringappend_15050) in
                   (let (rl, stringappend_15080) =
                        ((case  ((maybe_rl_matches_prefix stringappend_15060)) of
                               Some (stringappend_15070,stringappend_15080) =>
                         (stringappend_15070, stringappend_15080)
                         )) in
                   (let stringappend_15090 = (string_drop stringappend_15060
                                                stringappend_15080) in
                   (let (size1, stringappend_15110) =
                        ((case  ((size_mnemonic_matches_prefix
                                    stringappend_15090)) of
                               Some (stringappend_15100,stringappend_15110) =>
                         (stringappend_15100, stringappend_15110)
                         )) in
                   (let stringappend_15120 = (string_drop stringappend_15090
                                                stringappend_15110) in
                   (case 
                   (case  ((spc_matches_prefix stringappend_15120)) of
                         Some (stringappend_15130,stringappend_15140) =>
                   (stringappend_15130, stringappend_15140)
                   ) of
                       (_, stringappend_15140) =>
                   (let stringappend_15150 = (string_drop stringappend_15120
                                                stringappend_15140) in
                   (let (rd, stringappend_15170) =
                        ((case  ((reg_name_matches_prefix stringappend_15150 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_15160,stringappend_15170) =>
                         (stringappend_15160, stringappend_15170)
                         )) in
                   (let stringappend_15180 = (string_drop stringappend_15150
                                                stringappend_15170) in
                   (case 
                   (case  ((sep_matches_prefix stringappend_15180)) of
                         Some (stringappend_15190,stringappend_15200) =>
                   (stringappend_15190, stringappend_15200)
                   ) of
                       (_, stringappend_15200) =>
                   (let stringappend_15210 = (string_drop stringappend_15180
                                                stringappend_15200) in
                   (let (rs1, stringappend_15230) =
                        ((case  ((reg_name_matches_prefix stringappend_15210 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_15220,stringappend_15230) =>
                         (stringappend_15220, stringappend_15230)
                         )) in
                   (let stringappend_15240 = (string_drop stringappend_15210
                                                stringappend_15230) in
                   (case 
                   (case  ((sep_matches_prefix stringappend_15240)) of
                         Some (stringappend_15250,stringappend_15260) =>
                   (stringappend_15250, stringappend_15260)
                   ) of
                       (_, stringappend_15260) =>
                   (let stringappend_15270 = (string_drop stringappend_15240
                                                stringappend_15260) in
                   (let (rs2, stringappend_15290) =
                        ((case  ((reg_name_matches_prefix stringappend_15270 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_15280,stringappend_15290) =>
                         (stringappend_15280, stringappend_15290)
                         )) in
                   if(((string_drop stringappend_15270 stringappend_15290)) =
                        ('''')) then (STORECON (aq,rl,rs2,rs1,size1,rd)) else
                     undefined))
                   ))))
                   ))))
                   )))))))) else
                   if ((case  ((amo_mnemonic_matches_prefix
                                  stringappend_10760)) of
                             Some (stringappend_15310,stringappend_15320) =>
                       (let stringappend_15330 = (string_drop
                                                    stringappend_10760
                                                    stringappend_15320) in
                       if (((((string_startswith stringappend_15330 (''.'')))
                               \<and>
                               ((let stringappend_15340 = (string_drop
                                                             stringappend_15330
                                                             ((string_length
                                                                 (''.'')))) in
                                if ((case  ((size_mnemonic_matches_prefix
                                               stringappend_15340)) of
                                          Some (stringappend_15350,stringappend_15360) =>
                                    (let stringappend_15370 =
                                         (string_drop stringappend_15340
                                            stringappend_15360) in
                                    if ((case  ((maybe_aq_matches_prefix
                                                   stringappend_15370)) of
                                              Some (stringappend_15380,stringappend_15390) =>
                                        (let stringappend_15400 =
                                             (string_drop stringappend_15370
                                                stringappend_15390) in
                                        if ((case  ((maybe_rl_matches_prefix
                                                       stringappend_15400)) of
                                                  Some (stringappend_15410,stringappend_15420) =>
                                            (let stringappend_15430 =
                                                 (string_drop
                                                    stringappend_15400
                                                    stringappend_15420) in
                                            if ((case  ((spc_matches_prefix
                                                           stringappend_15430)) of
                                                      Some (stringappend_15440,stringappend_15450) =>
                                                (let stringappend_15460 =
                                                     (string_drop
                                                        stringappend_15430
                                                        stringappend_15450) in
                                                if ((case  ((reg_name_matches_prefix
                                                               stringappend_15460
                                                            :: (( 5 Word.word * ii)) option)) of
                                                          Some (stringappend_15470,stringappend_15480) =>
                                                    (let stringappend_15490 =
                                                         (string_drop
                                                            stringappend_15460
                                                            stringappend_15480) in
                                                    if ((case  ((sep_matches_prefix
                                                                   stringappend_15490)) of
                                                              Some (stringappend_15500,stringappend_15510) =>
                                                        (let stringappend_15520 =
                                                             (string_drop
                                                                stringappend_15490
                                                                stringappend_15510) in
                                                        if ((case  ((
                                                                    reg_name_matches_prefix
                                                                    stringappend_15520
                                                                    :: (( 5 Word.word * ii)) option)) of
                                                                  Some (stringappend_15530,stringappend_15540) =>
                                                            (let stringappend_15550 =
                                                                 (string_drop
                                                                    stringappend_15520
                                                                    stringappend_15540) in
                                                            if ((case  
                                                                ((sep_matches_prefix
                                                                    stringappend_15550)) of
                                                                      Some
                                                                (stringappend_15560,stringappend_15570) =>
                                                                (let 
                                                                stringappend_15580 =
                                                                (string_drop
                                                                   stringappend_15550
                                                                   stringappend_15570) in
                                                                if ((case  
                                                                    (
                                                                    (
                                                                    reg_name_matches_prefix
                                                                    stringappend_15580
                                                                    :: (( 5 Word.word * ii)) option)) of
                                                                      Some
                                                                    (stringappend_15590,stringappend_15600) =>
                                                                    if
                                                                    (
                                                                    (
                                                                    (
                                                                    string_drop
                                                                    stringappend_15580
                                                                    stringappend_15600))
                                                                    = 
                                                                    ('''')) then
                                                                    True else
                                                                    False
                                                                    | None => 
                                                                    False
                                                                    )) then
                                                                  True else
                                                                  False)
                                                                  | None => 
                                                                False
                                                                )) then 
                                                            True else 
                                                            False)
                                                              | None => 
                                                            False
                                                            )) then True else
                                                          False)
                                                          | None => False
                                                        )) then True else
                                                      False)
                                                      | None => False
                                                    )) then True else 
                                                False)
                                                  | None => False
                                                )) then True else False)
                                              | None => False
                                            )) then True else False)
                                          | None => False
                                        )) then True else False)
                                      | None => False
                                    )) then True else False))))) then 
                       True else False)
                         | None => False
                       )) then
                     (let (op1, stringappend_15320) =
                          ((case  ((amo_mnemonic_matches_prefix
                                      stringappend_10760)) of
                                 Some (stringappend_15310,stringappend_15320) =>
                           (stringappend_15310, stringappend_15320)
                           )) in
                     (let stringappend_15330 = (string_drop
                                                  stringappend_10760
                                                  stringappend_15320) in
                     (let stringappend_15340 = (string_drop
                                                  stringappend_15330
                                                  ((string_length (''.'')))) in
                     (let (width, stringappend_15360) =
                          ((case  ((size_mnemonic_matches_prefix
                                      stringappend_15340)) of
                                 Some (stringappend_15350,stringappend_15360) =>
                           (stringappend_15350, stringappend_15360)
                           )) in
                     (let stringappend_15370 = (string_drop
                                                  stringappend_15340
                                                  stringappend_15360) in
                     (let (aq, stringappend_15390) =
                          ((case  ((maybe_aq_matches_prefix
                                      stringappend_15370)) of
                                 Some (stringappend_15380,stringappend_15390) =>
                           (stringappend_15380, stringappend_15390)
                           )) in
                     (let stringappend_15400 = (string_drop
                                                  stringappend_15370
                                                  stringappend_15390) in
                     (let (rl, stringappend_15420) =
                          ((case  ((maybe_rl_matches_prefix
                                      stringappend_15400)) of
                                 Some (stringappend_15410,stringappend_15420) =>
                           (stringappend_15410, stringappend_15420)
                           )) in
                     (let stringappend_15430 = (string_drop
                                                  stringappend_15400
                                                  stringappend_15420) in
                     (case 
                     (case  ((spc_matches_prefix stringappend_15430)) of
                           Some (stringappend_15440,stringappend_15450) =>
                     (stringappend_15440, stringappend_15450)
                     ) of
                         (_, stringappend_15450) =>
                     (let stringappend_15460 = (string_drop
                                                  stringappend_15430
                                                  stringappend_15450) in
                     (let (rd, stringappend_15480) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_15460 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_15470,stringappend_15480) =>
                           (stringappend_15470, stringappend_15480)
                           )) in
                     (let stringappend_15490 = (string_drop
                                                  stringappend_15460
                                                  stringappend_15480) in
                     (case 
                     (case  ((sep_matches_prefix stringappend_15490)) of
                           Some (stringappend_15500,stringappend_15510) =>
                     (stringappend_15500, stringappend_15510)
                     ) of
                         (_, stringappend_15510) =>
                     (let stringappend_15520 = (string_drop
                                                  stringappend_15490
                                                  stringappend_15510) in
                     (let (rs1, stringappend_15540) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_15520 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_15530,stringappend_15540) =>
                           (stringappend_15530, stringappend_15540)
                           )) in
                     (let stringappend_15550 = (string_drop
                                                  stringappend_15520
                                                  stringappend_15540) in
                     (case 
                     (case  ((sep_matches_prefix stringappend_15550)) of
                           Some (stringappend_15560,stringappend_15570) =>
                     (stringappend_15560, stringappend_15570)
                     ) of
                         (_, stringappend_15570) =>
                     (let stringappend_15580 = (string_drop
                                                  stringappend_15550
                                                  stringappend_15570) in
                     (let (rs2, stringappend_15600) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_15580 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_15590,stringappend_15600) =>
                           (stringappend_15590, stringappend_15600)
                           )) in
                     if(((string_drop stringappend_15580 stringappend_15600))
                          = ('''')) then (AMO (op1,aq,rl,rs2,rs1,width,rd))
                     else undefined))
                     ))))
                     ))))
                     )))))))))) else
                     if ((case  ((csr_mnemonic_matches_prefix
                                    stringappend_10760)) of
                               Some (stringappend_15620,stringappend_15630) =>
                         (let stringappend_15640 = (string_drop
                                                      stringappend_10760
                                                      stringappend_15630) in
                         if (((((string_startswith stringappend_15640 (''i'')))
                                 \<and>
                                 ((let stringappend_15650 = (string_drop
                                                               stringappend_15640
                                                               ((string_length
                                                                   (''i'')))) in
                                  if ((case  ((spc_matches_prefix
                                                 stringappend_15650)) of
                                            Some (stringappend_15660,stringappend_15670) =>
                                      (let stringappend_15680 =
                                           (string_drop stringappend_15650
                                              stringappend_15670) in
                                      if ((case  ((reg_name_matches_prefix
                                                     stringappend_15680
                                                  :: (( 5 Word.word * ii)) option)) of
                                                Some (stringappend_15690,stringappend_15700) =>
                                          (let stringappend_15710 =
                                               (string_drop
                                                  stringappend_15680
                                                  stringappend_15700) in
                                          if ((case  ((sep_matches_prefix
                                                         stringappend_15710)) of
                                                    Some (stringappend_15720,stringappend_15730) =>
                                              (let stringappend_15740 =
                                                   (string_drop
                                                      stringappend_15710
                                                      stringappend_15730) in
                                              if ((case  ((hex_bits_5_matches_prefix
                                                             instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                             stringappend_15740
                                                          :: (( 5 Word.word * ii)) option)) of
                                                        Some (stringappend_15750,stringappend_15760) =>
                                                  (let stringappend_15770 =
                                                       (string_drop
                                                          stringappend_15740
                                                          stringappend_15760) in
                                                  if ((case  ((sep_matches_prefix
                                                                 stringappend_15770)) of
                                                            Some (stringappend_15780,stringappend_15790) =>
                                                      (let stringappend_15800 =
                                                           (string_drop
                                                              stringappend_15770
                                                              stringappend_15790) in
                                                      if ((case  ((csr_name_map_matches_prefix
                                                                    stringappend_15800
                                                                  :: (( 12 Word.word * ii)) option)) of
                                                                Some (stringappend_15810,stringappend_15820) =>
                                                          if(((string_drop
                                                                 stringappend_15800
                                                                 stringappend_15820))
                                                               = ('''')) then
                                                            True else 
                                                          False
                                                            | None => 
                                                          False
                                                          )) then True else
                                                        False)
                                                        | None => False
                                                      )) then True else 
                                                  False)
                                                    | None => False
                                                  )) then True else False)
                                                | None => False
                                              )) then True else False)
                                            | None => False
                                          )) then True else False)
                                        | None => False
                                      )) then True else False))))) then 
                         True else False)
                           | None => False
                         )) then
                       (let (op1, stringappend_15630) =
                            ((case  ((csr_mnemonic_matches_prefix
                                        stringappend_10760)) of
                                   Some (stringappend_15620,stringappend_15630) =>
                             (stringappend_15620, stringappend_15630)
                             )) in
                       (let stringappend_15640 = (string_drop
                                                    stringappend_10760
                                                    stringappend_15630) in
                       (let stringappend_15650 = (string_drop
                                                    stringappend_15640
                                                    ((string_length (''i'')))) in
                       (case 
                       (case  ((spc_matches_prefix stringappend_15650)) of
                             Some (stringappend_15660,stringappend_15670) =>
                       (stringappend_15660, stringappend_15670)
                       ) of
                           (_, stringappend_15670) =>
                       (let stringappend_15680 = (string_drop
                                                    stringappend_15650
                                                    stringappend_15670) in
                       (let (rd, stringappend_15700) =
                            ((case  ((reg_name_matches_prefix
                                        stringappend_15680 :: (( 5 Word.word * ii)) option)) of
                                   Some (stringappend_15690,stringappend_15700) =>
                             (stringappend_15690, stringappend_15700)
                             )) in
                       (let stringappend_15710 = (string_drop
                                                    stringappend_15680
                                                    stringappend_15700) in
                       (case 
                       (case  ((sep_matches_prefix stringappend_15710)) of
                             Some (stringappend_15720,stringappend_15730) =>
                       (stringappend_15720, stringappend_15730)
                       ) of
                           (_, stringappend_15730) =>
                       (let stringappend_15740 = (string_drop
                                                    stringappend_15710
                                                    stringappend_15730) in
                       (let (rs1, stringappend_15760) =
                            ((case  ((hex_bits_5_matches_prefix
                                        instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                        stringappend_15740 :: (( 5 Word.word * ii)) option)) of
                                   Some (stringappend_15750,stringappend_15760) =>
                             (stringappend_15750, stringappend_15760)
                             )) in
                       (let stringappend_15770 = (string_drop
                                                    stringappend_15740
                                                    stringappend_15760) in
                       (case 
                       (case  ((sep_matches_prefix stringappend_15770)) of
                             Some (stringappend_15780,stringappend_15790) =>
                       (stringappend_15780, stringappend_15790)
                       ) of
                           (_, stringappend_15790) =>
                       (let stringappend_15800 = (string_drop
                                                    stringappend_15770
                                                    stringappend_15790) in
                       (let (csr, stringappend_15820) =
                            ((case  ((csr_name_map_matches_prefix
                                        stringappend_15800 :: (( 12 Word.word * ii)) option)) of
                                   Some (stringappend_15810,stringappend_15820) =>
                             (stringappend_15810, stringappend_15820)
                             )) in
                       if(((string_drop stringappend_15800 stringappend_15820))
                            = ('''')) then (CSR (csr,rs1,rd,True,op1)) else
                         undefined))
                       ))))
                       ))))
                       )))) else
                       if ((case  ((csr_mnemonic_matches_prefix
                                      stringappend_10760)) of
                                 Some (stringappend_15840,stringappend_15850) =>
                           (let stringappend_15860 = (string_drop
                                                        stringappend_10760
                                                        stringappend_15850) in
                           if ((case  ((spc_matches_prefix stringappend_15860)) of
                                     Some (stringappend_15870,stringappend_15880) =>
                               (let stringappend_15890 = (string_drop
                                                            stringappend_15860
                                                            stringappend_15880) in
                               if ((case  ((reg_name_matches_prefix
                                              stringappend_15890
                                           :: (( 5 Word.word * ii)) option)) of
                                         Some (stringappend_15900,stringappend_15910) =>
                                   (let stringappend_15920 = (string_drop
                                                                stringappend_15890
                                                                stringappend_15910) in
                                   if ((case  ((sep_matches_prefix
                                                  stringappend_15920)) of
                                             Some (stringappend_15930,stringappend_15940) =>
                                       (let stringappend_15950 =
                                            (string_drop stringappend_15920
                                               stringappend_15940) in
                                       if ((case  ((reg_name_matches_prefix
                                                      stringappend_15950
                                                   :: (( 5 Word.word * ii)) option)) of
                                                 Some (stringappend_15960,stringappend_15970) =>
                                           (let stringappend_15980 =
                                                (string_drop
                                                   stringappend_15950
                                                   stringappend_15970) in
                                           if ((case  ((sep_matches_prefix
                                                          stringappend_15980)) of
                                                     Some (stringappend_15990,stringappend_16000) =>
                                               (let stringappend_16010 =
                                                    (string_drop
                                                       stringappend_15980
                                                       stringappend_16000) in
                                               if ((case  ((csr_name_map_matches_prefix
                                                              stringappend_16010
                                                           :: (( 12 Word.word * ii)) option)) of
                                                         Some (stringappend_16020,stringappend_16030) =>
                                                   if(((string_drop
                                                          stringappend_16010
                                                          stringappend_16030))
                                                        = ('''')) then 
                                                   True else False
                                                     | None => False
                                                   )) then True else 
                                               False)
                                                 | None => False
                                               )) then True else False)
                                             | None => False
                                           )) then True else False)
                                         | None => False
                                       )) then True else False)
                                     | None => False
                                   )) then True else False)
                                 | None => False
                               )) then True else False)
                             | None => False
                           )) then
                         (let (op1, stringappend_15850) =
                              ((case  ((csr_mnemonic_matches_prefix
                                          stringappend_10760)) of
                                     Some (stringappend_15840,stringappend_15850) =>
                               (stringappend_15840, stringappend_15850)
                               )) in
                         (let stringappend_15860 = (string_drop
                                                      stringappend_10760
                                                      stringappend_15850) in
                         (case 
                         (case  ((spc_matches_prefix stringappend_15860)) of
                               Some (stringappend_15870,stringappend_15880) =>
                         (stringappend_15870, stringappend_15880)
                         ) of
                             (_, stringappend_15880) =>
                         (let stringappend_15890 = (string_drop
                                                      stringappend_15860
                                                      stringappend_15880) in
                         (let (rd, stringappend_15910) =
                              ((case  ((reg_name_matches_prefix
                                          stringappend_15890 :: (( 5 Word.word * ii)) option)) of
                                     Some (stringappend_15900,stringappend_15910) =>
                               (stringappend_15900, stringappend_15910)
                               )) in
                         (let stringappend_15920 = (string_drop
                                                      stringappend_15890
                                                      stringappend_15910) in
                         (case 
                         (case  ((sep_matches_prefix stringappend_15920)) of
                               Some (stringappend_15930,stringappend_15940) =>
                         (stringappend_15930, stringappend_15940)
                         ) of
                             (_, stringappend_15940) =>
                         (let stringappend_15950 = (string_drop
                                                      stringappend_15920
                                                      stringappend_15940) in
                         (let (rs1, stringappend_15970) =
                              ((case  ((reg_name_matches_prefix
                                          stringappend_15950 :: (( 5 Word.word * ii)) option)) of
                                     Some (stringappend_15960,stringappend_15970) =>
                               (stringappend_15960, stringappend_15970)
                               )) in
                         (let stringappend_15980 = (string_drop
                                                      stringappend_15950
                                                      stringappend_15970) in
                         (case 
                         (case  ((sep_matches_prefix stringappend_15980)) of
                               Some (stringappend_15990,stringappend_16000) =>
                         (stringappend_15990, stringappend_16000)
                         ) of
                             (_, stringappend_16000) =>
                         (let stringappend_16010 = (string_drop
                                                      stringappend_15980
                                                      stringappend_16000) in
                         (let (csr, stringappend_16030) =
                              ((case  ((csr_name_map_matches_prefix
                                          stringappend_16010 :: (( 12 Word.word * ii)) option)) of
                                     Some (stringappend_16020,stringappend_16030) =>
                               (stringappend_16020, stringappend_16030)
                               )) in
                         if(((string_drop stringappend_16010
                                stringappend_16030)) = ('''')) then
                           (CSR (csr,rs1,rd,False,op1)) else undefined))
                         ))))
                         ))))
                         ))) else
                         (let stringappend_16050 = (string_drop
                                                      stringappend_10760
                                                      ((string_length
                                                          (''illegal'')))) in
                         (case 
                         (case  ((spc_matches_prefix stringappend_16050)) of
                               Some (stringappend_16060,stringappend_16070) =>
                         (stringappend_16060, stringappend_16070)
                         ) of
                             (_, stringappend_16070) =>
                         (let stringappend_16080 = (string_drop
                                                      stringappend_16050
                                                      stringappend_16070) in
                         (let (s, stringappend_16100) =
                              ((case  ((hex_bits_32_matches_prefix
                                          instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                          stringappend_16080 :: (( 32 Word.word * ii)) option)) of
                                     Some (stringappend_16090,stringappend_16100) =>
                               (stringappend_16090, stringappend_16100)
                               )) in
                         if(((string_drop stringappend_16080
                                stringappend_16100)) = ('''')) then
                           (ILLEGAL s) else undefined))
                         ))))))))))"


(*val assembly_forwards_matches : ast -> bool*)

fun assembly_forwards_matches  :: " ast \<Rightarrow> bool "  where 
     " assembly_forwards_matches (UTYPE (imm,rd,op1)) = ( True )"
|" assembly_forwards_matches (RISCV_JAL (imm,rd)) = ( True )"
|" assembly_forwards_matches (RISCV_JALR (imm,rs1,rd)) = ( True )"
|" assembly_forwards_matches (BTYPE (imm,rs2,rs1,op1)) = ( True )"
|" assembly_forwards_matches (ITYPE (imm,rs1,rd,op1)) = ( True )"
|" assembly_forwards_matches (SHIFTIOP (shamt,rs1,rd,op1)) = ( True )"
|" assembly_forwards_matches (RTYPE (rs2,rs1,rd,op1)) = ( True )"
|" assembly_forwards_matches (LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl)) = ( True )"
|" assembly_forwards_matches (STORE (imm,rs1,rd,size1,aq,rl)) = ( True )"
|" assembly_forwards_matches (ADDIW (imm,rs1,rd)) = ( True )"
|" assembly_forwards_matches (SHIFTW (shamt,rs1,rd,op1)) = ( True )"
|" assembly_forwards_matches (RTYPEW (rs2,rs1,rd,op1)) = ( True )"
|" assembly_forwards_matches (MUL (rs2,rs1,rd,high,signed1,signed2)) = ( True )"
|" assembly_forwards_matches (DIV (rs2,rs1,rd,s)) = ( True )"
|" assembly_forwards_matches (REM (rs2,rs1,rd,s)) = ( True )"
|" assembly_forwards_matches (MULW (rs2,rs1,rd)) = ( True )"
|" assembly_forwards_matches (DIVW (rs2,rs1,rd,s)) = ( True )"
|" assembly_forwards_matches (REMW (rs2,rs1,rd,s)) = ( True )"
|" assembly_forwards_matches (FENCE (pred,succ)) = ( True )"
|" assembly_forwards_matches (FENCEI (_)) = ( True )"
|" assembly_forwards_matches (ECALL (_)) = ( True )"
|" assembly_forwards_matches (MRET (_)) = ( True )"
|" assembly_forwards_matches (SRET (_)) = ( True )"
|" assembly_forwards_matches (EBREAK (_)) = ( True )"
|" assembly_forwards_matches (WFI (_)) = ( True )"
|" assembly_forwards_matches (SFENCE_VMA (rs1,rs2)) = ( True )"
|" assembly_forwards_matches (LOADRES (aq,rl,rs1,size1,rd)) = ( True )"
|" assembly_forwards_matches (STORECON (aq,rl,rs2,rs1,size1,rd)) = ( True )"
|" assembly_forwards_matches (AMO (op1,aq,rl,rs2,rs1,width,rd)) = ( True )"
|" assembly_forwards_matches (CSR (csr,rs1,rd,True,op1)) = ( True )"
|" assembly_forwards_matches (CSR (csr,rs1,rd,False,op1)) = ( True )"
|" assembly_forwards_matches (ILLEGAL (s)) = ( True )"
|" assembly_forwards_matches _ = ( False )"


(*val assembly_backwards_matches : string -> bool*)

definition assembly_backwards_matches  :: " string \<Rightarrow> bool "  where 
     " assembly_backwards_matches arg0 = (
   (let stringappend_5410 = arg0 in
   if ((case  ((utype_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_5420,stringappend_5430) =>
        (let stringappend_5440 = (string_drop stringappend_5410 stringappend_5430) in
        if ((case  ((spc_matches_prefix stringappend_5440)) of
            Some (stringappend_5450,stringappend_5460) =>
             (let stringappend_5470 = (string_drop stringappend_5440 stringappend_5460) in
             if ((case  ((reg_name_matches_prefix stringappend_5470  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_5480,stringappend_5490) =>
                  (let stringappend_5500 = (string_drop stringappend_5470 stringappend_5490) in
                  if ((case  ((sep_matches_prefix stringappend_5500)) of
                      Some (stringappend_5510,stringappend_5520) =>
                       (let stringappend_5530 = (string_drop stringappend_5500 stringappend_5520) in
                       if ((case  ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_5530
                                    ::  (( 20 Word.word * ii))option)) of
                           Some (stringappend_5540,stringappend_5550) => 
  if(((string_drop stringappend_5530 stringappend_5550)) = ('''')) then 
  True else False
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_5430) =
       ((case  ((utype_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_5420,stringappend_5430) => (stringappend_5420, stringappend_5430)
       )) in
     (let stringappend_5440 = (string_drop stringappend_5410 stringappend_5430) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5440)) of
        Some (stringappend_5450,stringappend_5460) => (stringappend_5450, stringappend_5460)
  ) of
      (_, stringappend_5460) =>
  (let stringappend_5470 = (string_drop stringappend_5440 stringappend_5460) in
  (let (rd, stringappend_5490) =
       ((case  ((reg_name_matches_prefix stringappend_5470 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5480,stringappend_5490) => (stringappend_5480, stringappend_5490)
        )) in
  (let stringappend_5500 = (string_drop stringappend_5470 stringappend_5490) in
  (case 
  (case  ((sep_matches_prefix stringappend_5500)) of
        Some (stringappend_5510,stringappend_5520) => (stringappend_5510, stringappend_5520)
  ) of
      (_, stringappend_5520) =>
  (let stringappend_5530 = (string_drop stringappend_5500 stringappend_5520) in
  (let (imm, stringappend_5550) =
       ((case  ((hex_bits_20_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_5530 :: (( 20 Word.word * ii)) option)) of
              Some (stringappend_5540,stringappend_5550) => (stringappend_5540, stringappend_5550)
        )) in
  if(((string_drop stringappend_5530 stringappend_5550)) = ('''')) then 
  True else undefined))
  ))))
  )))
   else if (((((string_startswith stringappend_5410 (''jal''))) \<and> ((let stringappend_5570 = (string_drop stringappend_5410 ((string_length (''jal'')))) in
               if ((case  ((spc_matches_prefix stringappend_5570)) of
                   Some (stringappend_5580,stringappend_5590) =>
                    (let stringappend_5600 = (string_drop stringappend_5570 stringappend_5590) in
                    if ((case  ((reg_name_matches_prefix stringappend_5600
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_5610,stringappend_5620) =>
                         (let stringappend_5630 = (string_drop stringappend_5600 stringappend_5620) in
                         if ((case  ((sep_matches_prefix stringappend_5630)) of
                             Some (stringappend_5640,stringappend_5650) =>
                              (let stringappend_5660 =
                                (string_drop stringappend_5630 stringappend_5650) in
                              if ((case  ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_5660
                                           ::  (( 21 Word.word * ii))option)) of
                                  Some (stringappend_5670,stringappend_5680) => 
  if(((string_drop stringappend_5660 stringappend_5680)) = ('''')) then 
  True else False
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_5570 = (string_drop stringappend_5410 ((string_length (''jal'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5570)) of
        Some (stringappend_5580,stringappend_5590) => (stringappend_5580, stringappend_5590)
  ) of
      (_, stringappend_5590) =>
  (let stringappend_5600 = (string_drop stringappend_5570 stringappend_5590) in
  (let (rd, stringappend_5620) =
       ((case  ((reg_name_matches_prefix stringappend_5600 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5610,stringappend_5620) => (stringappend_5610, stringappend_5620)
        )) in
  (let stringappend_5630 = (string_drop stringappend_5600 stringappend_5620) in
  (case 
  (case  ((sep_matches_prefix stringappend_5630)) of
        Some (stringappend_5640,stringappend_5650) => (stringappend_5640, stringappend_5650)
  ) of
      (_, stringappend_5650) =>
  (let stringappend_5660 = (string_drop stringappend_5630 stringappend_5650) in
  (let (imm, stringappend_5680) =
       ((case  ((hex_bits_21_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_5660 :: (( 21 Word.word * ii)) option)) of
              Some (stringappend_5670,stringappend_5680) => (stringappend_5670, stringappend_5680)
        )) in
  if(((string_drop stringappend_5660 stringappend_5680)) = ('''')) then 
  True else undefined))
  ))))
  ))
   else if (((((string_startswith stringappend_5410 (''jalr''))) \<and> ((let stringappend_5700 = (string_drop stringappend_5410 ((string_length (''jalr'')))) in
               if ((case  ((spc_matches_prefix stringappend_5700)) of
                   Some (stringappend_5710,stringappend_5720) =>
                    (let stringappend_5730 = (string_drop stringappend_5700 stringappend_5720) in
                    if ((case  ((reg_name_matches_prefix stringappend_5730
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_5740,stringappend_5750) =>
                         (let stringappend_5760 = (string_drop stringappend_5730 stringappend_5750) in
                         if ((case  ((sep_matches_prefix stringappend_5760)) of
                             Some (stringappend_5770,stringappend_5780) =>
                              (let stringappend_5790 =
                                (string_drop stringappend_5760 stringappend_5780) in
                              if ((case  ((reg_name_matches_prefix stringappend_5790
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_5800,stringappend_5810) =>
                                   (let stringappend_5820 =
                                     (string_drop stringappend_5790 stringappend_5810) in
                                   if ((case  ((sep_matches_prefix stringappend_5820)) of
                                       Some (stringappend_5830,stringappend_5840) =>
                                        (let stringappend_5850 =
                                          (string_drop stringappend_5820 stringappend_5840) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_5850
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_5860,stringappend_5870) => 
  if(((string_drop stringappend_5850 stringappend_5870)) = ('''')) then 
  True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_5700 = (string_drop stringappend_5410 ((string_length (''jalr'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5700)) of
        Some (stringappend_5710,stringappend_5720) => (stringappend_5710, stringappend_5720)
  ) of
      (_, stringappend_5720) =>
  (let stringappend_5730 = (string_drop stringappend_5700 stringappend_5720) in
  (let (rd, stringappend_5750) =
       ((case  ((reg_name_matches_prefix stringappend_5730 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5740,stringappend_5750) => (stringappend_5740, stringappend_5750)
        )) in
  (let stringappend_5760 = (string_drop stringappend_5730 stringappend_5750) in
  (case 
  (case  ((sep_matches_prefix stringappend_5760)) of
        Some (stringappend_5770,stringappend_5780) => (stringappend_5770, stringappend_5780)
  ) of
      (_, stringappend_5780) =>
  (let stringappend_5790 = (string_drop stringappend_5760 stringappend_5780) in
  (let (rs1, stringappend_5810) =
       ((case  ((reg_name_matches_prefix stringappend_5790 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5800,stringappend_5810) => (stringappend_5800, stringappend_5810)
        )) in
  (let stringappend_5820 = (string_drop stringappend_5790 stringappend_5810) in
  (case 
  (case  ((sep_matches_prefix stringappend_5820)) of
        Some (stringappend_5830,stringappend_5840) => (stringappend_5830, stringappend_5840)
  ) of
      (_, stringappend_5840) =>
  (let stringappend_5850 = (string_drop stringappend_5820 stringappend_5840) in
  (let (imm, stringappend_5870) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_5850 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_5860,stringappend_5870) => (stringappend_5860, stringappend_5870)
        )) in
  if(((string_drop stringappend_5850 stringappend_5870)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))
   else if ((case  ((btype_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_5890,stringappend_5900) =>
        (let stringappend_5910 = (string_drop stringappend_5410 stringappend_5900) in
        if ((case  ((spc_matches_prefix stringappend_5910)) of
            Some (stringappend_5920,stringappend_5930) =>
             (let stringappend_5940 = (string_drop stringappend_5910 stringappend_5930) in
             if ((case  ((reg_name_matches_prefix stringappend_5940  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_5950,stringappend_5960) =>
                  (let stringappend_5970 = (string_drop stringappend_5940 stringappend_5960) in
                  if ((case  ((sep_matches_prefix stringappend_5970)) of
                      Some (stringappend_5980,stringappend_5990) =>
                       (let stringappend_6000 = (string_drop stringappend_5970 stringappend_5990) in
                       if ((case  ((reg_name_matches_prefix stringappend_6000
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_6010,stringappend_6020) =>
                            (let stringappend_6030 =
                              (string_drop stringappend_6000 stringappend_6020) in
                            if ((case  ((sep_matches_prefix stringappend_6030)) of
                                Some (stringappend_6040,stringappend_6050) =>
                                 (let stringappend_6060 =
                                   (string_drop stringappend_6030 stringappend_6050) in
                                 if ((case  ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_6060
                                              ::  (( 13 Word.word * ii))option)) of
                                     Some (stringappend_6070,stringappend_6080) => 
  if(((string_drop stringappend_6060 stringappend_6080)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_5900) =
       ((case  ((btype_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_5890,stringappend_5900) => (stringappend_5890, stringappend_5900)
       )) in
     (let stringappend_5910 = (string_drop stringappend_5410 stringappend_5900) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5910)) of
        Some (stringappend_5920,stringappend_5930) => (stringappend_5920, stringappend_5930)
  ) of
      (_, stringappend_5930) =>
  (let stringappend_5940 = (string_drop stringappend_5910 stringappend_5930) in
  (let (rs1, stringappend_5960) =
       ((case  ((reg_name_matches_prefix stringappend_5940 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5950,stringappend_5960) => (stringappend_5950, stringappend_5960)
        )) in
  (let stringappend_5970 = (string_drop stringappend_5940 stringappend_5960) in
  (case 
  (case  ((sep_matches_prefix stringappend_5970)) of
        Some (stringappend_5980,stringappend_5990) => (stringappend_5980, stringappend_5990)
  ) of
      (_, stringappend_5990) =>
  (let stringappend_6000 = (string_drop stringappend_5970 stringappend_5990) in
  (let (rs2, stringappend_6020) =
       ((case  ((reg_name_matches_prefix stringappend_6000 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6010,stringappend_6020) => (stringappend_6010, stringappend_6020)
        )) in
  (let stringappend_6030 = (string_drop stringappend_6000 stringappend_6020) in
  (case 
  (case  ((sep_matches_prefix stringappend_6030)) of
        Some (stringappend_6040,stringappend_6050) => (stringappend_6040, stringappend_6050)
  ) of
      (_, stringappend_6050) =>
  (let stringappend_6060 = (string_drop stringappend_6030 stringappend_6050) in
  (let (imm, stringappend_6080) =
       ((case  ((hex_bits_13_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_6060 :: (( 13 Word.word * ii)) option)) of
              Some (stringappend_6070,stringappend_6080) => (stringappend_6070, stringappend_6080)
        )) in
  if(((string_drop stringappend_6060 stringappend_6080)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if ((case  ((itype_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_6100,stringappend_6110) =>
        (let stringappend_6120 = (string_drop stringappend_5410 stringappend_6110) in
        if ((case  ((spc_matches_prefix stringappend_6120)) of
            Some (stringappend_6130,stringappend_6140) =>
             (let stringappend_6150 = (string_drop stringappend_6120 stringappend_6140) in
             if ((case  ((reg_name_matches_prefix stringappend_6150  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_6160,stringappend_6170) =>
                  (let stringappend_6180 = (string_drop stringappend_6150 stringappend_6170) in
                  if ((case  ((sep_matches_prefix stringappend_6180)) of
                      Some (stringappend_6190,stringappend_6200) =>
                       (let stringappend_6210 = (string_drop stringappend_6180 stringappend_6200) in
                       if ((case  ((reg_name_matches_prefix stringappend_6210
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_6220,stringappend_6230) =>
                            (let stringappend_6240 =
                              (string_drop stringappend_6210 stringappend_6230) in
                            if ((case  ((sep_matches_prefix stringappend_6240)) of
                                Some (stringappend_6250,stringappend_6260) =>
                                 (let stringappend_6270 =
                                   (string_drop stringappend_6240 stringappend_6260) in
                                 if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_6270
                                              ::  (( 12 Word.word * ii))option)) of
                                     Some (stringappend_6280,stringappend_6290) => 
  if(((string_drop stringappend_6270 stringappend_6290)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_6110) =
       ((case  ((itype_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_6100,stringappend_6110) => (stringappend_6100, stringappend_6110)
       )) in
     (let stringappend_6120 = (string_drop stringappend_5410 stringappend_6110) in  
  (case 
  (case  ((spc_matches_prefix stringappend_6120)) of
        Some (stringappend_6130,stringappend_6140) => (stringappend_6130, stringappend_6140)
  ) of
      (_, stringappend_6140) =>
  (let stringappend_6150 = (string_drop stringappend_6120 stringappend_6140) in
  (let (rd, stringappend_6170) =
       ((case  ((reg_name_matches_prefix stringappend_6150 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6160,stringappend_6170) => (stringappend_6160, stringappend_6170)
        )) in
  (let stringappend_6180 = (string_drop stringappend_6150 stringappend_6170) in
  (case 
  (case  ((sep_matches_prefix stringappend_6180)) of
        Some (stringappend_6190,stringappend_6200) => (stringappend_6190, stringappend_6200)
  ) of
      (_, stringappend_6200) =>
  (let stringappend_6210 = (string_drop stringappend_6180 stringappend_6200) in
  (let (rs1, stringappend_6230) =
       ((case  ((reg_name_matches_prefix stringappend_6210 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6220,stringappend_6230) => (stringappend_6220, stringappend_6230)
        )) in
  (let stringappend_6240 = (string_drop stringappend_6210 stringappend_6230) in
  (case 
  (case  ((sep_matches_prefix stringappend_6240)) of
        Some (stringappend_6250,stringappend_6260) => (stringappend_6250, stringappend_6260)
  ) of
      (_, stringappend_6260) =>
  (let stringappend_6270 = (string_drop stringappend_6240 stringappend_6260) in
  (let (imm, stringappend_6290) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_6270 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_6280,stringappend_6290) => (stringappend_6280, stringappend_6290)
        )) in
  if(((string_drop stringappend_6270 stringappend_6290)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if ((case  ((shiftiop_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_6310,stringappend_6320) =>
        (let stringappend_6330 = (string_drop stringappend_5410 stringappend_6320) in
        if ((case  ((spc_matches_prefix stringappend_6330)) of
            Some (stringappend_6340,stringappend_6350) =>
             (let stringappend_6360 = (string_drop stringappend_6330 stringappend_6350) in
             if ((case  ((reg_name_matches_prefix stringappend_6360  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_6370,stringappend_6380) =>
                  (let stringappend_6390 = (string_drop stringappend_6360 stringappend_6380) in
                  if ((case  ((sep_matches_prefix stringappend_6390)) of
                      Some (stringappend_6400,stringappend_6410) =>
                       (let stringappend_6420 = (string_drop stringappend_6390 stringappend_6410) in
                       if ((case  ((reg_name_matches_prefix stringappend_6420
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_6430,stringappend_6440) =>
                            (let stringappend_6450 =
                              (string_drop stringappend_6420 stringappend_6440) in
                            if ((case  ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_6450
                                         ::  (( 6 Word.word * ii))option)) of
                                Some (stringappend_6460,stringappend_6470) => 
  if(((string_drop stringappend_6450 stringappend_6470)) = ('''')) then 
  True else False
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_6320) =
       ((case  ((shiftiop_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_6310,stringappend_6320) => (stringappend_6310, stringappend_6320)
       )) in
     (let stringappend_6330 = (string_drop stringappend_5410 stringappend_6320) in  
  (case 
  (case  ((spc_matches_prefix stringappend_6330)) of
        Some (stringappend_6340,stringappend_6350) => (stringappend_6340, stringappend_6350)
  ) of
      (_, stringappend_6350) =>
  (let stringappend_6360 = (string_drop stringappend_6330 stringappend_6350) in
  (let (rd, stringappend_6380) =
       ((case  ((reg_name_matches_prefix stringappend_6360 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6370,stringappend_6380) => (stringappend_6370, stringappend_6380)
        )) in
  (let stringappend_6390 = (string_drop stringappend_6360 stringappend_6380) in
  (case 
  (case  ((sep_matches_prefix stringappend_6390)) of
        Some (stringappend_6400,stringappend_6410) => (stringappend_6400, stringappend_6410)
  ) of
      (_, stringappend_6410) =>
  (let stringappend_6420 = (string_drop stringappend_6390 stringappend_6410) in
  (let (rs1, stringappend_6440) =
       ((case  ((reg_name_matches_prefix stringappend_6420 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6430,stringappend_6440) => (stringappend_6430, stringappend_6440)
        )) in
  (let stringappend_6450 = (string_drop stringappend_6420 stringappend_6440) in
  (let (shamt, stringappend_6470) =
       ((case  ((hex_bits_6_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_6450 :: (( 6 Word.word * ii)) option)) of
              Some (stringappend_6460,stringappend_6470) => (stringappend_6460, stringappend_6470)
        )) in
  if(((string_drop stringappend_6450 stringappend_6470)) = ('''')) then 
  True else undefined))))
  ))))
  )))
   else if ((case  ((rtype_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_6490,stringappend_6500) =>
        (let stringappend_6510 = (string_drop stringappend_5410 stringappend_6500) in
        if ((case  ((spc_matches_prefix stringappend_6510)) of
            Some (stringappend_6520,stringappend_6530) =>
             (let stringappend_6540 = (string_drop stringappend_6510 stringappend_6530) in
             if ((case  ((reg_name_matches_prefix stringappend_6540  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_6550,stringappend_6560) =>
                  (let stringappend_6570 = (string_drop stringappend_6540 stringappend_6560) in
                  if ((case  ((sep_matches_prefix stringappend_6570)) of
                      Some (stringappend_6580,stringappend_6590) =>
                       (let stringappend_6600 = (string_drop stringappend_6570 stringappend_6590) in
                       if ((case  ((reg_name_matches_prefix stringappend_6600
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_6610,stringappend_6620) =>
                            (let stringappend_6630 =
                              (string_drop stringappend_6600 stringappend_6620) in
                            if ((case  ((sep_matches_prefix stringappend_6630)) of
                                Some (stringappend_6640,stringappend_6650) =>
                                 (let stringappend_6660 =
                                   (string_drop stringappend_6630 stringappend_6650) in
                                 if ((case  ((reg_name_matches_prefix stringappend_6660
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_6670,stringappend_6680) => 
  if(((string_drop stringappend_6660 stringappend_6680)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_6500) =
       ((case  ((rtype_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_6490,stringappend_6500) => (stringappend_6490, stringappend_6500)
       )) in
     (let stringappend_6510 = (string_drop stringappend_5410 stringappend_6500) in  
  (case 
  (case  ((spc_matches_prefix stringappend_6510)) of
        Some (stringappend_6520,stringappend_6530) => (stringappend_6520, stringappend_6530)
  ) of
      (_, stringappend_6530) =>
  (let stringappend_6540 = (string_drop stringappend_6510 stringappend_6530) in
  (let (rd, stringappend_6560) =
       ((case  ((reg_name_matches_prefix stringappend_6540 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6550,stringappend_6560) => (stringappend_6550, stringappend_6560)
        )) in
  (let stringappend_6570 = (string_drop stringappend_6540 stringappend_6560) in
  (case 
  (case  ((sep_matches_prefix stringappend_6570)) of
        Some (stringappend_6580,stringappend_6590) => (stringappend_6580, stringappend_6590)
  ) of
      (_, stringappend_6590) =>
  (let stringappend_6600 = (string_drop stringappend_6570 stringappend_6590) in
  (let (rs1, stringappend_6620) =
       ((case  ((reg_name_matches_prefix stringappend_6600 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6610,stringappend_6620) => (stringappend_6610, stringappend_6620)
        )) in
  (let stringappend_6630 = (string_drop stringappend_6600 stringappend_6620) in
  (case 
  (case  ((sep_matches_prefix stringappend_6630)) of
        Some (stringappend_6640,stringappend_6650) => (stringappend_6640, stringappend_6650)
  ) of
      (_, stringappend_6650) =>
  (let stringappend_6660 = (string_drop stringappend_6630 stringappend_6650) in
  (let (rs2, stringappend_6680) =
       ((case  ((reg_name_matches_prefix stringappend_6660 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6670,stringappend_6680) => (stringappend_6670, stringappend_6680)
        )) in
  if(((string_drop stringappend_6660 stringappend_6680)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_5410 (''l''))) \<and> ((let stringappend_6700 = (string_drop stringappend_5410 ((string_length (''l'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_6700)) of
                   Some (stringappend_6710,stringappend_6720) =>
                    (let stringappend_6730 = (string_drop stringappend_6700 stringappend_6720) in
                    if ((case  ((maybe_u_matches_prefix stringappend_6730)) of
                        Some (stringappend_6740,stringappend_6750) =>
                         (let stringappend_6760 = (string_drop stringappend_6730 stringappend_6750) in
                         if ((case  ((maybe_aq_matches_prefix stringappend_6760)) of
                             Some (stringappend_6770,stringappend_6780) =>
                              (let stringappend_6790 =
                                (string_drop stringappend_6760 stringappend_6780) in
                              if ((case  ((maybe_rl_matches_prefix stringappend_6790)) of
                                  Some (stringappend_6800,stringappend_6810) =>
                                   (let stringappend_6820 =
                                     (string_drop stringappend_6790 stringappend_6810) in
                                   if ((case  ((spc_matches_prefix stringappend_6820)) of
                                       Some (stringappend_6830,stringappend_6840) =>
                                        (let stringappend_6850 =
                                          (string_drop stringappend_6820 stringappend_6840) in
                                        if ((case  ((reg_name_matches_prefix stringappend_6850
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_6860,stringappend_6870) =>
                                             (let stringappend_6880 =
                                               (string_drop stringappend_6850 stringappend_6870) in
                                             if ((case  ((sep_matches_prefix stringappend_6880)) of
                                                 Some (stringappend_6890,stringappend_6900) =>
                                                  (let stringappend_6910 =
                                                    (string_drop stringappend_6880
                                                      stringappend_6900) in
                                                  if ((case  ((reg_name_matches_prefix
                                                                stringappend_6910
                                                               ::  (( 5 Word.word * ii))option)) of
                                                      Some (stringappend_6920,stringappend_6930) =>
                                                       (let stringappend_6940 =
                                                         (string_drop stringappend_6910
                                                           stringappend_6930) in
                                                       if ((case  ((sep_matches_prefix
                                                                     stringappend_6940)) of
                                                           Some
                                                           (stringappend_6950,stringappend_6960) =>
                                                            (let stringappend_6970 =
                                                              (string_drop stringappend_6940
                                                                stringappend_6960) in
                                                            if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_6970
                                                                         ::  (( 12 Word.word * ii))option)) of
                                                                Some
                                                                (stringappend_6980,stringappend_6990) => 
  if(((string_drop stringappend_6970 stringappend_6990)) = ('''')) then 
  True else False
                                                              | None => False
                                                              )) then
                                                              True
                                                            else False)
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_6700 = (string_drop stringappend_5410 ((string_length (''l'')))) in
     (let (size1, stringappend_6720) =
       ((case  ((size_mnemonic_matches_prefix stringappend_6700)) of
         Some (stringappend_6710,stringappend_6720) => (stringappend_6710, stringappend_6720)
       )) in
     (let stringappend_6730 = (string_drop stringappend_6700 stringappend_6720) in
     (let (is_unsigned, stringappend_6750) =
       ((case  ((maybe_u_matches_prefix stringappend_6730)) of
         Some (stringappend_6740,stringappend_6750) => (stringappend_6740, stringappend_6750)
       )) in
     (let stringappend_6760 = (string_drop stringappend_6730 stringappend_6750) in
     (let (aq, stringappend_6780) =
       ((case  ((maybe_aq_matches_prefix stringappend_6760)) of
         Some (stringappend_6770,stringappend_6780) => (stringappend_6770, stringappend_6780)
       )) in
     (let stringappend_6790 = (string_drop stringappend_6760 stringappend_6780) in
     (let (rl, stringappend_6810) =
       ((case  ((maybe_rl_matches_prefix stringappend_6790)) of
         Some (stringappend_6800,stringappend_6810) => (stringappend_6800, stringappend_6810)
       )) in
     (let stringappend_6820 = (string_drop stringappend_6790 stringappend_6810) in  
  (case 
  (case  ((spc_matches_prefix stringappend_6820)) of
        Some (stringappend_6830,stringappend_6840) => (stringappend_6830, stringappend_6840)
  ) of
      (_, stringappend_6840) =>
  (let stringappend_6850 = (string_drop stringappend_6820 stringappend_6840) in
  (let (rd, stringappend_6870) =
       ((case  ((reg_name_matches_prefix stringappend_6850 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6860,stringappend_6870) => (stringappend_6860, stringappend_6870)
        )) in
  (let stringappend_6880 = (string_drop stringappend_6850 stringappend_6870) in
  (case 
  (case  ((sep_matches_prefix stringappend_6880)) of
        Some (stringappend_6890,stringappend_6900) => (stringappend_6890, stringappend_6900)
  ) of
      (_, stringappend_6900) =>
  (let stringappend_6910 = (string_drop stringappend_6880 stringappend_6900) in
  (let (rs1, stringappend_6930) =
       ((case  ((reg_name_matches_prefix stringappend_6910 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_6920,stringappend_6930) => (stringappend_6920, stringappend_6930)
        )) in
  (let stringappend_6940 = (string_drop stringappend_6910 stringappend_6930) in
  (case 
  (case  ((sep_matches_prefix stringappend_6940)) of
        Some (stringappend_6950,stringappend_6960) => (stringappend_6950, stringappend_6960)
  ) of
      (_, stringappend_6960) =>
  (let stringappend_6970 = (string_drop stringappend_6940 stringappend_6960) in
  (let (imm, stringappend_6990) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_6970 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_6980,stringappend_6990) => (stringappend_6980, stringappend_6990)
        )) in
  if(((string_drop stringappend_6970 stringappend_6990)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))))))))))
   else if (((((string_startswith stringappend_5410 (''s''))) \<and> ((let stringappend_7010 = (string_drop stringappend_5410 ((string_length (''s'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_7010)) of
                   Some (stringappend_7020,stringappend_7030) =>
                    (let stringappend_7040 = (string_drop stringappend_7010 stringappend_7030) in
                    if ((case  ((maybe_aq_matches_prefix stringappend_7040)) of
                        Some (stringappend_7050,stringappend_7060) =>
                         (let stringappend_7070 = (string_drop stringappend_7040 stringappend_7060) in
                         if ((case  ((maybe_rl_matches_prefix stringappend_7070)) of
                             Some (stringappend_7080,stringappend_7090) =>
                              (let stringappend_7100 =
                                (string_drop stringappend_7070 stringappend_7090) in
                              if ((case  ((spc_matches_prefix stringappend_7100)) of
                                  Some (stringappend_7110,stringappend_7120) =>
                                   (let stringappend_7130 =
                                     (string_drop stringappend_7100 stringappend_7120) in
                                   if ((case  ((reg_name_matches_prefix stringappend_7130
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_7140,stringappend_7150) =>
                                        (let stringappend_7160 =
                                          (string_drop stringappend_7130 stringappend_7150) in
                                        if ((case  ((sep_matches_prefix stringappend_7160)) of
                                            Some (stringappend_7170,stringappend_7180) =>
                                             (let stringappend_7190 =
                                               (string_drop stringappend_7160 stringappend_7180) in
                                             if ((case  ((reg_name_matches_prefix stringappend_7190
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_7200,stringappend_7210) =>
                                                  (let stringappend_7220 =
                                                    (string_drop stringappend_7190
                                                      stringappend_7210) in
                                                  if ((case  ((sep_matches_prefix stringappend_7220)) of
                                                      Some (stringappend_7230,stringappend_7240) =>
                                                       (let stringappend_7250 =
                                                         (string_drop stringappend_7220
                                                           stringappend_7240) in
                                                       if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_7250
                                                                    ::  (( 12 Word.word * ii))option)) of
                                                           Some
                                                           (stringappend_7260,stringappend_7270) => 
  if(((string_drop stringappend_7250 stringappend_7270)) = ('''')) then 
  True else False
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_7010 = (string_drop stringappend_5410 ((string_length (''s'')))) in
     (let (size1, stringappend_7030) =
       ((case  ((size_mnemonic_matches_prefix stringappend_7010)) of
         Some (stringappend_7020,stringappend_7030) => (stringappend_7020, stringappend_7030)
       )) in
     (let stringappend_7040 = (string_drop stringappend_7010 stringappend_7030) in
     (let (aq, stringappend_7060) =
       ((case  ((maybe_aq_matches_prefix stringappend_7040)) of
         Some (stringappend_7050,stringappend_7060) => (stringappend_7050, stringappend_7060)
       )) in
     (let stringappend_7070 = (string_drop stringappend_7040 stringappend_7060) in
     (let (rl, stringappend_7090) =
       ((case  ((maybe_rl_matches_prefix stringappend_7070)) of
         Some (stringappend_7080,stringappend_7090) => (stringappend_7080, stringappend_7090)
       )) in
     (let stringappend_7100 = (string_drop stringappend_7070 stringappend_7090) in  
  (case 
  (case  ((spc_matches_prefix stringappend_7100)) of
        Some (stringappend_7110,stringappend_7120) => (stringappend_7110, stringappend_7120)
  ) of
      (_, stringappend_7120) =>
  (let stringappend_7130 = (string_drop stringappend_7100 stringappend_7120) in
  (let (rd, stringappend_7150) =
       ((case  ((reg_name_matches_prefix stringappend_7130 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7140,stringappend_7150) => (stringappend_7140, stringappend_7150)
        )) in
  (let stringappend_7160 = (string_drop stringappend_7130 stringappend_7150) in
  (case 
  (case  ((sep_matches_prefix stringappend_7160)) of
        Some (stringappend_7170,stringappend_7180) => (stringappend_7170, stringappend_7180)
  ) of
      (_, stringappend_7180) =>
  (let stringappend_7190 = (string_drop stringappend_7160 stringappend_7180) in
  (let (rs1, stringappend_7210) =
       ((case  ((reg_name_matches_prefix stringappend_7190 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7200,stringappend_7210) => (stringappend_7200, stringappend_7210)
        )) in
  (let stringappend_7220 = (string_drop stringappend_7190 stringappend_7210) in
  (case 
  (case  ((sep_matches_prefix stringappend_7220)) of
        Some (stringappend_7230,stringappend_7240) => (stringappend_7230, stringappend_7240)
  ) of
      (_, stringappend_7240) =>
  (let stringappend_7250 = (string_drop stringappend_7220 stringappend_7240) in
  (let (imm, stringappend_7270) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_7250 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_7260,stringappend_7270) => (stringappend_7260, stringappend_7270)
        )) in
  if(((string_drop stringappend_7250 stringappend_7270)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))))))))
   else if (((((string_startswith stringappend_5410 (''addiw''))) \<and> ((let stringappend_7290 = (string_drop stringappend_5410 ((string_length (''addiw'')))) in
               if ((case  ((spc_matches_prefix stringappend_7290)) of
                   Some (stringappend_7300,stringappend_7310) =>
                    (let stringappend_7320 = (string_drop stringappend_7290 stringappend_7310) in
                    if ((case  ((reg_name_matches_prefix stringappend_7320
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_7330,stringappend_7340) =>
                         (let stringappend_7350 = (string_drop stringappend_7320 stringappend_7340) in
                         if ((case  ((sep_matches_prefix stringappend_7350)) of
                             Some (stringappend_7360,stringappend_7370) =>
                              (let stringappend_7380 =
                                (string_drop stringappend_7350 stringappend_7370) in
                              if ((case  ((reg_name_matches_prefix stringappend_7380
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_7390,stringappend_7400) =>
                                   (let stringappend_7410 =
                                     (string_drop stringappend_7380 stringappend_7400) in
                                   if ((case  ((sep_matches_prefix stringappend_7410)) of
                                       Some (stringappend_7420,stringappend_7430) =>
                                        (let stringappend_7440 =
                                          (string_drop stringappend_7410 stringappend_7430) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_7440
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_7450,stringappend_7460) => 
  if(((string_drop stringappend_7440 stringappend_7460)) = ('''')) then 
  True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_7290 = (string_drop stringappend_5410 ((string_length (''addiw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_7290)) of
        Some (stringappend_7300,stringappend_7310) => (stringappend_7300, stringappend_7310)
  ) of
      (_, stringappend_7310) =>
  (let stringappend_7320 = (string_drop stringappend_7290 stringappend_7310) in
  (let (rd, stringappend_7340) =
       ((case  ((reg_name_matches_prefix stringappend_7320 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7330,stringappend_7340) => (stringappend_7330, stringappend_7340)
        )) in
  (let stringappend_7350 = (string_drop stringappend_7320 stringappend_7340) in
  (case 
  (case  ((sep_matches_prefix stringappend_7350)) of
        Some (stringappend_7360,stringappend_7370) => (stringappend_7360, stringappend_7370)
  ) of
      (_, stringappend_7370) =>
  (let stringappend_7380 = (string_drop stringappend_7350 stringappend_7370) in
  (let (rs1, stringappend_7400) =
       ((case  ((reg_name_matches_prefix stringappend_7380 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7390,stringappend_7400) => (stringappend_7390, stringappend_7400)
        )) in
  (let stringappend_7410 = (string_drop stringappend_7380 stringappend_7400) in
  (case 
  (case  ((sep_matches_prefix stringappend_7410)) of
        Some (stringappend_7420,stringappend_7430) => (stringappend_7420, stringappend_7430)
  ) of
      (_, stringappend_7430) =>
  (let stringappend_7440 = (string_drop stringappend_7410 stringappend_7430) in
  (let (imm, stringappend_7460) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_7440 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_7450,stringappend_7460) => (stringappend_7450, stringappend_7460)
        )) in
  if(((string_drop stringappend_7440 stringappend_7460)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))
   else if ((case  ((shiftw_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_7480,stringappend_7490) =>
        (let stringappend_7500 = (string_drop stringappend_5410 stringappend_7490) in
        if ((case  ((spc_matches_prefix stringappend_7500)) of
            Some (stringappend_7510,stringappend_7520) =>
             (let stringappend_7530 = (string_drop stringappend_7500 stringappend_7520) in
             if ((case  ((reg_name_matches_prefix stringappend_7530  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_7540,stringappend_7550) =>
                  (let stringappend_7560 = (string_drop stringappend_7530 stringappend_7550) in
                  if ((case  ((sep_matches_prefix stringappend_7560)) of
                      Some (stringappend_7570,stringappend_7580) =>
                       (let stringappend_7590 = (string_drop stringappend_7560 stringappend_7580) in
                       if ((case  ((reg_name_matches_prefix stringappend_7590
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_7600,stringappend_7610) =>
                            (let stringappend_7620 =
                              (string_drop stringappend_7590 stringappend_7610) in
                            if ((case  ((sep_matches_prefix stringappend_7620)) of
                                Some (stringappend_7630,stringappend_7640) =>
                                 (let stringappend_7650 =
                                   (string_drop stringappend_7620 stringappend_7640) in
                                 if ((case  ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_7650
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_7660,stringappend_7670) => 
  if(((string_drop stringappend_7650 stringappend_7670)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_7490) =
       ((case  ((shiftw_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_7480,stringappend_7490) => (stringappend_7480, stringappend_7490)
       )) in
     (let stringappend_7500 = (string_drop stringappend_5410 stringappend_7490) in  
  (case 
  (case  ((spc_matches_prefix stringappend_7500)) of
        Some (stringappend_7510,stringappend_7520) => (stringappend_7510, stringappend_7520)
  ) of
      (_, stringappend_7520) =>
  (let stringappend_7530 = (string_drop stringappend_7500 stringappend_7520) in
  (let (rd, stringappend_7550) =
       ((case  ((reg_name_matches_prefix stringappend_7530 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7540,stringappend_7550) => (stringappend_7540, stringappend_7550)
        )) in
  (let stringappend_7560 = (string_drop stringappend_7530 stringappend_7550) in
  (case 
  (case  ((sep_matches_prefix stringappend_7560)) of
        Some (stringappend_7570,stringappend_7580) => (stringappend_7570, stringappend_7580)
  ) of
      (_, stringappend_7580) =>
  (let stringappend_7590 = (string_drop stringappend_7560 stringappend_7580) in
  (let (rs1, stringappend_7610) =
       ((case  ((reg_name_matches_prefix stringappend_7590 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7600,stringappend_7610) => (stringappend_7600, stringappend_7610)
        )) in
  (let stringappend_7620 = (string_drop stringappend_7590 stringappend_7610) in
  (case 
  (case  ((sep_matches_prefix stringappend_7620)) of
        Some (stringappend_7630,stringappend_7640) => (stringappend_7630, stringappend_7640)
  ) of
      (_, stringappend_7640) =>
  (let stringappend_7650 = (string_drop stringappend_7620 stringappend_7640) in
  (let (shamt, stringappend_7670) =
       ((case  ((hex_bits_5_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_7650 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7660,stringappend_7670) => (stringappend_7660, stringappend_7670)
        )) in
  if(((string_drop stringappend_7650 stringappend_7670)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if ((case  ((rtypew_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_7690,stringappend_7700) =>
        (let stringappend_7710 = (string_drop stringappend_5410 stringappend_7700) in
        if ((case  ((spc_matches_prefix stringappend_7710)) of
            Some (stringappend_7720,stringappend_7730) =>
             (let stringappend_7740 = (string_drop stringappend_7710 stringappend_7730) in
             if ((case  ((reg_name_matches_prefix stringappend_7740  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_7750,stringappend_7760) =>
                  (let stringappend_7770 = (string_drop stringappend_7740 stringappend_7760) in
                  if ((case  ((sep_matches_prefix stringappend_7770)) of
                      Some (stringappend_7780,stringappend_7790) =>
                       (let stringappend_7800 = (string_drop stringappend_7770 stringappend_7790) in
                       if ((case  ((reg_name_matches_prefix stringappend_7800
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_7810,stringappend_7820) =>
                            (let stringappend_7830 =
                              (string_drop stringappend_7800 stringappend_7820) in
                            if ((case  ((sep_matches_prefix stringappend_7830)) of
                                Some (stringappend_7840,stringappend_7850) =>
                                 (let stringappend_7860 =
                                   (string_drop stringappend_7830 stringappend_7850) in
                                 if ((case  ((reg_name_matches_prefix stringappend_7860
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_7870,stringappend_7880) => 
  if(((string_drop stringappend_7860 stringappend_7880)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_7700) =
       ((case  ((rtypew_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_7690,stringappend_7700) => (stringappend_7690, stringappend_7700)
       )) in
     (let stringappend_7710 = (string_drop stringappend_5410 stringappend_7700) in  
  (case 
  (case  ((spc_matches_prefix stringappend_7710)) of
        Some (stringappend_7720,stringappend_7730) => (stringappend_7720, stringappend_7730)
  ) of
      (_, stringappend_7730) =>
  (let stringappend_7740 = (string_drop stringappend_7710 stringappend_7730) in
  (let (rd, stringappend_7760) =
       ((case  ((reg_name_matches_prefix stringappend_7740 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7750,stringappend_7760) => (stringappend_7750, stringappend_7760)
        )) in
  (let stringappend_7770 = (string_drop stringappend_7740 stringappend_7760) in
  (case 
  (case  ((sep_matches_prefix stringappend_7770)) of
        Some (stringappend_7780,stringappend_7790) => (stringappend_7780, stringappend_7790)
  ) of
      (_, stringappend_7790) =>
  (let stringappend_7800 = (string_drop stringappend_7770 stringappend_7790) in
  (let (rs1, stringappend_7820) =
       ((case  ((reg_name_matches_prefix stringappend_7800 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7810,stringappend_7820) => (stringappend_7810, stringappend_7820)
        )) in
  (let stringappend_7830 = (string_drop stringappend_7800 stringappend_7820) in
  (case 
  (case  ((sep_matches_prefix stringappend_7830)) of
        Some (stringappend_7840,stringappend_7850) => (stringappend_7840, stringappend_7850)
  ) of
      (_, stringappend_7850) =>
  (let stringappend_7860 = (string_drop stringappend_7830 stringappend_7850) in
  (let (rs2, stringappend_7880) =
       ((case  ((reg_name_matches_prefix stringappend_7860 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7870,stringappend_7880) => (stringappend_7870, stringappend_7880)
        )) in
  if(((string_drop stringappend_7860 stringappend_7880)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if ((case  ((mul_mnemonic_matches_prefix stringappend_5410)) of
       Some (stringappend_7900,stringappend_7910) =>
        (let stringappend_7920 = (string_drop stringappend_5410 stringappend_7910) in
        if ((case  ((spc_matches_prefix stringappend_7920)) of
            Some (stringappend_7930,stringappend_7940) =>
             (let stringappend_7950 = (string_drop stringappend_7920 stringappend_7940) in
             if ((case  ((reg_name_matches_prefix stringappend_7950  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_7960,stringappend_7970) =>
                  (let stringappend_7980 = (string_drop stringappend_7950 stringappend_7970) in
                  if ((case  ((sep_matches_prefix stringappend_7980)) of
                      Some (stringappend_7990,stringappend_8000) =>
                       (let stringappend_8010 = (string_drop stringappend_7980 stringappend_8000) in
                       if ((case  ((reg_name_matches_prefix stringappend_8010
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_8020,stringappend_8030) =>
                            (let stringappend_8040 =
                              (string_drop stringappend_8010 stringappend_8030) in
                            if ((case  ((sep_matches_prefix stringappend_8040)) of
                                Some (stringappend_8050,stringappend_8060) =>
                                 (let stringappend_8070 =
                                   (string_drop stringappend_8040 stringappend_8060) in
                                 if ((case  ((reg_name_matches_prefix stringappend_8070
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_8080,stringappend_8090) => 
  if(((string_drop stringappend_8070 stringappend_8090)) = ('''')) then 
  True else False
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let ((high, signed1, signed2), stringappend_7910) =
       ((case  ((mul_mnemonic_matches_prefix stringappend_5410)) of
         Some (stringappend_7900,stringappend_7910) => (stringappend_7900, stringappend_7910)
       )) in
     (let stringappend_7920 = (string_drop stringappend_5410 stringappend_7910) in  
  (case 
  (case  ((spc_matches_prefix stringappend_7920)) of
        Some (stringappend_7930,stringappend_7940) => (stringappend_7930, stringappend_7940)
  ) of
      (_, stringappend_7940) =>
  (let stringappend_7950 = (string_drop stringappend_7920 stringappend_7940) in
  (let (rd, stringappend_7970) =
       ((case  ((reg_name_matches_prefix stringappend_7950 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_7960,stringappend_7970) => (stringappend_7960, stringappend_7970)
        )) in
  (let stringappend_7980 = (string_drop stringappend_7950 stringappend_7970) in
  (case 
  (case  ((sep_matches_prefix stringappend_7980)) of
        Some (stringappend_7990,stringappend_8000) => (stringappend_7990, stringappend_8000)
  ) of
      (_, stringappend_8000) =>
  (let stringappend_8010 = (string_drop stringappend_7980 stringappend_8000) in
  (let (rs1, stringappend_8030) =
       ((case  ((reg_name_matches_prefix stringappend_8010 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8020,stringappend_8030) => (stringappend_8020, stringappend_8030)
        )) in
  (let stringappend_8040 = (string_drop stringappend_8010 stringappend_8030) in
  (case 
  (case  ((sep_matches_prefix stringappend_8040)) of
        Some (stringappend_8050,stringappend_8060) => (stringappend_8050, stringappend_8060)
  ) of
      (_, stringappend_8060) =>
  (let stringappend_8070 = (string_drop stringappend_8040 stringappend_8060) in
  (let (rs2, stringappend_8090) =
       ((case  ((reg_name_matches_prefix stringappend_8070 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8080,stringappend_8090) => (stringappend_8080, stringappend_8090)
        )) in
  if(((string_drop stringappend_8070 stringappend_8090)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_5410 (''div''))) \<and> ((let stringappend_8110 = (string_drop stringappend_5410 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_8110)) of
                   Some (stringappend_8120,stringappend_8130) =>
                    (let stringappend_8140 = (string_drop stringappend_8110 stringappend_8130) in
                    if ((case  ((spc_matches_prefix stringappend_8140)) of
                        Some (stringappend_8150,stringappend_8160) =>
                         (let stringappend_8170 = (string_drop stringappend_8140 stringappend_8160) in
                         if ((case  ((reg_name_matches_prefix stringappend_8170
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_8180,stringappend_8190) =>
                              (let stringappend_8200 =
                                (string_drop stringappend_8170 stringappend_8190) in
                              if ((case  ((sep_matches_prefix stringappend_8200)) of
                                  Some (stringappend_8210,stringappend_8220) =>
                                   (let stringappend_8230 =
                                     (string_drop stringappend_8200 stringappend_8220) in
                                   if ((case  ((reg_name_matches_prefix stringappend_8230
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_8240,stringappend_8250) =>
                                        (let stringappend_8260 =
                                          (string_drop stringappend_8230 stringappend_8250) in
                                        if ((case  ((sep_matches_prefix stringappend_8260)) of
                                            Some (stringappend_8270,stringappend_8280) =>
                                             (let stringappend_8290 =
                                               (string_drop stringappend_8260 stringappend_8280) in
                                             if ((case  ((reg_name_matches_prefix stringappend_8290
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_8300,stringappend_8310) => 
  if(((string_drop stringappend_8290 stringappend_8310)) = ('''')) then 
  True else False
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_8110 = (string_drop stringappend_5410 ((string_length (''div'')))) in
     (let (s, stringappend_8130) =
       ((case  ((maybe_not_u_matches_prefix stringappend_8110)) of
         Some (stringappend_8120,stringappend_8130) => (stringappend_8120, stringappend_8130)
       )) in
     (let stringappend_8140 = (string_drop stringappend_8110 stringappend_8130) in  
  (case 
  (case  ((spc_matches_prefix stringappend_8140)) of
        Some (stringappend_8150,stringappend_8160) => (stringappend_8150, stringappend_8160)
  ) of
      (_, stringappend_8160) =>
  (let stringappend_8170 = (string_drop stringappend_8140 stringappend_8160) in
  (let (rd, stringappend_8190) =
       ((case  ((reg_name_matches_prefix stringappend_8170 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8180,stringappend_8190) => (stringappend_8180, stringappend_8190)
        )) in
  (let stringappend_8200 = (string_drop stringappend_8170 stringappend_8190) in
  (case 
  (case  ((sep_matches_prefix stringappend_8200)) of
        Some (stringappend_8210,stringappend_8220) => (stringappend_8210, stringappend_8220)
  ) of
      (_, stringappend_8220) =>
  (let stringappend_8230 = (string_drop stringappend_8200 stringappend_8220) in
  (let (rs1, stringappend_8250) =
       ((case  ((reg_name_matches_prefix stringappend_8230 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8240,stringappend_8250) => (stringappend_8240, stringappend_8250)
        )) in
  (let stringappend_8260 = (string_drop stringappend_8230 stringappend_8250) in
  (case 
  (case  ((sep_matches_prefix stringappend_8260)) of
        Some (stringappend_8270,stringappend_8280) => (stringappend_8270, stringappend_8280)
  ) of
      (_, stringappend_8280) =>
  (let stringappend_8290 = (string_drop stringappend_8260 stringappend_8280) in
  (let (rs2, stringappend_8310) =
       ((case  ((reg_name_matches_prefix stringappend_8290 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8300,stringappend_8310) => (stringappend_8300, stringappend_8310)
        )) in
  if(((string_drop stringappend_8290 stringappend_8310)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_5410 (''rem''))) \<and> ((let stringappend_8330 = (string_drop stringappend_5410 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_8330)) of
                   Some (stringappend_8340,stringappend_8350) =>
                    (let stringappend_8360 = (string_drop stringappend_8330 stringappend_8350) in
                    if ((case  ((spc_matches_prefix stringappend_8360)) of
                        Some (stringappend_8370,stringappend_8380) =>
                         (let stringappend_8390 = (string_drop stringappend_8360 stringappend_8380) in
                         if ((case  ((reg_name_matches_prefix stringappend_8390
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_8400,stringappend_8410) =>
                              (let stringappend_8420 =
                                (string_drop stringappend_8390 stringappend_8410) in
                              if ((case  ((sep_matches_prefix stringappend_8420)) of
                                  Some (stringappend_8430,stringappend_8440) =>
                                   (let stringappend_8450 =
                                     (string_drop stringappend_8420 stringappend_8440) in
                                   if ((case  ((reg_name_matches_prefix stringappend_8450
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_8460,stringappend_8470) =>
                                        (let stringappend_8480 =
                                          (string_drop stringappend_8450 stringappend_8470) in
                                        if ((case  ((sep_matches_prefix stringappend_8480)) of
                                            Some (stringappend_8490,stringappend_8500) =>
                                             (let stringappend_8510 =
                                               (string_drop stringappend_8480 stringappend_8500) in
                                             if ((case  ((reg_name_matches_prefix stringappend_8510
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_8520,stringappend_8530) => 
  if(((string_drop stringappend_8510 stringappend_8530)) = ('''')) then 
  True else False
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_8330 = (string_drop stringappend_5410 ((string_length (''rem'')))) in
     (let (s, stringappend_8350) =
       ((case  ((maybe_not_u_matches_prefix stringappend_8330)) of
         Some (stringappend_8340,stringappend_8350) => (stringappend_8340, stringappend_8350)
       )) in
     (let stringappend_8360 = (string_drop stringappend_8330 stringappend_8350) in  
  (case 
  (case  ((spc_matches_prefix stringappend_8360)) of
        Some (stringappend_8370,stringappend_8380) => (stringappend_8370, stringappend_8380)
  ) of
      (_, stringappend_8380) =>
  (let stringappend_8390 = (string_drop stringappend_8360 stringappend_8380) in
  (let (rd, stringappend_8410) =
       ((case  ((reg_name_matches_prefix stringappend_8390 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8400,stringappend_8410) => (stringappend_8400, stringappend_8410)
        )) in
  (let stringappend_8420 = (string_drop stringappend_8390 stringappend_8410) in
  (case 
  (case  ((sep_matches_prefix stringappend_8420)) of
        Some (stringappend_8430,stringappend_8440) => (stringappend_8430, stringappend_8440)
  ) of
      (_, stringappend_8440) =>
  (let stringappend_8450 = (string_drop stringappend_8420 stringappend_8440) in
  (let (rs1, stringappend_8470) =
       ((case  ((reg_name_matches_prefix stringappend_8450 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8460,stringappend_8470) => (stringappend_8460, stringappend_8470)
        )) in
  (let stringappend_8480 = (string_drop stringappend_8450 stringappend_8470) in
  (case 
  (case  ((sep_matches_prefix stringappend_8480)) of
        Some (stringappend_8490,stringappend_8500) => (stringappend_8490, stringappend_8500)
  ) of
      (_, stringappend_8500) =>
  (let stringappend_8510 = (string_drop stringappend_8480 stringappend_8500) in
  (let (rs2, stringappend_8530) =
       ((case  ((reg_name_matches_prefix stringappend_8510 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8520,stringappend_8530) => (stringappend_8520, stringappend_8530)
        )) in
  if(((string_drop stringappend_8510 stringappend_8530)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_5410 (''mulw''))) \<and> ((let stringappend_8550 = (string_drop stringappend_5410 ((string_length (''mulw'')))) in
               if ((case  ((spc_matches_prefix stringappend_8550)) of
                   Some (stringappend_8560,stringappend_8570) =>
                    (let stringappend_8580 = (string_drop stringappend_8550 stringappend_8570) in
                    if ((case  ((reg_name_matches_prefix stringappend_8580
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_8590,stringappend_8600) =>
                         (let stringappend_8610 = (string_drop stringappend_8580 stringappend_8600) in
                         if ((case  ((sep_matches_prefix stringappend_8610)) of
                             Some (stringappend_8620,stringappend_8630) =>
                              (let stringappend_8640 =
                                (string_drop stringappend_8610 stringappend_8630) in
                              if ((case  ((reg_name_matches_prefix stringappend_8640
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_8650,stringappend_8660) =>
                                   (let stringappend_8670 =
                                     (string_drop stringappend_8640 stringappend_8660) in
                                   if ((case  ((sep_matches_prefix stringappend_8670)) of
                                       Some (stringappend_8680,stringappend_8690) =>
                                        (let stringappend_8700 =
                                          (string_drop stringappend_8670 stringappend_8690) in
                                        if ((case  ((reg_name_matches_prefix stringappend_8700
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_8710,stringappend_8720) => 
  if(((string_drop stringappend_8700 stringappend_8720)) = ('''')) then 
  True else False
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_8550 = (string_drop stringappend_5410 ((string_length (''mulw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_8550)) of
        Some (stringappend_8560,stringappend_8570) => (stringappend_8560, stringappend_8570)
  ) of
      (_, stringappend_8570) =>
  (let stringappend_8580 = (string_drop stringappend_8550 stringappend_8570) in
  (let (rd, stringappend_8600) =
       ((case  ((reg_name_matches_prefix stringappend_8580 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8590,stringappend_8600) => (stringappend_8590, stringappend_8600)
        )) in
  (let stringappend_8610 = (string_drop stringappend_8580 stringappend_8600) in
  (case 
  (case  ((sep_matches_prefix stringappend_8610)) of
        Some (stringappend_8620,stringappend_8630) => (stringappend_8620, stringappend_8630)
  ) of
      (_, stringappend_8630) =>
  (let stringappend_8640 = (string_drop stringappend_8610 stringappend_8630) in
  (let (rs1, stringappend_8660) =
       ((case  ((reg_name_matches_prefix stringappend_8640 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8650,stringappend_8660) => (stringappend_8650, stringappend_8660)
        )) in
  (let stringappend_8670 = (string_drop stringappend_8640 stringappend_8660) in
  (case 
  (case  ((sep_matches_prefix stringappend_8670)) of
        Some (stringappend_8680,stringappend_8690) => (stringappend_8680, stringappend_8690)
  ) of
      (_, stringappend_8690) =>
  (let stringappend_8700 = (string_drop stringappend_8670 stringappend_8690) in
  (let (rs2, stringappend_8720) =
       ((case  ((reg_name_matches_prefix stringappend_8700 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8710,stringappend_8720) => (stringappend_8710, stringappend_8720)
        )) in
  if(((string_drop stringappend_8700 stringappend_8720)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  ))
   else if (((((string_startswith stringappend_5410 (''div''))) \<and> ((let stringappend_8740 = (string_drop stringappend_5410 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_8740)) of
                   Some (stringappend_8750,stringappend_8760) =>
                    (let stringappend_8770 = (string_drop stringappend_8740 stringappend_8760) in
                    if (((((string_startswith stringappend_8770 (''w''))) \<and> ((let stringappend_8780 =
                             (string_drop stringappend_8770 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_8780)) of
                               Some (stringappend_8790,stringappend_8800) =>
                                (let stringappend_8810 =
                                  (string_drop stringappend_8780 stringappend_8800) in
                                if ((case  ((reg_name_matches_prefix stringappend_8810
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_8820,stringappend_8830) =>
                                     (let stringappend_8840 =
                                       (string_drop stringappend_8810 stringappend_8830) in
                                     if ((case  ((sep_matches_prefix stringappend_8840)) of
                                         Some (stringappend_8850,stringappend_8860) =>
                                          (let stringappend_8870 =
                                            (string_drop stringappend_8840 stringappend_8860) in
                                          if ((case  ((reg_name_matches_prefix stringappend_8870
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_8880,stringappend_8890) =>
                                               (let stringappend_8900 =
                                                 (string_drop stringappend_8870 stringappend_8890) in
                                               if ((case  ((sep_matches_prefix stringappend_8900)) of
                                                   Some (stringappend_8910,stringappend_8920) =>
                                                    (let stringappend_8930 =
                                                      (string_drop stringappend_8900
                                                        stringappend_8920) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_8930
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some (stringappend_8940,stringappend_8950) => 
  if(((string_drop stringappend_8930 stringappend_8950)) = ('''')) then 
  True else False
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_8740 = (string_drop stringappend_5410 ((string_length (''div'')))) in
     (let (s, stringappend_8760) =
       ((case  ((maybe_not_u_matches_prefix stringappend_8740)) of
         Some (stringappend_8750,stringappend_8760) => (stringappend_8750, stringappend_8760)
       )) in
     (let stringappend_8770 = (string_drop stringappend_8740 stringappend_8760) in
     (let stringappend_8780 = (string_drop stringappend_8770 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_8780)) of
        Some (stringappend_8790,stringappend_8800) => (stringappend_8790, stringappend_8800)
  ) of
      (_, stringappend_8800) =>
  (let stringappend_8810 = (string_drop stringappend_8780 stringappend_8800) in
  (let (rd, stringappend_8830) =
       ((case  ((reg_name_matches_prefix stringappend_8810 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8820,stringappend_8830) => (stringappend_8820, stringappend_8830)
        )) in
  (let stringappend_8840 = (string_drop stringappend_8810 stringappend_8830) in
  (case 
  (case  ((sep_matches_prefix stringappend_8840)) of
        Some (stringappend_8850,stringappend_8860) => (stringappend_8850, stringappend_8860)
  ) of
      (_, stringappend_8860) =>
  (let stringappend_8870 = (string_drop stringappend_8840 stringappend_8860) in
  (let (rs1, stringappend_8890) =
       ((case  ((reg_name_matches_prefix stringappend_8870 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8880,stringappend_8890) => (stringappend_8880, stringappend_8890)
        )) in
  (let stringappend_8900 = (string_drop stringappend_8870 stringappend_8890) in
  (case 
  (case  ((sep_matches_prefix stringappend_8900)) of
        Some (stringappend_8910,stringappend_8920) => (stringappend_8910, stringappend_8920)
  ) of
      (_, stringappend_8920) =>
  (let stringappend_8930 = (string_drop stringappend_8900 stringappend_8920) in
  (let (rs2, stringappend_8950) =
       ((case  ((reg_name_matches_prefix stringappend_8930 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_8940,stringappend_8950) => (stringappend_8940, stringappend_8950)
        )) in
  if(((string_drop stringappend_8930 stringappend_8950)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_5410 (''rem''))) \<and> ((let stringappend_8970 = (string_drop stringappend_5410 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_8970)) of
                   Some (stringappend_8980,stringappend_8990) =>
                    (let stringappend_9000 = (string_drop stringappend_8970 stringappend_8990) in
                    if (((((string_startswith stringappend_9000 (''w''))) \<and> ((let stringappend_9010 =
                             (string_drop stringappend_9000 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_9010)) of
                               Some (stringappend_9020,stringappend_9030) =>
                                (let stringappend_9040 =
                                  (string_drop stringappend_9010 stringappend_9030) in
                                if ((case  ((reg_name_matches_prefix stringappend_9040
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_9050,stringappend_9060) =>
                                     (let stringappend_9070 =
                                       (string_drop stringappend_9040 stringappend_9060) in
                                     if ((case  ((sep_matches_prefix stringappend_9070)) of
                                         Some (stringappend_9080,stringappend_9090) =>
                                          (let stringappend_9100 =
                                            (string_drop stringappend_9070 stringappend_9090) in
                                          if ((case  ((reg_name_matches_prefix stringappend_9100
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_9110,stringappend_9120) =>
                                               (let stringappend_9130 =
                                                 (string_drop stringappend_9100 stringappend_9120) in
                                               if ((case  ((sep_matches_prefix stringappend_9130)) of
                                                   Some (stringappend_9140,stringappend_9150) =>
                                                    (let stringappend_9160 =
                                                      (string_drop stringappend_9130
                                                        stringappend_9150) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_9160
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some (stringappend_9170,stringappend_9180) => 
  if(((string_drop stringappend_9160 stringappend_9180)) = ('''')) then 
  True else False
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_8970 = (string_drop stringappend_5410 ((string_length (''rem'')))) in
     (let (s, stringappend_8990) =
       ((case  ((maybe_not_u_matches_prefix stringappend_8970)) of
         Some (stringappend_8980,stringappend_8990) => (stringappend_8980, stringappend_8990)
       )) in
     (let stringappend_9000 = (string_drop stringappend_8970 stringappend_8990) in
     (let stringappend_9010 = (string_drop stringappend_9000 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_9010)) of
        Some (stringappend_9020,stringappend_9030) => (stringappend_9020, stringappend_9030)
  ) of
      (_, stringappend_9030) =>
  (let stringappend_9040 = (string_drop stringappend_9010 stringappend_9030) in
  (let (rd, stringappend_9060) =
       ((case  ((reg_name_matches_prefix stringappend_9040 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_9050,stringappend_9060) => (stringappend_9050, stringappend_9060)
        )) in
  (let stringappend_9070 = (string_drop stringappend_9040 stringappend_9060) in
  (case 
  (case  ((sep_matches_prefix stringappend_9070)) of
        Some (stringappend_9080,stringappend_9090) => (stringappend_9080, stringappend_9090)
  ) of
      (_, stringappend_9090) =>
  (let stringappend_9100 = (string_drop stringappend_9070 stringappend_9090) in
  (let (rs1, stringappend_9120) =
       ((case  ((reg_name_matches_prefix stringappend_9100 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_9110,stringappend_9120) => (stringappend_9110, stringappend_9120)
        )) in
  (let stringappend_9130 = (string_drop stringappend_9100 stringappend_9120) in
  (case 
  (case  ((sep_matches_prefix stringappend_9130)) of
        Some (stringappend_9140,stringappend_9150) => (stringappend_9140, stringappend_9150)
  ) of
      (_, stringappend_9150) =>
  (let stringappend_9160 = (string_drop stringappend_9130 stringappend_9150) in
  (let (rs2, stringappend_9180) =
       ((case  ((reg_name_matches_prefix stringappend_9160 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_9170,stringappend_9180) => (stringappend_9170, stringappend_9180)
        )) in
  if(((string_drop stringappend_9160 stringappend_9180)) = ('''')) then 
  True else undefined))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_5410 (''fence''))) \<and> ((let stringappend_9200 = (string_drop stringappend_5410 ((string_length (''fence'')))) in
               if ((case  ((spc_matches_prefix stringappend_9200)) of
                   Some (stringappend_9210,stringappend_9220) =>
                    (let stringappend_9230 = (string_drop stringappend_9200 stringappend_9220) in
                    if ((case  ((fence_bits_matches_prefix stringappend_9230
                                 ::  (( 4 Word.word * ii))option)) of
                        Some (stringappend_9240,stringappend_9250) =>
                         (let stringappend_9260 = (string_drop stringappend_9230 stringappend_9250) in
                         if ((case  ((sep_matches_prefix stringappend_9260)) of
                             Some (stringappend_9270,stringappend_9280) =>
                              (let stringappend_9290 =
                                (string_drop stringappend_9260 stringappend_9280) in
                              if ((case  ((fence_bits_matches_prefix stringappend_9290
                                           ::  (( 4 Word.word * ii))option)) of
                                  Some (stringappend_9300,stringappend_9310) => 
  if(((string_drop stringappend_9290 stringappend_9310)) = ('''')) then 
  True else False
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_9200 = (string_drop stringappend_5410 ((string_length (''fence'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_9200)) of
        Some (stringappend_9210,stringappend_9220) => (stringappend_9210, stringappend_9220)
  ) of
      (_, stringappend_9220) =>
  (let stringappend_9230 = (string_drop stringappend_9200 stringappend_9220) in
  (let (pred, stringappend_9250) =
       ((case  ((fence_bits_matches_prefix stringappend_9230 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_9240,stringappend_9250) => (stringappend_9240, stringappend_9250)
        )) in
  (let stringappend_9260 = (string_drop stringappend_9230 stringappend_9250) in
  (case 
  (case  ((sep_matches_prefix stringappend_9260)) of
        Some (stringappend_9270,stringappend_9280) => (stringappend_9270, stringappend_9280)
  ) of
      (_, stringappend_9280) =>
  (let stringappend_9290 = (string_drop stringappend_9260 stringappend_9280) in
  (let (succ, stringappend_9310) =
       ((case  ((fence_bits_matches_prefix stringappend_9290 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_9300,stringappend_9310) => (stringappend_9300, stringappend_9310)
        )) in
  if(((string_drop stringappend_9290 stringappend_9310)) = ('''')) then 
  True else undefined))
  ))))
  ))
   else  if(stringappend_5410 = (''fence.i'')) then True else
   (
   if(stringappend_5410 = (''ecall'')) then True else
     (
     if(stringappend_5410 = (''mret'')) then True else
       (
       if(stringappend_5410 = (''sret'')) then True else
         (
         if(stringappend_5410 = (''ebreak'')) then True else
           (
           if(stringappend_5410 = (''wfi'')) then True else
             (
             if (((((string_startswith stringappend_5410 (''sfence.vma'')))
                     \<and>
                     ((let stringappend_9330 =
                           (string_drop stringappend_5410
                              ((string_length (''sfence.vma'')))) in
                      if ((case  ((spc_matches_prefix stringappend_9330)) of
                                Some (stringappend_9340,stringappend_9350) =>
                          (let stringappend_9360 = (string_drop
                                                      stringappend_9330
                                                      stringappend_9350) in
                          if ((case  ((reg_name_matches_prefix
                                         stringappend_9360
                                      :: (( 5 Word.word * ii)) option)) of
                                    Some (stringappend_9370,stringappend_9380) =>
                              (let stringappend_9390 = (string_drop
                                                          stringappend_9360
                                                          stringappend_9380) in
                              if ((case  ((sep_matches_prefix
                                             stringappend_9390)) of
                                        Some (stringappend_9400,stringappend_9410) =>
                                  (let stringappend_9420 =
                                       (string_drop stringappend_9390
                                          stringappend_9410) in
                                  if ((case  ((reg_name_matches_prefix
                                                 stringappend_9420
                                              :: (( 5 Word.word * ii)) option)) of
                                            Some (stringappend_9430,stringappend_9440) =>
                                      if(((string_drop stringappend_9420
                                             stringappend_9440)) = ('''')) then
                                        True else False
                                        | None => False
                                      )) then True else False)
                                    | None => False
                                  )) then True else False)
                                | None => False
                              )) then True else False)
                            | None => False
                          )) then True else False))))) then
               (let stringappend_9330 = (string_drop stringappend_5410
                                           ((string_length (''sfence.vma'')))) in
               (case 
               (case  ((spc_matches_prefix stringappend_9330)) of
                     Some (stringappend_9340,stringappend_9350) =>
               (stringappend_9340, stringappend_9350)
               ) of
                   (_, stringappend_9350) =>
               (let stringappend_9360 = (string_drop stringappend_9330
                                           stringappend_9350) in
               (let (rs1, stringappend_9380) =
                    ((case  ((reg_name_matches_prefix stringappend_9360 :: (( 5 Word.word * ii)) option)) of
                           Some (stringappend_9370,stringappend_9380) =>
                     (stringappend_9370, stringappend_9380)
                     )) in
               (let stringappend_9390 = (string_drop stringappend_9360
                                           stringappend_9380) in
               (case 
               (case  ((sep_matches_prefix stringappend_9390)) of
                     Some (stringappend_9400,stringappend_9410) =>
               (stringappend_9400, stringappend_9410)
               ) of
                   (_, stringappend_9410) =>
               (let stringappend_9420 = (string_drop stringappend_9390
                                           stringappend_9410) in
               (let (rs2, stringappend_9440) =
                    ((case  ((reg_name_matches_prefix stringappend_9420 :: (( 5 Word.word * ii)) option)) of
                           Some (stringappend_9430,stringappend_9440) =>
                     (stringappend_9430, stringappend_9440)
                     )) in
               if(((string_drop stringappend_9420 stringappend_9440)) =
                    ('''')) then True else undefined))
               ))))
               )) else
               if (((((string_startswith stringappend_5410 (''lr.''))) \<and>
                       ((let stringappend_9460 = (string_drop
                                                    stringappend_5410
                                                    ((string_length (''lr.'')))) in
                        if ((case  ((maybe_aq_matches_prefix
                                       stringappend_9460)) of
                                  Some (stringappend_9470,stringappend_9480) =>
                            (let stringappend_9490 = (string_drop
                                                        stringappend_9460
                                                        stringappend_9480) in
                            if ((case  ((maybe_rl_matches_prefix
                                           stringappend_9490)) of
                                      Some (stringappend_9500,stringappend_9510) =>
                                (let stringappend_9520 =
                                     (string_drop stringappend_9490
                                        stringappend_9510) in
                                if ((case  ((size_mnemonic_matches_prefix
                                               stringappend_9520)) of
                                          Some (stringappend_9530,stringappend_9540) =>
                                    (let stringappend_9550 =
                                         (string_drop stringappend_9520
                                            stringappend_9540) in
                                    if ((case  ((spc_matches_prefix
                                                   stringappend_9550)) of
                                              Some (stringappend_9560,stringappend_9570) =>
                                        (let stringappend_9580 =
                                             (string_drop stringappend_9550
                                                stringappend_9570) in
                                        if ((case  ((reg_name_matches_prefix
                                                       stringappend_9580
                                                    :: (( 5 Word.word * ii)) option)) of
                                                  Some (stringappend_9590,stringappend_9600) =>
                                            (let stringappend_9610 =
                                                 (string_drop
                                                    stringappend_9580
                                                    stringappend_9600) in
                                            if ((case  ((sep_matches_prefix
                                                           stringappend_9610)) of
                                                      Some (stringappend_9620,stringappend_9630) =>
                                                (let stringappend_9640 =
                                                     (string_drop
                                                        stringappend_9610
                                                        stringappend_9630) in
                                                if ((case  ((reg_name_matches_prefix
                                                               stringappend_9640
                                                            :: (( 5 Word.word * ii)) option)) of
                                                          Some (stringappend_9650,stringappend_9660) =>
                                                    if(((string_drop
                                                           stringappend_9640
                                                           stringappend_9660))
                                                         = ('''')) then 
                                                    True else False
                                                      | None => False
                                                    )) then True else 
                                                False)
                                                  | None => False
                                                )) then True else False)
                                              | None => False
                                            )) then True else False)
                                          | None => False
                                        )) then True else False)
                                      | None => False
                                    )) then True else False)
                                  | None => False
                                )) then True else False)
                              | None => False
                            )) then True else False))))) then
                 (let stringappend_9460 = (string_drop stringappend_5410
                                             ((string_length (''lr.'')))) in
                 (let (aq, stringappend_9480) =
                      ((case  ((maybe_aq_matches_prefix stringappend_9460)) of
                             Some (stringappend_9470,stringappend_9480) =>
                       (stringappend_9470, stringappend_9480)
                       )) in
                 (let stringappend_9490 = (string_drop stringappend_9460
                                             stringappend_9480) in
                 (let (rl, stringappend_9510) =
                      ((case  ((maybe_rl_matches_prefix stringappend_9490)) of
                             Some (stringappend_9500,stringappend_9510) =>
                       (stringappend_9500, stringappend_9510)
                       )) in
                 (let stringappend_9520 = (string_drop stringappend_9490
                                             stringappend_9510) in
                 (let (size1, stringappend_9540) =
                      ((case  ((size_mnemonic_matches_prefix
                                  stringappend_9520)) of
                             Some (stringappend_9530,stringappend_9540) =>
                       (stringappend_9530, stringappend_9540)
                       )) in
                 (let stringappend_9550 = (string_drop stringappend_9520
                                             stringappend_9540) in
                 (case 
                 (case  ((spc_matches_prefix stringappend_9550)) of
                       Some (stringappend_9560,stringappend_9570) =>
                 (stringappend_9560, stringappend_9570)
                 ) of
                     (_, stringappend_9570) =>
                 (let stringappend_9580 = (string_drop stringappend_9550
                                             stringappend_9570) in
                 (let (rd, stringappend_9600) =
                      ((case  ((reg_name_matches_prefix stringappend_9580 :: (( 5 Word.word * ii)) option)) of
                             Some (stringappend_9590,stringappend_9600) =>
                       (stringappend_9590, stringappend_9600)
                       )) in
                 (let stringappend_9610 = (string_drop stringappend_9580
                                             stringappend_9600) in
                 (case 
                 (case  ((sep_matches_prefix stringappend_9610)) of
                       Some (stringappend_9620,stringappend_9630) =>
                 (stringappend_9620, stringappend_9630)
                 ) of
                     (_, stringappend_9630) =>
                 (let stringappend_9640 = (string_drop stringappend_9610
                                             stringappend_9630) in
                 (let (rs1, stringappend_9660) =
                      ((case  ((reg_name_matches_prefix stringappend_9640 :: (( 5 Word.word * ii)) option)) of
                             Some (stringappend_9650,stringappend_9660) =>
                       (stringappend_9650, stringappend_9660)
                       )) in
                 if(((string_drop stringappend_9640 stringappend_9660)) =
                      ('''')) then True else undefined))
                 ))))
                 )))))))) else
                 if (((((string_startswith stringappend_5410 (''sc.'')))
                         \<and>
                         ((let stringappend_9680 = (string_drop
                                                      stringappend_5410
                                                      ((string_length
                                                          (''sc.'')))) in
                          if ((case  ((maybe_aq_matches_prefix
                                         stringappend_9680)) of
                                    Some (stringappend_9690,stringappend_9700) =>
                              (let stringappend_9710 = (string_drop
                                                          stringappend_9680
                                                          stringappend_9700) in
                              if ((case  ((maybe_rl_matches_prefix
                                             stringappend_9710)) of
                                        Some (stringappend_9720,stringappend_9730) =>
                                  (let stringappend_9740 =
                                       (string_drop stringappend_9710
                                          stringappend_9730) in
                                  if ((case  ((size_mnemonic_matches_prefix
                                                 stringappend_9740)) of
                                            Some (stringappend_9750,stringappend_9760) =>
                                      (let stringappend_9770 =
                                           (string_drop stringappend_9740
                                              stringappend_9760) in
                                      if ((case  ((spc_matches_prefix
                                                     stringappend_9770)) of
                                                Some (stringappend_9780,stringappend_9790) =>
                                          (let stringappend_9800 =
                                               (string_drop stringappend_9770
                                                  stringappend_9790) in
                                          if ((case  ((reg_name_matches_prefix
                                                         stringappend_9800
                                                      :: (( 5 Word.word * ii)) option)) of
                                                    Some (stringappend_9810,stringappend_9820) =>
                                              (let stringappend_9830 =
                                                   (string_drop
                                                      stringappend_9800
                                                      stringappend_9820) in
                                              if ((case  ((sep_matches_prefix
                                                             stringappend_9830)) of
                                                        Some (stringappend_9840,stringappend_9850) =>
                                                  (let stringappend_9860 =
                                                       (string_drop
                                                          stringappend_9830
                                                          stringappend_9850) in
                                                  if ((case  ((reg_name_matches_prefix
                                                                 stringappend_9860
                                                              :: (( 5 Word.word * ii)) option)) of
                                                            Some (stringappend_9870,stringappend_9880) =>
                                                      (let stringappend_9890 =
                                                           (string_drop
                                                              stringappend_9860
                                                              stringappend_9880) in
                                                      if ((case  ((sep_matches_prefix
                                                                    stringappend_9890)) of
                                                                Some
                                                          (stringappend_9900,stringappend_9910) =>
                                                          (let stringappend_9920 =
                                                               (string_drop
                                                                  stringappend_9890
                                                                  stringappend_9910) in
                                                          if ((case  
                                                              ((reg_name_matches_prefix
                                                                  stringappend_9920
                                                               :: (( 5 Word.word * ii)) option)) of
                                                                    Some
                                                              (stringappend_9930,stringappend_9940) =>
                                                              if(((string_drop
                                                                    stringappend_9920
                                                                    stringappend_9940))
                                                                   = 
                                                                 ('''')) then
                                                                True else
                                                                False
                                                                | None => 
                                                              False
                                                              )) then 
                                                          True else False)
                                                            | None => 
                                                          False
                                                          )) then True else
                                                        False)
                                                        | None => False
                                                      )) then True else 
                                                  False)
                                                    | None => False
                                                  )) then True else False)
                                                | None => False
                                              )) then True else False)
                                            | None => False
                                          )) then True else False)
                                        | None => False
                                      )) then True else False)
                                    | None => False
                                  )) then True else False)
                                | None => False
                              )) then True else False))))) then
                   (let stringappend_9680 = (string_drop stringappend_5410
                                               ((string_length (''sc.'')))) in
                   (let (aq, stringappend_9700) =
                        ((case  ((maybe_aq_matches_prefix stringappend_9680)) of
                               Some (stringappend_9690,stringappend_9700) =>
                         (stringappend_9690, stringappend_9700)
                         )) in
                   (let stringappend_9710 = (string_drop stringappend_9680
                                               stringappend_9700) in
                   (let (rl, stringappend_9730) =
                        ((case  ((maybe_rl_matches_prefix stringappend_9710)) of
                               Some (stringappend_9720,stringappend_9730) =>
                         (stringappend_9720, stringappend_9730)
                         )) in
                   (let stringappend_9740 = (string_drop stringappend_9710
                                               stringappend_9730) in
                   (let (size1, stringappend_9760) =
                        ((case  ((size_mnemonic_matches_prefix
                                    stringappend_9740)) of
                               Some (stringappend_9750,stringappend_9760) =>
                         (stringappend_9750, stringappend_9760)
                         )) in
                   (let stringappend_9770 = (string_drop stringappend_9740
                                               stringappend_9760) in
                   (case 
                   (case  ((spc_matches_prefix stringappend_9770)) of
                         Some (stringappend_9780,stringappend_9790) =>
                   (stringappend_9780, stringappend_9790)
                   ) of
                       (_, stringappend_9790) =>
                   (let stringappend_9800 = (string_drop stringappend_9770
                                               stringappend_9790) in
                   (let (rd, stringappend_9820) =
                        ((case  ((reg_name_matches_prefix stringappend_9800 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_9810,stringappend_9820) =>
                         (stringappend_9810, stringappend_9820)
                         )) in
                   (let stringappend_9830 = (string_drop stringappend_9800
                                               stringappend_9820) in
                   (case 
                   (case  ((sep_matches_prefix stringappend_9830)) of
                         Some (stringappend_9840,stringappend_9850) =>
                   (stringappend_9840, stringappend_9850)
                   ) of
                       (_, stringappend_9850) =>
                   (let stringappend_9860 = (string_drop stringappend_9830
                                               stringappend_9850) in
                   (let (rs1, stringappend_9880) =
                        ((case  ((reg_name_matches_prefix stringappend_9860 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_9870,stringappend_9880) =>
                         (stringappend_9870, stringappend_9880)
                         )) in
                   (let stringappend_9890 = (string_drop stringappend_9860
                                               stringappend_9880) in
                   (case 
                   (case  ((sep_matches_prefix stringappend_9890)) of
                         Some (stringappend_9900,stringappend_9910) =>
                   (stringappend_9900, stringappend_9910)
                   ) of
                       (_, stringappend_9910) =>
                   (let stringappend_9920 = (string_drop stringappend_9890
                                               stringappend_9910) in
                   (let (rs2, stringappend_9940) =
                        ((case  ((reg_name_matches_prefix stringappend_9920 :: (( 5 Word.word * ii)) option)) of
                               Some (stringappend_9930,stringappend_9940) =>
                         (stringappend_9930, stringappend_9940)
                         )) in
                   if(((string_drop stringappend_9920 stringappend_9940)) =
                        ('''')) then True else undefined))
                   ))))
                   ))))
                   )))))))) else
                   if ((case  ((amo_mnemonic_matches_prefix stringappend_5410)) of
                             Some (stringappend_9960,stringappend_9970) =>
                       (let stringappend_9980 = (string_drop
                                                   stringappend_5410
                                                   stringappend_9970) in
                       if (((((string_startswith stringappend_9980 (''.'')))
                               \<and>
                               ((let stringappend_9990 = (string_drop
                                                            stringappend_9980
                                                            ((string_length
                                                                (''.'')))) in
                                if ((case  ((size_mnemonic_matches_prefix
                                               stringappend_9990)) of
                                          Some (stringappend_10000,stringappend_10010) =>
                                    (let stringappend_10020 =
                                         (string_drop stringappend_9990
                                            stringappend_10010) in
                                    if ((case  ((maybe_aq_matches_prefix
                                                   stringappend_10020)) of
                                              Some (stringappend_10030,stringappend_10040) =>
                                        (let stringappend_10050 =
                                             (string_drop stringappend_10020
                                                stringappend_10040) in
                                        if ((case  ((maybe_rl_matches_prefix
                                                       stringappend_10050)) of
                                                  Some (stringappend_10060,stringappend_10070) =>
                                            (let stringappend_10080 =
                                                 (string_drop
                                                    stringappend_10050
                                                    stringappend_10070) in
                                            if ((case  ((spc_matches_prefix
                                                           stringappend_10080)) of
                                                      Some (stringappend_10090,stringappend_10100) =>
                                                (let stringappend_10110 =
                                                     (string_drop
                                                        stringappend_10080
                                                        stringappend_10100) in
                                                if ((case  ((reg_name_matches_prefix
                                                               stringappend_10110
                                                            :: (( 5 Word.word * ii)) option)) of
                                                          Some (stringappend_10120,stringappend_10130) =>
                                                    (let stringappend_10140 =
                                                         (string_drop
                                                            stringappend_10110
                                                            stringappend_10130) in
                                                    if ((case  ((sep_matches_prefix
                                                                   stringappend_10140)) of
                                                              Some (stringappend_10150,stringappend_10160) =>
                                                        (let stringappend_10170 =
                                                             (string_drop
                                                                stringappend_10140
                                                                stringappend_10160) in
                                                        if ((case  ((
                                                                    reg_name_matches_prefix
                                                                    stringappend_10170
                                                                    :: (( 5 Word.word * ii)) option)) of
                                                                  Some (stringappend_10180,stringappend_10190) =>
                                                            (let stringappend_10200 =
                                                                 (string_drop
                                                                    stringappend_10170
                                                                    stringappend_10190) in
                                                            if ((case  
                                                                ((sep_matches_prefix
                                                                    stringappend_10200)) of
                                                                      Some
                                                                (stringappend_10210,stringappend_10220) =>
                                                                (let 
                                                                stringappend_10230 =
                                                                (string_drop
                                                                   stringappend_10200
                                                                   stringappend_10220) in
                                                                if ((case  
                                                                    (
                                                                    (
                                                                    reg_name_matches_prefix
                                                                    stringappend_10230
                                                                    :: (( 5 Word.word * ii)) option)) of
                                                                      Some
                                                                    (stringappend_10240,stringappend_10250) =>
                                                                    if
                                                                    (
                                                                    (
                                                                    (
                                                                    string_drop
                                                                    stringappend_10230
                                                                    stringappend_10250))
                                                                    = 
                                                                    ('''')) then
                                                                    True else
                                                                    False
                                                                    | None => 
                                                                    False
                                                                    )) then
                                                                  True else
                                                                  False)
                                                                  | None => 
                                                                False
                                                                )) then 
                                                            True else 
                                                            False)
                                                              | None => 
                                                            False
                                                            )) then True else
                                                          False)
                                                          | None => False
                                                        )) then True else
                                                      False)
                                                      | None => False
                                                    )) then True else 
                                                False)
                                                  | None => False
                                                )) then True else False)
                                              | None => False
                                            )) then True else False)
                                          | None => False
                                        )) then True else False)
                                      | None => False
                                    )) then True else False))))) then 
                       True else False)
                         | None => False
                       )) then
                     (let (op1, stringappend_9970) =
                          ((case  ((amo_mnemonic_matches_prefix
                                      stringappend_5410)) of
                                 Some (stringappend_9960,stringappend_9970) =>
                           (stringappend_9960, stringappend_9970)
                           )) in
                     (let stringappend_9980 = (string_drop stringappend_5410
                                                 stringappend_9970) in
                     (let stringappend_9990 = (string_drop stringappend_9980
                                                 ((string_length (''.'')))) in
                     (let (width, stringappend_10010) =
                          ((case  ((size_mnemonic_matches_prefix
                                      stringappend_9990)) of
                                 Some (stringappend_10000,stringappend_10010) =>
                           (stringappend_10000, stringappend_10010)
                           )) in
                     (let stringappend_10020 = (string_drop stringappend_9990
                                                  stringappend_10010) in
                     (let (aq, stringappend_10040) =
                          ((case  ((maybe_aq_matches_prefix
                                      stringappend_10020)) of
                                 Some (stringappend_10030,stringappend_10040) =>
                           (stringappend_10030, stringappend_10040)
                           )) in
                     (let stringappend_10050 = (string_drop
                                                  stringappend_10020
                                                  stringappend_10040) in
                     (let (rl, stringappend_10070) =
                          ((case  ((maybe_rl_matches_prefix
                                      stringappend_10050)) of
                                 Some (stringappend_10060,stringappend_10070) =>
                           (stringappend_10060, stringappend_10070)
                           )) in
                     (let stringappend_10080 = (string_drop
                                                  stringappend_10050
                                                  stringappend_10070) in
                     (case 
                     (case  ((spc_matches_prefix stringappend_10080)) of
                           Some (stringappend_10090,stringappend_10100) =>
                     (stringappend_10090, stringappend_10100)
                     ) of
                         (_, stringappend_10100) =>
                     (let stringappend_10110 = (string_drop
                                                  stringappend_10080
                                                  stringappend_10100) in
                     (let (rd, stringappend_10130) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_10110 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_10120,stringappend_10130) =>
                           (stringappend_10120, stringappend_10130)
                           )) in
                     (let stringappend_10140 = (string_drop
                                                  stringappend_10110
                                                  stringappend_10130) in
                     (case 
                     (case  ((sep_matches_prefix stringappend_10140)) of
                           Some (stringappend_10150,stringappend_10160) =>
                     (stringappend_10150, stringappend_10160)
                     ) of
                         (_, stringappend_10160) =>
                     (let stringappend_10170 = (string_drop
                                                  stringappend_10140
                                                  stringappend_10160) in
                     (let (rs1, stringappend_10190) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_10170 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_10180,stringappend_10190) =>
                           (stringappend_10180, stringappend_10190)
                           )) in
                     (let stringappend_10200 = (string_drop
                                                  stringappend_10170
                                                  stringappend_10190) in
                     (case 
                     (case  ((sep_matches_prefix stringappend_10200)) of
                           Some (stringappend_10210,stringappend_10220) =>
                     (stringappend_10210, stringappend_10220)
                     ) of
                         (_, stringappend_10220) =>
                     (let stringappend_10230 = (string_drop
                                                  stringappend_10200
                                                  stringappend_10220) in
                     (let (rs2, stringappend_10250) =
                          ((case  ((reg_name_matches_prefix
                                      stringappend_10230 :: (( 5 Word.word * ii)) option)) of
                                 Some (stringappend_10240,stringappend_10250) =>
                           (stringappend_10240, stringappend_10250)
                           )) in
                     if(((string_drop stringappend_10230 stringappend_10250))
                          = ('''')) then True else undefined))
                     ))))
                     ))))
                     )))))))))) else
                     if ((case  ((csr_mnemonic_matches_prefix
                                    stringappend_5410)) of
                               Some (stringappend_10270,stringappend_10280) =>
                         (let stringappend_10290 = (string_drop
                                                      stringappend_5410
                                                      stringappend_10280) in
                         if (((((string_startswith stringappend_10290 (''i'')))
                                 \<and>
                                 ((let stringappend_10300 = (string_drop
                                                               stringappend_10290
                                                               ((string_length
                                                                   (''i'')))) in
                                  if ((case  ((spc_matches_prefix
                                                 stringappend_10300)) of
                                            Some (stringappend_10310,stringappend_10320) =>
                                      (let stringappend_10330 =
                                           (string_drop stringappend_10300
                                              stringappend_10320) in
                                      if ((case  ((reg_name_matches_prefix
                                                     stringappend_10330
                                                  :: (( 5 Word.word * ii)) option)) of
                                                Some (stringappend_10340,stringappend_10350) =>
                                          (let stringappend_10360 =
                                               (string_drop
                                                  stringappend_10330
                                                  stringappend_10350) in
                                          if ((case  ((sep_matches_prefix
                                                         stringappend_10360)) of
                                                    Some (stringappend_10370,stringappend_10380) =>
                                              (let stringappend_10390 =
                                                   (string_drop
                                                      stringappend_10360
                                                      stringappend_10380) in
                                              if ((case  ((hex_bits_5_matches_prefix
                                                             instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                             stringappend_10390
                                                          :: (( 5 Word.word * ii)) option)) of
                                                        Some (stringappend_10400,stringappend_10410) =>
                                                  (let stringappend_10420 =
                                                       (string_drop
                                                          stringappend_10390
                                                          stringappend_10410) in
                                                  if ((case  ((sep_matches_prefix
                                                                 stringappend_10420)) of
                                                            Some (stringappend_10430,stringappend_10440) =>
                                                      (let stringappend_10450 =
                                                           (string_drop
                                                              stringappend_10420
                                                              stringappend_10440) in
                                                      if ((case  ((csr_name_map_matches_prefix
                                                                    stringappend_10450
                                                                  :: (( 12 Word.word * ii)) option)) of
                                                                Some (stringappend_10460,stringappend_10470) =>
                                                          if(((string_drop
                                                                 stringappend_10450
                                                                 stringappend_10470))
                                                               = ('''')) then
                                                            True else 
                                                          False
                                                            | None => 
                                                          False
                                                          )) then True else
                                                        False)
                                                        | None => False
                                                      )) then True else 
                                                  False)
                                                    | None => False
                                                  )) then True else False)
                                                | None => False
                                              )) then True else False)
                                            | None => False
                                          )) then True else False)
                                        | None => False
                                      )) then True else False))))) then 
                         True else False)
                           | None => False
                         )) then
                       (let (op1, stringappend_10280) =
                            ((case  ((csr_mnemonic_matches_prefix
                                        stringappend_5410)) of
                                   Some (stringappend_10270,stringappend_10280) =>
                             (stringappend_10270, stringappend_10280)
                             )) in
                       (let stringappend_10290 = (string_drop
                                                    stringappend_5410
                                                    stringappend_10280) in
                       (let stringappend_10300 = (string_drop
                                                    stringappend_10290
                                                    ((string_length (''i'')))) in
                       (case 
                       (case  ((spc_matches_prefix stringappend_10300)) of
                             Some (stringappend_10310,stringappend_10320) =>
                       (stringappend_10310, stringappend_10320)
                       ) of
                           (_, stringappend_10320) =>
                       (let stringappend_10330 = (string_drop
                                                    stringappend_10300
                                                    stringappend_10320) in
                       (let (rd, stringappend_10350) =
                            ((case  ((reg_name_matches_prefix
                                        stringappend_10330 :: (( 5 Word.word * ii)) option)) of
                                   Some (stringappend_10340,stringappend_10350) =>
                             (stringappend_10340, stringappend_10350)
                             )) in
                       (let stringappend_10360 = (string_drop
                                                    stringappend_10330
                                                    stringappend_10350) in
                       (case 
                       (case  ((sep_matches_prefix stringappend_10360)) of
                             Some (stringappend_10370,stringappend_10380) =>
                       (stringappend_10370, stringappend_10380)
                       ) of
                           (_, stringappend_10380) =>
                       (let stringappend_10390 = (string_drop
                                                    stringappend_10360
                                                    stringappend_10380) in
                       (let (rs1, stringappend_10410) =
                            ((case  ((hex_bits_5_matches_prefix
                                        instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                        stringappend_10390 :: (( 5 Word.word * ii)) option)) of
                                   Some (stringappend_10400,stringappend_10410) =>
                             (stringappend_10400, stringappend_10410)
                             )) in
                       (let stringappend_10420 = (string_drop
                                                    stringappend_10390
                                                    stringappend_10410) in
                       (case 
                       (case  ((sep_matches_prefix stringappend_10420)) of
                             Some (stringappend_10430,stringappend_10440) =>
                       (stringappend_10430, stringappend_10440)
                       ) of
                           (_, stringappend_10440) =>
                       (let stringappend_10450 = (string_drop
                                                    stringappend_10420
                                                    stringappend_10440) in
                       (let (csr, stringappend_10470) =
                            ((case  ((csr_name_map_matches_prefix
                                        stringappend_10450 :: (( 12 Word.word * ii)) option)) of
                                   Some (stringappend_10460,stringappend_10470) =>
                             (stringappend_10460, stringappend_10470)
                             )) in
                       if(((string_drop stringappend_10450 stringappend_10470))
                            = ('''')) then True else undefined))
                       ))))
                       ))))
                       )))) else
                       if ((case  ((csr_mnemonic_matches_prefix
                                      stringappend_5410)) of
                                 Some (stringappend_10490,stringappend_10500) =>
                           (let stringappend_10510 = (string_drop
                                                        stringappend_5410
                                                        stringappend_10500) in
                           if ((case  ((spc_matches_prefix stringappend_10510)) of
                                     Some (stringappend_10520,stringappend_10530) =>
                               (let stringappend_10540 = (string_drop
                                                            stringappend_10510
                                                            stringappend_10530) in
                               if ((case  ((reg_name_matches_prefix
                                              stringappend_10540
                                           :: (( 5 Word.word * ii)) option)) of
                                         Some (stringappend_10550,stringappend_10560) =>
                                   (let stringappend_10570 = (string_drop
                                                                stringappend_10540
                                                                stringappend_10560) in
                                   if ((case  ((sep_matches_prefix
                                                  stringappend_10570)) of
                                             Some (stringappend_10580,stringappend_10590) =>
                                       (let stringappend_10600 =
                                            (string_drop stringappend_10570
                                               stringappend_10590) in
                                       if ((case  ((reg_name_matches_prefix
                                                      stringappend_10600
                                                   :: (( 5 Word.word * ii)) option)) of
                                                 Some (stringappend_10610,stringappend_10620) =>
                                           (let stringappend_10630 =
                                                (string_drop
                                                   stringappend_10600
                                                   stringappend_10620) in
                                           if ((case  ((sep_matches_prefix
                                                          stringappend_10630)) of
                                                     Some (stringappend_10640,stringappend_10650) =>
                                               (let stringappend_10660 =
                                                    (string_drop
                                                       stringappend_10630
                                                       stringappend_10650) in
                                               if ((case  ((csr_name_map_matches_prefix
                                                              stringappend_10660
                                                           :: (( 12 Word.word * ii)) option)) of
                                                         Some (stringappend_10670,stringappend_10680) =>
                                                   if(((string_drop
                                                          stringappend_10660
                                                          stringappend_10680))
                                                        = ('''')) then 
                                                   True else False
                                                     | None => False
                                                   )) then True else 
                                               False)
                                                 | None => False
                                               )) then True else False)
                                             | None => False
                                           )) then True else False)
                                         | None => False
                                       )) then True else False)
                                     | None => False
                                   )) then True else False)
                                 | None => False
                               )) then True else False)
                             | None => False
                           )) then
                         (let (op1, stringappend_10500) =
                              ((case  ((csr_mnemonic_matches_prefix
                                          stringappend_5410)) of
                                     Some (stringappend_10490,stringappend_10500) =>
                               (stringappend_10490, stringappend_10500)
                               )) in
                         (let stringappend_10510 = (string_drop
                                                      stringappend_5410
                                                      stringappend_10500) in
                         (case 
                         (case  ((spc_matches_prefix stringappend_10510)) of
                               Some (stringappend_10520,stringappend_10530) =>
                         (stringappend_10520, stringappend_10530)
                         ) of
                             (_, stringappend_10530) =>
                         (let stringappend_10540 = (string_drop
                                                      stringappend_10510
                                                      stringappend_10530) in
                         (let (rd, stringappend_10560) =
                              ((case  ((reg_name_matches_prefix
                                          stringappend_10540 :: (( 5 Word.word * ii)) option)) of
                                     Some (stringappend_10550,stringappend_10560) =>
                               (stringappend_10550, stringappend_10560)
                               )) in
                         (let stringappend_10570 = (string_drop
                                                      stringappend_10540
                                                      stringappend_10560) in
                         (case 
                         (case  ((sep_matches_prefix stringappend_10570)) of
                               Some (stringappend_10580,stringappend_10590) =>
                         (stringappend_10580, stringappend_10590)
                         ) of
                             (_, stringappend_10590) =>
                         (let stringappend_10600 = (string_drop
                                                      stringappend_10570
                                                      stringappend_10590) in
                         (let (rs1, stringappend_10620) =
                              ((case  ((reg_name_matches_prefix
                                          stringappend_10600 :: (( 5 Word.word * ii)) option)) of
                                     Some (stringappend_10610,stringappend_10620) =>
                               (stringappend_10610, stringappend_10620)
                               )) in
                         (let stringappend_10630 = (string_drop
                                                      stringappend_10600
                                                      stringappend_10620) in
                         (case 
                         (case  ((sep_matches_prefix stringappend_10630)) of
                               Some (stringappend_10640,stringappend_10650) =>
                         (stringappend_10640, stringappend_10650)
                         ) of
                             (_, stringappend_10650) =>
                         (let stringappend_10660 = (string_drop
                                                      stringappend_10630
                                                      stringappend_10650) in
                         (let (csr, stringappend_10680) =
                              ((case  ((csr_name_map_matches_prefix
                                          stringappend_10660 :: (( 12 Word.word * ii)) option)) of
                                     Some (stringappend_10670,stringappend_10680) =>
                               (stringappend_10670, stringappend_10680)
                               )) in
                         if(((string_drop stringappend_10660
                                stringappend_10680)) = ('''')) then True else
                           undefined))
                         ))))
                         ))))
                         ))) else
                         if (((((string_startswith stringappend_5410
                                   (''illegal''))) \<and>
                                 ((let stringappend_10700 =
                                       (string_drop stringappend_5410
                                          ((string_length (''illegal'')))) in
                                  if ((case  ((spc_matches_prefix
                                                 stringappend_10700)) of
                                            Some (stringappend_10710,stringappend_10720) =>
                                      (let stringappend_10730 =
                                           (string_drop stringappend_10700
                                              stringappend_10720) in
                                      if ((case  ((hex_bits_32_matches_prefix
                                                     instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                     stringappend_10730
                                                  :: (( 32 Word.word * ii)) option)) of
                                                Some (stringappend_10740,stringappend_10750) =>
                                          if(((string_drop stringappend_10730
                                                 stringappend_10750)) =
                                               ('''')) then True else 
                                          False
                                            | None => False
                                          )) then True else False)
                                        | None => False
                                      )) then True else False))))) then
                           (let stringappend_10700 = (string_drop
                                                        stringappend_5410
                                                        ((string_length
                                                            (''illegal'')))) in
                           (case 
                           (case  ((spc_matches_prefix stringappend_10700)) of
                                 Some (stringappend_10710,stringappend_10720) =>
                           (stringappend_10710, stringappend_10720)
                           ) of
                               (_, stringappend_10720) =>
                           (let stringappend_10730 = (string_drop
                                                        stringappend_10700
                                                        stringappend_10720) in
                           (let (s, stringappend_10750) =
                                ((case  ((hex_bits_32_matches_prefix
                                            instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                            stringappend_10730 :: (( 32 Word.word * ii)) option)) of
                                       Some (stringappend_10740,stringappend_10750) =>
                                 (stringappend_10740, stringappend_10750)
                                 )) in
                           if(((string_drop stringappend_10730
                                  stringappend_10750)) = ('''')) then 
                           True else undefined))
                           )) else False))))))))"


(*val assembly_matches_prefix : string -> maybe ((ast * ii))*)

definition assembly_matches_prefix  :: " string \<Rightarrow>(ast*int)option "  where 
     " assembly_matches_prefix arg0 = (
   (let stringappend_00 = arg0 in
   if ((case  ((utype_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_10,stringappend_20) =>
        (let stringappend_30 = (string_drop stringappend_00 stringappend_20) in
        if ((case  ((spc_matches_prefix stringappend_30)) of
            Some (stringappend_40,stringappend_50) =>
             (let stringappend_60 = (string_drop stringappend_30 stringappend_50) in
             if ((case  ((reg_name_matches_prefix stringappend_60  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_70,stringappend_80) =>
                  (let stringappend_90 = (string_drop stringappend_60 stringappend_80) in
                  if ((case  ((sep_matches_prefix stringappend_90)) of
                      Some (stringappend_100,stringappend_110) =>
                       (let stringappend_120 = (string_drop stringappend_90 stringappend_110) in
                       if ((case  ((hex_bits_20_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_120
                                    ::  (( 20 Word.word * ii))option)) of
                           Some (stringappend_130,stringappend_140) => 
  (case  ((string_drop stringappend_120 stringappend_140)) of   s0 => True )
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_20) =
       ((case  ((utype_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_10,stringappend_20) => (stringappend_10, stringappend_20)
       )) in
     (let stringappend_30 = (string_drop stringappend_00 stringappend_20) in  
  (case 
  (case  ((spc_matches_prefix stringappend_30)) of
        Some (stringappend_40,stringappend_50) => (stringappend_40, stringappend_50)
  ) of
      (_, stringappend_50) =>
  (let stringappend_60 = (string_drop stringappend_30 stringappend_50) in
  (let (rd, stringappend_80) =
       ((case  ((reg_name_matches_prefix stringappend_60 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_70,stringappend_80) => (stringappend_70, stringappend_80)
        )) in
  (let stringappend_90 = (string_drop stringappend_60 stringappend_80) in
  (case 
  (case  ((sep_matches_prefix stringappend_90)) of
        Some (stringappend_100,stringappend_110) => (stringappend_100, stringappend_110)
  ) of
      (_, stringappend_110) =>
  (let stringappend_120 = (string_drop stringappend_90 stringappend_110) in
  (let (imm, stringappend_140) =
       ((case  ((hex_bits_20_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_120 :: (( 20 Word.word * ii)) option)) of
              Some (stringappend_130,stringappend_140) => (stringappend_130, stringappend_140)
        )) in
  (case  ((string_drop stringappend_120 stringappend_140)) of
        s0 => Some
                (UTYPE (imm,rd,op1), ((string_length arg0)) -
                                       ((string_length s0)))
  )))
  ))))
  )))
   else if (((((string_startswith stringappend_00 (''jal''))) \<and> ((let stringappend_160 = (string_drop stringappend_00 ((string_length (''jal'')))) in
               if ((case  ((spc_matches_prefix stringappend_160)) of
                   Some (stringappend_170,stringappend_180) =>
                    (let stringappend_190 = (string_drop stringappend_160 stringappend_180) in
                    if ((case  ((reg_name_matches_prefix stringappend_190
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_200,stringappend_210) =>
                         (let stringappend_220 = (string_drop stringappend_190 stringappend_210) in
                         if ((case  ((sep_matches_prefix stringappend_220)) of
                             Some (stringappend_230,stringappend_240) =>
                              (let stringappend_250 =
                                (string_drop stringappend_220 stringappend_240) in
                              if ((case  ((hex_bits_21_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_250
                                           ::  (( 21 Word.word * ii))option)) of
                                  Some (stringappend_260,stringappend_270) => 
  (case  ((string_drop stringappend_250 stringappend_270)) of   s0 => True )
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_160 = (string_drop stringappend_00 ((string_length (''jal'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_160)) of
        Some (stringappend_170,stringappend_180) => (stringappend_170, stringappend_180)
  ) of
      (_, stringappend_180) =>
  (let stringappend_190 = (string_drop stringappend_160 stringappend_180) in
  (let (rd, stringappend_210) =
       ((case  ((reg_name_matches_prefix stringappend_190 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_200,stringappend_210) => (stringappend_200, stringappend_210)
        )) in
  (let stringappend_220 = (string_drop stringappend_190 stringappend_210) in
  (case 
  (case  ((sep_matches_prefix stringappend_220)) of
        Some (stringappend_230,stringappend_240) => (stringappend_230, stringappend_240)
  ) of
      (_, stringappend_240) =>
  (let stringappend_250 = (string_drop stringappend_220 stringappend_240) in
  (let (imm, stringappend_270) =
       ((case  ((hex_bits_21_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_250 :: (( 21 Word.word * ii)) option)) of
              Some (stringappend_260,stringappend_270) => (stringappend_260, stringappend_270)
        )) in
  (case  ((string_drop stringappend_250 stringappend_270)) of
        s0 => Some
                (RISCV_JAL (imm,rd), ((string_length arg0)) -
                                       ((string_length s0)))
  )))
  ))))
  ))
   else if (((((string_startswith stringappend_00 (''jalr''))) \<and> ((let stringappend_290 = (string_drop stringappend_00 ((string_length (''jalr'')))) in
               if ((case  ((spc_matches_prefix stringappend_290)) of
                   Some (stringappend_300,stringappend_310) =>
                    (let stringappend_320 = (string_drop stringappend_290 stringappend_310) in
                    if ((case  ((reg_name_matches_prefix stringappend_320
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_330,stringappend_340) =>
                         (let stringappend_350 = (string_drop stringappend_320 stringappend_340) in
                         if ((case  ((sep_matches_prefix stringappend_350)) of
                             Some (stringappend_360,stringappend_370) =>
                              (let stringappend_380 =
                                (string_drop stringappend_350 stringappend_370) in
                              if ((case  ((reg_name_matches_prefix stringappend_380
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_390,stringappend_400) =>
                                   (let stringappend_410 =
                                     (string_drop stringappend_380 stringappend_400) in
                                   if ((case  ((sep_matches_prefix stringappend_410)) of
                                       Some (stringappend_420,stringappend_430) =>
                                        (let stringappend_440 =
                                          (string_drop stringappend_410 stringappend_430) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_440
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_450,stringappend_460) => 
  (case  ((string_drop stringappend_440 stringappend_460)) of   s0 => True )
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_290 = (string_drop stringappend_00 ((string_length (''jalr'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_290)) of
        Some (stringappend_300,stringappend_310) => (stringappend_300, stringappend_310)
  ) of
      (_, stringappend_310) =>
  (let stringappend_320 = (string_drop stringappend_290 stringappend_310) in
  (let (rd, stringappend_340) =
       ((case  ((reg_name_matches_prefix stringappend_320 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_330,stringappend_340) => (stringappend_330, stringappend_340)
        )) in
  (let stringappend_350 = (string_drop stringappend_320 stringappend_340) in
  (case 
  (case  ((sep_matches_prefix stringappend_350)) of
        Some (stringappend_360,stringappend_370) => (stringappend_360, stringappend_370)
  ) of
      (_, stringappend_370) =>
  (let stringappend_380 = (string_drop stringappend_350 stringappend_370) in
  (let (rs1, stringappend_400) =
       ((case  ((reg_name_matches_prefix stringappend_380 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_390,stringappend_400) => (stringappend_390, stringappend_400)
        )) in
  (let stringappend_410 = (string_drop stringappend_380 stringappend_400) in
  (case 
  (case  ((sep_matches_prefix stringappend_410)) of
        Some (stringappend_420,stringappend_430) => (stringappend_420, stringappend_430)
  ) of
      (_, stringappend_430) =>
  (let stringappend_440 = (string_drop stringappend_410 stringappend_430) in
  (let (imm, stringappend_460) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_440 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_450,stringappend_460) => (stringappend_450, stringappend_460)
        )) in
  (case  ((string_drop stringappend_440 stringappend_460)) of
        s0 =>
  Some
    (RISCV_JALR (imm,rs1,rd), ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))
   else if ((case  ((btype_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_480,stringappend_490) =>
        (let stringappend_500 = (string_drop stringappend_00 stringappend_490) in
        if ((case  ((spc_matches_prefix stringappend_500)) of
            Some (stringappend_510,stringappend_520) =>
             (let stringappend_530 = (string_drop stringappend_500 stringappend_520) in
             if ((case  ((reg_name_matches_prefix stringappend_530  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_540,stringappend_550) =>
                  (let stringappend_560 = (string_drop stringappend_530 stringappend_550) in
                  if ((case  ((sep_matches_prefix stringappend_560)) of
                      Some (stringappend_570,stringappend_580) =>
                       (let stringappend_590 = (string_drop stringappend_560 stringappend_580) in
                       if ((case  ((reg_name_matches_prefix stringappend_590
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_600,stringappend_610) =>
                            (let stringappend_620 = (string_drop stringappend_590 stringappend_610) in
                            if ((case  ((sep_matches_prefix stringappend_620)) of
                                Some (stringappend_630,stringappend_640) =>
                                 (let stringappend_650 =
                                   (string_drop stringappend_620 stringappend_640) in
                                 if ((case  ((hex_bits_13_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_650
                                              ::  (( 13 Word.word * ii))option)) of
                                     Some (stringappend_660,stringappend_670) => 
  (case  ((string_drop stringappend_650 stringappend_670)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_490) =
       ((case  ((btype_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_480,stringappend_490) => (stringappend_480, stringappend_490)
       )) in
     (let stringappend_500 = (string_drop stringappend_00 stringappend_490) in  
  (case 
  (case  ((spc_matches_prefix stringappend_500)) of
        Some (stringappend_510,stringappend_520) => (stringappend_510, stringappend_520)
  ) of
      (_, stringappend_520) =>
  (let stringappend_530 = (string_drop stringappend_500 stringappend_520) in
  (let (rs1, stringappend_550) =
       ((case  ((reg_name_matches_prefix stringappend_530 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_540,stringappend_550) => (stringappend_540, stringappend_550)
        )) in
  (let stringappend_560 = (string_drop stringappend_530 stringappend_550) in
  (case 
  (case  ((sep_matches_prefix stringappend_560)) of
        Some (stringappend_570,stringappend_580) => (stringappend_570, stringappend_580)
  ) of
      (_, stringappend_580) =>
  (let stringappend_590 = (string_drop stringappend_560 stringappend_580) in
  (let (rs2, stringappend_610) =
       ((case  ((reg_name_matches_prefix stringappend_590 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_600,stringappend_610) => (stringappend_600, stringappend_610)
        )) in
  (let stringappend_620 = (string_drop stringappend_590 stringappend_610) in
  (case 
  (case  ((sep_matches_prefix stringappend_620)) of
        Some (stringappend_630,stringappend_640) => (stringappend_630, stringappend_640)
  ) of
      (_, stringappend_640) =>
  (let stringappend_650 = (string_drop stringappend_620 stringappend_640) in
  (let (imm, stringappend_670) =
       ((case  ((hex_bits_13_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_650 :: (( 13 Word.word * ii)) option)) of
              Some (stringappend_660,stringappend_670) => (stringappend_660, stringappend_670)
        )) in
  (case  ((string_drop stringappend_650 stringappend_670)) of
        s0 => Some
                (BTYPE (imm,rs2,rs1,op1), ((string_length arg0)) -
                                            ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if ((case  ((itype_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_690,stringappend_700) =>
        (let stringappend_710 = (string_drop stringappend_00 stringappend_700) in
        if ((case  ((spc_matches_prefix stringappend_710)) of
            Some (stringappend_720,stringappend_730) =>
             (let stringappend_740 = (string_drop stringappend_710 stringappend_730) in
             if ((case  ((reg_name_matches_prefix stringappend_740  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_750,stringappend_760) =>
                  (let stringappend_770 = (string_drop stringappend_740 stringappend_760) in
                  if ((case  ((sep_matches_prefix stringappend_770)) of
                      Some (stringappend_780,stringappend_790) =>
                       (let stringappend_800 = (string_drop stringappend_770 stringappend_790) in
                       if ((case  ((reg_name_matches_prefix stringappend_800
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_810,stringappend_820) =>
                            (let stringappend_830 = (string_drop stringappend_800 stringappend_820) in
                            if ((case  ((sep_matches_prefix stringappend_830)) of
                                Some (stringappend_840,stringappend_850) =>
                                 (let stringappend_860 =
                                   (string_drop stringappend_830 stringappend_850) in
                                 if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_860
                                              ::  (( 12 Word.word * ii))option)) of
                                     Some (stringappend_870,stringappend_880) => 
  (case  ((string_drop stringappend_860 stringappend_880)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_700) =
       ((case  ((itype_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_690,stringappend_700) => (stringappend_690, stringappend_700)
       )) in
     (let stringappend_710 = (string_drop stringappend_00 stringappend_700) in  
  (case 
  (case  ((spc_matches_prefix stringappend_710)) of
        Some (stringappend_720,stringappend_730) => (stringappend_720, stringappend_730)
  ) of
      (_, stringappend_730) =>
  (let stringappend_740 = (string_drop stringappend_710 stringappend_730) in
  (let (rd, stringappend_760) =
       ((case  ((reg_name_matches_prefix stringappend_740 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_750,stringappend_760) => (stringappend_750, stringappend_760)
        )) in
  (let stringappend_770 = (string_drop stringappend_740 stringappend_760) in
  (case 
  (case  ((sep_matches_prefix stringappend_770)) of
        Some (stringappend_780,stringappend_790) => (stringappend_780, stringappend_790)
  ) of
      (_, stringappend_790) =>
  (let stringappend_800 = (string_drop stringappend_770 stringappend_790) in
  (let (rs1, stringappend_820) =
       ((case  ((reg_name_matches_prefix stringappend_800 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_810,stringappend_820) => (stringappend_810, stringappend_820)
        )) in
  (let stringappend_830 = (string_drop stringappend_800 stringappend_820) in
  (case 
  (case  ((sep_matches_prefix stringappend_830)) of
        Some (stringappend_840,stringappend_850) => (stringappend_840, stringappend_850)
  ) of
      (_, stringappend_850) =>
  (let stringappend_860 = (string_drop stringappend_830 stringappend_850) in
  (let (imm, stringappend_880) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_860 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_870,stringappend_880) => (stringappend_870, stringappend_880)
        )) in
  (case  ((string_drop stringappend_860 stringappend_880)) of
        s0 => Some
                (ITYPE (imm,rs1,rd,op1), ((string_length arg0)) -
                                           ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if ((case  ((shiftiop_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_900,stringappend_910) =>
        (let stringappend_920 = (string_drop stringappend_00 stringappend_910) in
        if ((case  ((spc_matches_prefix stringappend_920)) of
            Some (stringappend_930,stringappend_940) =>
             (let stringappend_950 = (string_drop stringappend_920 stringappend_940) in
             if ((case  ((reg_name_matches_prefix stringappend_950  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_960,stringappend_970) =>
                  (let stringappend_980 = (string_drop stringappend_950 stringappend_970) in
                  if ((case  ((sep_matches_prefix stringappend_980)) of
                      Some (stringappend_990,stringappend_1000) =>
                       (let stringappend_1010 = (string_drop stringappend_980 stringappend_1000) in
                       if ((case  ((reg_name_matches_prefix stringappend_1010
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_1020,stringappend_1030) =>
                            (let stringappend_1040 =
                              (string_drop stringappend_1010 stringappend_1030) in
                            if ((case  ((hex_bits_6_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_1040
                                         ::  (( 6 Word.word * ii))option)) of
                                Some (stringappend_1050,stringappend_1060) => 
  (case  ((string_drop stringappend_1040 stringappend_1060)) of   s0 => True )
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_910) =
       ((case  ((shiftiop_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_900,stringappend_910) => (stringappend_900, stringappend_910)
       )) in
     (let stringappend_920 = (string_drop stringappend_00 stringappend_910) in  
  (case 
  (case  ((spc_matches_prefix stringappend_920)) of
        Some (stringappend_930,stringappend_940) => (stringappend_930, stringappend_940)
  ) of
      (_, stringappend_940) =>
  (let stringappend_950 = (string_drop stringappend_920 stringappend_940) in
  (let (rd, stringappend_970) =
       ((case  ((reg_name_matches_prefix stringappend_950 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_960,stringappend_970) => (stringappend_960, stringappend_970)
        )) in
  (let stringappend_980 = (string_drop stringappend_950 stringappend_970) in
  (case 
  (case  ((sep_matches_prefix stringappend_980)) of
        Some (stringappend_990,stringappend_1000) => (stringappend_990, stringappend_1000)
  ) of
      (_, stringappend_1000) =>
  (let stringappend_1010 = (string_drop stringappend_980 stringappend_1000) in
  (let (rs1, stringappend_1030) =
       ((case  ((reg_name_matches_prefix stringappend_1010 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1020,stringappend_1030) => (stringappend_1020, stringappend_1030)
        )) in
  (let stringappend_1040 = (string_drop stringappend_1010 stringappend_1030) in
  (let (shamt, stringappend_1060) =
       ((case  ((hex_bits_6_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_1040 :: (( 6 Word.word * ii)) option)) of
              Some (stringappend_1050,stringappend_1060) => (stringappend_1050, stringappend_1060)
        )) in
  (case  ((string_drop stringappend_1040 stringappend_1060)) of
        s0 =>
  Some
    (SHIFTIOP (shamt,rs1,rd,op1), ((string_length arg0)) -
                                    ((string_length s0)))
  )))))
  ))))
  )))
   else if ((case  ((rtype_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_1080,stringappend_1090) =>
        (let stringappend_1100 = (string_drop stringappend_00 stringappend_1090) in
        if ((case  ((spc_matches_prefix stringappend_1100)) of
            Some (stringappend_1110,stringappend_1120) =>
             (let stringappend_1130 = (string_drop stringappend_1100 stringappend_1120) in
             if ((case  ((reg_name_matches_prefix stringappend_1130  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_1140,stringappend_1150) =>
                  (let stringappend_1160 = (string_drop stringappend_1130 stringappend_1150) in
                  if ((case  ((sep_matches_prefix stringappend_1160)) of
                      Some (stringappend_1170,stringappend_1180) =>
                       (let stringappend_1190 = (string_drop stringappend_1160 stringappend_1180) in
                       if ((case  ((reg_name_matches_prefix stringappend_1190
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_1200,stringappend_1210) =>
                            (let stringappend_1220 =
                              (string_drop stringappend_1190 stringappend_1210) in
                            if ((case  ((sep_matches_prefix stringappend_1220)) of
                                Some (stringappend_1230,stringappend_1240) =>
                                 (let stringappend_1250 =
                                   (string_drop stringappend_1220 stringappend_1240) in
                                 if ((case  ((reg_name_matches_prefix stringappend_1250
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_1260,stringappend_1270) => 
  (case  ((string_drop stringappend_1250 stringappend_1270)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_1090) =
       ((case  ((rtype_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_1080,stringappend_1090) => (stringappend_1080, stringappend_1090)
       )) in
     (let stringappend_1100 = (string_drop stringappend_00 stringappend_1090) in  
  (case 
  (case  ((spc_matches_prefix stringappend_1100)) of
        Some (stringappend_1110,stringappend_1120) => (stringappend_1110, stringappend_1120)
  ) of
      (_, stringappend_1120) =>
  (let stringappend_1130 = (string_drop stringappend_1100 stringappend_1120) in
  (let (rd, stringappend_1150) =
       ((case  ((reg_name_matches_prefix stringappend_1130 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1140,stringappend_1150) => (stringappend_1140, stringappend_1150)
        )) in
  (let stringappend_1160 = (string_drop stringappend_1130 stringappend_1150) in
  (case 
  (case  ((sep_matches_prefix stringappend_1160)) of
        Some (stringappend_1170,stringappend_1180) => (stringappend_1170, stringappend_1180)
  ) of
      (_, stringappend_1180) =>
  (let stringappend_1190 = (string_drop stringappend_1160 stringappend_1180) in
  (let (rs1, stringappend_1210) =
       ((case  ((reg_name_matches_prefix stringappend_1190 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1200,stringappend_1210) => (stringappend_1200, stringappend_1210)
        )) in
  (let stringappend_1220 = (string_drop stringappend_1190 stringappend_1210) in
  (case 
  (case  ((sep_matches_prefix stringappend_1220)) of
        Some (stringappend_1230,stringappend_1240) => (stringappend_1230, stringappend_1240)
  ) of
      (_, stringappend_1240) =>
  (let stringappend_1250 = (string_drop stringappend_1220 stringappend_1240) in
  (let (rs2, stringappend_1270) =
       ((case  ((reg_name_matches_prefix stringappend_1250 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1260,stringappend_1270) => (stringappend_1260, stringappend_1270)
        )) in
  (case  ((string_drop stringappend_1250 stringappend_1270)) of
        s0 => Some
                (RTYPE (rs2,rs1,rd,op1), ((string_length arg0)) -
                                           ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_00 (''l''))) \<and> ((let stringappend_1290 = (string_drop stringappend_00 ((string_length (''l'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_1290)) of
                   Some (stringappend_1300,stringappend_1310) =>
                    (let stringappend_1320 = (string_drop stringappend_1290 stringappend_1310) in
                    if ((case  ((maybe_u_matches_prefix stringappend_1320)) of
                        Some (stringappend_1330,stringappend_1340) =>
                         (let stringappend_1350 = (string_drop stringappend_1320 stringappend_1340) in
                         if ((case  ((maybe_aq_matches_prefix stringappend_1350)) of
                             Some (stringappend_1360,stringappend_1370) =>
                              (let stringappend_1380 =
                                (string_drop stringappend_1350 stringappend_1370) in
                              if ((case  ((maybe_rl_matches_prefix stringappend_1380)) of
                                  Some (stringappend_1390,stringappend_1400) =>
                                   (let stringappend_1410 =
                                     (string_drop stringappend_1380 stringappend_1400) in
                                   if ((case  ((spc_matches_prefix stringappend_1410)) of
                                       Some (stringappend_1420,stringappend_1430) =>
                                        (let stringappend_1440 =
                                          (string_drop stringappend_1410 stringappend_1430) in
                                        if ((case  ((reg_name_matches_prefix stringappend_1440
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_1450,stringappend_1460) =>
                                             (let stringappend_1470 =
                                               (string_drop stringappend_1440 stringappend_1460) in
                                             if ((case  ((sep_matches_prefix stringappend_1470)) of
                                                 Some (stringappend_1480,stringappend_1490) =>
                                                  (let stringappend_1500 =
                                                    (string_drop stringappend_1470
                                                      stringappend_1490) in
                                                  if ((case  ((reg_name_matches_prefix
                                                                stringappend_1500
                                                               ::  (( 5 Word.word * ii))option)) of
                                                      Some (stringappend_1510,stringappend_1520) =>
                                                       (let stringappend_1530 =
                                                         (string_drop stringappend_1500
                                                           stringappend_1520) in
                                                       if ((case  ((sep_matches_prefix
                                                                     stringappend_1530)) of
                                                           Some
                                                           (stringappend_1540,stringappend_1550) =>
                                                            (let stringappend_1560 =
                                                              (string_drop stringappend_1530
                                                                stringappend_1550) in
                                                            if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                          stringappend_1560
                                                                         ::  (( 12 Word.word * ii))option)) of
                                                                Some
                                                                (stringappend_1570,stringappend_1580) => 
  (case  ((string_drop stringappend_1560 stringappend_1580)) of   s0 => True )
                                                              | None => False
                                                              )) then
                                                              True
                                                            else False)
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_1290 = (string_drop stringappend_00 ((string_length (''l'')))) in
     (let (size1, stringappend_1310) =
       ((case  ((size_mnemonic_matches_prefix stringappend_1290)) of
         Some (stringappend_1300,stringappend_1310) => (stringappend_1300, stringappend_1310)
       )) in
     (let stringappend_1320 = (string_drop stringappend_1290 stringappend_1310) in
     (let (is_unsigned, stringappend_1340) =
       ((case  ((maybe_u_matches_prefix stringappend_1320)) of
         Some (stringappend_1330,stringappend_1340) => (stringappend_1330, stringappend_1340)
       )) in
     (let stringappend_1350 = (string_drop stringappend_1320 stringappend_1340) in
     (let (aq, stringappend_1370) =
       ((case  ((maybe_aq_matches_prefix stringappend_1350)) of
         Some (stringappend_1360,stringappend_1370) => (stringappend_1360, stringappend_1370)
       )) in
     (let stringappend_1380 = (string_drop stringappend_1350 stringappend_1370) in
     (let (rl, stringappend_1400) =
       ((case  ((maybe_rl_matches_prefix stringappend_1380)) of
         Some (stringappend_1390,stringappend_1400) => (stringappend_1390, stringappend_1400)
       )) in
     (let stringappend_1410 = (string_drop stringappend_1380 stringappend_1400) in  
  (case 
  (case  ((spc_matches_prefix stringappend_1410)) of
        Some (stringappend_1420,stringappend_1430) => (stringappend_1420, stringappend_1430)
  ) of
      (_, stringappend_1430) =>
  (let stringappend_1440 = (string_drop stringappend_1410 stringappend_1430) in
  (let (rd, stringappend_1460) =
       ((case  ((reg_name_matches_prefix stringappend_1440 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1450,stringappend_1460) => (stringappend_1450, stringappend_1460)
        )) in
  (let stringappend_1470 = (string_drop stringappend_1440 stringappend_1460) in
  (case 
  (case  ((sep_matches_prefix stringappend_1470)) of
        Some (stringappend_1480,stringappend_1490) => (stringappend_1480, stringappend_1490)
  ) of
      (_, stringappend_1490) =>
  (let stringappend_1500 = (string_drop stringappend_1470 stringappend_1490) in
  (let (rs1, stringappend_1520) =
       ((case  ((reg_name_matches_prefix stringappend_1500 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1510,stringappend_1520) => (stringappend_1510, stringappend_1520)
        )) in
  (let stringappend_1530 = (string_drop stringappend_1500 stringappend_1520) in
  (case 
  (case  ((sep_matches_prefix stringappend_1530)) of
        Some (stringappend_1540,stringappend_1550) => (stringappend_1540, stringappend_1550)
  ) of
      (_, stringappend_1550) =>
  (let stringappend_1560 = (string_drop stringappend_1530 stringappend_1550) in
  (let (imm, stringappend_1580) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_1560 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_1570,stringappend_1580) => (stringappend_1570, stringappend_1580)
        )) in
  (case  ((string_drop stringappend_1560 stringappend_1580)) of
        s0 =>
  Some
    (LOAD (imm,rs1,rd,is_unsigned,size1,aq,rl),
    ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))))))))))
   else if (((((string_startswith stringappend_00 (''s''))) \<and> ((let stringappend_1600 = (string_drop stringappend_00 ((string_length (''s'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_1600)) of
                   Some (stringappend_1610,stringappend_1620) =>
                    (let stringappend_1630 = (string_drop stringappend_1600 stringappend_1620) in
                    if ((case  ((maybe_aq_matches_prefix stringappend_1630)) of
                        Some (stringappend_1640,stringappend_1650) =>
                         (let stringappend_1660 = (string_drop stringappend_1630 stringappend_1650) in
                         if ((case  ((maybe_rl_matches_prefix stringappend_1660)) of
                             Some (stringappend_1670,stringappend_1680) =>
                              (let stringappend_1690 =
                                (string_drop stringappend_1660 stringappend_1680) in
                              if ((case  ((spc_matches_prefix stringappend_1690)) of
                                  Some (stringappend_1700,stringappend_1710) =>
                                   (let stringappend_1720 =
                                     (string_drop stringappend_1690 stringappend_1710) in
                                   if ((case  ((reg_name_matches_prefix stringappend_1720
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_1730,stringappend_1740) =>
                                        (let stringappend_1750 =
                                          (string_drop stringappend_1720 stringappend_1740) in
                                        if ((case  ((sep_matches_prefix stringappend_1750)) of
                                            Some (stringappend_1760,stringappend_1770) =>
                                             (let stringappend_1780 =
                                               (string_drop stringappend_1750 stringappend_1770) in
                                             if ((case  ((reg_name_matches_prefix stringappend_1780
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_1790,stringappend_1800) =>
                                                  (let stringappend_1810 =
                                                    (string_drop stringappend_1780
                                                      stringappend_1800) in
                                                  if ((case  ((sep_matches_prefix stringappend_1810)) of
                                                      Some (stringappend_1820,stringappend_1830) =>
                                                       (let stringappend_1840 =
                                                         (string_drop stringappend_1810
                                                           stringappend_1830) in
                                                       if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict
                                                                     stringappend_1840
                                                                    ::  (( 12 Word.word * ii))option)) of
                                                           Some
                                                           (stringappend_1850,stringappend_1860) => 
  (case  ((string_drop stringappend_1840 stringappend_1860)) of   s0 => True )
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_1600 = (string_drop stringappend_00 ((string_length (''s'')))) in
     (let (size1, stringappend_1620) =
       ((case  ((size_mnemonic_matches_prefix stringappend_1600)) of
         Some (stringappend_1610,stringappend_1620) => (stringappend_1610, stringappend_1620)
       )) in
     (let stringappend_1630 = (string_drop stringappend_1600 stringappend_1620) in
     (let (aq, stringappend_1650) =
       ((case  ((maybe_aq_matches_prefix stringappend_1630)) of
         Some (stringappend_1640,stringappend_1650) => (stringappend_1640, stringappend_1650)
       )) in
     (let stringappend_1660 = (string_drop stringappend_1630 stringappend_1650) in
     (let (rl, stringappend_1680) =
       ((case  ((maybe_rl_matches_prefix stringappend_1660)) of
         Some (stringappend_1670,stringappend_1680) => (stringappend_1670, stringappend_1680)
       )) in
     (let stringappend_1690 = (string_drop stringappend_1660 stringappend_1680) in  
  (case 
  (case  ((spc_matches_prefix stringappend_1690)) of
        Some (stringappend_1700,stringappend_1710) => (stringappend_1700, stringappend_1710)
  ) of
      (_, stringappend_1710) =>
  (let stringappend_1720 = (string_drop stringappend_1690 stringappend_1710) in
  (let (rd, stringappend_1740) =
       ((case  ((reg_name_matches_prefix stringappend_1720 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1730,stringappend_1740) => (stringappend_1730, stringappend_1740)
        )) in
  (let stringappend_1750 = (string_drop stringappend_1720 stringappend_1740) in
  (case 
  (case  ((sep_matches_prefix stringappend_1750)) of
        Some (stringappend_1760,stringappend_1770) => (stringappend_1760, stringappend_1770)
  ) of
      (_, stringappend_1770) =>
  (let stringappend_1780 = (string_drop stringappend_1750 stringappend_1770) in
  (let (rs1, stringappend_1800) =
       ((case  ((reg_name_matches_prefix stringappend_1780 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1790,stringappend_1800) => (stringappend_1790, stringappend_1800)
        )) in
  (let stringappend_1810 = (string_drop stringappend_1780 stringappend_1800) in
  (case 
  (case  ((sep_matches_prefix stringappend_1810)) of
        Some (stringappend_1820,stringappend_1830) => (stringappend_1820, stringappend_1830)
  ) of
      (_, stringappend_1830) =>
  (let stringappend_1840 = (string_drop stringappend_1810 stringappend_1830) in
  (let (imm, stringappend_1860) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_1840 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_1850,stringappend_1860) => (stringappend_1850, stringappend_1860)
        )) in
  (case  ((string_drop stringappend_1840 stringappend_1860)) of
        s0 =>
  Some
    (STORE (imm,rs1,rd,size1,aq,rl),
    ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))))))))
   else if (((((string_startswith stringappend_00 (''addiw''))) \<and> ((let stringappend_1880 = (string_drop stringappend_00 ((string_length (''addiw'')))) in
               if ((case  ((spc_matches_prefix stringappend_1880)) of
                   Some (stringappend_1890,stringappend_1900) =>
                    (let stringappend_1910 = (string_drop stringappend_1880 stringappend_1900) in
                    if ((case  ((reg_name_matches_prefix stringappend_1910
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_1920,stringappend_1930) =>
                         (let stringappend_1940 = (string_drop stringappend_1910 stringappend_1930) in
                         if ((case  ((sep_matches_prefix stringappend_1940)) of
                             Some (stringappend_1950,stringappend_1960) =>
                              (let stringappend_1970 =
                                (string_drop stringappend_1940 stringappend_1960) in
                              if ((case  ((reg_name_matches_prefix stringappend_1970
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_1980,stringappend_1990) =>
                                   (let stringappend_2000 =
                                     (string_drop stringappend_1970 stringappend_1990) in
                                   if ((case  ((sep_matches_prefix stringappend_2000)) of
                                       Some (stringappend_2010,stringappend_2020) =>
                                        (let stringappend_2030 =
                                          (string_drop stringappend_2000 stringappend_2020) in
                                        if ((case  ((hex_bits_12_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_2030
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_2040,stringappend_2050) => 
  (case  ((string_drop stringappend_2030 stringappend_2050)) of   s0 => True )
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_1880 = (string_drop stringappend_00 ((string_length (''addiw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_1880)) of
        Some (stringappend_1890,stringappend_1900) => (stringappend_1890, stringappend_1900)
  ) of
      (_, stringappend_1900) =>
  (let stringappend_1910 = (string_drop stringappend_1880 stringappend_1900) in
  (let (rd, stringappend_1930) =
       ((case  ((reg_name_matches_prefix stringappend_1910 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1920,stringappend_1930) => (stringappend_1920, stringappend_1930)
        )) in
  (let stringappend_1940 = (string_drop stringappend_1910 stringappend_1930) in
  (case 
  (case  ((sep_matches_prefix stringappend_1940)) of
        Some (stringappend_1950,stringappend_1960) => (stringappend_1950, stringappend_1960)
  ) of
      (_, stringappend_1960) =>
  (let stringappend_1970 = (string_drop stringappend_1940 stringappend_1960) in
  (let (rs1, stringappend_1990) =
       ((case  ((reg_name_matches_prefix stringappend_1970 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_1980,stringappend_1990) => (stringappend_1980, stringappend_1990)
        )) in
  (let stringappend_2000 = (string_drop stringappend_1970 stringappend_1990) in
  (case 
  (case  ((sep_matches_prefix stringappend_2000)) of
        Some (stringappend_2010,stringappend_2020) => (stringappend_2010, stringappend_2020)
  ) of
      (_, stringappend_2020) =>
  (let stringappend_2030 = (string_drop stringappend_2000 stringappend_2020) in
  (let (imm, stringappend_2050) =
       ((case  ((hex_bits_12_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_2030 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_2040,stringappend_2050) => (stringappend_2040, stringappend_2050)
        )) in
  (case  ((string_drop stringappend_2030 stringappend_2050)) of
        s0 => Some
                (ADDIW (imm,rs1,rd), ((string_length arg0)) -
                                       ((string_length s0)))
  )))
  ))))
  ))))
  ))
   else if ((case  ((shiftw_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_2070,stringappend_2080) =>
        (let stringappend_2090 = (string_drop stringappend_00 stringappend_2080) in
        if ((case  ((spc_matches_prefix stringappend_2090)) of
            Some (stringappend_2100,stringappend_2110) =>
             (let stringappend_2120 = (string_drop stringappend_2090 stringappend_2110) in
             if ((case  ((reg_name_matches_prefix stringappend_2120  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_2130,stringappend_2140) =>
                  (let stringappend_2150 = (string_drop stringappend_2120 stringappend_2140) in
                  if ((case  ((sep_matches_prefix stringappend_2150)) of
                      Some (stringappend_2160,stringappend_2170) =>
                       (let stringappend_2180 = (string_drop stringappend_2150 stringappend_2170) in
                       if ((case  ((reg_name_matches_prefix stringappend_2180
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_2190,stringappend_2200) =>
                            (let stringappend_2210 =
                              (string_drop stringappend_2180 stringappend_2200) in
                            if ((case  ((sep_matches_prefix stringappend_2210)) of
                                Some (stringappend_2220,stringappend_2230) =>
                                 (let stringappend_2240 =
                                   (string_drop stringappend_2210 stringappend_2230) in
                                 if ((case  ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_2240
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_2250,stringappend_2260) => 
  (case  ((string_drop stringappend_2240 stringappend_2260)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_2080) =
       ((case  ((shiftw_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_2070,stringappend_2080) => (stringappend_2070, stringappend_2080)
       )) in
     (let stringappend_2090 = (string_drop stringappend_00 stringappend_2080) in  
  (case 
  (case  ((spc_matches_prefix stringappend_2090)) of
        Some (stringappend_2100,stringappend_2110) => (stringappend_2100, stringappend_2110)
  ) of
      (_, stringappend_2110) =>
  (let stringappend_2120 = (string_drop stringappend_2090 stringappend_2110) in
  (let (rd, stringappend_2140) =
       ((case  ((reg_name_matches_prefix stringappend_2120 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2130,stringappend_2140) => (stringappend_2130, stringappend_2140)
        )) in
  (let stringappend_2150 = (string_drop stringappend_2120 stringappend_2140) in
  (case 
  (case  ((sep_matches_prefix stringappend_2150)) of
        Some (stringappend_2160,stringappend_2170) => (stringappend_2160, stringappend_2170)
  ) of
      (_, stringappend_2170) =>
  (let stringappend_2180 = (string_drop stringappend_2150 stringappend_2170) in
  (let (rs1, stringappend_2200) =
       ((case  ((reg_name_matches_prefix stringappend_2180 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2190,stringappend_2200) => (stringappend_2190, stringappend_2200)
        )) in
  (let stringappend_2210 = (string_drop stringappend_2180 stringappend_2200) in
  (case 
  (case  ((sep_matches_prefix stringappend_2210)) of
        Some (stringappend_2220,stringappend_2230) => (stringappend_2220, stringappend_2230)
  ) of
      (_, stringappend_2230) =>
  (let stringappend_2240 = (string_drop stringappend_2210 stringappend_2230) in
  (let (shamt, stringappend_2260) =
       ((case  ((hex_bits_5_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_2240 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2250,stringappend_2260) => (stringappend_2250, stringappend_2260)
        )) in
  (case  ((string_drop stringappend_2240 stringappend_2260)) of
        s0 =>
  Some
    (SHIFTW (shamt,rs1,rd,op1), ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if ((case  ((rtypew_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_2280,stringappend_2290) =>
        (let stringappend_2300 = (string_drop stringappend_00 stringappend_2290) in
        if ((case  ((spc_matches_prefix stringappend_2300)) of
            Some (stringappend_2310,stringappend_2320) =>
             (let stringappend_2330 = (string_drop stringappend_2300 stringappend_2320) in
             if ((case  ((reg_name_matches_prefix stringappend_2330  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_2340,stringappend_2350) =>
                  (let stringappend_2360 = (string_drop stringappend_2330 stringappend_2350) in
                  if ((case  ((sep_matches_prefix stringappend_2360)) of
                      Some (stringappend_2370,stringappend_2380) =>
                       (let stringappend_2390 = (string_drop stringappend_2360 stringappend_2380) in
                       if ((case  ((reg_name_matches_prefix stringappend_2390
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_2400,stringappend_2410) =>
                            (let stringappend_2420 =
                              (string_drop stringappend_2390 stringappend_2410) in
                            if ((case  ((sep_matches_prefix stringappend_2420)) of
                                Some (stringappend_2430,stringappend_2440) =>
                                 (let stringappend_2450 =
                                   (string_drop stringappend_2420 stringappend_2440) in
                                 if ((case  ((reg_name_matches_prefix stringappend_2450
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_2460,stringappend_2470) => 
  (case  ((string_drop stringappend_2450 stringappend_2470)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_2290) =
       ((case  ((rtypew_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_2280,stringappend_2290) => (stringappend_2280, stringappend_2290)
       )) in
     (let stringappend_2300 = (string_drop stringappend_00 stringappend_2290) in  
  (case 
  (case  ((spc_matches_prefix stringappend_2300)) of
        Some (stringappend_2310,stringappend_2320) => (stringappend_2310, stringappend_2320)
  ) of
      (_, stringappend_2320) =>
  (let stringappend_2330 = (string_drop stringappend_2300 stringappend_2320) in
  (let (rd, stringappend_2350) =
       ((case  ((reg_name_matches_prefix stringappend_2330 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2340,stringappend_2350) => (stringappend_2340, stringappend_2350)
        )) in
  (let stringappend_2360 = (string_drop stringappend_2330 stringappend_2350) in
  (case 
  (case  ((sep_matches_prefix stringappend_2360)) of
        Some (stringappend_2370,stringappend_2380) => (stringappend_2370, stringappend_2380)
  ) of
      (_, stringappend_2380) =>
  (let stringappend_2390 = (string_drop stringappend_2360 stringappend_2380) in
  (let (rs1, stringappend_2410) =
       ((case  ((reg_name_matches_prefix stringappend_2390 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2400,stringappend_2410) => (stringappend_2400, stringappend_2410)
        )) in
  (let stringappend_2420 = (string_drop stringappend_2390 stringappend_2410) in
  (case 
  (case  ((sep_matches_prefix stringappend_2420)) of
        Some (stringappend_2430,stringappend_2440) => (stringappend_2430, stringappend_2440)
  ) of
      (_, stringappend_2440) =>
  (let stringappend_2450 = (string_drop stringappend_2420 stringappend_2440) in
  (let (rs2, stringappend_2470) =
       ((case  ((reg_name_matches_prefix stringappend_2450 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2460,stringappend_2470) => (stringappend_2460, stringappend_2470)
        )) in
  (case  ((string_drop stringappend_2450 stringappend_2470)) of
        s0 => Some
                (RTYPEW (rs2,rs1,rd,op1), ((string_length arg0)) -
                                            ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if ((case  ((mul_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_2490,stringappend_2500) =>
        (let stringappend_2510 = (string_drop stringappend_00 stringappend_2500) in
        if ((case  ((spc_matches_prefix stringappend_2510)) of
            Some (stringappend_2520,stringappend_2530) =>
             (let stringappend_2540 = (string_drop stringappend_2510 stringappend_2530) in
             if ((case  ((reg_name_matches_prefix stringappend_2540  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_2550,stringappend_2560) =>
                  (let stringappend_2570 = (string_drop stringappend_2540 stringappend_2560) in
                  if ((case  ((sep_matches_prefix stringappend_2570)) of
                      Some (stringappend_2580,stringappend_2590) =>
                       (let stringappend_2600 = (string_drop stringappend_2570 stringappend_2590) in
                       if ((case  ((reg_name_matches_prefix stringappend_2600
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_2610,stringappend_2620) =>
                            (let stringappend_2630 =
                              (string_drop stringappend_2600 stringappend_2620) in
                            if ((case  ((sep_matches_prefix stringappend_2630)) of
                                Some (stringappend_2640,stringappend_2650) =>
                                 (let stringappend_2660 =
                                   (string_drop stringappend_2630 stringappend_2650) in
                                 if ((case  ((reg_name_matches_prefix stringappend_2660
                                              ::  (( 5 Word.word * ii))option)) of
                                     Some (stringappend_2670,stringappend_2680) => 
  (case  ((string_drop stringappend_2660 stringappend_2680)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let ((high, signed1, signed2), stringappend_2500) =
       ((case  ((mul_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_2490,stringappend_2500) => (stringappend_2490, stringappend_2500)
       )) in
     (let stringappend_2510 = (string_drop stringappend_00 stringappend_2500) in  
  (case 
  (case  ((spc_matches_prefix stringappend_2510)) of
        Some (stringappend_2520,stringappend_2530) => (stringappend_2520, stringappend_2530)
  ) of
      (_, stringappend_2530) =>
  (let stringappend_2540 = (string_drop stringappend_2510 stringappend_2530) in
  (let (rd, stringappend_2560) =
       ((case  ((reg_name_matches_prefix stringappend_2540 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2550,stringappend_2560) => (stringappend_2550, stringappend_2560)
        )) in
  (let stringappend_2570 = (string_drop stringappend_2540 stringappend_2560) in
  (case 
  (case  ((sep_matches_prefix stringappend_2570)) of
        Some (stringappend_2580,stringappend_2590) => (stringappend_2580, stringappend_2590)
  ) of
      (_, stringappend_2590) =>
  (let stringappend_2600 = (string_drop stringappend_2570 stringappend_2590) in
  (let (rs1, stringappend_2620) =
       ((case  ((reg_name_matches_prefix stringappend_2600 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2610,stringappend_2620) => (stringappend_2610, stringappend_2620)
        )) in
  (let stringappend_2630 = (string_drop stringappend_2600 stringappend_2620) in
  (case 
  (case  ((sep_matches_prefix stringappend_2630)) of
        Some (stringappend_2640,stringappend_2650) => (stringappend_2640, stringappend_2650)
  ) of
      (_, stringappend_2650) =>
  (let stringappend_2660 = (string_drop stringappend_2630 stringappend_2650) in
  (let (rs2, stringappend_2680) =
       ((case  ((reg_name_matches_prefix stringappend_2660 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2670,stringappend_2680) => (stringappend_2670, stringappend_2680)
        )) in
  (case  ((string_drop stringappend_2660 stringappend_2680)) of
        s0 =>
  Some
    (MUL (rs2,rs1,rd,high,signed1,signed2),
    ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_00 (''div''))) \<and> ((let stringappend_2700 = (string_drop stringappend_00 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_2700)) of
                   Some (stringappend_2710,stringappend_2720) =>
                    (let stringappend_2730 = (string_drop stringappend_2700 stringappend_2720) in
                    if ((case  ((spc_matches_prefix stringappend_2730)) of
                        Some (stringappend_2740,stringappend_2750) =>
                         (let stringappend_2760 = (string_drop stringappend_2730 stringappend_2750) in
                         if ((case  ((reg_name_matches_prefix stringappend_2760
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_2770,stringappend_2780) =>
                              (let stringappend_2790 =
                                (string_drop stringappend_2760 stringappend_2780) in
                              if ((case  ((sep_matches_prefix stringappend_2790)) of
                                  Some (stringappend_2800,stringappend_2810) =>
                                   (let stringappend_2820 =
                                     (string_drop stringappend_2790 stringappend_2810) in
                                   if ((case  ((reg_name_matches_prefix stringappend_2820
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_2830,stringappend_2840) =>
                                        (let stringappend_2850 =
                                          (string_drop stringappend_2820 stringappend_2840) in
                                        if ((case  ((sep_matches_prefix stringappend_2850)) of
                                            Some (stringappend_2860,stringappend_2870) =>
                                             (let stringappend_2880 =
                                               (string_drop stringappend_2850 stringappend_2870) in
                                             if ((case  ((reg_name_matches_prefix stringappend_2880
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_2890,stringappend_2900) => 
  (case  ((string_drop stringappend_2880 stringappend_2900)) of   s0 => True )
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_2700 = (string_drop stringappend_00 ((string_length (''div'')))) in
     (let (s, stringappend_2720) =
       ((case  ((maybe_not_u_matches_prefix stringappend_2700)) of
         Some (stringappend_2710,stringappend_2720) => (stringappend_2710, stringappend_2720)
       )) in
     (let stringappend_2730 = (string_drop stringappend_2700 stringappend_2720) in  
  (case 
  (case  ((spc_matches_prefix stringappend_2730)) of
        Some (stringappend_2740,stringappend_2750) => (stringappend_2740, stringappend_2750)
  ) of
      (_, stringappend_2750) =>
  (let stringappend_2760 = (string_drop stringappend_2730 stringappend_2750) in
  (let (rd, stringappend_2780) =
       ((case  ((reg_name_matches_prefix stringappend_2760 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2770,stringappend_2780) => (stringappend_2770, stringappend_2780)
        )) in
  (let stringappend_2790 = (string_drop stringappend_2760 stringappend_2780) in
  (case 
  (case  ((sep_matches_prefix stringappend_2790)) of
        Some (stringappend_2800,stringappend_2810) => (stringappend_2800, stringappend_2810)
  ) of
      (_, stringappend_2810) =>
  (let stringappend_2820 = (string_drop stringappend_2790 stringappend_2810) in
  (let (rs1, stringappend_2840) =
       ((case  ((reg_name_matches_prefix stringappend_2820 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2830,stringappend_2840) => (stringappend_2830, stringappend_2840)
        )) in
  (let stringappend_2850 = (string_drop stringappend_2820 stringappend_2840) in
  (case 
  (case  ((sep_matches_prefix stringappend_2850)) of
        Some (stringappend_2860,stringappend_2870) => (stringappend_2860, stringappend_2870)
  ) of
      (_, stringappend_2870) =>
  (let stringappend_2880 = (string_drop stringappend_2850 stringappend_2870) in
  (let (rs2, stringappend_2900) =
       ((case  ((reg_name_matches_prefix stringappend_2880 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2890,stringappend_2900) => (stringappend_2890, stringappend_2900)
        )) in
  (case  ((string_drop stringappend_2880 stringappend_2900)) of
        s1 => Some
                (DIV (rs2,rs1,rd,s), ((string_length arg0)) -
                                       ((string_length s1)))
  )))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_00 (''rem''))) \<and> ((let stringappend_2920 = (string_drop stringappend_00 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_2920)) of
                   Some (stringappend_2930,stringappend_2940) =>
                    (let stringappend_2950 = (string_drop stringappend_2920 stringappend_2940) in
                    if ((case  ((spc_matches_prefix stringappend_2950)) of
                        Some (stringappend_2960,stringappend_2970) =>
                         (let stringappend_2980 = (string_drop stringappend_2950 stringappend_2970) in
                         if ((case  ((reg_name_matches_prefix stringappend_2980
                                      ::  (( 5 Word.word * ii))option)) of
                             Some (stringappend_2990,stringappend_3000) =>
                              (let stringappend_3010 =
                                (string_drop stringappend_2980 stringappend_3000) in
                              if ((case  ((sep_matches_prefix stringappend_3010)) of
                                  Some (stringappend_3020,stringappend_3030) =>
                                   (let stringappend_3040 =
                                     (string_drop stringappend_3010 stringappend_3030) in
                                   if ((case  ((reg_name_matches_prefix stringappend_3040
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_3050,stringappend_3060) =>
                                        (let stringappend_3070 =
                                          (string_drop stringappend_3040 stringappend_3060) in
                                        if ((case  ((sep_matches_prefix stringappend_3070)) of
                                            Some (stringappend_3080,stringappend_3090) =>
                                             (let stringappend_3100 =
                                               (string_drop stringappend_3070 stringappend_3090) in
                                             if ((case  ((reg_name_matches_prefix stringappend_3100
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_3110,stringappend_3120) => 
  (case  ((string_drop stringappend_3100 stringappend_3120)) of   s0 => True )
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_2920 = (string_drop stringappend_00 ((string_length (''rem'')))) in
     (let (s, stringappend_2940) =
       ((case  ((maybe_not_u_matches_prefix stringappend_2920)) of
         Some (stringappend_2930,stringappend_2940) => (stringappend_2930, stringappend_2940)
       )) in
     (let stringappend_2950 = (string_drop stringappend_2920 stringappend_2940) in  
  (case 
  (case  ((spc_matches_prefix stringappend_2950)) of
        Some (stringappend_2960,stringappend_2970) => (stringappend_2960, stringappend_2970)
  ) of
      (_, stringappend_2970) =>
  (let stringappend_2980 = (string_drop stringappend_2950 stringappend_2970) in
  (let (rd, stringappend_3000) =
       ((case  ((reg_name_matches_prefix stringappend_2980 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_2990,stringappend_3000) => (stringappend_2990, stringappend_3000)
        )) in
  (let stringappend_3010 = (string_drop stringappend_2980 stringappend_3000) in
  (case 
  (case  ((sep_matches_prefix stringappend_3010)) of
        Some (stringappend_3020,stringappend_3030) => (stringappend_3020, stringappend_3030)
  ) of
      (_, stringappend_3030) =>
  (let stringappend_3040 = (string_drop stringappend_3010 stringappend_3030) in
  (let (rs1, stringappend_3060) =
       ((case  ((reg_name_matches_prefix stringappend_3040 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3050,stringappend_3060) => (stringappend_3050, stringappend_3060)
        )) in
  (let stringappend_3070 = (string_drop stringappend_3040 stringappend_3060) in
  (case 
  (case  ((sep_matches_prefix stringappend_3070)) of
        Some (stringappend_3080,stringappend_3090) => (stringappend_3080, stringappend_3090)
  ) of
      (_, stringappend_3090) =>
  (let stringappend_3100 = (string_drop stringappend_3070 stringappend_3090) in
  (let (rs2, stringappend_3120) =
       ((case  ((reg_name_matches_prefix stringappend_3100 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3110,stringappend_3120) => (stringappend_3110, stringappend_3120)
        )) in
  (case  ((string_drop stringappend_3100 stringappend_3120)) of
        s1 => Some
                (REM (rs2,rs1,rd,s), ((string_length arg0)) -
                                       ((string_length s1)))
  )))
  ))))
  ))))
  ))))
   else if (((((string_startswith stringappend_00 (''mulw''))) \<and> ((let stringappend_3140 = (string_drop stringappend_00 ((string_length (''mulw'')))) in
               if ((case  ((spc_matches_prefix stringappend_3140)) of
                   Some (stringappend_3150,stringappend_3160) =>
                    (let stringappend_3170 = (string_drop stringappend_3140 stringappend_3160) in
                    if ((case  ((reg_name_matches_prefix stringappend_3170
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_3180,stringappend_3190) =>
                         (let stringappend_3200 = (string_drop stringappend_3170 stringappend_3190) in
                         if ((case  ((sep_matches_prefix stringappend_3200)) of
                             Some (stringappend_3210,stringappend_3220) =>
                              (let stringappend_3230 =
                                (string_drop stringappend_3200 stringappend_3220) in
                              if ((case  ((reg_name_matches_prefix stringappend_3230
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_3240,stringappend_3250) =>
                                   (let stringappend_3260 =
                                     (string_drop stringappend_3230 stringappend_3250) in
                                   if ((case  ((sep_matches_prefix stringappend_3260)) of
                                       Some (stringappend_3270,stringappend_3280) =>
                                        (let stringappend_3290 =
                                          (string_drop stringappend_3260 stringappend_3280) in
                                        if ((case  ((reg_name_matches_prefix stringappend_3290
                                                     ::  (( 5 Word.word * ii))option)) of
                                            Some (stringappend_3300,stringappend_3310) => 
  (case  ((string_drop stringappend_3290 stringappend_3310)) of   s0 => True )
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_3140 = (string_drop stringappend_00 ((string_length (''mulw'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_3140)) of
        Some (stringappend_3150,stringappend_3160) => (stringappend_3150, stringappend_3160)
  ) of
      (_, stringappend_3160) =>
  (let stringappend_3170 = (string_drop stringappend_3140 stringappend_3160) in
  (let (rd, stringappend_3190) =
       ((case  ((reg_name_matches_prefix stringappend_3170 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3180,stringappend_3190) => (stringappend_3180, stringappend_3190)
        )) in
  (let stringappend_3200 = (string_drop stringappend_3170 stringappend_3190) in
  (case 
  (case  ((sep_matches_prefix stringappend_3200)) of
        Some (stringappend_3210,stringappend_3220) => (stringappend_3210, stringappend_3220)
  ) of
      (_, stringappend_3220) =>
  (let stringappend_3230 = (string_drop stringappend_3200 stringappend_3220) in
  (let (rs1, stringappend_3250) =
       ((case  ((reg_name_matches_prefix stringappend_3230 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3240,stringappend_3250) => (stringappend_3240, stringappend_3250)
        )) in
  (let stringappend_3260 = (string_drop stringappend_3230 stringappend_3250) in
  (case 
  (case  ((sep_matches_prefix stringappend_3260)) of
        Some (stringappend_3270,stringappend_3280) => (stringappend_3270, stringappend_3280)
  ) of
      (_, stringappend_3280) =>
  (let stringappend_3290 = (string_drop stringappend_3260 stringappend_3280) in
  (let (rs2, stringappend_3310) =
       ((case  ((reg_name_matches_prefix stringappend_3290 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3300,stringappend_3310) => (stringappend_3300, stringappend_3310)
        )) in
  (case  ((string_drop stringappend_3290 stringappend_3310)) of
        s0 => Some
                (MULW (rs2,rs1,rd), ((string_length arg0)) -
                                      ((string_length s0)))
  )))
  ))))
  ))))
  ))
   else if (((((string_startswith stringappend_00 (''div''))) \<and> ((let stringappend_3330 = (string_drop stringappend_00 ((string_length (''div'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_3330)) of
                   Some (stringappend_3340,stringappend_3350) =>
                    (let stringappend_3360 = (string_drop stringappend_3330 stringappend_3350) in
                    if (((((string_startswith stringappend_3360 (''w''))) \<and> ((let stringappend_3370 =
                             (string_drop stringappend_3360 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_3370)) of
                               Some (stringappend_3380,stringappend_3390) =>
                                (let stringappend_3400 =
                                  (string_drop stringappend_3370 stringappend_3390) in
                                if ((case  ((reg_name_matches_prefix stringappend_3400
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_3410,stringappend_3420) =>
                                     (let stringappend_3430 =
                                       (string_drop stringappend_3400 stringappend_3420) in
                                     if ((case  ((sep_matches_prefix stringappend_3430)) of
                                         Some (stringappend_3440,stringappend_3450) =>
                                          (let stringappend_3460 =
                                            (string_drop stringappend_3430 stringappend_3450) in
                                          if ((case  ((reg_name_matches_prefix stringappend_3460
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_3470,stringappend_3480) =>
                                               (let stringappend_3490 =
                                                 (string_drop stringappend_3460 stringappend_3480) in
                                               if ((case  ((sep_matches_prefix stringappend_3490)) of
                                                   Some (stringappend_3500,stringappend_3510) =>
                                                    (let stringappend_3520 =
                                                      (string_drop stringappend_3490
                                                        stringappend_3510) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_3520
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some (stringappend_3530,stringappend_3540) => 
  (case  ((string_drop stringappend_3520 stringappend_3540)) of   s0 => True )
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_3330 = (string_drop stringappend_00 ((string_length (''div'')))) in
     (let (s, stringappend_3350) =
       ((case  ((maybe_not_u_matches_prefix stringappend_3330)) of
         Some (stringappend_3340,stringappend_3350) => (stringappend_3340, stringappend_3350)
       )) in
     (let stringappend_3360 = (string_drop stringappend_3330 stringappend_3350) in
     (let stringappend_3370 = (string_drop stringappend_3360 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_3370)) of
        Some (stringappend_3380,stringappend_3390) => (stringappend_3380, stringappend_3390)
  ) of
      (_, stringappend_3390) =>
  (let stringappend_3400 = (string_drop stringappend_3370 stringappend_3390) in
  (let (rd, stringappend_3420) =
       ((case  ((reg_name_matches_prefix stringappend_3400 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3410,stringappend_3420) => (stringappend_3410, stringappend_3420)
        )) in
  (let stringappend_3430 = (string_drop stringappend_3400 stringappend_3420) in
  (case 
  (case  ((sep_matches_prefix stringappend_3430)) of
        Some (stringappend_3440,stringappend_3450) => (stringappend_3440, stringappend_3450)
  ) of
      (_, stringappend_3450) =>
  (let stringappend_3460 = (string_drop stringappend_3430 stringappend_3450) in
  (let (rs1, stringappend_3480) =
       ((case  ((reg_name_matches_prefix stringappend_3460 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3470,stringappend_3480) => (stringappend_3470, stringappend_3480)
        )) in
  (let stringappend_3490 = (string_drop stringappend_3460 stringappend_3480) in
  (case 
  (case  ((sep_matches_prefix stringappend_3490)) of
        Some (stringappend_3500,stringappend_3510) => (stringappend_3500, stringappend_3510)
  ) of
      (_, stringappend_3510) =>
  (let stringappend_3520 = (string_drop stringappend_3490 stringappend_3510) in
  (let (rs2, stringappend_3540) =
       ((case  ((reg_name_matches_prefix stringappend_3520 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3530,stringappend_3540) => (stringappend_3530, stringappend_3540)
        )) in
  (case  ((string_drop stringappend_3520 stringappend_3540)) of
        s1 => Some
                (DIVW (rs2,rs1,rd,s), ((string_length arg0)) -
                                        ((string_length s1)))
  )))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_00 (''rem''))) \<and> ((let stringappend_3560 = (string_drop stringappend_00 ((string_length (''rem'')))) in
               if ((case  ((maybe_not_u_matches_prefix stringappend_3560)) of
                   Some (stringappend_3570,stringappend_3580) =>
                    (let stringappend_3590 = (string_drop stringappend_3560 stringappend_3580) in
                    if (((((string_startswith stringappend_3590 (''w''))) \<and> ((let stringappend_3600 =
                             (string_drop stringappend_3590 ((string_length (''w'')))) in
                           if ((case  ((spc_matches_prefix stringappend_3600)) of
                               Some (stringappend_3610,stringappend_3620) =>
                                (let stringappend_3630 =
                                  (string_drop stringappend_3600 stringappend_3620) in
                                if ((case  ((reg_name_matches_prefix stringappend_3630
                                             ::  (( 5 Word.word * ii))option)) of
                                    Some (stringappend_3640,stringappend_3650) =>
                                     (let stringappend_3660 =
                                       (string_drop stringappend_3630 stringappend_3650) in
                                     if ((case  ((sep_matches_prefix stringappend_3660)) of
                                         Some (stringappend_3670,stringappend_3680) =>
                                          (let stringappend_3690 =
                                            (string_drop stringappend_3660 stringappend_3680) in
                                          if ((case  ((reg_name_matches_prefix stringappend_3690
                                                       ::  (( 5 Word.word * ii))option)) of
                                              Some (stringappend_3700,stringappend_3710) =>
                                               (let stringappend_3720 =
                                                 (string_drop stringappend_3690 stringappend_3710) in
                                               if ((case  ((sep_matches_prefix stringappend_3720)) of
                                                   Some (stringappend_3730,stringappend_3740) =>
                                                    (let stringappend_3750 =
                                                      (string_drop stringappend_3720
                                                        stringappend_3740) in
                                                    if ((case  ((reg_name_matches_prefix
                                                                  stringappend_3750
                                                                 ::  (( 5 Word.word * ii))option)) of
                                                        Some (stringappend_3760,stringappend_3770) => 
  (case  ((string_drop stringappend_3750 stringappend_3770)) of   s0 => True )
                                                      | None => False
                                                      )) then
                                                      True
                                                    else False)
                                                 | None => False
                                                 )) then
                                                 True
                                               else False)
                                            | None => False
                                            )) then
                                            True
                                          else False)
                                       | None => False
                                       )) then
                                       True
                                     else False)
                                  | None => False
                                  )) then
                                  True
                                else False)
                             | None => False
                             )) then
                             True
                           else False))))) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_3560 = (string_drop stringappend_00 ((string_length (''rem'')))) in
     (let (s, stringappend_3580) =
       ((case  ((maybe_not_u_matches_prefix stringappend_3560)) of
         Some (stringappend_3570,stringappend_3580) => (stringappend_3570, stringappend_3580)
       )) in
     (let stringappend_3590 = (string_drop stringappend_3560 stringappend_3580) in
     (let stringappend_3600 = (string_drop stringappend_3590 ((string_length (''w'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_3600)) of
        Some (stringappend_3610,stringappend_3620) => (stringappend_3610, stringappend_3620)
  ) of
      (_, stringappend_3620) =>
  (let stringappend_3630 = (string_drop stringappend_3600 stringappend_3620) in
  (let (rd, stringappend_3650) =
       ((case  ((reg_name_matches_prefix stringappend_3630 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3640,stringappend_3650) => (stringappend_3640, stringappend_3650)
        )) in
  (let stringappend_3660 = (string_drop stringappend_3630 stringappend_3650) in
  (case 
  (case  ((sep_matches_prefix stringappend_3660)) of
        Some (stringappend_3670,stringappend_3680) => (stringappend_3670, stringappend_3680)
  ) of
      (_, stringappend_3680) =>
  (let stringappend_3690 = (string_drop stringappend_3660 stringappend_3680) in
  (let (rs1, stringappend_3710) =
       ((case  ((reg_name_matches_prefix stringappend_3690 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3700,stringappend_3710) => (stringappend_3700, stringappend_3710)
        )) in
  (let stringappend_3720 = (string_drop stringappend_3690 stringappend_3710) in
  (case 
  (case  ((sep_matches_prefix stringappend_3720)) of
        Some (stringappend_3730,stringappend_3740) => (stringappend_3730, stringappend_3740)
  ) of
      (_, stringappend_3740) =>
  (let stringappend_3750 = (string_drop stringappend_3720 stringappend_3740) in
  (let (rs2, stringappend_3770) =
       ((case  ((reg_name_matches_prefix stringappend_3750 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_3760,stringappend_3770) => (stringappend_3760, stringappend_3770)
        )) in
  (case  ((string_drop stringappend_3750 stringappend_3770)) of
        s1 => Some
                (REMW (rs2,rs1,rd,s), ((string_length arg0)) -
                                        ((string_length s1)))
  )))
  ))))
  ))))
  )))))
   else if (((((string_startswith stringappend_00 (''fence''))) \<and> ((let stringappend_3790 = (string_drop stringappend_00 ((string_length (''fence'')))) in
               if ((case  ((spc_matches_prefix stringappend_3790)) of
                   Some (stringappend_3800,stringappend_3810) =>
                    (let stringappend_3820 = (string_drop stringappend_3790 stringappend_3810) in
                    if ((case  ((fence_bits_matches_prefix stringappend_3820
                                 ::  (( 4 Word.word * ii))option)) of
                        Some (stringappend_3830,stringappend_3840) =>
                         (let stringappend_3850 = (string_drop stringappend_3820 stringappend_3840) in
                         if ((case  ((sep_matches_prefix stringappend_3850)) of
                             Some (stringappend_3860,stringappend_3870) =>
                              (let stringappend_3880 =
                                (string_drop stringappend_3850 stringappend_3870) in
                              if ((case  ((fence_bits_matches_prefix stringappend_3880
                                           ::  (( 4 Word.word * ii))option)) of
                                  Some (stringappend_3890,stringappend_3900) => 
  (case  ((string_drop stringappend_3880 stringappend_3900)) of   s0 => True )
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_3790 = (string_drop stringappend_00 ((string_length (''fence'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_3790)) of
        Some (stringappend_3800,stringappend_3810) => (stringappend_3800, stringappend_3810)
  ) of
      (_, stringappend_3810) =>
  (let stringappend_3820 = (string_drop stringappend_3790 stringappend_3810) in
  (let (pred, stringappend_3840) =
       ((case  ((fence_bits_matches_prefix stringappend_3820 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_3830,stringappend_3840) => (stringappend_3830, stringappend_3840)
        )) in
  (let stringappend_3850 = (string_drop stringappend_3820 stringappend_3840) in
  (case 
  (case  ((sep_matches_prefix stringappend_3850)) of
        Some (stringappend_3860,stringappend_3870) => (stringappend_3860, stringappend_3870)
  ) of
      (_, stringappend_3870) =>
  (let stringappend_3880 = (string_drop stringappend_3850 stringappend_3870) in
  (let (succ, stringappend_3900) =
       ((case  ((fence_bits_matches_prefix stringappend_3880 :: (( 4 Word.word * ii)) option)) of
              Some (stringappend_3890,stringappend_3900) => (stringappend_3890, stringappend_3900)
        )) in
  (case  ((string_drop stringappend_3880 stringappend_3900)) of
        s0 => Some
                (FENCE (pred,succ), ((string_length arg0)) -
                                      ((string_length s0)))
  )))
  ))))
  ))
   else if (((((string_startswith stringappend_00 (''fence.i''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''fence.i''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''fence.i''))))) of
       s0 => Some (FENCEI () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''ecall''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''ecall''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''ecall''))))) of
       s0 => Some (ECALL () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''mret''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''mret''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''mret''))))) of
       s0 => Some (MRET () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''sret''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''sret''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''sret''))))) of
       s0 => Some (SRET () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''ebreak''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''ebreak''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''ebreak''))))) of
       s0 => Some (EBREAK () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''wfi''))) \<and> (
  (case  ((string_drop stringappend_00 ((string_length (''wfi''))))) of
        s0 => True
  ))))) then
     (case  ((string_drop stringappend_00 ((string_length (''wfi''))))) of
       s0 => Some (WFI () , ((string_length arg0)) - ((string_length s0)))
     )
   else if (((((string_startswith stringappend_00 (''sfence.vma''))) \<and> ((let stringappend_3980 = (string_drop stringappend_00 ((string_length (''sfence.vma'')))) in
               if ((case  ((spc_matches_prefix stringappend_3980)) of
                   Some (stringappend_3990,stringappend_4000) =>
                    (let stringappend_4010 = (string_drop stringappend_3980 stringappend_4000) in
                    if ((case  ((reg_name_matches_prefix stringappend_4010
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_4020,stringappend_4030) =>
                         (let stringappend_4040 = (string_drop stringappend_4010 stringappend_4030) in
                         if ((case  ((sep_matches_prefix stringappend_4040)) of
                             Some (stringappend_4050,stringappend_4060) =>
                              (let stringappend_4070 =
                                (string_drop stringappend_4040 stringappend_4060) in
                              if ((case  ((reg_name_matches_prefix stringappend_4070
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_4080,stringappend_4090) => 
  (case  ((string_drop stringappend_4070 stringappend_4090)) of   s0 => True )
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_3980 = (string_drop stringappend_00 ((string_length (''sfence.vma'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_3980)) of
        Some (stringappend_3990,stringappend_4000) => (stringappend_3990, stringappend_4000)
  ) of
      (_, stringappend_4000) =>
  (let stringappend_4010 = (string_drop stringappend_3980 stringappend_4000) in
  (let (rs1, stringappend_4030) =
       ((case  ((reg_name_matches_prefix stringappend_4010 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4020,stringappend_4030) => (stringappend_4020, stringappend_4030)
        )) in
  (let stringappend_4040 = (string_drop stringappend_4010 stringappend_4030) in
  (case 
  (case  ((sep_matches_prefix stringappend_4040)) of
        Some (stringappend_4050,stringappend_4060) => (stringappend_4050, stringappend_4060)
  ) of
      (_, stringappend_4060) =>
  (let stringappend_4070 = (string_drop stringappend_4040 stringappend_4060) in
  (let (rs2, stringappend_4090) =
       ((case  ((reg_name_matches_prefix stringappend_4070 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4080,stringappend_4090) => (stringappend_4080, stringappend_4090)
        )) in
  (case  ((string_drop stringappend_4070 stringappend_4090)) of
        s0 => Some
                (SFENCE_VMA (rs1,rs2), ((string_length arg0)) -
                                         ((string_length s0)))
  )))
  ))))
  ))
   else if (((((string_startswith stringappend_00 (''lr.''))) \<and> ((let stringappend_4110 = (string_drop stringappend_00 ((string_length (''lr.'')))) in
               if ((case  ((maybe_aq_matches_prefix stringappend_4110)) of
                   Some (stringappend_4120,stringappend_4130) =>
                    (let stringappend_4140 = (string_drop stringappend_4110 stringappend_4130) in
                    if ((case  ((maybe_rl_matches_prefix stringappend_4140)) of
                        Some (stringappend_4150,stringappend_4160) =>
                         (let stringappend_4170 = (string_drop stringappend_4140 stringappend_4160) in
                         if ((case  ((size_mnemonic_matches_prefix stringappend_4170)) of
                             Some (stringappend_4180,stringappend_4190) =>
                              (let stringappend_4200 =
                                (string_drop stringappend_4170 stringappend_4190) in
                              if ((case  ((spc_matches_prefix stringappend_4200)) of
                                  Some (stringappend_4210,stringappend_4220) =>
                                   (let stringappend_4230 =
                                     (string_drop stringappend_4200 stringappend_4220) in
                                   if ((case  ((reg_name_matches_prefix stringappend_4230
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_4240,stringappend_4250) =>
                                        (let stringappend_4260 =
                                          (string_drop stringappend_4230 stringappend_4250) in
                                        if ((case  ((sep_matches_prefix stringappend_4260)) of
                                            Some (stringappend_4270,stringappend_4280) =>
                                             (let stringappend_4290 =
                                               (string_drop stringappend_4260 stringappend_4280) in
                                             if ((case  ((reg_name_matches_prefix stringappend_4290
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_4300,stringappend_4310) => 
  (case  ((string_drop stringappend_4290 stringappend_4310)) of   s0 => True )
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_4110 = (string_drop stringappend_00 ((string_length (''lr.'')))) in
     (let (aq, stringappend_4130) =
       ((case  ((maybe_aq_matches_prefix stringappend_4110)) of
         Some (stringappend_4120,stringappend_4130) => (stringappend_4120, stringappend_4130)
       )) in
     (let stringappend_4140 = (string_drop stringappend_4110 stringappend_4130) in
     (let (rl, stringappend_4160) =
       ((case  ((maybe_rl_matches_prefix stringappend_4140)) of
         Some (stringappend_4150,stringappend_4160) => (stringappend_4150, stringappend_4160)
       )) in
     (let stringappend_4170 = (string_drop stringappend_4140 stringappend_4160) in
     (let (size1, stringappend_4190) =
       ((case  ((size_mnemonic_matches_prefix stringappend_4170)) of
         Some (stringappend_4180,stringappend_4190) => (stringappend_4180, stringappend_4190)
       )) in
     (let stringappend_4200 = (string_drop stringappend_4170 stringappend_4190) in  
  (case 
  (case  ((spc_matches_prefix stringappend_4200)) of
        Some (stringappend_4210,stringappend_4220) => (stringappend_4210, stringappend_4220)
  ) of
      (_, stringappend_4220) =>
  (let stringappend_4230 = (string_drop stringappend_4200 stringappend_4220) in
  (let (rd, stringappend_4250) =
       ((case  ((reg_name_matches_prefix stringappend_4230 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4240,stringappend_4250) => (stringappend_4240, stringappend_4250)
        )) in
  (let stringappend_4260 = (string_drop stringappend_4230 stringappend_4250) in
  (case 
  (case  ((sep_matches_prefix stringappend_4260)) of
        Some (stringappend_4270,stringappend_4280) => (stringappend_4270, stringappend_4280)
  ) of
      (_, stringappend_4280) =>
  (let stringappend_4290 = (string_drop stringappend_4260 stringappend_4280) in
  (let (rs1, stringappend_4310) =
       ((case  ((reg_name_matches_prefix stringappend_4290 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4300,stringappend_4310) => (stringappend_4300, stringappend_4310)
        )) in
  (case  ((string_drop stringappend_4290 stringappend_4310)) of
        s0 =>
  Some
    (LOADRES (aq,rl,rs1,size1,rd), ((string_length arg0)) -
                                     ((string_length s0)))
  )))
  ))))
  ))))))))
   else if (((((string_startswith stringappend_00 (''sc.''))) \<and> ((let stringappend_4330 = (string_drop stringappend_00 ((string_length (''sc.'')))) in
               if ((case  ((maybe_aq_matches_prefix stringappend_4330)) of
                   Some (stringappend_4340,stringappend_4350) =>
                    (let stringappend_4360 = (string_drop stringappend_4330 stringappend_4350) in
                    if ((case  ((maybe_rl_matches_prefix stringappend_4360)) of
                        Some (stringappend_4370,stringappend_4380) =>
                         (let stringappend_4390 = (string_drop stringappend_4360 stringappend_4380) in
                         if ((case  ((size_mnemonic_matches_prefix stringappend_4390)) of
                             Some (stringappend_4400,stringappend_4410) =>
                              (let stringappend_4420 =
                                (string_drop stringappend_4390 stringappend_4410) in
                              if ((case  ((spc_matches_prefix stringappend_4420)) of
                                  Some (stringappend_4430,stringappend_4440) =>
                                   (let stringappend_4450 =
                                     (string_drop stringappend_4420 stringappend_4440) in
                                   if ((case  ((reg_name_matches_prefix stringappend_4450
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_4460,stringappend_4470) =>
                                        (let stringappend_4480 =
                                          (string_drop stringappend_4450 stringappend_4470) in
                                        if ((case  ((sep_matches_prefix stringappend_4480)) of
                                            Some (stringappend_4490,stringappend_4500) =>
                                             (let stringappend_4510 =
                                               (string_drop stringappend_4480 stringappend_4500) in
                                             if ((case  ((reg_name_matches_prefix stringappend_4510
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_4520,stringappend_4530) =>
                                                  (let stringappend_4540 =
                                                    (string_drop stringappend_4510
                                                      stringappend_4530) in
                                                  if ((case  ((sep_matches_prefix stringappend_4540)) of
                                                      Some (stringappend_4550,stringappend_4560) =>
                                                       (let stringappend_4570 =
                                                         (string_drop stringappend_4540
                                                           stringappend_4560) in
                                                       if ((case  ((reg_name_matches_prefix
                                                                     stringappend_4570
                                                                    ::  (( 5 Word.word * ii))option)) of
                                                           Some
                                                           (stringappend_4580,stringappend_4590) => 
  (case  ((string_drop stringappend_4570 stringappend_4590)) of   s0 => True )
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_4330 = (string_drop stringappend_00 ((string_length (''sc.'')))) in
     (let (aq, stringappend_4350) =
       ((case  ((maybe_aq_matches_prefix stringappend_4330)) of
         Some (stringappend_4340,stringappend_4350) => (stringappend_4340, stringappend_4350)
       )) in
     (let stringappend_4360 = (string_drop stringappend_4330 stringappend_4350) in
     (let (rl, stringappend_4380) =
       ((case  ((maybe_rl_matches_prefix stringappend_4360)) of
         Some (stringappend_4370,stringappend_4380) => (stringappend_4370, stringappend_4380)
       )) in
     (let stringappend_4390 = (string_drop stringappend_4360 stringappend_4380) in
     (let (size1, stringappend_4410) =
       ((case  ((size_mnemonic_matches_prefix stringappend_4390)) of
         Some (stringappend_4400,stringappend_4410) => (stringappend_4400, stringappend_4410)
       )) in
     (let stringappend_4420 = (string_drop stringappend_4390 stringappend_4410) in  
  (case 
  (case  ((spc_matches_prefix stringappend_4420)) of
        Some (stringappend_4430,stringappend_4440) => (stringappend_4430, stringappend_4440)
  ) of
      (_, stringappend_4440) =>
  (let stringappend_4450 = (string_drop stringappend_4420 stringappend_4440) in
  (let (rd, stringappend_4470) =
       ((case  ((reg_name_matches_prefix stringappend_4450 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4460,stringappend_4470) => (stringappend_4460, stringappend_4470)
        )) in
  (let stringappend_4480 = (string_drop stringappend_4450 stringappend_4470) in
  (case 
  (case  ((sep_matches_prefix stringappend_4480)) of
        Some (stringappend_4490,stringappend_4500) => (stringappend_4490, stringappend_4500)
  ) of
      (_, stringappend_4500) =>
  (let stringappend_4510 = (string_drop stringappend_4480 stringappend_4500) in
  (let (rs1, stringappend_4530) =
       ((case  ((reg_name_matches_prefix stringappend_4510 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4520,stringappend_4530) => (stringappend_4520, stringappend_4530)
        )) in
  (let stringappend_4540 = (string_drop stringappend_4510 stringappend_4530) in
  (case 
  (case  ((sep_matches_prefix stringappend_4540)) of
        Some (stringappend_4550,stringappend_4560) => (stringappend_4550, stringappend_4560)
  ) of
      (_, stringappend_4560) =>
  (let stringappend_4570 = (string_drop stringappend_4540 stringappend_4560) in
  (let (rs2, stringappend_4590) =
       ((case  ((reg_name_matches_prefix stringappend_4570 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4580,stringappend_4590) => (stringappend_4580, stringappend_4590)
        )) in
  (case  ((string_drop stringappend_4570 stringappend_4590)) of
        s0 =>
  Some
    (STORECON (aq,rl,rs2,rs1,size1,rd),
    ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))))))))
   else if ((case  ((amo_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_4610,stringappend_4620) =>
        (let stringappend_4630 = (string_drop stringappend_00 stringappend_4620) in
        if (((((string_startswith stringappend_4630 (''.''))) \<and> ((let stringappend_4640 = (string_drop stringappend_4630 ((string_length (''.'')))) in
               if ((case  ((size_mnemonic_matches_prefix stringappend_4640)) of
                   Some (stringappend_4650,stringappend_4660) =>
                    (let stringappend_4670 = (string_drop stringappend_4640 stringappend_4660) in
                    if ((case  ((maybe_aq_matches_prefix stringappend_4670)) of
                        Some (stringappend_4680,stringappend_4690) =>
                         (let stringappend_4700 = (string_drop stringappend_4670 stringappend_4690) in
                         if ((case  ((maybe_rl_matches_prefix stringappend_4700)) of
                             Some (stringappend_4710,stringappend_4720) =>
                              (let stringappend_4730 =
                                (string_drop stringappend_4700 stringappend_4720) in
                              if ((case  ((spc_matches_prefix stringappend_4730)) of
                                  Some (stringappend_4740,stringappend_4750) =>
                                   (let stringappend_4760 =
                                     (string_drop stringappend_4730 stringappend_4750) in
                                   if ((case  ((reg_name_matches_prefix stringappend_4760
                                                ::  (( 5 Word.word * ii))option)) of
                                       Some (stringappend_4770,stringappend_4780) =>
                                        (let stringappend_4790 =
                                          (string_drop stringappend_4760 stringappend_4780) in
                                        if ((case  ((sep_matches_prefix stringappend_4790)) of
                                            Some (stringappend_4800,stringappend_4810) =>
                                             (let stringappend_4820 =
                                               (string_drop stringappend_4790 stringappend_4810) in
                                             if ((case  ((reg_name_matches_prefix stringappend_4820
                                                          ::  (( 5 Word.word * ii))option)) of
                                                 Some (stringappend_4830,stringappend_4840) =>
                                                  (let stringappend_4850 =
                                                    (string_drop stringappend_4820
                                                      stringappend_4840) in
                                                  if ((case  ((sep_matches_prefix stringappend_4850)) of
                                                      Some (stringappend_4860,stringappend_4870) =>
                                                       (let stringappend_4880 =
                                                         (string_drop stringappend_4850
                                                           stringappend_4870) in
                                                       if ((case  ((reg_name_matches_prefix
                                                                     stringappend_4880
                                                                    ::  (( 5 Word.word * ii))option)) of
                                                           Some
                                                           (stringappend_4890,stringappend_4900) => 
  (case  ((string_drop stringappend_4880 stringappend_4900)) of   s0 => True )
                                                         | None => False
                                                         )) then
                                                         True
                                                       else False)
                                                    | None => False
                                                    )) then
                                                    True
                                                  else False)
                                               | None => False
                                               )) then
                                               True
                                             else False)
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_4620) =
       ((case  ((amo_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_4610,stringappend_4620) => (stringappend_4610, stringappend_4620)
       )) in
     (let stringappend_4630 = (string_drop stringappend_00 stringappend_4620) in
     (let stringappend_4640 = (string_drop stringappend_4630 ((string_length (''.'')))) in
     (let (width, stringappend_4660) =
       ((case  ((size_mnemonic_matches_prefix stringappend_4640)) of
         Some (stringappend_4650,stringappend_4660) => (stringappend_4650, stringappend_4660)
       )) in
     (let stringappend_4670 = (string_drop stringappend_4640 stringappend_4660) in
     (let (aq, stringappend_4690) =
       ((case  ((maybe_aq_matches_prefix stringappend_4670)) of
         Some (stringappend_4680,stringappend_4690) => (stringappend_4680, stringappend_4690)
       )) in
     (let stringappend_4700 = (string_drop stringappend_4670 stringappend_4690) in
     (let (rl, stringappend_4720) =
       ((case  ((maybe_rl_matches_prefix stringappend_4700)) of
         Some (stringappend_4710,stringappend_4720) => (stringappend_4710, stringappend_4720)
       )) in
     (let stringappend_4730 = (string_drop stringappend_4700 stringappend_4720) in  
  (case 
  (case  ((spc_matches_prefix stringappend_4730)) of
        Some (stringappend_4740,stringappend_4750) => (stringappend_4740, stringappend_4750)
  ) of
      (_, stringappend_4750) =>
  (let stringappend_4760 = (string_drop stringappend_4730 stringappend_4750) in
  (let (rd, stringappend_4780) =
       ((case  ((reg_name_matches_prefix stringappend_4760 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4770,stringappend_4780) => (stringappend_4770, stringappend_4780)
        )) in
  (let stringappend_4790 = (string_drop stringappend_4760 stringappend_4780) in
  (case 
  (case  ((sep_matches_prefix stringappend_4790)) of
        Some (stringappend_4800,stringappend_4810) => (stringappend_4800, stringappend_4810)
  ) of
      (_, stringappend_4810) =>
  (let stringappend_4820 = (string_drop stringappend_4790 stringappend_4810) in
  (let (rs1, stringappend_4840) =
       ((case  ((reg_name_matches_prefix stringappend_4820 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4830,stringappend_4840) => (stringappend_4830, stringappend_4840)
        )) in
  (let stringappend_4850 = (string_drop stringappend_4820 stringappend_4840) in
  (case 
  (case  ((sep_matches_prefix stringappend_4850)) of
        Some (stringappend_4860,stringappend_4870) => (stringappend_4860, stringappend_4870)
  ) of
      (_, stringappend_4870) =>
  (let stringappend_4880 = (string_drop stringappend_4850 stringappend_4870) in
  (let (rs2, stringappend_4900) =
       ((case  ((reg_name_matches_prefix stringappend_4880 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4890,stringappend_4900) => (stringappend_4890, stringappend_4900)
        )) in
  (case  ((string_drop stringappend_4880 stringappend_4900)) of
        s0 =>
  Some
    (AMO (op1,aq,rl,rs2,rs1,width,rd),
    ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))))))))))
   else if ((case  ((csr_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_4920,stringappend_4930) =>
        (let stringappend_4940 = (string_drop stringappend_00 stringappend_4930) in
        if (((((string_startswith stringappend_4940 (''i''))) \<and> ((let stringappend_4950 = (string_drop stringappend_4940 ((string_length (''i'')))) in
               if ((case  ((spc_matches_prefix stringappend_4950)) of
                   Some (stringappend_4960,stringappend_4970) =>
                    (let stringappend_4980 = (string_drop stringappend_4950 stringappend_4970) in
                    if ((case  ((reg_name_matches_prefix stringappend_4980
                                 ::  (( 5 Word.word * ii))option)) of
                        Some (stringappend_4990,stringappend_5000) =>
                         (let stringappend_5010 = (string_drop stringappend_4980 stringappend_5000) in
                         if ((case  ((sep_matches_prefix stringappend_5010)) of
                             Some (stringappend_5020,stringappend_5030) =>
                              (let stringappend_5040 =
                                (string_drop stringappend_5010 stringappend_5030) in
                              if ((case  ((hex_bits_5_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_5040
                                           ::  (( 5 Word.word * ii))option)) of
                                  Some (stringappend_5050,stringappend_5060) =>
                                   (let stringappend_5070 =
                                     (string_drop stringappend_5040 stringappend_5060) in
                                   if ((case  ((sep_matches_prefix stringappend_5070)) of
                                       Some (stringappend_5080,stringappend_5090) =>
                                        (let stringappend_5100 =
                                          (string_drop stringappend_5070 stringappend_5090) in
                                        if ((case  ((csr_name_map_matches_prefix stringappend_5100
                                                     ::  (( 12 Word.word * ii))option)) of
                                            Some (stringappend_5110,stringappend_5120) => 
  (case  ((string_drop stringappend_5100 stringappend_5120)) of   s0 => True )
                                          | None => False
                                          )) then
                                          True
                                        else False)
                                     | None => False
                                     )) then
                                     True
                                   else False)
                                | None => False
                                )) then
                                True
                              else False)
                           | None => False
                           )) then
                           True
                         else False)
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_4930) =
       ((case  ((csr_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_4920,stringappend_4930) => (stringappend_4920, stringappend_4930)
       )) in
     (let stringappend_4940 = (string_drop stringappend_00 stringappend_4930) in
     (let stringappend_4950 = (string_drop stringappend_4940 ((string_length (''i'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_4950)) of
        Some (stringappend_4960,stringappend_4970) => (stringappend_4960, stringappend_4970)
  ) of
      (_, stringappend_4970) =>
  (let stringappend_4980 = (string_drop stringappend_4950 stringappend_4970) in
  (let (rd, stringappend_5000) =
       ((case  ((reg_name_matches_prefix stringappend_4980 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_4990,stringappend_5000) => (stringappend_4990, stringappend_5000)
        )) in
  (let stringappend_5010 = (string_drop stringappend_4980 stringappend_5000) in
  (case 
  (case  ((sep_matches_prefix stringappend_5010)) of
        Some (stringappend_5020,stringappend_5030) => (stringappend_5020, stringappend_5030)
  ) of
      (_, stringappend_5030) =>
  (let stringappend_5040 = (string_drop stringappend_5010 stringappend_5030) in
  (let (rs1, stringappend_5060) =
       ((case  ((hex_bits_5_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_5040 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5050,stringappend_5060) => (stringappend_5050, stringappend_5060)
        )) in
  (let stringappend_5070 = (string_drop stringappend_5040 stringappend_5060) in
  (case 
  (case  ((sep_matches_prefix stringappend_5070)) of
        Some (stringappend_5080,stringappend_5090) => (stringappend_5080, stringappend_5090)
  ) of
      (_, stringappend_5090) =>
  (let stringappend_5100 = (string_drop stringappend_5070 stringappend_5090) in
  (let (csr, stringappend_5120) =
       ((case  ((csr_name_map_matches_prefix stringappend_5100 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_5110,stringappend_5120) => (stringappend_5110, stringappend_5120)
        )) in
  (case  ((string_drop stringappend_5100 stringappend_5120)) of
        s0 =>
  Some
    (CSR (csr,rs1,rd,True,op1), ((string_length arg0)) - ((string_length s0)))
  )))
  ))))
  ))))
  ))))
   else if ((case  ((csr_mnemonic_matches_prefix stringappend_00)) of
       Some (stringappend_5140,stringappend_5150) =>
        (let stringappend_5160 = (string_drop stringappend_00 stringappend_5150) in
        if ((case  ((spc_matches_prefix stringappend_5160)) of
            Some (stringappend_5170,stringappend_5180) =>
             (let stringappend_5190 = (string_drop stringappend_5160 stringappend_5180) in
             if ((case  ((reg_name_matches_prefix stringappend_5190  ::  (( 5 Word.word * ii))option)) of
                 Some (stringappend_5200,stringappend_5210) =>
                  (let stringappend_5220 = (string_drop stringappend_5190 stringappend_5210) in
                  if ((case  ((sep_matches_prefix stringappend_5220)) of
                      Some (stringappend_5230,stringappend_5240) =>
                       (let stringappend_5250 = (string_drop stringappend_5220 stringappend_5240) in
                       if ((case  ((reg_name_matches_prefix stringappend_5250
                                    ::  (( 5 Word.word * ii))option)) of
                           Some (stringappend_5260,stringappend_5270) =>
                            (let stringappend_5280 =
                              (string_drop stringappend_5250 stringappend_5270) in
                            if ((case  ((sep_matches_prefix stringappend_5280)) of
                                Some (stringappend_5290,stringappend_5300) =>
                                 (let stringappend_5310 =
                                   (string_drop stringappend_5280 stringappend_5300) in
                                 if ((case  ((csr_name_map_matches_prefix stringappend_5310
                                              ::  (( 12 Word.word * ii))option)) of
                                     Some (stringappend_5320,stringappend_5330) => 
  (case  ((string_drop stringappend_5310 stringappend_5330)) of   s0 => True )
                                   | None => False
                                   )) then
                                   True
                                 else False)
                              | None => False
                              )) then
                              True
                            else False)
                         | None => False
                         )) then
                         True
                       else False)
                    | None => False
                    )) then
                    True
                  else False)
               | None => False
               )) then
               True
             else False)
          | None => False
          )) then
          True
        else False)
     | None => False
     )) then
     (let (op1, stringappend_5150) =
       ((case  ((csr_mnemonic_matches_prefix stringappend_00)) of
         Some (stringappend_5140,stringappend_5150) => (stringappend_5140, stringappend_5150)
       )) in
     (let stringappend_5160 = (string_drop stringappend_00 stringappend_5150) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5160)) of
        Some (stringappend_5170,stringappend_5180) => (stringappend_5170, stringappend_5180)
  ) of
      (_, stringappend_5180) =>
  (let stringappend_5190 = (string_drop stringappend_5160 stringappend_5180) in
  (let (rd, stringappend_5210) =
       ((case  ((reg_name_matches_prefix stringappend_5190 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5200,stringappend_5210) => (stringappend_5200, stringappend_5210)
        )) in
  (let stringappend_5220 = (string_drop stringappend_5190 stringappend_5210) in
  (case 
  (case  ((sep_matches_prefix stringappend_5220)) of
        Some (stringappend_5230,stringappend_5240) => (stringappend_5230, stringappend_5240)
  ) of
      (_, stringappend_5240) =>
  (let stringappend_5250 = (string_drop stringappend_5220 stringappend_5240) in
  (let (rs1, stringappend_5270) =
       ((case  ((reg_name_matches_prefix stringappend_5250 :: (( 5 Word.word * ii)) option)) of
              Some (stringappend_5260,stringappend_5270) => (stringappend_5260, stringappend_5270)
        )) in
  (let stringappend_5280 = (string_drop stringappend_5250 stringappend_5270) in
  (case 
  (case  ((sep_matches_prefix stringappend_5280)) of
        Some (stringappend_5290,stringappend_5300) => (stringappend_5290, stringappend_5300)
  ) of
      (_, stringappend_5300) =>
  (let stringappend_5310 = (string_drop stringappend_5280 stringappend_5300) in
  (let (csr, stringappend_5330) =
       ((case  ((csr_name_map_matches_prefix stringappend_5310 :: (( 12 Word.word * ii)) option)) of
              Some (stringappend_5320,stringappend_5330) => (stringappend_5320, stringappend_5330)
        )) in
  (case  ((string_drop stringappend_5310 stringappend_5330)) of
        s0 =>
  Some
    (CSR (csr,rs1,rd,False,op1), ((string_length arg0)) -
                                   ((string_length s0)))
  )))
  ))))
  ))))
  )))
   else if (((((string_startswith stringappend_00 (''illegal''))) \<and> ((let stringappend_5350 = (string_drop stringappend_00 ((string_length (''illegal'')))) in
               if ((case  ((spc_matches_prefix stringappend_5350)) of
                   Some (stringappend_5360,stringappend_5370) =>
                    (let stringappend_5380 = (string_drop stringappend_5350 stringappend_5370) in
                    if ((case  ((hex_bits_32_matches_prefix 
  instance_Sail2_values_Bitvector_Machine_word_mword_dict stringappend_5380
                                 ::  (( 32 Word.word * ii))option)) of
                        Some (stringappend_5390,stringappend_5400) => 
  (case  ((string_drop stringappend_5380 stringappend_5400)) of   s0 => True )
                      | None => False
                      )) then
                      True
                    else False)
                 | None => False
                 )) then
                 True
               else False))))) then
     (let stringappend_5350 = (string_drop stringappend_00 ((string_length (''illegal'')))) in  
  (case 
  (case  ((spc_matches_prefix stringappend_5350)) of
        Some (stringappend_5360,stringappend_5370) => (stringappend_5360, stringappend_5370)
  ) of
      (_, stringappend_5370) =>
  (let stringappend_5380 = (string_drop stringappend_5350 stringappend_5370) in
  (let (s, stringappend_5400) =
       ((case  ((hex_bits_32_matches_prefix
                   instance_Sail2_values_Bitvector_Machine_word_mword_dict
                   stringappend_5380 :: (( 32 Word.word * ii)) option)) of
              Some (stringappend_5390,stringappend_5400) => (stringappend_5390, stringappend_5400)
        )) in
  (case  ((string_drop stringappend_5380 stringappend_5400)) of
        s1 => Some (ILLEGAL s, ((string_length arg0)) - ((string_length s1)))
  )))
  ))
   else None))"


(*val encdec_forwards : ast -> mword ty32*)

fun encdec_forwards  :: " ast \<Rightarrow>(32)Word.word "  where 
     " encdec_forwards (UTYPE (imm,rd,op1)) = (
      (concat_vec imm ((concat_vec rd ((encdec_uop_forwards op1  ::  7 Word.word))  ::  12 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RISCV_JAL (v__172,rd)) = (
      (let (imm_19 :: 1 bits) = ((subrange_vec_dec v__172 (( 20 :: int)::ii) (( 20 :: int)::ii)  ::  1 Word.word)) in
      (let (imm_7_0 :: 8 bits) = ((subrange_vec_dec v__172 (( 19 :: int)::ii) (( 12 :: int)::ii)  ::  8 Word.word)) in
      (let (imm_8 :: 1 bits) = ((subrange_vec_dec v__172 (( 11 :: int)::ii) (( 11 :: int)::ii)  ::  1 Word.word)) in
      (let (imm_18_13 :: 6 bits) = ((subrange_vec_dec v__172 (( 10 :: int)::ii) (( 5 :: int)::ii)  ::  6 Word.word)) in
      (let (imm_12_9 :: 4 bits) = ((subrange_vec_dec v__172 (( 4 :: int)::ii) (( 1 :: int)::ii)  ::  4 Word.word)) in
      (concat_vec imm_19
         ((concat_vec imm_18_13
             ((concat_vec imm_12_9
                 ((concat_vec imm_8
                     ((concat_vec imm_7_0
                         ((concat_vec rd (vec_of_bits [B1,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  20 Word.word))
                    ::  21 Word.word))
                ::  25 Word.word))
            ::  31 Word.word))
        ::  32 Word.word)))))))"
|" encdec_forwards (RISCV_JALR (imm,rs1,rd)) = (
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                 ((concat_vec rd (vec_of_bits [B1,B1,B0,B0,B1,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (BTYPE (v__173,rs2,rs1,op1)) = (
      (let (imm7_6 :: 1 bits) = ((subrange_vec_dec v__173 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
      (let (imm5_0 :: 1 bits) = ((subrange_vec_dec v__173 (( 11 :: int)::ii) (( 11 :: int)::ii)  ::  1 Word.word)) in
      (let (imm7_5_0 :: 6 bits) = ((subrange_vec_dec v__173 (( 10 :: int)::ii) (( 5 :: int)::ii)  ::  6 Word.word)) in
      (let (imm5_4_1 :: 4 bits) = ((subrange_vec_dec v__173 (( 4 :: int)::ii) (( 1 :: int)::ii)  ::  4 Word.word)) in
      (concat_vec imm7_6
         ((concat_vec imm7_5_0
             ((concat_vec rs2
                 ((concat_vec rs1
                     ((concat_vec ((encdec_bop_forwards op1  ::  3 Word.word))
                         ((concat_vec imm5_4_1
                             ((concat_vec imm5_0 (vec_of_bits [B1,B1,B0,B0,B0,B1,B1]  ::  7 Word.word)
                                ::  8 Word.word))
                            ::  12 Word.word))
                        ::  15 Word.word))
                    ::  20 Word.word))
                ::  25 Word.word))
            ::  31 Word.word))
        ::  32 Word.word))))))"
|" encdec_forwards (ITYPE (imm,rs1,rd,op1)) = (
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec ((encdec_iop_forwards op1  ::  3 Word.word))
                 ((concat_vec rd (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTIOP (shamt,rs1,rd,RISCV_SLLI)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  26 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTIOP (shamt,rs1,rd,RISCV_SRLI)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  26 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTIOP (shamt,rs1,rd,RISCV_SRAI)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0]  ::  6 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  26 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_ADD)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SUB)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SLL)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SLT)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B1,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SLTU)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B1,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_XOR)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SRL)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_SRA)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_OR)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B1,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPE (rs2,rs1,rd,RISCV_AND)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B1,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (LOAD (imm,rs1,rd,is_unsigned,size1,False,False)) = (
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec ((bool_bits_forwards is_unsigned  ::  1 Word.word))
                 ((concat_vec ((size_bits_forwards size1  ::  2 Word.word))
                     ((concat_vec rd (vec_of_bits [B0,B0,B0,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  14 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (STORE (v__174,rs2,rs1,size1,False,False)) = (
      (let (imm7 :: 7 bits) = ((subrange_vec_dec v__174 (( 11 :: int)::ii) (( 5 :: int)::ii)  ::  7 Word.word)) in
      (let (imm5 :: 5 bits) = ((subrange_vec_dec v__174 (( 4 :: int)::ii) (( 0 :: int)::ii)  ::  5 Word.word)) in
      (concat_vec imm7
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                     ((concat_vec ((size_bits_forwards size1  ::  2 Word.word))
                         ((concat_vec imm5 (vec_of_bits [B0,B1,B0,B0,B0,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  14 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))))"
|" encdec_forwards (ADDIW (imm,rs1,rd)) = (
      (concat_vec imm
         ((concat_vec rs1
             ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                 ((concat_vec rd (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTW (shamt,rs1,rd,RISCV_SLLI)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTW (shamt,rs1,rd,RISCV_SRLI)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SHIFTW (shamt,rs1,rd,RISCV_SRAI)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec shamt
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPEW (rs2,rs1,rd,RISCV_ADDW)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPEW (rs2,rs1,rd,RISCV_SUBW)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPEW (rs2,rs1,rd,RISCV_SLLW)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPEW (rs2,rs1,rd,RISCV_SRLW)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (RTYPEW (rs2,rs1,rd,RISCV_SRAW)) = (
      (concat_vec (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0,B1]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (MUL (rs2,rs1,rd,high,signed1,signed2)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec ((encdec_mul_op_forwards high signed1 signed2  ::  3 Word.word))
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (DIV (rs2,rs1,rd,s)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0]  ::  2 Word.word)
                     ((concat_vec ((bool_not_bits_forwards s  ::  1 Word.word))
                         ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  13 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (REM (rs2,rs1,rd,s)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B1]  ::  2 Word.word)
                     ((concat_vec ((bool_not_bits_forwards s  ::  1 Word.word))
                         ((concat_vec rd (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  13 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (MULW (rs2,rs1,rd)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (DIVW (rs2,rs1,rd,s)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B0]  ::  2 Word.word)
                     ((concat_vec ((bool_not_bits_forwards s  ::  1 Word.word))
                         ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  13 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (REMW (rs2,rs1,rd,s)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B1,B1]  ::  2 Word.word)
                     ((concat_vec ((bool_not_bits_forwards s  ::  1 Word.word))
                         ((concat_vec rd (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  13 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (FENCE (pred,succ)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word)
         ((concat_vec pred
             ((concat_vec succ
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                             (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)
                            ::  12 Word.word))
                        ::  15 Word.word))
                    ::  20 Word.word))
                ::  24 Word.word))
            ::  28 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (FENCEI (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B1]  ::  3 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)
                    ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (ECALL (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                    ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (MRET (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B1,B1,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                         (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                        ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SRET (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B1,B0,B0,B0]  ::  7 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                         (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                        ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (EBREAK (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                    ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (WFI (_)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
             ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                    ::  12 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (SFENCE_VMA (rs1,rs2)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B1,B0,B0,B1]  ::  7 Word.word)
         ((concat_vec rs2
             ((concat_vec rs1
                 ((concat_vec (vec_of_bits [B0,B0,B0]  ::  3 Word.word)
                     ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                         (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)
                        ::  12 Word.word))
                    ::  15 Word.word))
                ::  20 Word.word))
            ::  25 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (LOADRES (aq,rl,rs1,size1,rd)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word)
         ((concat_vec ((bool_bits_forwards aq  ::  1 Word.word))
             ((concat_vec ((bool_bits_forwards rl  ::  1 Word.word))
                 ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word)
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                             ((concat_vec ((size_bits_forwards size1  ::  2 Word.word))
                                 ((concat_vec rd (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)
                                    ::  12 Word.word))
                                ::  14 Word.word))
                            ::  15 Word.word))
                        ::  20 Word.word))
                    ::  25 Word.word))
                ::  26 Word.word))
            ::  27 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (STORECON (aq,rl,rs2,rs1,size1,rd)) = (
      (concat_vec (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)
         ((concat_vec ((bool_bits_forwards aq  ::  1 Word.word))
             ((concat_vec ((bool_bits_forwards rl  ::  1 Word.word))
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                             ((concat_vec ((size_bits_forwards size1  ::  2 Word.word))
                                 ((concat_vec rd (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)
                                    ::  12 Word.word))
                                ::  14 Word.word))
                            ::  15 Word.word))
                        ::  20 Word.word))
                    ::  25 Word.word))
                ::  26 Word.word))
            ::  27 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (AMO (op1,aq,rl,rs2,rs1,size1,rd)) = (
      (concat_vec ((encdec_amoop_forwards op1  ::  5 Word.word))
         ((concat_vec ((bool_bits_forwards aq  ::  1 Word.word))
             ((concat_vec ((bool_bits_forwards rl  ::  1 Word.word))
                 ((concat_vec rs2
                     ((concat_vec rs1
                         ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                             ((concat_vec ((size_bits_forwards size1  ::  2 Word.word))
                                 ((concat_vec rd (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)
                                    ::  12 Word.word))
                                ::  14 Word.word))
                            ::  15 Word.word))
                        ::  20 Word.word))
                    ::  25 Word.word))
                ::  26 Word.word))
            ::  27 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (CSR (csr,rs1,rd,is_imm,op1)) = (
      (concat_vec csr
         ((concat_vec rs1
             ((concat_vec ((bool_bits_forwards is_imm  ::  1 Word.word))
                 ((concat_vec ((encdec_csrop_forwards op1  ::  2 Word.word))
                     ((concat_vec rd (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)  ::  12 Word.word))
                    ::  14 Word.word))
                ::  15 Word.word))
            ::  20 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (STOP_FETCHING (_)) = (
      (concat_vec (vec_of_bits [B1,B1,B1,B1,B1,B0,B1,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word)
             ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0]  ::  2 Word.word)
                     ((concat_vec (vec_of_bits [B0,B1,B0]  ::  3 Word.word)
                         (vec_of_bits [B1,B1]  ::  2 Word.word)
                        ::  5 Word.word))
                    ::  7 Word.word))
                ::  8 Word.word))
            ::  16 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (THREAD_START (_)) = (
      (concat_vec (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word)
         ((concat_vec (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word)
             ((concat_vec (vec_of_bits [B0]  ::  1 Word.word)
                 ((concat_vec (vec_of_bits [B0,B0]  ::  2 Word.word)
                     ((concat_vec (vec_of_bits [B0,B1,B0]  ::  3 Word.word)
                         (vec_of_bits [B1,B1]  ::  2 Word.word)
                        ::  5 Word.word))
                    ::  7 Word.word))
                ::  8 Word.word))
            ::  16 Word.word))
        ::  32 Word.word))"
|" encdec_forwards (ILLEGAL (s)) = ( s )"


(*val encdec_backwards : mword ty32 -> ast*)

definition encdec_backwards  :: "(32)Word.word \<Rightarrow> ast "  where 
     " encdec_backwards arg0 = (
   (let v__175 = arg0 in
   if ((let mappingpatterns_230 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     encdec_uop_backwards_matches mappingpatterns_230)) then
     (let (imm ::  20 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 12 :: int)::ii)  ::  20 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_230 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (let op1 = (encdec_uop_backwards mappingpatterns_230) in
     UTYPE (imm,rd,op1)))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (p00 = (vec_of_bits [B1,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)))) then
     (let (imm_19 :: 1 bits) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 31 :: int)::ii)  ::  1 Word.word)) in
     (let (imm_18_13 :: 6 bits) = ((subrange_vec_dec v__175 (( 30 :: int)::ii) (( 25 :: int)::ii)  ::  6 Word.word)) in
     (let (imm_12_9 :: 4 bits) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 21 :: int)::ii)  ::  4 Word.word)) in
     (let (imm_8 :: 1 bits) = ((subrange_vec_dec v__175 (( 20 :: int)::ii) (( 20 :: int)::ii)  ::  1 Word.word)) in
     (let (imm_7_0 :: 8 bits) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 12 :: int)::ii)  ::  8 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RISCV_JAL ((concat_vec imm_19
                   ((concat_vec imm_7_0
                       ((concat_vec imm_8
                           ((concat_vec imm_18_13
                               ((concat_vec imm_12_9 (vec_of_bits [B0]  ::  1 Word.word)  ::  5 Word.word))
                              ::  11 Word.word))
                          ::  12 Word.word))
                      ::  20 Word.word))
                  ::  21 Word.word),rd)))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((p10 = (vec_of_bits [B1,B1,B0,B0,B1,B1,B1]  ::  7 Word.word)))) \<and> (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))))))) then
     (let (imm ::  12 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RISCV_JALR (imm,rs1,rd))))
   else if ((let mappingpatterns_240 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p00 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((encdec_bop_backwards_matches mappingpatterns_240)) \<and> (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B1,B1]  ::  7 Word.word)))))))) then
     (let (imm7_6 :: 1 bits) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 31 :: int)::ii)  ::  1 Word.word)) in
     (let (imm7_5_0 :: 6 bits) = ((subrange_vec_dec v__175 (( 30 :: int)::ii) (( 25 :: int)::ii)  ::  6 Word.word)) in
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_240 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let (imm5_4_1 :: 4 bits) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 8 :: int)::ii)  ::  4 Word.word)) in
     (let (imm5_0 :: 1 bits) = ((subrange_vec_dec v__175 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let op1 = (encdec_bop_backwards mappingpatterns_240) in
     BTYPE ((concat_vec imm7_6
               ((concat_vec imm5_0
                   ((concat_vec imm7_5_0
                       ((concat_vec imm5_4_1 (vec_of_bits [B0]  ::  1 Word.word)  ::  5 Word.word))
                      ::  11 Word.word))
                  ::  12 Word.word))
              ::  13 Word.word),rs2,rs1,op1)))))))))
   else if ((let mappingpatterns_250 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p00 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((encdec_iop_backwards_matches mappingpatterns_250)) \<and> (((p00 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))))))) then
     (let (imm ::  12 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_250 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let op1 = (encdec_iop_backwards mappingpatterns_250) in
     ITYPE (imm,rs1,rd,op1))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     (let (shamt ::  6 Word.word) = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 20 :: int)::ii)  ::  6 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SLLI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     (let (shamt ::  6 Word.word) = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 20 :: int)::ii)  ::  6 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRLI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     (let (shamt ::  6 Word.word) = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 20 :: int)::ii)  ::  6 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTIOP (shamt,rs1,rd,RISCV_SRAI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_ADD))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SUB))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLL))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLT))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B1,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SLTU))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_XOR))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SRL))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_SRA))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_OR))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B1,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPE (rs2,rs1,rd,RISCV_AND))))
   else if ((let mappingpatterns_260 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_270 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p00 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((size_bits_backwards_matches mappingpatterns_270)) \<and> ((bool_bits_backwards_matches mappingpatterns_260))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B1]  ::  7 Word.word))))))))) then
     (let (imm ::  12 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_260 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_270 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_270) in
     (let is_unsigned = (bool_bits_backwards mappingpatterns_260) in
     LOAD (imm,rs1,rd,is_unsigned,size1,False,False))))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_280 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((size_bits_backwards_matches mappingpatterns_280)) \<and> (((p10 = (vec_of_bits [B0,B1,B0,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0]  ::  1 Word.word))))))))) then
     (let (imm7 :: 7 bits) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_280 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (imm5 :: 5 bits) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_280) in
     STORE ((concat_vec imm7 imm5  ::  12 Word.word),rs2,rs1,size1,False,False)))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((p10 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))))))) then
     (let (imm ::  12 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     ADDIW (imm,rs1,rd))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (shamt ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SLLI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (shamt ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SRLI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (shamt ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     SHIFTW (shamt,rs1,rd,RISCV_SRAI))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPEW (rs2,rs1,rd,RISCV_ADDW))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SUBW))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SLLW))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SRLW))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     RTYPEW (rs2,rs1,rd,RISCV_SRAW))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let (mappingpatterns_290 :: 3 bits) = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((encdec_mul_op_backwards_matches mappingpatterns_290)) \<and> (((p10 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (mappingpatterns_290 :: 3 bits) = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let (high, signed1, signed2) = (encdec_mul_op_backwards mappingpatterns_290) in
     MUL (rs2,rs1,rd,high,signed1,signed2))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_300 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_300)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_300 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_300) in
     DIV (rs2,rs1,rd,s))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_310 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_310)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_310 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_310) in
     REM (rs2,rs1,rd,s))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     MULW (rs2,rs1,rd))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_320 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_320)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_320 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_320) in
     DIVW (rs2,rs1,rd,s))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_330 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_330)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_330 = ((subrange_vec_dec v__175 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_330) in
     REMW (rs2,rs1,rd,s))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 28 :: int)::ii)  ::  4 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word))))))))))) then
     (let (pred ::  4 Word.word) = ((subrange_vec_dec v__175 (( 27 :: int)::ii) (( 24 :: int)::ii)  ::  4 Word.word)) in
     (let (succ ::  4 Word.word) = ((subrange_vec_dec v__175 (( 23 :: int)::ii) (( 20 :: int)::ii)  ::  4 Word.word)) in
     FENCE (pred,succ)))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word))))))))))) then
     FENCEI () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word))))))))))) then
     ECALL () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p50 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p40)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p30 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0]  ::  7 Word.word)))))))))))) then
     MRET () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p50 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p40)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p30 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0]  ::  7 Word.word)))))))))))) then
     SRET () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word))))))))))) then
     EBREAK () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word))))))))))) then
     WFI () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((p30 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     SFENCE_VMA (rs1,rs2)))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_340 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_350 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_360 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((((size_bits_backwards_matches mappingpatterns_360)) \<and> ((bool_bits_backwards_matches mappingpatterns_350))))) \<and> ((bool_bits_backwards_matches mappingpatterns_340))))) \<and> (((p30 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))))))))) then
     (let mappingpatterns_340 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_350 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_360 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_360) in
     (let rl = (bool_bits_backwards mappingpatterns_350) in
     (let aq = (bool_bits_backwards mappingpatterns_340) in
     LOADRES (aq,rl,rs1,size1,rd)))))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_370 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_380 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_390 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_390)) \<and> ((bool_bits_backwards_matches mappingpatterns_380))))) \<and> ((bool_bits_backwards_matches mappingpatterns_370))))) \<and> (((p20 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)))))))))))))) then
     (let mappingpatterns_370 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_380 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_390 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_390) in
     (let rl = (bool_bits_backwards mappingpatterns_380) in
     (let aq = (bool_bits_backwards mappingpatterns_370) in
     STORECON (aq,rl,rs2,rs1,size1,rd))))))))))
   else if ((let mappingpatterns_400 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_410 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_420 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p00 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_430 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_430)) \<and> ((bool_bits_backwards_matches mappingpatterns_420))))) \<and> ((bool_bits_backwards_matches mappingpatterns_410))))) \<and> ((encdec_amoop_backwards_matches mappingpatterns_400))))) \<and> (((p10 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))))))))))) then
     (let mappingpatterns_400 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_410 = ((subrange_vec_dec v__175 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_420 = ((subrange_vec_dec v__175 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let (rs2 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_430 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_430) in
     (let rl = (bool_bits_backwards mappingpatterns_420) in
     (let aq = (bool_bits_backwards mappingpatterns_410) in
     (let op1 = (encdec_amoop_backwards mappingpatterns_400) in
     AMO (op1,aq,rl,rs2,rs1,size1,rd))))))))))))
   else if ((let mappingpatterns_440 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_450 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p00 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((encdec_csrop_backwards_matches mappingpatterns_450)) \<and> ((bool_bits_backwards_matches mappingpatterns_440))))) \<and> (((p00 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))))) then
     (let (csr ::  12 Word.word) = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let (rs1 ::  5 Word.word) = ((subrange_vec_dec v__175 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_440 = ((subrange_vec_dec v__175 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_450 = ((subrange_vec_dec v__175 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let (rd ::  5 Word.word) = ((subrange_vec_dec v__175 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let op1 = (encdec_csrop_backwards mappingpatterns_450) in
     (let is_imm = (bool_bits_backwards mappingpatterns_440) in
     CSR (csr,rs1,rd,is_imm,op1))))))))
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 16 :: int)::ii)  ::  16 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 15 :: int)::ii) (( 8 :: int)::ii)  ::  8 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let p50 = ((subrange_vec_dec v__175 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((p40 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p30 = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word))))))) \<and> (((p00 = (vec_of_bits [B1,B1,B1,B1,B1,B0,B1,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word))))))))))))
   then
     STOP_FETCHING () 
   else if ((let p00 = ((subrange_vec_dec v__175 (( 31 :: int)::ii) (( 16 :: int)::ii)  ::  16 Word.word)) in
     (let p10 = ((subrange_vec_dec v__175 (( 15 :: int)::ii) (( 8 :: int)::ii)  ::  8 Word.word)) in
     (let p20 = ((subrange_vec_dec v__175 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let p30 = ((subrange_vec_dec v__175 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let p40 = ((subrange_vec_dec v__175 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let p50 = ((subrange_vec_dec v__175 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((p40 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p30 = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word))))))) \<and> (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word))))))))))))
   then
     THREAD_START () 
   else ILLEGAL v__175))"


(*val encdec_forwards_matches : ast -> bool*)

fun encdec_forwards_matches  :: " ast \<Rightarrow> bool "  where 
     " encdec_forwards_matches (UTYPE (imm,rd,op1)) = ( True )"
|" encdec_forwards_matches (RISCV_JAL (v__224,rd)) = (
      if ((let p00 = ((subrange_vec_dec v__224 (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word)) in
        (p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then
        True
      else
        (let g__17 = (RISCV_JAL (v__224,rd)) in
        False))"
|" encdec_forwards_matches (RISCV_JALR (imm,rs1,rd)) = ( True )"
|" encdec_forwards_matches (BTYPE (v__225,rs2,rs1,op1)) = (
      if ((let p00 = ((subrange_vec_dec v__225 (( 0 :: int)::ii) (( 0 :: int)::ii)  ::  1 Word.word)) in
        (p00 = (vec_of_bits [B0]  ::  1 Word.word)))) then
        True
      else
        (let g__17 = (BTYPE (v__225,rs2,rs1,op1)) in
        False))"
|" encdec_forwards_matches (ITYPE (imm,rs1,rd,op1)) = ( True )"
|" encdec_forwards_matches (SHIFTIOP (shamt,rs1,rd,RISCV_SLLI)) = ( True )"
|" encdec_forwards_matches (SHIFTIOP (shamt,rs1,rd,RISCV_SRLI)) = ( True )"
|" encdec_forwards_matches (SHIFTIOP (shamt,rs1,rd,RISCV_SRAI)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_ADD)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SUB)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SLL)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SLT)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SLTU)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_XOR)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SRL)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_SRA)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_OR)) = ( True )"
|" encdec_forwards_matches (RTYPE (rs2,rs1,rd,RISCV_AND)) = ( True )"
|" encdec_forwards_matches (LOAD (imm,rs1,rd,is_unsigned,size1,False,False)) = ( True )"
|" encdec_forwards_matches (STORE (v__226,rs2,rs1,size1,False,False)) = ( True )"
|" encdec_forwards_matches (ADDIW (imm,rs1,rd)) = ( True )"
|" encdec_forwards_matches (SHIFTW (shamt,rs1,rd,RISCV_SLLI)) = ( True )"
|" encdec_forwards_matches (SHIFTW (shamt,rs1,rd,RISCV_SRLI)) = ( True )"
|" encdec_forwards_matches (SHIFTW (shamt,rs1,rd,RISCV_SRAI)) = ( True )"
|" encdec_forwards_matches (RTYPEW (rs2,rs1,rd,RISCV_ADDW)) = ( True )"
|" encdec_forwards_matches (RTYPEW (rs2,rs1,rd,RISCV_SUBW)) = ( True )"
|" encdec_forwards_matches (RTYPEW (rs2,rs1,rd,RISCV_SLLW)) = ( True )"
|" encdec_forwards_matches (RTYPEW (rs2,rs1,rd,RISCV_SRLW)) = ( True )"
|" encdec_forwards_matches (RTYPEW (rs2,rs1,rd,RISCV_SRAW)) = ( True )"
|" encdec_forwards_matches (MUL (rs2,rs1,rd,high,signed1,signed2)) = ( True )"
|" encdec_forwards_matches (DIV (rs2,rs1,rd,s)) = ( True )"
|" encdec_forwards_matches (REM (rs2,rs1,rd,s)) = ( True )"
|" encdec_forwards_matches (MULW (rs2,rs1,rd)) = ( True )"
|" encdec_forwards_matches (DIVW (rs2,rs1,rd,s)) = ( True )"
|" encdec_forwards_matches (REMW (rs2,rs1,rd,s)) = ( True )"
|" encdec_forwards_matches (FENCE (pred,succ)) = ( True )"
|" encdec_forwards_matches (FENCEI (_)) = ( True )"
|" encdec_forwards_matches (ECALL (_)) = ( True )"
|" encdec_forwards_matches (MRET (_)) = ( True )"
|" encdec_forwards_matches (SRET (_)) = ( True )"
|" encdec_forwards_matches (EBREAK (_)) = ( True )"
|" encdec_forwards_matches (WFI (_)) = ( True )"
|" encdec_forwards_matches (SFENCE_VMA (rs1,rs2)) = ( True )"
|" encdec_forwards_matches (LOADRES (aq,rl,rs1,size1,rd)) = ( True )"
|" encdec_forwards_matches (STORECON (aq,rl,rs2,rs1,size1,rd)) = ( True )"
|" encdec_forwards_matches (AMO (op1,aq,rl,rs2,rs1,size1,rd)) = ( True )"
|" encdec_forwards_matches (CSR (csr,rs1,rd,is_imm,op1)) = ( True )"
|" encdec_forwards_matches (STOP_FETCHING (_)) = ( True )"
|" encdec_forwards_matches (THREAD_START (_)) = ( True )"
|" encdec_forwards_matches (ILLEGAL (s)) = ( True )"
|" encdec_forwards_matches g__17 = ( False )"


(*val encdec_backwards_matches : mword ty32 -> bool*)

definition encdec_backwards_matches  :: "(32)Word.word \<Rightarrow> bool "  where 
     " encdec_backwards_matches arg0 = (
   (let v__227 = arg0 in
   if ((let mappingpatterns_00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     encdec_uop_backwards_matches mappingpatterns_00)) then
     (let mappingpatterns_00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (let op1 = (encdec_uop_backwards mappingpatterns_00) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (p00 = (vec_of_bits [B1,B1,B0,B1,B1,B1,B1]  ::  7 Word.word)))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((p10 = (vec_of_bits [B1,B1,B0,B0,B1,B1,B1]  ::  7 Word.word)))) \<and> (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))))))) then
     True
   else if ((let mappingpatterns_10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((encdec_bop_backwards_matches mappingpatterns_10)) \<and> (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B1,B1]  ::  7 Word.word)))))))) then
     (let mappingpatterns_10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let op1 = (encdec_bop_backwards mappingpatterns_10) in
     True))
   else if ((let mappingpatterns_20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((encdec_iop_backwards_matches mappingpatterns_20)) \<and> (((p00 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))))))) then
     (let mappingpatterns_20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let op1 = (encdec_iop_backwards mappingpatterns_20) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 26 :: int)::ii)  ::  6 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0]  ::  6 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B1,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B1,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B1,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let mappingpatterns_30 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_40 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((size_bits_backwards_matches mappingpatterns_40)) \<and> ((bool_bits_backwards_matches mappingpatterns_30))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B1,B1]  ::  7 Word.word))))))))) then
     (let mappingpatterns_30 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_40 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_40) in
     (let is_unsigned = (bool_bits_backwards mappingpatterns_30) in
     True))))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_50 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((size_bits_backwards_matches mappingpatterns_50)) \<and> (((p10 = (vec_of_bits [B0,B1,B0,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0]  ::  1 Word.word))))))))) then
     (let mappingpatterns_50 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_50) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((p10 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p00 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word)))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B0,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B1,B0,B1]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B1,B0,B0,B0,B0,B0]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let (mappingpatterns_60 :: 3 bits) = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((encdec_mul_op_backwards_matches mappingpatterns_60)) \<and> (((p10 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word))))))))) then
     (let (mappingpatterns_60 :: 3 bits) = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let (high, signed1, signed2) = (encdec_mul_op_backwards mappingpatterns_60) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_70 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_70)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let mappingpatterns_70 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_70) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_80 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_80)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let mappingpatterns_80 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_80) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word)))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_90 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_90)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let mappingpatterns_90 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_90) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 13 :: int)::ii)  ::  2 Word.word)) in
     (let mappingpatterns_100 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((bool_not_bits_backwards_matches mappingpatterns_100)) \<and> (((p20 = (vec_of_bits [B0,B1,B1,B1,B0,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B1]  ::  7 Word.word)))))))))) then
     (let mappingpatterns_100 = ((subrange_vec_dec v__227 (( 12 :: int)::ii) (( 12 :: int)::ii)  ::  1 Word.word)) in
     (let s = (bool_not_bits_backwards mappingpatterns_100) in
     True))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 28 :: int)::ii)  ::  4 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0]  ::  4 Word.word))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B0,B0,B0,B1,B1,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B1]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]  ::  12 Word.word))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p50 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p40)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p30 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B1,B1,B0,B0,B0]  ::  7 Word.word)))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p50 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p40)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p30 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0]  ::  7 Word.word)))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B1]  ::  12 Word.word))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 20 :: int)::ii)  ::  12 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 19 :: int)::ii) (( 15 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((p40 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p30)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p20 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B0,B0,B0,B1,B0,B1]  ::  12 Word.word))))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 25 :: int)::ii)  ::  7 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 12 :: int)::ii)  ::  3 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 11 :: int)::ii) (( 7 :: int)::ii)  ::  5 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((p30 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word)))) \<and> (((((regbits_to_regno p20)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0]  ::  3 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0,B0,B0,B1,B0,B0,B1]  ::  7 Word.word)))))))))) then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_110 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_120 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 24 :: int)::ii) (( 20 :: int)::ii)  ::  5 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_130 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((((((((((((((size_bits_backwards_matches mappingpatterns_130)) \<and> ((bool_bits_backwards_matches mappingpatterns_120))))) \<and> ((bool_bits_backwards_matches mappingpatterns_110))))) \<and> (((p30 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((((regbits_to_regno p10)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B0,B0]  ::  5 Word.word))))))))) \<and> (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B0]  ::  5 Word.word))))))))))))))) then
     (let mappingpatterns_110 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_120 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_130 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_130) in
     (let rl = (bool_bits_backwards mappingpatterns_120) in
     (let aq = (bool_bits_backwards mappingpatterns_110) in
     True))))))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_140 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_150 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_160 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_160)) \<and> ((bool_bits_backwards_matches mappingpatterns_150))))) \<and> ((bool_bits_backwards_matches mappingpatterns_140))))) \<and> (((p20 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((((regbits_to_regno p00)) = ((regbits_to_regno (vec_of_bits [B0,B0,B0,B1,B1]  ::  5 Word.word)))))))))))))) then
     (let mappingpatterns_140 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_150 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_160 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_160) in
     (let rl = (bool_bits_backwards mappingpatterns_150) in
     (let aq = (bool_bits_backwards mappingpatterns_140) in
     True))))))
   else if ((let mappingpatterns_170 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_180 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_190 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let p00 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_200 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     (((((((((((((((size_bits_backwards_matches mappingpatterns_200)) \<and> ((bool_bits_backwards_matches mappingpatterns_190))))) \<and> ((bool_bits_backwards_matches mappingpatterns_180))))) \<and> ((encdec_amoop_backwards_matches mappingpatterns_170))))) \<and> (((p10 = (vec_of_bits [B0,B1,B0,B1,B1,B1,B1]  ::  7 Word.word))))))) \<and> (((p00 = (vec_of_bits [B0]  ::  1 Word.word)))))))))))) then
     (let mappingpatterns_170 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 27 :: int)::ii)  ::  5 Word.word)) in
     (let mappingpatterns_180 = ((subrange_vec_dec v__227 (( 26 :: int)::ii) (( 26 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_190 = ((subrange_vec_dec v__227 (( 25 :: int)::ii) (( 25 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_200 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let size1 = (size_bits_backwards mappingpatterns_200) in
     (let rl = (bool_bits_backwards mappingpatterns_190) in
     (let aq = (bool_bits_backwards mappingpatterns_180) in
     (let op1 = (encdec_amoop_backwards mappingpatterns_170) in
     True))))))))
   else if ((let mappingpatterns_210 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_220 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let p00 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 0 :: int)::ii)  ::  7 Word.word)) in
     ((((((encdec_csrop_backwards_matches mappingpatterns_220)) \<and> ((bool_bits_backwards_matches mappingpatterns_210))))) \<and> (((p00 = (vec_of_bits [B1,B1,B1,B0,B0,B1,B1]  ::  7 Word.word))))))))) then
     (let mappingpatterns_210 = ((subrange_vec_dec v__227 (( 14 :: int)::ii) (( 14 :: int)::ii)  ::  1 Word.word)) in
     (let mappingpatterns_220 = ((subrange_vec_dec v__227 (( 13 :: int)::ii) (( 12 :: int)::ii)  ::  2 Word.word)) in
     (let op1 = (encdec_csrop_backwards mappingpatterns_220) in
     (let is_imm = (bool_bits_backwards mappingpatterns_210) in
     True))))
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 16 :: int)::ii)  ::  16 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 15 :: int)::ii) (( 8 :: int)::ii)  ::  8 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let p50 = ((subrange_vec_dec v__227 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((p40 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p30 = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word))))))) \<and> (((p00 = (vec_of_bits [B1,B1,B1,B1,B1,B0,B1,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word))))))))))))
   then
     True
   else if ((let p00 = ((subrange_vec_dec v__227 (( 31 :: int)::ii) (( 16 :: int)::ii)  ::  16 Word.word)) in
     (let p10 = ((subrange_vec_dec v__227 (( 15 :: int)::ii) (( 8 :: int)::ii)  ::  8 Word.word)) in
     (let p20 = ((subrange_vec_dec v__227 (( 7 :: int)::ii) (( 7 :: int)::ii)  ::  1 Word.word)) in
     (let p30 = ((subrange_vec_dec v__227 (( 6 :: int)::ii) (( 5 :: int)::ii)  ::  2 Word.word)) in
     (let p40 = ((subrange_vec_dec v__227 (( 4 :: int)::ii) (( 2 :: int)::ii)  ::  3 Word.word)) in
     (let p50 = ((subrange_vec_dec v__227 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) in
     ((((((((((((((((p50 = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((p40 = (vec_of_bits [B0,B1,B0]  ::  3 Word.word))))))) \<and> (((p30 = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) \<and> (((p20 = (vec_of_bits [B0]  ::  1 Word.word))))))) \<and> (((p10 = (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0]  ::  8 Word.word))))))) \<and> (((p00 = (vec_of_bits [B1,B1,B0,B0,B0,B0,B0,B0,B1,B1,B0,B1,B1,B1,B1,B0]  ::  16 Word.word))))))))))))
   then
     True
   else True))"


fun print_insn  :: " ast \<Rightarrow> string "  where 
     " print_insn (NOP (g__13)) = ( (''nop''))"
|" print_insn (C_ADDI4SPN (rdc,nzimm)) = (
      (op@) (''c.addi4spn '')
        (((op@) ((reg_name_abi ((creg2reg_bits rdc  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits nzimm)))))))"
|" print_insn (C_LW (uimm,rsc,rdc)) = (
      (op@) (''c.lw   '')
        (((op@) ((reg_name_abi ((creg2reg_bits rdc  ::  5 Word.word))))
            (((op@) ('', '')
                (((op@) ((reg_name_abi ((creg2reg_bits rsc  ::  5 Word.word))))
                    (((op@) ('', '') ((string_of_bits uimm)))))))))))"
|" print_insn (C_LD (uimm,rsc,rdc)) = (
      (op@) (''c.ld   '')
        (((op@) ((reg_name_abi ((creg2reg_bits rdc  ::  5 Word.word))))
            (((op@) ('', '')
                (((op@) ((reg_name_abi ((creg2reg_bits rsc  ::  5 Word.word))))
                    (((op@) ('', '') ((string_of_bits uimm)))))))))))"
|" print_insn (C_SW (uimm,rsc1,rsc2)) = (
      (op@) (''c.sw   '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsc1  ::  5 Word.word))))
            (((op@) ('', '')
                (((op@) ((reg_name_abi ((creg2reg_bits rsc2  ::  5 Word.word))))
                    (((op@) ('', '') ((string_of_bits uimm)))))))))))"
|" print_insn (C_SD (uimm,rsc1,rsc2)) = (
      (op@) (''c.sd   '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsc1  ::  5 Word.word))))
            (((op@) ('', '')
                (((op@) ((reg_name_abi ((creg2reg_bits rsc2  ::  5 Word.word))))
                    (((op@) ('', '') ((string_of_bits uimm)))))))))))"
|" print_insn (C_ADDI (nzi,rsd)) = (
      (op@) (''c.addi   '')
        (((op@) ((reg_name_abi rsd)) (((op@) ('', '') ((string_of_bits nzi)))))))"
|" print_insn (C_JAL (imm)) = ( (op@) (''c.jal   '') ((string_of_bits imm)))"
|" print_insn (C_ADDIW (imm,rsd)) = (
      (op@) (''c.addiw '')
        (((op@) ((reg_name_abi rsd)) (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_LI (imm,rd)) = (
      (op@) (''c.li  '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_ADDI16SP (imm)) = ( (op@) (''c.addi16sp  '') ((string_of_bits imm)))"
|" print_insn (C_LUI (imm,rd)) = (
      (op@) (''c.lui  '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_SRLI (shamt,rsd)) = (
      (op@) (''c.srli  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits shamt)))))))"
|" print_insn (C_SRAI (shamt,rsd)) = (
      (op@) (''c.srai  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits shamt)))))))"
|" print_insn (C_ANDI (imm,rsd)) = (
      (op@) (''c.andi  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_SUB (rsd,rs2)) = (
      (op@) (''c.sub  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_XOR (rsd,rs2)) = (
      (op@) (''c.xor  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_OR (rsd,rs2)) = (
      (op@) (''c.or   '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_AND (rsd,rs2)) = (
      (op@) (''c.and  '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_SUBW (rsd,rs2)) = (
      (op@) (''c.subw '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_ADDW (rsd,rs2)) = (
      (op@) (''c.addw '')
        (((op@) ((reg_name_abi ((creg2reg_bits rsd  ::  5 Word.word))))
            (((op@) ('', '') ((reg_name_abi ((creg2reg_bits rs2  ::  5 Word.word)))))))))"
|" print_insn (C_J (imm)) = ( (op@) (''c.j    '') ((string_of_bits imm)))"
|" print_insn (C_BEQZ (imm,rs)) = (
      (op@) (''c.beqz '')
        (((op@) ((reg_name_abi ((creg2reg_bits rs  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_BNEZ (imm,rs)) = (
      (op@) (''c.bnez '')
        (((op@) ((reg_name_abi ((creg2reg_bits rs  ::  5 Word.word))))
            (((op@) ('', '') ((string_of_bits imm)))))))"
|" print_insn (C_SLLI (shamt,rsd)) = (
      (op@) (''c.slli '')
        (((op@) ((reg_name_abi rsd)) (((op@) ('', '') ((string_of_bits shamt)))))))"
|" print_insn (C_LWSP (uimm,rd)) = (
      (op@) (''c.lwsp '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits uimm)))))))"
|" print_insn (C_LDSP (uimm,rd)) = (
      (op@) (''c.ldsp '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits uimm)))))))"
|" print_insn (C_SWSP (uimm,rd)) = (
      (op@) (''c.swsp '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits uimm)))))))"
|" print_insn (C_SDSP (uimm,rd)) = (
      (op@) (''c.sdsp '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((string_of_bits uimm)))))))"
|" print_insn (C_JR (rs1)) = ( (op@) (''c.jr  '') ((reg_name_abi rs1)))"
|" print_insn (C_JALR (rs1)) = ( (op@) (''c.jalr  '') ((reg_name_abi rs1)))"
|" print_insn (C_MV (rd,rs2)) = (
      (op@) (''c.mv  '')
        (((op@) ((reg_name_abi rd)) (((op@) ('', '') ((reg_name_abi rs2)))))))"
|" print_insn (C_ADD (rsd,rs2)) = (
      (op@) (''c.add  '')
        (((op@) ((reg_name_abi rsd)) (((op@) ('', '') ((reg_name_abi rs2)))))))"
|" print_insn (STOP_FETCHING (g__14)) = ( (''stop_fetching''))"
|" print_insn (THREAD_START (g__15)) = ( (''thread_start''))"
|" print_insn (ILLEGAL (s)) = ( (op@) (''illegal '') ((string_of_bits s)))"
|" print_insn (C_ILLEGAL (g__16)) = ( (''c.illegal''))"
|" print_insn insn = ( assembly_forwards insn )"


definition decode  :: "(32)Word.word \<Rightarrow>(ast)option "  where 
     " decode bv = ( Some ((encdec_backwards bv)))"


(*val isRVC : mword ty16 -> bool*)

definition isRVC  :: "(16)Word.word \<Rightarrow> bool "  where 
     " isRVC h = (
   \<not> (((((subrange_vec_dec h (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))))"


(*val fetch : unit -> M FetchResult*)

definition fetch  :: " unit \<Rightarrow>((register_value),(FetchResult),(exception))monad "  where 
     " fetch _ = (
   or_boolM
     ((read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 :: xlenbits) . 
      return (((((cast_unit_vec0 ((access_vec_dec w__0 (( 0 :: int)::ii)))  ::  1 Word.word)) \<noteq> (vec_of_bits [B0]  ::  1 Word.word))))))
     (and_boolM
        ((read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 :: xlenbits) . 
         return (((((cast_unit_vec0 ((access_vec_dec w__1 (( 1 :: int)::ii)))  ::  1 Word.word)) \<noteq> (vec_of_bits [B0]  ::  1 Word.word))))))
        (haveRVC ()  \<bind> (\<lambda> (w__2 :: bool) .  return ((\<not> w__2))))) \<bind> (\<lambda> (w__4 :: bool) . 
   if w__4 then
     (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__5 ::  64 Word.word) . 
     return (F_Error (E_Fetch_Addr_Align,w__5)))
   else
     (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__6 ::  64 Word.word) . 
     translateAddr w__6 Execute Instruction \<bind> (\<lambda> (w__7 :: TR_Result) . 
     (case  w__7 of
       TR_Failure (e) =>
        (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__8 ::  64 Word.word) .  return (F_Error (e,w__8)))
     | TR_Address (ppclo) =>
        (checked_mem_read Instruction ppclo (( 2 :: int)::ii)  :: ( ( 16 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__9 :: ( 16 Word.word)
          MemoryOpResult) . 
        (case  w__9 of
          MemException (e) =>
           (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__10 ::  64 Word.word) . 
           return (F_Error (E_Fetch_Access_Fault,w__10)))
        | MemValue (ilo) =>
           if ((isRVC ilo)) then return (F_RVC ilo)
           else
             (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__11 ::  64 Word.word) . 
             (let (PChi :: xlenbits) = ((add_vec_int w__11 (( 2 :: int)::ii)  ::  64 Word.word)) in
             translateAddr PChi Execute Instruction \<bind> (\<lambda> (w__12 :: TR_Result) . 
             (case  w__12 of
               TR_Failure (e) => return (F_Error (e,PChi))
             | TR_Address (ppchi) =>
                (checked_mem_read Instruction ppchi (( 2 :: int)::ii)  :: ( ( 16 Word.word)MemoryOpResult) M) \<bind> (\<lambda> (w__13 :: ( 16 Word.word)
                  MemoryOpResult) . 
                return ((case  w__13 of
                  MemException (e) => F_Error (E_Fetch_Access_Fault,PChi)
                | MemValue (ihi) => F_Base ((concat_vec ihi ilo  ::  32 Word.word))
                )))
             ))))
        ))
     )))))"


(*val step : ii -> M (bool * bool)*)

definition step  :: " int \<Rightarrow>((register_value),(bool*bool),(exception))monad "  where 
     " step step_no = (
   read_reg cur_privilege_ref \<bind> (\<lambda> (w__0 :: Privilege) . 
   read_reg mip_ref \<bind> (\<lambda> (w__1 :: Minterrupts) . 
   read_reg mie_ref \<bind> (\<lambda> (w__2 :: Minterrupts) . 
   read_reg mideleg_ref \<bind> (\<lambda> (w__3 :: Minterrupts) . 
   curInterrupt w__0 w__1 w__2 w__3 \<bind> (\<lambda> (w__4 ::  ((InterruptType * Privilege))option) . 
   (case  w__4 of
     Some (intr,priv) =>
      (let (_ :: unit) = (print_bits (''Handling interrupt: '') ((interruptType_to_bits intr  ::  4 Word.word))) in
      handle_interrupt intr priv \<then> return (False, False))
   | None =>
      fetch ()  \<bind> (\<lambda> (w__5 :: FetchResult) . 
      (case  w__5 of
        F_Error (e,addr) => handle_mem_exception addr e \<then> return (False, False)
      | F_RVC (h) =>
         (case  ((decodeCompressed h)) of
           None =>
            read_reg cur_privilege_ref \<bind> (\<lambda> (w__6 :: Privilege) . 
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__7 :: xlenbits) . 
            (let (_ :: unit) =
              (print_endline
                (((op@) (''['')
                    (((op@) ((stringFromInteger step_no))
                        (((op@) (''] ['')
                            (((op@) ((privLevel_to_str w__6))
                                (((op@) ('']: '')
                                    (((op@) ((string_of_bits w__7))
                                        (((op@) ('' ('')
                                            (((op@) ((string_of_bits h)) ('') <no-decode>'')))))))))))))))))) in
            handle_decode_exception ((EXTZ (( 64 :: int)::ii) h  ::  64 Word.word)) \<then> return (False, True))))
         | Some (ast) =>
            read_reg cur_privilege_ref \<bind> (\<lambda> (w__8 :: Privilege) . 
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__9 :: xlenbits) . 
            (let (_ :: unit) =
              (print_endline
                (((op@) (''['')
                    (((op@) ((stringFromInteger step_no))
                        (((op@) (''] ['')
                            (((op@) ((privLevel_to_str w__8))
                                (((op@) ('']: '')
                                    (((op@) ((string_of_bits w__9))
                                        (((op@) ('' ('')
                                            (((op@) ((string_of_bits h))
                                                (((op@) ('') '') ((print_insn ast))))))))))))))))))))) in
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__10 ::  64 Word.word) . 
            (write_reg nextPC_ref ((add_vec_int w__10 (( 2 :: int)::ii)  ::  64 Word.word)) \<then>
            execute ast) \<bind> (\<lambda> (w__11 :: bool) .  return (w__11, True))))))
         )
      | F_Base (w) =>
         (case  ((decode w)) of
           None =>
            read_reg cur_privilege_ref \<bind> (\<lambda> (w__13 :: Privilege) . 
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__14 :: xlenbits) . 
            (let (_ :: unit) =
              (print_endline
                (((op@) (''['')
                    (((op@) ((stringFromInteger step_no))
                        (((op@) (''] ['')
                            (((op@) ((privLevel_to_str w__13))
                                (((op@) ('']: '')
                                    (((op@) ((string_of_bits w__14))
                                        (((op@) ('' ('')
                                            (((op@) ((string_of_bits w)) ('') <no-decode>'')))))))))))))))))) in
            handle_decode_exception ((EXTZ (( 64 :: int)::ii) w  ::  64 Word.word)) \<then> return (False, True))))
         | Some (ast) =>
            read_reg cur_privilege_ref \<bind> (\<lambda> (w__15 :: Privilege) . 
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__16 :: xlenbits) . 
            (let (_ :: unit) =
              (print_endline
                (((op@) (''['')
                    (((op@) ((stringFromInteger step_no))
                        (((op@) (''] ['')
                            (((op@) ((privLevel_to_str w__15))
                                (((op@) ('']: '')
                                    (((op@) ((string_of_bits w__16))
                                        (((op@) ('' ('')
                                            (((op@) ((string_of_bits w))
                                                (((op@) ('') '') ((print_insn ast))))))))))))))))))))) in
            (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__17 ::  64 Word.word) . 
            (write_reg nextPC_ref ((add_vec_int w__17 (( 4 :: int)::ii)  ::  64 Word.word)) \<then>
            execute ast) \<bind> (\<lambda> (w__18 :: bool) .  return (w__18, True))))))
         )
      ))
   )))))))"


(*val loop : unit -> M unit*)

definition loop  :: " unit \<Rightarrow>((register_value),(unit),(exception))monad "  where 
     " loop _ = (
   (let insns_per_tick = (plat_insns_per_tick () ) in
   (let (i :: ii) = ((( 0 :: int)::ii)) in
   (let (step_no :: ii) = ((( 0 :: int)::ii)) in
   (whileM (i, step_no)
     (\<lambda> varstup .  (let (i, step_no) = varstup in
       read_reg htif_done_ref \<bind> (\<lambda> (w__0 :: bool) .  return ((\<not> w__0)))))
     (\<lambda> varstup .  (let (i, step_no) = varstup in
       (write_reg minstret_written_ref False \<then>
       step step_no) \<bind> (\<lambda> varstup .  (let (retired, stepped) = varstup in
       (read_reg nextPC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 :: xlenbits) . 
       (write_reg PC_ref w__1 \<then>
       (if retired then retire_instruction () 
        else return () )) \<then>
       ((let (step_no :: ii) = (if stepped then ((ex_int step_no)) + (( 1 :: int)::ii) else step_no) in
       read_reg htif_done_ref \<bind> (\<lambda> (w__2 :: bool) . 
       (if w__2 then
          (read_reg htif_exit_code_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__3 :: xlenbits) . 
          (let exit_val = (Word.uint w__3) in
          return ((let _ =
            (if (((exit_val = (( 0 :: int)::ii)))) then print_endline (''SUCCESS'')
            else print_int (''FAILURE: '') exit_val) in
          i))))
        else
          (let i = (((ex_int i)) + (( 1 :: int)::ii)) in
          if (((((ex_int i)) = insns_per_tick))) then
            (tick_clock ()  \<then> tick_platform () ) \<then> return (( 0 :: int)::ii)
          else return i)) \<bind> (\<lambda> (i :: ii) . 
       return (i, step_no))))))))))) \<bind> (\<lambda> varstup .  (let ((i :: ii), (step_no :: ii)) = varstup in
   return () ))))))"


(*val read_kind_of_num : integer -> read_kind*)

definition read_kind_of_num  :: " int \<Rightarrow> read_kind "  where 
     " read_kind_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Read_plain
   else if (((p00 = (( 1 :: int)::ii)))) then Read_reserve
   else if (((p00 = (( 2 :: int)::ii)))) then Read_acquire
   else if (((p00 = (( 3 :: int)::ii)))) then Read_exclusive
   else if (((p00 = (( 4 :: int)::ii)))) then Read_exclusive_acquire
   else if (((p00 = (( 5 :: int)::ii)))) then Read_stream
   else if (((p00 = (( 6 :: int)::ii)))) then Read_RISCV_acquire
   else if (((p00 = (( 7 :: int)::ii)))) then Read_RISCV_strong_acquire
   else if (((p00 = (( 8 :: int)::ii)))) then Read_RISCV_reserved
   else if (((p00 = (( 9 :: int)::ii)))) then Read_RISCV_reserved_acquire
   else if (((p00 = (( 10 :: int)::ii)))) then Read_RISCV_reserved_strong_acquire
   else Read_X86_locked))"


(*val num_of_read_kind : read_kind -> integer*)

fun num_of_read_kind  :: " read_kind \<Rightarrow> int "  where 
     " num_of_read_kind Read_plain = ( (( 0 :: int)::ii))"
|" num_of_read_kind Read_reserve = ( (( 1 :: int)::ii))"
|" num_of_read_kind Read_acquire = ( (( 2 :: int)::ii))"
|" num_of_read_kind Read_exclusive = ( (( 3 :: int)::ii))"
|" num_of_read_kind Read_exclusive_acquire = ( (( 4 :: int)::ii))"
|" num_of_read_kind Read_stream = ( (( 5 :: int)::ii))"
|" num_of_read_kind Read_RISCV_acquire = ( (( 6 :: int)::ii))"
|" num_of_read_kind Read_RISCV_strong_acquire = ( (( 7 :: int)::ii))"
|" num_of_read_kind Read_RISCV_reserved = ( (( 8 :: int)::ii))"
|" num_of_read_kind Read_RISCV_reserved_acquire = ( (( 9 :: int)::ii))"
|" num_of_read_kind Read_RISCV_reserved_strong_acquire = ( (( 10 :: int)::ii))"
|" num_of_read_kind Read_X86_locked = ( (( 11 :: int)::ii))"


(*val write_kind_of_num : integer -> write_kind*)

definition write_kind_of_num  :: " int \<Rightarrow> write_kind "  where 
     " write_kind_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Write_plain
   else if (((p00 = (( 1 :: int)::ii)))) then Write_conditional
   else if (((p00 = (( 2 :: int)::ii)))) then Write_release
   else if (((p00 = (( 3 :: int)::ii)))) then Write_exclusive
   else if (((p00 = (( 4 :: int)::ii)))) then Write_exclusive_release
   else if (((p00 = (( 5 :: int)::ii)))) then Write_RISCV_release
   else if (((p00 = (( 6 :: int)::ii)))) then Write_RISCV_strong_release
   else if (((p00 = (( 7 :: int)::ii)))) then Write_RISCV_conditional
   else if (((p00 = (( 8 :: int)::ii)))) then Write_RISCV_conditional_release
   else if (((p00 = (( 9 :: int)::ii)))) then Write_RISCV_conditional_strong_release
   else Write_X86_locked))"


(*val num_of_write_kind : write_kind -> integer*)

fun num_of_write_kind  :: " write_kind \<Rightarrow> int "  where 
     " num_of_write_kind Write_plain = ( (( 0 :: int)::ii))"
|" num_of_write_kind Write_conditional = ( (( 1 :: int)::ii))"
|" num_of_write_kind Write_release = ( (( 2 :: int)::ii))"
|" num_of_write_kind Write_exclusive = ( (( 3 :: int)::ii))"
|" num_of_write_kind Write_exclusive_release = ( (( 4 :: int)::ii))"
|" num_of_write_kind Write_RISCV_release = ( (( 5 :: int)::ii))"
|" num_of_write_kind Write_RISCV_strong_release = ( (( 6 :: int)::ii))"
|" num_of_write_kind Write_RISCV_conditional = ( (( 7 :: int)::ii))"
|" num_of_write_kind Write_RISCV_conditional_release = ( (( 8 :: int)::ii))"
|" num_of_write_kind Write_RISCV_conditional_strong_release = ( (( 9 :: int)::ii))"
|" num_of_write_kind Write_X86_locked = ( (( 10 :: int)::ii))"


(*val barrier_kind_of_num : integer -> barrier_kind*)

definition barrier_kind_of_num  :: " int \<Rightarrow> barrier_kind "  where 
     " barrier_kind_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Barrier_Sync
   else if (((p00 = (( 1 :: int)::ii)))) then Barrier_LwSync
   else if (((p00 = (( 2 :: int)::ii)))) then Barrier_Eieio
   else if (((p00 = (( 3 :: int)::ii)))) then Barrier_Isync
   else if (((p00 = (( 4 :: int)::ii)))) then Barrier_DMB
   else if (((p00 = (( 5 :: int)::ii)))) then Barrier_DMB_ST
   else if (((p00 = (( 6 :: int)::ii)))) then Barrier_DMB_LD
   else if (((p00 = (( 7 :: int)::ii)))) then Barrier_DSB
   else if (((p00 = (( 8 :: int)::ii)))) then Barrier_DSB_ST
   else if (((p00 = (( 9 :: int)::ii)))) then Barrier_DSB_LD
   else if (((p00 = (( 10 :: int)::ii)))) then Barrier_ISB
   else if (((p00 = (( 11 :: int)::ii)))) then Barrier_MIPS_SYNC
   else if (((p00 = (( 12 :: int)::ii)))) then Barrier_RISCV_rw_rw
   else if (((p00 = (( 13 :: int)::ii)))) then Barrier_RISCV_r_rw
   else if (((p00 = (( 14 :: int)::ii)))) then Barrier_RISCV_r_r
   else if (((p00 = (( 15 :: int)::ii)))) then Barrier_RISCV_rw_w
   else if (((p00 = (( 16 :: int)::ii)))) then Barrier_RISCV_w_w
   else if (((p00 = (( 17 :: int)::ii)))) then Barrier_RISCV_w_rw
   else if (((p00 = (( 18 :: int)::ii)))) then Barrier_RISCV_rw_r
   else if (((p00 = (( 19 :: int)::ii)))) then Barrier_RISCV_r_w
   else if (((p00 = (( 20 :: int)::ii)))) then Barrier_RISCV_w_r
   else if (((p00 = (( 21 :: int)::ii)))) then Barrier_RISCV_i
   else Barrier_x86_MFENCE))"


(*val num_of_barrier_kind : barrier_kind -> integer*)

fun num_of_barrier_kind  :: " barrier_kind \<Rightarrow> int "  where 
     " num_of_barrier_kind Barrier_Sync = ( (( 0 :: int)::ii))"
|" num_of_barrier_kind Barrier_LwSync = ( (( 1 :: int)::ii))"
|" num_of_barrier_kind Barrier_Eieio = ( (( 2 :: int)::ii))"
|" num_of_barrier_kind Barrier_Isync = ( (( 3 :: int)::ii))"
|" num_of_barrier_kind Barrier_DMB = ( (( 4 :: int)::ii))"
|" num_of_barrier_kind Barrier_DMB_ST = ( (( 5 :: int)::ii))"
|" num_of_barrier_kind Barrier_DMB_LD = ( (( 6 :: int)::ii))"
|" num_of_barrier_kind Barrier_DSB = ( (( 7 :: int)::ii))"
|" num_of_barrier_kind Barrier_DSB_ST = ( (( 8 :: int)::ii))"
|" num_of_barrier_kind Barrier_DSB_LD = ( (( 9 :: int)::ii))"
|" num_of_barrier_kind Barrier_ISB = ( (( 10 :: int)::ii))"
|" num_of_barrier_kind Barrier_MIPS_SYNC = ( (( 11 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_rw_rw = ( (( 12 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_r_rw = ( (( 13 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_r_r = ( (( 14 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_rw_w = ( (( 15 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_w_w = ( (( 16 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_w_rw = ( (( 17 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_rw_r = ( (( 18 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_r_w = ( (( 19 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_w_r = ( (( 20 :: int)::ii))"
|" num_of_barrier_kind Barrier_RISCV_i = ( (( 21 :: int)::ii))"
|" num_of_barrier_kind Barrier_x86_MFENCE = ( (( 22 :: int)::ii))"


(*val trans_kind_of_num : integer -> trans_kind*)

definition trans_kind_of_num  :: " int \<Rightarrow> trans_kind "  where 
     " trans_kind_of_num arg0 = (
   (let p00 = arg0 in
   if (((p00 = (( 0 :: int)::ii)))) then Transaction_start
   else if (((p00 = (( 1 :: int)::ii)))) then Transaction_commit
   else Transaction_abort))"


(*val num_of_trans_kind : trans_kind -> integer*)

fun num_of_trans_kind  :: " trans_kind \<Rightarrow> int "  where 
     " num_of_trans_kind Transaction_start = ( (( 0 :: int)::ii))"
|" num_of_trans_kind Transaction_commit = ( (( 1 :: int)::ii))"
|" num_of_trans_kind Transaction_abort = ( (( 2 :: int)::ii))"


definition GPRstr  :: "(string)list "  where 
     " GPRstr = (
  [(''x31''),(''x30''),(''x29''),(''x28''),(''x27''),(''x26''),(''x25''),(''x24''),(''x23''),(''x22''),(''x21''),(''x20''),(''x19''),(''x18''),(''x17''),(''x16''),
   (''x15''),(''x14''),(''x13''),(''x12''),(''x21''),(''x10''),(''x9''),(''x8''),(''x7''),(''x6''),(''x5''),(''x4''),(''x3''),(''x2''),(''x1''),(''x0'')])"


definition CIA_fp  :: " regfp "  where 
     " CIA_fp = ( RFull (''CIA''))"


definition NIA_fp  :: " regfp "  where 
     " NIA_fp = ( RFull (''NIA''))"


(*val initial_analysis : ast -> M (list regfp * list regfp * list regfp * list niafp * diafp * instruction_kind)*)

definition initial_analysis  :: " ast \<Rightarrow>((register_value),((regfp)list*(regfp)list*(regfp)list*(niafp)list*diafp*instruction_kind),(exception))monad "  where 
     " initial_analysis instr = (
   (let iR = ([]) in
   (let oR = ([]) in
   (let aR = ([]) in
   (let ik = (IK_simple () ) in
   (let Nias = ([NIAFP_successor () ]) in
   (let Dia = (DIAFP_none () ) in
   (case  instr of
     EBREAK (_) => return (Nias, aR, iR, ik, oR)
   | UTYPE (imm,rd,op1) =>
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR))
   | RISCV_JAL (imm,rd) =>
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (let (offset :: 64 bits) = ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) in
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__0 ::  64 Word.word) . 
      (let (Nias :: niafps) = ([NIAFP_concrete_address ((add_vec w__0 offset  ::  64 Word.word))]) in
      (let (ik :: instruction_kind) = (IK_branch () ) in
      return (Nias, aR, iR, ik, oR))))))
   | RISCV_JALR (imm,rs,rd) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (let (offset :: 64 bits) = ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) in
      (let (Nias :: niafps) = ([NIAFP_indirect_address () ]) in
      (let (ik :: instruction_kind) = (IK_branch () ) in
      return (Nias, aR, iR, ik, oR))))))
   | BTYPE (imm,rs2,rs1,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let ik = (IK_branch () ) in
      (let (offset :: 64 bits) = ((EXTS (( 64 :: int)::ii) imm  ::  64 Word.word)) in
      (read_reg PC_ref  :: ( 64 Word.word) M) \<bind> (\<lambda> (w__1 ::  64 Word.word) . 
      (let (Nias :: niafps) =
        ([NIAFP_concrete_address ((add_vec w__1 offset  ::  64 Word.word)),NIAFP_successor () ]) in
      return (Nias, aR, iR, ik, oR)))))))
   | ITYPE (imm,rs,rd,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR)))
   | SHIFTIOP (imm,rs,rd,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR)))
   | RTYPE (rs2,rs1,rd,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR))))
   | CSR (csr,rs1,rd,is_imm,op1) =>
      (let (isWrite :: bool) =
        ((case  op1 of
          CSRRW => True
        | _ => if is_imm then (((Word.uint rs1)) \<noteq> (( 0 :: int)::ii)) else (((Word.uint rs1)) \<noteq> (( 0 :: int)::ii))
        )) in
      (let (iR :: regfps) = ((RFull ((csr_name csr))) # iR) in
      (let (iR :: regfps) =
        (if ((\<not> is_imm)) then (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR
        else iR) in
      (let (oR :: regfps) = (if isWrite then (RFull ((csr_name csr))) # oR else oR) in
      (let (oR :: regfps) = ((RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR))))))
   | LOAD (imm,rs,rd,unsign,width,aq,rl) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (let aR = iR in
      (case  (aq, rl) of
        (False, False) => return (IK_mem_read Read_plain)
      | (True, False) => return (IK_mem_read Read_RISCV_acquire)
      | (True, True) => return (IK_mem_read Read_RISCV_strong_acquire)
      | _ => internal_error (''LOAD type not implemented in initial_analysis'')
      ) \<bind> (\<lambda> (w__3 :: instruction_kind) . 
      (let (ik :: instruction_kind) = w__3 in
      return (Nias, aR, iR, ik, oR))))))
   | STORE (imm,rs2,rs1,width,aq,rl) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (aR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # aR) in
      (case  (aq, rl) of
        (False, False) => return (IK_mem_write Write_plain)
      | (False, True) => return (IK_mem_write Write_RISCV_release)
      | (True, True) => return (IK_mem_write Write_RISCV_strong_release)
      | _ => internal_error (''STORE type not implemented in initial_analysis'')
      ) \<bind> (\<lambda> (w__5 :: instruction_kind) . 
      (let (ik :: instruction_kind) = w__5 in
      return (Nias, aR, iR, ik, oR))))))
   | ADDIW (imm,rs,rd) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR)))
   | SHIFTW (imm,rs,rd,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR)))
   | RTYPEW (rs2,rs1,rd,op1) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      return (Nias, aR, iR, ik, oR))))
   | FENCE (pred,succ) =>
      (case  (pred, succ) of
        (v__276, v__277) =>
         if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_rw_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_r_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_r_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_rw_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_w_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_w_rw)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_rw_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_r_w)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B1]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B1,B0]  ::  2 Word.word))))))) then
           return (IK_barrier Barrier_RISCV_w_r)
         else if ((((((((subrange_vec_dec v__276 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word)))) \<and> (((((subrange_vec_dec v__277 (( 1 :: int)::ii) (( 0 :: int)::ii)  ::  2 Word.word)) = (vec_of_bits [B0,B0]  ::  2 Word.word))))))) then
           return (IK_simple () )
         else internal_error (''barrier type not implemented in initial_analysis'')
      ) \<bind> (\<lambda> (w__17 :: instruction_kind) . 
      (let (ik :: instruction_kind) = w__17 in
      return (Nias, aR, iR, ik, oR)))
   | FENCEI (_) =>
      (let (ik :: instruction_kind) = (IK_barrier Barrier_RISCV_i) in
      return (Nias, aR, iR, ik, oR))
   | LOADRES (aq,rl,rs1,width,rd) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (let aR = iR in
      (case  (aq, rl) of
        (False, False) => return (IK_mem_read Read_RISCV_reserved)
      | (True, False) => return (IK_mem_read Read_RISCV_reserved_acquire)
      | (True, True) => return (IK_mem_read Read_RISCV_reserved_strong_acquire)
      | (False, True) => internal_error (''LOADRES type not implemented in initial_analysis'')
      ) \<bind> (\<lambda> (w__19 :: instruction_kind) . 
      (let (ik :: instruction_kind) = w__19 in
      return (Nias, aR, iR, ik, oR))))))
   | STORECON (aq,rl,rs2,rs1,width,rd) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (aR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # aR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (case  (aq, rl) of
        (False, False) => return (IK_mem_write Write_RISCV_conditional)
      | (False, True) => return (IK_mem_write Write_RISCV_conditional_release)
      | (True, True) => return (IK_mem_write Write_RISCV_conditional_strong_release)
      | (True, False) => internal_error (''STORECON type not implemented in initial_analysis'')
      ) \<bind> (\<lambda> (w__21 :: instruction_kind) . 
      (let (ik :: instruction_kind) = w__21 in
      return (Nias, aR, iR, ik, oR)))))))
   | AMO (op1,aq,rl,rs2,rs1,width,rd) =>
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs2)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs2))))) # iR) in
      (let (iR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then iR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # iR) in
      (let (aR :: regfps) =
        (if (((((regbits_to_regno rs1)) = (( 0 :: int)::ii)))) then aR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rs1))))) # aR) in
      (let (oR :: regfps) =
        (if (((((regbits_to_regno rd)) = (( 0 :: int)::ii)))) then oR
        else (RFull ((access_list_dec GPRstr ((regbits_to_regno rd))))) # oR) in
      (let (ik :: instruction_kind) =
        ((case  (aq, rl) of
          (False, False) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional)
        | (False, True) => IK_mem_rmw (Read_RISCV_reserved,Write_RISCV_conditional_release)
        | (True, False) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional)
        | (True, True) => IK_mem_rmw (Read_RISCV_reserved_acquire,Write_RISCV_conditional_release)
        )) in
      return (Nias, aR, iR, ik, oR))))))
   | _ => return (Nias, aR, iR, ik, oR)
   ) \<bind> (\<lambda> varstup .  (let ((Nias :: niafps), (aR :: regfps), (iR :: regfps), (ik :: instruction_kind), (oR ::
     regfps)) = varstup in
   return (iR, oR, aR, Nias, Dia, ik))))))))))"


definition initial_regstate  :: " regstate "  where 
     " initial_regstate = (
  (| tlb39 = None, 
     htif_exit_code =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     htif_done = False, 
     htif_tohost =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mtimecmp =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     tselect =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     stval =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     scause =
       ((| Mcause_Mcause_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     sepc =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     sscratch =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     stvec =
       ((| Mtvec_Mtvec_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     satp =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     sideleg =
       ((| Sinterrupts_Sinterrupts_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     sedeleg =
       ((| Sedeleg_Sedeleg_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     pmpcfg0 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     pmpaddr0 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mhartid =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     marchid =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mimpid =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mvendorid =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     minstret_written = False, 
     minstret =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mtime =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mcycle =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     scounteren =
       ((| Counteren_Counteren_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0]
               ::  32 Word.word)) |)), 
     mcounteren =
       ((| Counteren_Counteren_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0]
               ::  32 Word.word)) |)), 
     mscratch =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mtval =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mepc =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     mcause =
       ((| Mcause_Mcause_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     mtvec =
       ((| Mtvec_Mtvec_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     medeleg =
       ((| Medeleg_Medeleg_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     mideleg =
       ((| Minterrupts_Minterrupts_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     mie =
       ((| Minterrupts_Minterrupts_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     mip =
       ((| Minterrupts_Minterrupts_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     mstatus =
       ((| Mstatus_Mstatus_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     misa =
       ((| Misa_Misa_chunk_0 =
             ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                           B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
               ::  64 Word.word)) |)), 
     cur_inst =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     cur_privilege = User, 
     x31 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x30 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x29 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x28 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x27 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x26 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x25 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x24 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x23 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x22 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x21 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x20 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x19 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x18 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x17 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x16 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x15 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x14 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x13 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x12 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x11 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x10 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x9 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x8 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x7 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x6 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x5 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x4 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x3 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x2 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     x1 =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     Xs =
       ([(vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word),
         (vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                       B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
           ::  64 Word.word)]), 
     nextPC =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)), 
     PC =
       ((vec_of_bits [B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,
                     B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0,B0]
         ::  64 Word.word)) |) )"



end
